; This file is a bisect spec example.
; Copy this file to another filename, and make the appropriate
; changes below.

; Starting points.
; Known bad (with regression) and good (w/o regression) commits.
; Dsector will verify these commits to avoid a false conclusion.
; Supported formats:
; - "master" (implies latest commit)
; - SHA-1 hash of D.git repo commit
; - SHA-1 hash of a component's repo commit
;   (must be a pull request merge commit)
; - Full GitHub URL of a pull request, e.g.:
;   https://github.com/D-Programming-Language/dmd/pull/123
; - If prefixed with "@", time spec (e.g. "@ 2013-01-02",
;   "@ October 2013", "@ 15 days ago"  or "@ Tuesday")

bad  = v2.065.0
good = v2.064.2

; Reverse search
; Sometimes, it is useful to know to know which revision fixed
; something. Although this can be accomplished by reversing the
; return value of the test command, the terminology can get
; confusing, since "good" will mean "still broken" and "bad"
; will mean "already fixed". This option causes D-sector to
; reverse the test command output, as well as diagnostic
; messages.
; Note that git still uses the reversed meanings, so e.g. it
; will still state "<SHA1> is the first bad commit" at the end,
; when referring to the commit that actually fixed the bug.

reverse = false

; Tester command.
; Should exit with status 0 to indicate success (a "good" commit,
; not manifesting the regression), and any other status to
; indicate failure (a "bad" commit, with the regression).
; Exit code 125 is treated specially and indicates

tester = dmd test.d

; Build options.
[build]

; Target model.
; Whether to target 32 or 64 bits when building D components.

model = 32
