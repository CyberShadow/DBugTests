/* THIS FILE GENERATED BY bcd.gen */
module bcd.fltk.Enumerations;
public import bcd.bind;
const int FL_MAJOR_VERSION = 1;
const int FL_MINOR_VERSION = 1;
const int FL_PATCH_VERSION = 7;
const double FL_Button = 0xfee8;
const int FL_BackSpace = 0xff08;
const int FL_Tab = 0xff09;
const int FL_Enter = 0xff0d;
const int FL_Pause = 0xff13;
const int FL_Scroll_Lock = 0xff14;
const int FL_Escape = 0xff1b;
const int FL_Home = 0xff50;
const int FL_Left = 0xff51;
const int FL_Up = 0xff52;
const int FL_Right = 0xff53;
const int FL_Down = 0xff54;
const int FL_Page_Up = 0xff55;
const int FL_Page_Down = 0xff56;
const int FL_End = 0xff57;
const int FL_Print = 0xff61;
const int FL_Insert = 0xff63;
const int FL_Menu = 0xff67;
const int FL_Help = 0xff68;
const int FL_Num_Lock = 0xff7f;
const int FL_KP = 0xff80;
const int FL_KP_Enter = 0xff8d;
const int FL_KP_Last = 0xffbd;
const int FL_F = 0xffbd;
const double FL_F_Last = 0xffe0;
const double FL_Shift_L = 0xffe1;
const double FL_Shift_R = 0xffe2;
const double FL_Control_L = 0xffe3;
const double FL_Control_R = 0xffe4;
const double FL_Caps_Lock = 0xffe5;
const double FL_Meta_L = 0xffe7;
const double FL_Meta_R = 0xffe8;
const double FL_Alt_L = 0xffe9;
const double FL_Alt_R = 0xffea;
const int FL_Delete = 0xffff;
const int FL_LEFT_MOUSE = 1;
const int FL_MIDDLE_MOUSE = 2;
const int FL_RIGHT_MOUSE = 3;
const int FL_SHIFT = 0x00010000;
const int FL_CAPS_LOCK = 0x00020000;
const int FL_CTRL = 0x00040000;
const int FL_ALT = 0x00080000;
const int FL_NUM_LOCK = 0x00100000;
const int FL_META = 0x00400000;
const int FL_SCROLL_LOCK = 0x00800000;
const int FL_BUTTON1 = 0x01000000;
const int FL_BUTTON2 = 0x02000000;
const int FL_BUTTON3 = 0x04000000;
const int FL_BUTTONS = 0x7f000000;
const int FL_NUM_FREE_COLOR = 16;
const int FL_NUM_GRAY = 24;
const int FL_NUM_RED = 5;
const int FL_NUM_GREEN = 8;
const int FL_NUM_BLUE = 5;
enum Fl_Color {
FL_FOREGROUND_COLOR=0,
FL_BACKGROUND2_COLOR=7,
FL_INACTIVE_COLOR=8,
FL_SELECTION_COLOR=15,
FL_GRAY0=32,
FL_DARK3=39,
FL_DARK2=45,
FL_DARK1=47,
FL_BACKGROUND_COLOR=49,
FL_LIGHT1=50,
FL_LIGHT2=52,
FL_LIGHT3=54,
FL_BLACK=56,
FL_RED=88,
FL_GREEN=63,
FL_YELLOW=95,
FL_BLUE=216,
FL_MAGENTA=248,
FL_CYAN=223,
FL_DARK_RED=72,
FL_DARK_GREEN=60,
FL_DARK_YELLOW=76,
FL_DARK_BLUE=136,
FL_DARK_MAGENTA=152,
FL_DARK_CYAN=140,
FL_WHITE=255,
}
alias Fl_Color.FL_FOREGROUND_COLOR FL_FOREGROUND_COLOR;
alias Fl_Color.FL_BACKGROUND2_COLOR FL_BACKGROUND2_COLOR;
alias Fl_Color.FL_INACTIVE_COLOR FL_INACTIVE_COLOR;
alias Fl_Color.FL_SELECTION_COLOR FL_SELECTION_COLOR;
alias Fl_Color.FL_GRAY0 FL_GRAY0;
alias Fl_Color.FL_DARK3 FL_DARK3;
alias Fl_Color.FL_DARK2 FL_DARK2;
alias Fl_Color.FL_DARK1 FL_DARK1;
alias Fl_Color.FL_BACKGROUND_COLOR FL_BACKGROUND_COLOR;
alias Fl_Color.FL_LIGHT1 FL_LIGHT1;
alias Fl_Color.FL_LIGHT2 FL_LIGHT2;
alias Fl_Color.FL_LIGHT3 FL_LIGHT3;
alias Fl_Color.FL_BLACK FL_BLACK;
alias Fl_Color.FL_RED FL_RED;
alias Fl_Color.FL_GREEN FL_GREEN;
alias Fl_Color.FL_YELLOW FL_YELLOW;
alias Fl_Color.FL_BLUE FL_BLUE;
alias Fl_Color.FL_MAGENTA FL_MAGENTA;
alias Fl_Color.FL_CYAN FL_CYAN;
alias Fl_Color.FL_DARK_RED FL_DARK_RED;
alias Fl_Color.FL_DARK_GREEN FL_DARK_GREEN;
alias Fl_Color.FL_DARK_YELLOW FL_DARK_YELLOW;
alias Fl_Color.FL_DARK_BLUE FL_DARK_BLUE;
alias Fl_Color.FL_DARK_MAGENTA FL_DARK_MAGENTA;
alias Fl_Color.FL_DARK_CYAN FL_DARK_CYAN;
alias Fl_Color.FL_WHITE FL_WHITE;
extern (C) int _BCD__Z13fl_color_cubeiii(int, int, int);
extern (C) int _BCD__Z12fl_gray_rampi(int);
alias char uchar;
extern (C) int _BCD__Z12fl_rgb_colorh(char);
extern (C) int _BCD__Z12fl_rgb_colorhhh(char, char, char);
extern (C) int _BCD__Z9fl_darker8Fl_Color(int);
extern (C) int _BCD__Z10fl_lighter8Fl_Color(int);
extern (C) int _BCD__Z16fl_color_average8Fl_ColorS_f(int, int, float);
extern (C) int _BCD__Z11fl_contrast8Fl_ColorS_(int, int);
extern (C) int _BCD__Z11fl_inactive8Fl_Color(int);
enum Fl_Labeltype {
FL_NORMAL_LABEL=0,
FL_NO_LABEL=1,
_FL_SHADOW_LABEL=2,
_FL_ENGRAVED_LABEL=3,
_FL_EMBOSSED_LABEL=4,
_FL_MULTI_LABEL=5,
_FL_ICON_LABEL=6,
_FL_IMAGE_LABEL=7,
FL_FREE_LABELTYPE=8,
}
alias Fl_Labeltype.FL_NORMAL_LABEL FL_NORMAL_LABEL;
alias Fl_Labeltype.FL_NO_LABEL FL_NO_LABEL;
alias Fl_Labeltype._FL_SHADOW_LABEL _FL_SHADOW_LABEL;
alias Fl_Labeltype._FL_ENGRAVED_LABEL _FL_ENGRAVED_LABEL;
alias Fl_Labeltype._FL_EMBOSSED_LABEL _FL_EMBOSSED_LABEL;
alias Fl_Labeltype._FL_MULTI_LABEL _FL_MULTI_LABEL;
alias Fl_Labeltype._FL_ICON_LABEL _FL_ICON_LABEL;
alias Fl_Labeltype._FL_IMAGE_LABEL _FL_IMAGE_LABEL;
alias Fl_Labeltype.FL_FREE_LABELTYPE FL_FREE_LABELTYPE;
extern (C) int _BCD__Z27fl_define_FL_EMBOSSED_LABELv();
extern (C) int _BCD__Z27fl_define_FL_ENGRAVED_LABELv();
extern (C) int _BCD__Z25fl_define_FL_SHADOW_LABELv();
enum Fl_Boxtype {
FL_NO_BOX=0,
FL_FLAT_BOX=1,
FL_UP_BOX=2,
FL_DOWN_BOX=3,
FL_UP_FRAME=4,
FL_DOWN_FRAME=5,
FL_THIN_UP_BOX=6,
FL_THIN_DOWN_BOX=7,
FL_THIN_UP_FRAME=8,
FL_THIN_DOWN_FRAME=9,
FL_ENGRAVED_BOX=10,
FL_EMBOSSED_BOX=11,
FL_ENGRAVED_FRAME=12,
FL_EMBOSSED_FRAME=13,
FL_BORDER_BOX=14,
_FL_SHADOW_BOX=15,
FL_BORDER_FRAME=16,
_FL_SHADOW_FRAME=17,
_FL_ROUNDED_BOX=18,
_FL_RSHADOW_BOX=19,
_FL_ROUNDED_FRAME=20,
_FL_RFLAT_BOX=21,
_FL_ROUND_UP_BOX=22,
_FL_ROUND_DOWN_BOX=23,
_FL_DIAMOND_UP_BOX=24,
_FL_DIAMOND_DOWN_BOX=25,
_FL_OVAL_BOX=26,
_FL_OSHADOW_BOX=27,
_FL_OVAL_FRAME=28,
_FL_OFLAT_BOX=29,
_FL_PLASTIC_UP_BOX=30,
_FL_PLASTIC_DOWN_BOX=31,
_FL_PLASTIC_UP_FRAME=32,
_FL_PLASTIC_DOWN_FRAME=33,
_FL_PLASTIC_THIN_UP_BOX=34,
_FL_PLASTIC_THIN_DOWN_BOX=35,
_FL_PLASTIC_ROUND_UP_BOX=36,
_FL_PLASTIC_ROUND_DOWN_BOX=37,
FL_FREE_BOXTYPE=38,
}
alias Fl_Boxtype.FL_NO_BOX FL_NO_BOX;
alias Fl_Boxtype.FL_FLAT_BOX FL_FLAT_BOX;
alias Fl_Boxtype.FL_UP_BOX FL_UP_BOX;
alias Fl_Boxtype.FL_DOWN_BOX FL_DOWN_BOX;
alias Fl_Boxtype.FL_UP_FRAME FL_UP_FRAME;
alias Fl_Boxtype.FL_DOWN_FRAME FL_DOWN_FRAME;
alias Fl_Boxtype.FL_THIN_UP_BOX FL_THIN_UP_BOX;
alias Fl_Boxtype.FL_THIN_DOWN_BOX FL_THIN_DOWN_BOX;
alias Fl_Boxtype.FL_THIN_UP_FRAME FL_THIN_UP_FRAME;
alias Fl_Boxtype.FL_THIN_DOWN_FRAME FL_THIN_DOWN_FRAME;
alias Fl_Boxtype.FL_ENGRAVED_BOX FL_ENGRAVED_BOX;
alias Fl_Boxtype.FL_EMBOSSED_BOX FL_EMBOSSED_BOX;
alias Fl_Boxtype.FL_ENGRAVED_FRAME FL_ENGRAVED_FRAME;
alias Fl_Boxtype.FL_EMBOSSED_FRAME FL_EMBOSSED_FRAME;
alias Fl_Boxtype.FL_BORDER_BOX FL_BORDER_BOX;
alias Fl_Boxtype._FL_SHADOW_BOX _FL_SHADOW_BOX;
alias Fl_Boxtype.FL_BORDER_FRAME FL_BORDER_FRAME;
alias Fl_Boxtype._FL_SHADOW_FRAME _FL_SHADOW_FRAME;
alias Fl_Boxtype._FL_ROUNDED_BOX _FL_ROUNDED_BOX;
alias Fl_Boxtype._FL_RSHADOW_BOX _FL_RSHADOW_BOX;
alias Fl_Boxtype._FL_ROUNDED_FRAME _FL_ROUNDED_FRAME;
alias Fl_Boxtype._FL_RFLAT_BOX _FL_RFLAT_BOX;
alias Fl_Boxtype._FL_ROUND_UP_BOX _FL_ROUND_UP_BOX;
alias Fl_Boxtype._FL_ROUND_DOWN_BOX _FL_ROUND_DOWN_BOX;
alias Fl_Boxtype._FL_DIAMOND_UP_BOX _FL_DIAMOND_UP_BOX;
alias Fl_Boxtype._FL_DIAMOND_DOWN_BOX _FL_DIAMOND_DOWN_BOX;
alias Fl_Boxtype._FL_OVAL_BOX _FL_OVAL_BOX;
alias Fl_Boxtype._FL_OSHADOW_BOX _FL_OSHADOW_BOX;
alias Fl_Boxtype._FL_OVAL_FRAME _FL_OVAL_FRAME;
alias Fl_Boxtype._FL_OFLAT_BOX _FL_OFLAT_BOX;
alias Fl_Boxtype._FL_PLASTIC_UP_BOX _FL_PLASTIC_UP_BOX;
alias Fl_Boxtype._FL_PLASTIC_DOWN_BOX _FL_PLASTIC_DOWN_BOX;
alias Fl_Boxtype._FL_PLASTIC_UP_FRAME _FL_PLASTIC_UP_FRAME;
alias Fl_Boxtype._FL_PLASTIC_DOWN_FRAME _FL_PLASTIC_DOWN_FRAME;
alias Fl_Boxtype._FL_PLASTIC_THIN_UP_BOX _FL_PLASTIC_THIN_UP_BOX;
alias Fl_Boxtype._FL_PLASTIC_THIN_DOWN_BOX _FL_PLASTIC_THIN_DOWN_BOX;
alias Fl_Boxtype._FL_PLASTIC_ROUND_UP_BOX _FL_PLASTIC_ROUND_UP_BOX;
alias Fl_Boxtype._FL_PLASTIC_ROUND_DOWN_BOX _FL_PLASTIC_ROUND_DOWN_BOX;
alias Fl_Boxtype.FL_FREE_BOXTYPE FL_FREE_BOXTYPE;
extern (C) int _BCD__Z8fl_frame10Fl_Boxtype(int);
extern (C) int _BCD__Z7fl_down10Fl_Boxtype(int);
extern (C) int _BCD__Z27fl_define_FL_PLASTIC_UP_BOXv();
extern (C) int _BCD__Z21fl_define_FL_OVAL_BOXv();
extern (C) int _BCD__Z24fl_define_FL_DIAMOND_BOXv();
extern (C) int _BCD__Z24fl_define_FL_RSHADOW_BOXv();
extern (C) int _BCD__Z22fl_define_FL_RFLAT_BOXv();
extern (C) int _BCD__Z24fl_define_FL_ROUNDED_BOXv();
extern (C) int _BCD__Z23fl_define_FL_SHADOW_BOXv();
extern (C) int _BCD__Z25fl_define_FL_ROUND_UP_BOXv();
enum Fl_Damage {
FL_DAMAGE_CHILD=1,
FL_DAMAGE_EXPOSE=2,
FL_DAMAGE_SCROLL=4,
FL_DAMAGE_OVERLAY=8,
FL_DAMAGE_USER1=16,
FL_DAMAGE_USER2=32,
FL_DAMAGE_ALL=128,
}
alias Fl_Damage.FL_DAMAGE_CHILD FL_DAMAGE_CHILD;
alias Fl_Damage.FL_DAMAGE_EXPOSE FL_DAMAGE_EXPOSE;
alias Fl_Damage.FL_DAMAGE_SCROLL FL_DAMAGE_SCROLL;
alias Fl_Damage.FL_DAMAGE_OVERLAY FL_DAMAGE_OVERLAY;
alias Fl_Damage.FL_DAMAGE_USER1 FL_DAMAGE_USER1;
alias Fl_Damage.FL_DAMAGE_USER2 FL_DAMAGE_USER2;
alias Fl_Damage.FL_DAMAGE_ALL FL_DAMAGE_ALL;
enum Fl_Mode {
FL_RGB=0,
FL_INDEX=1,
FL_SINGLE=0,
FL_DOUBLE=2,
FL_ACCUM=4,
FL_ALPHA=8,
FL_DEPTH=16,
FL_STENCIL=32,
FL_RGB8=64,
FL_MULTISAMPLE=128,
FL_STEREO=256,
FL_FAKE_SINGLE=512,
}
alias Fl_Mode.FL_RGB FL_RGB;
alias Fl_Mode.FL_INDEX FL_INDEX;
alias Fl_Mode.FL_SINGLE FL_SINGLE;
alias Fl_Mode.FL_DOUBLE FL_DOUBLE;
alias Fl_Mode.FL_ACCUM FL_ACCUM;
alias Fl_Mode.FL_ALPHA FL_ALPHA;
alias Fl_Mode.FL_DEPTH FL_DEPTH;
alias Fl_Mode.FL_STENCIL FL_STENCIL;
alias Fl_Mode.FL_RGB8 FL_RGB8;
alias Fl_Mode.FL_MULTISAMPLE FL_MULTISAMPLE;
alias Fl_Mode.FL_STEREO FL_STEREO;
alias Fl_Mode.FL_FAKE_SINGLE FL_FAKE_SINGLE;
const int FL_READ = 1;
const int FL_WRITE = 4;
const int FL_EXCEPT = 8;
enum Fl_Cursor {
FL_CURSOR_DEFAULT=0,
FL_CURSOR_ARROW=35,
FL_CURSOR_CROSS=66,
FL_CURSOR_WAIT=76,
FL_CURSOR_INSERT=77,
FL_CURSOR_HAND=31,
FL_CURSOR_HELP=47,
FL_CURSOR_MOVE=27,
FL_CURSOR_NS=78,
FL_CURSOR_WE=79,
FL_CURSOR_NWSE=80,
FL_CURSOR_NESW=81,
FL_CURSOR_NONE=255,
FL_CURSOR_N=70,
FL_CURSOR_NE=69,
FL_CURSOR_E=49,
FL_CURSOR_SE=8,
FL_CURSOR_S=9,
FL_CURSOR_SW=7,
FL_CURSOR_W=36,
FL_CURSOR_NW=68,
}
alias Fl_Cursor.FL_CURSOR_DEFAULT FL_CURSOR_DEFAULT;
alias Fl_Cursor.FL_CURSOR_ARROW FL_CURSOR_ARROW;
alias Fl_Cursor.FL_CURSOR_CROSS FL_CURSOR_CROSS;
alias Fl_Cursor.FL_CURSOR_WAIT FL_CURSOR_WAIT;
alias Fl_Cursor.FL_CURSOR_INSERT FL_CURSOR_INSERT;
alias Fl_Cursor.FL_CURSOR_HAND FL_CURSOR_HAND;
alias Fl_Cursor.FL_CURSOR_HELP FL_CURSOR_HELP;
alias Fl_Cursor.FL_CURSOR_MOVE FL_CURSOR_MOVE;
alias Fl_Cursor.FL_CURSOR_NS FL_CURSOR_NS;
alias Fl_Cursor.FL_CURSOR_WE FL_CURSOR_WE;
alias Fl_Cursor.FL_CURSOR_NWSE FL_CURSOR_NWSE;
alias Fl_Cursor.FL_CURSOR_NESW FL_CURSOR_NESW;
alias Fl_Cursor.FL_CURSOR_NONE FL_CURSOR_NONE;
alias Fl_Cursor.FL_CURSOR_N FL_CURSOR_N;
alias Fl_Cursor.FL_CURSOR_NE FL_CURSOR_NE;
alias Fl_Cursor.FL_CURSOR_E FL_CURSOR_E;
alias Fl_Cursor.FL_CURSOR_SE FL_CURSOR_SE;
alias Fl_Cursor.FL_CURSOR_S FL_CURSOR_S;
alias Fl_Cursor.FL_CURSOR_SW FL_CURSOR_SW;
alias Fl_Cursor.FL_CURSOR_W FL_CURSOR_W;
alias Fl_Cursor.FL_CURSOR_NW FL_CURSOR_NW;
enum Fl_Font {
FL_HELVETICA=0,
FL_HELVETICA_BOLD=1,
FL_HELVETICA_ITALIC=2,
FL_HELVETICA_BOLD_ITALIC=3,
FL_COURIER=4,
FL_COURIER_BOLD=5,
FL_COURIER_ITALIC=6,
FL_COURIER_BOLD_ITALIC=7,
FL_TIMES=8,
FL_TIMES_BOLD=9,
FL_TIMES_ITALIC=10,
FL_TIMES_BOLD_ITALIC=11,
FL_SYMBOL=12,
FL_SCREEN=13,
FL_SCREEN_BOLD=14,
FL_ZAPF_DINGBATS=15,
FL_FREE_FONT=16,
FL_BOLD=1,
FL_ITALIC=2,
}
alias Fl_Font.FL_HELVETICA FL_HELVETICA;
alias Fl_Font.FL_HELVETICA_BOLD FL_HELVETICA_BOLD;
alias Fl_Font.FL_HELVETICA_ITALIC FL_HELVETICA_ITALIC;
alias Fl_Font.FL_HELVETICA_BOLD_ITALIC FL_HELVETICA_BOLD_ITALIC;
alias Fl_Font.FL_COURIER FL_COURIER;
alias Fl_Font.FL_COURIER_BOLD FL_COURIER_BOLD;
alias Fl_Font.FL_COURIER_ITALIC FL_COURIER_ITALIC;
alias Fl_Font.FL_COURIER_BOLD_ITALIC FL_COURIER_BOLD_ITALIC;
alias Fl_Font.FL_TIMES FL_TIMES;
alias Fl_Font.FL_TIMES_BOLD FL_TIMES_BOLD;
alias Fl_Font.FL_TIMES_ITALIC FL_TIMES_ITALIC;
alias Fl_Font.FL_TIMES_BOLD_ITALIC FL_TIMES_BOLD_ITALIC;
alias Fl_Font.FL_SYMBOL FL_SYMBOL;
alias Fl_Font.FL_SCREEN FL_SCREEN;
alias Fl_Font.FL_SCREEN_BOLD FL_SCREEN_BOLD;
alias Fl_Font.FL_ZAPF_DINGBATS FL_ZAPF_DINGBATS;
alias Fl_Font.FL_FREE_FONT FL_FREE_FONT;
alias Fl_Font.FL_BOLD FL_BOLD;
alias Fl_Font.FL_ITALIC FL_ITALIC;
enum Fl_Align {
FL_ALIGN_CENTER=0,
FL_ALIGN_TOP=1,
FL_ALIGN_BOTTOM=2,
FL_ALIGN_LEFT=4,
FL_ALIGN_RIGHT=8,
FL_ALIGN_INSIDE=16,
FL_ALIGN_TEXT_OVER_IMAGE=32,
FL_ALIGN_IMAGE_OVER_TEXT=0,
FL_ALIGN_CLIP=64,
FL_ALIGN_WRAP=128,
FL_ALIGN_TOP_LEFT=5,
FL_ALIGN_TOP_RIGHT=9,
FL_ALIGN_BOTTOM_LEFT=6,
FL_ALIGN_BOTTOM_RIGHT=10,
FL_ALIGN_LEFT_TOP=5,
FL_ALIGN_RIGHT_TOP=9,
FL_ALIGN_LEFT_BOTTOM=6,
FL_ALIGN_RIGHT_BOTTOM=10,
FL_ALIGN_NOWRAP=0,
}
alias Fl_Align.FL_ALIGN_CENTER FL_ALIGN_CENTER;
alias Fl_Align.FL_ALIGN_TOP FL_ALIGN_TOP;
alias Fl_Align.FL_ALIGN_BOTTOM FL_ALIGN_BOTTOM;
alias Fl_Align.FL_ALIGN_LEFT FL_ALIGN_LEFT;
alias Fl_Align.FL_ALIGN_RIGHT FL_ALIGN_RIGHT;
alias Fl_Align.FL_ALIGN_INSIDE FL_ALIGN_INSIDE;
alias Fl_Align.FL_ALIGN_TEXT_OVER_IMAGE FL_ALIGN_TEXT_OVER_IMAGE;
alias Fl_Align.FL_ALIGN_IMAGE_OVER_TEXT FL_ALIGN_IMAGE_OVER_TEXT;
alias Fl_Align.FL_ALIGN_CLIP FL_ALIGN_CLIP;
alias Fl_Align.FL_ALIGN_WRAP FL_ALIGN_WRAP;
alias Fl_Align.FL_ALIGN_TOP_LEFT FL_ALIGN_TOP_LEFT;
alias Fl_Align.FL_ALIGN_TOP_RIGHT FL_ALIGN_TOP_RIGHT;
alias Fl_Align.FL_ALIGN_BOTTOM_LEFT FL_ALIGN_BOTTOM_LEFT;
alias Fl_Align.FL_ALIGN_BOTTOM_RIGHT FL_ALIGN_BOTTOM_RIGHT;
alias Fl_Align.FL_ALIGN_LEFT_TOP FL_ALIGN_LEFT_TOP;
alias Fl_Align.FL_ALIGN_RIGHT_TOP FL_ALIGN_RIGHT_TOP;
alias Fl_Align.FL_ALIGN_LEFT_BOTTOM FL_ALIGN_LEFT_BOTTOM;
alias Fl_Align.FL_ALIGN_RIGHT_BOTTOM FL_ALIGN_RIGHT_BOTTOM;
alias Fl_Align.FL_ALIGN_NOWRAP FL_ALIGN_NOWRAP;
enum Fl_When {
FL_WHEN_NEVER=0,
FL_WHEN_CHANGED=1,
FL_WHEN_RELEASE=4,
FL_WHEN_RELEASE_ALWAYS=6,
FL_WHEN_ENTER_KEY=8,
FL_WHEN_ENTER_KEY_ALWAYS=10,
FL_WHEN_ENTER_KEY_CHANGED=11,
FL_WHEN_NOT_CHANGED=2,
}
alias Fl_When.FL_WHEN_NEVER FL_WHEN_NEVER;
alias Fl_When.FL_WHEN_CHANGED FL_WHEN_CHANGED;
alias Fl_When.FL_WHEN_RELEASE FL_WHEN_RELEASE;
alias Fl_When.FL_WHEN_RELEASE_ALWAYS FL_WHEN_RELEASE_ALWAYS;
alias Fl_When.FL_WHEN_ENTER_KEY FL_WHEN_ENTER_KEY;
alias Fl_When.FL_WHEN_ENTER_KEY_ALWAYS FL_WHEN_ENTER_KEY_ALWAYS;
alias Fl_When.FL_WHEN_ENTER_KEY_CHANGED FL_WHEN_ENTER_KEY_CHANGED;
alias Fl_When.FL_WHEN_NOT_CHANGED FL_WHEN_NOT_CHANGED;
enum Fl_Event {
FL_NO_EVENT=0,
FL_PUSH=1,
FL_RELEASE=2,
FL_ENTER=3,
FL_LEAVE=4,
FL_DRAG=5,
FL_FOCUS=6,
FL_UNFOCUS=7,
FL_KEYDOWN=8,
FL_KEYUP=9,
FL_CLOSE=10,
FL_MOVE=11,
FL_SHORTCUT=12,
FL_DEACTIVATE=13,
FL_ACTIVATE=14,
FL_HIDE=15,
FL_SHOW=16,
FL_PASTE=17,
FL_SELECTIONCLEAR=18,
FL_MOUSEWHEEL=19,
FL_DND_ENTER=20,
FL_DND_DRAG=21,
FL_DND_LEAVE=22,
FL_DND_RELEASE=23,
}
alias Fl_Event.FL_NO_EVENT FL_NO_EVENT;
alias Fl_Event.FL_PUSH FL_PUSH;
alias Fl_Event.FL_RELEASE FL_RELEASE;
alias Fl_Event.FL_ENTER FL_ENTER;
alias Fl_Event.FL_LEAVE FL_LEAVE;
alias Fl_Event.FL_DRAG FL_DRAG;
alias Fl_Event.FL_FOCUS FL_FOCUS;
alias Fl_Event.FL_UNFOCUS FL_UNFOCUS;
alias Fl_Event.FL_KEYDOWN FL_KEYDOWN;
alias Fl_Event.FL_KEYUP FL_KEYUP;
alias Fl_Event.FL_CLOSE FL_CLOSE;
alias Fl_Event.FL_MOVE FL_MOVE;
alias Fl_Event.FL_SHORTCUT FL_SHORTCUT;
alias Fl_Event.FL_DEACTIVATE FL_DEACTIVATE;
alias Fl_Event.FL_ACTIVATE FL_ACTIVATE;
alias Fl_Event.FL_HIDE FL_HIDE;
alias Fl_Event.FL_SHOW FL_SHOW;
alias Fl_Event.FL_PASTE FL_PASTE;
alias Fl_Event.FL_SELECTIONCLEAR FL_SELECTIONCLEAR;
alias Fl_Event.FL_MOUSEWHEEL FL_MOUSEWHEEL;
alias Fl_Event.FL_DND_ENTER FL_DND_ENTER;
alias Fl_Event.FL_DND_DRAG FL_DND_DRAG;
alias Fl_Event.FL_DND_LEAVE FL_DND_LEAVE;
alias Fl_Event.FL_DND_RELEASE FL_DND_RELEASE;
alias uint ulong_;
int fl_color_cube(int r, int g, int b) {
return _BCD__Z13fl_color_cubeiii(r, g, b);
}
int fl_gray_ramp(int i) {
return _BCD__Z12fl_gray_rampi(i);
}
int fl_rgb_color(char g) {
return _BCD__Z12fl_rgb_colorh(g);
}
int fl_rgb_color(char r, char g, char b) {
return _BCD__Z12fl_rgb_colorhhh(r, g, b);
}
int fl_darker(int c) {
return _BCD__Z9fl_darker8Fl_Color(c);
}
int fl_lighter(int c) {
return _BCD__Z10fl_lighter8Fl_Color(c);
}
int fl_color_average(int c1, int c2, float weight) {
return _BCD__Z16fl_color_average8Fl_ColorS_f(c1, c2, weight);
}
int fl_contrast(int fg, int bg) {
return _BCD__Z11fl_contrast8Fl_ColorS_(fg, bg);
}
int fl_inactive(int c) {
return _BCD__Z11fl_inactive8Fl_Color(c);
}
int fl_define_FL_EMBOSSED_LABEL() {
return _BCD__Z27fl_define_FL_EMBOSSED_LABELv();
}
int fl_define_FL_ENGRAVED_LABEL() {
return _BCD__Z27fl_define_FL_ENGRAVED_LABELv();
}
int fl_define_FL_SHADOW_LABEL() {
return _BCD__Z25fl_define_FL_SHADOW_LABELv();
}
int fl_frame(int b) {
return _BCD__Z8fl_frame10Fl_Boxtype(b);
}
int fl_down(int b) {
return _BCD__Z7fl_down10Fl_Boxtype(b);
}
int fl_define_FL_PLASTIC_UP_BOX() {
return _BCD__Z27fl_define_FL_PLASTIC_UP_BOXv();
}
int fl_define_FL_OVAL_BOX() {
return _BCD__Z21fl_define_FL_OVAL_BOXv();
}
int fl_define_FL_DIAMOND_BOX() {
return _BCD__Z24fl_define_FL_DIAMOND_BOXv();
}
int fl_define_FL_RSHADOW_BOX() {
return _BCD__Z24fl_define_FL_RSHADOW_BOXv();
}
int fl_define_FL_RFLAT_BOX() {
return _BCD__Z22fl_define_FL_RFLAT_BOXv();
}
int fl_define_FL_ROUNDED_BOX() {
return _BCD__Z24fl_define_FL_ROUNDED_BOXv();
}
int fl_define_FL_SHADOW_BOX() {
return _BCD__Z23fl_define_FL_SHADOW_BOXv();
}
int fl_define_FL_ROUND_UP_BOX() {
return _BCD__Z25fl_define_FL_ROUND_UP_BOXv();
}
