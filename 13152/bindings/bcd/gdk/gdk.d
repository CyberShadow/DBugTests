/* THIS FILE GENERATED BY bcd.gen */
module bcd.gdk.gdk;
align(4):
public import bcd.cairo.cairo;
public import bcd.pango.pango;
public import bcd.glib2.glib;
const int GDK_CURRENT_TIME = 0;
const int GDK_PARENT_RELATIVE = 1;
const int GDK_PIXBUF_FEATURES_H = 1;
const char[] GDK_PIXBUF_VERSION = "2.8.3";
const int GDK_MAX_TIMECOORD_AXES = 128;
alias _GdkWindowObjectClass GdkWindowObjectClass;
alias _GdkDrawableClass GdkDrawableClass;
alias _GdkWindowObject GdkWindowObject;
alias _GdkDrawable GdkDrawable;
alias _GdkColor GdkColor;
alias _GdkDrawable GdkPixmap;
alias void GdkRegion;
enum GdkWindowState {
GDK_WINDOW_STATE_WITHDRAWN=1,
GDK_WINDOW_STATE_ICONIFIED=2,
GDK_WINDOW_STATE_MAXIMIZED=4,
GDK_WINDOW_STATE_STICKY=8,
GDK_WINDOW_STATE_FULLSCREEN=16,
GDK_WINDOW_STATE_ABOVE=32,
GDK_WINDOW_STATE_BELOW=64,
}
enum GdkEventMask {
GDK_EXPOSURE_MASK=2,
GDK_POINTER_MOTION_MASK=4,
GDK_POINTER_MOTION_HINT_MASK=8,
GDK_BUTTON_MOTION_MASK=16,
GDK_BUTTON1_MOTION_MASK=32,
GDK_BUTTON2_MOTION_MASK=64,
GDK_BUTTON3_MOTION_MASK=128,
GDK_BUTTON_PRESS_MASK=256,
GDK_BUTTON_RELEASE_MASK=512,
GDK_KEY_PRESS_MASK=1024,
GDK_KEY_RELEASE_MASK=2048,
GDK_ENTER_NOTIFY_MASK=4096,
GDK_LEAVE_NOTIFY_MASK=8192,
GDK_FOCUS_CHANGE_MASK=16384,
GDK_STRUCTURE_MASK=32768,
GDK_PROPERTY_CHANGE_MASK=65536,
GDK_VISIBILITY_NOTIFY_MASK=131072,
GDK_PROXIMITY_IN_MASK=262144,
GDK_PROXIMITY_OUT_MASK=524288,
GDK_SUBSTRUCTURE_MASK=1048576,
GDK_SCROLL_MASK=2097152,
GDK_ALL_EVENTS_MASK=4194302,
}
enum GdkWindowEdge {
GDK_WINDOW_EDGE_NORTH_WEST=0,
GDK_WINDOW_EDGE_NORTH=1,
GDK_WINDOW_EDGE_NORTH_EAST=2,
GDK_WINDOW_EDGE_WEST=3,
GDK_WINDOW_EDGE_EAST=4,
GDK_WINDOW_EDGE_SOUTH_WEST=5,
GDK_WINDOW_EDGE_SOUTH=6,
GDK_WINDOW_EDGE_SOUTH_EAST=7,
}
enum GdkGravity {
GDK_GRAVITY_NORTH_WEST=1,
GDK_GRAVITY_NORTH=2,
GDK_GRAVITY_NORTH_EAST=3,
GDK_GRAVITY_WEST=4,
GDK_GRAVITY_CENTER=5,
GDK_GRAVITY_EAST=6,
GDK_GRAVITY_SOUTH_WEST=7,
GDK_GRAVITY_SOUTH=8,
GDK_GRAVITY_SOUTH_EAST=9,
GDK_GRAVITY_STATIC=10,
}
enum GdkWMFunction {
GDK_FUNC_ALL=1,
GDK_FUNC_RESIZE=2,
GDK_FUNC_MOVE=4,
GDK_FUNC_MINIMIZE=8,
GDK_FUNC_MAXIMIZE=16,
GDK_FUNC_CLOSE=32,
}
enum GdkWMDecoration {
GDK_DECOR_ALL=1,
GDK_DECOR_BORDER=2,
GDK_DECOR_RESIZEH=4,
GDK_DECOR_TITLE=8,
GDK_DECOR_MENU=16,
GDK_DECOR_MINIMIZE=32,
GDK_DECOR_MAXIMIZE=64,
}
enum GdkWindowTypeHint {
GDK_WINDOW_TYPE_HINT_NORMAL=0,
GDK_WINDOW_TYPE_HINT_DIALOG=1,
GDK_WINDOW_TYPE_HINT_MENU=2,
GDK_WINDOW_TYPE_HINT_TOOLBAR=3,
GDK_WINDOW_TYPE_HINT_SPLASHSCREEN=4,
GDK_WINDOW_TYPE_HINT_UTILITY=5,
GDK_WINDOW_TYPE_HINT_DOCK=6,
GDK_WINDOW_TYPE_HINT_DESKTOP=7,
}
enum GdkWindowHints {
GDK_HINT_POS=1,
GDK_HINT_MIN_SIZE=2,
GDK_HINT_MAX_SIZE=4,
GDK_HINT_BASE_SIZE=8,
GDK_HINT_ASPECT=16,
GDK_HINT_RESIZE_INC=32,
GDK_HINT_WIN_GRAVITY=64,
GDK_HINT_USER_POS=128,
GDK_HINT_USER_SIZE=256,
}
enum GdkWindowAttributesType {
GDK_WA_TITLE=2,
GDK_WA_X=4,
GDK_WA_Y=8,
GDK_WA_CURSOR=16,
GDK_WA_COLORMAP=32,
GDK_WA_VISUAL=64,
GDK_WA_WMCLASS=128,
GDK_WA_NOREDIR=256,
}
enum GdkWindowType {
GDK_WINDOW_ROOT=0,
GDK_WINDOW_TOPLEVEL=1,
GDK_WINDOW_CHILD=2,
GDK_WINDOW_DIALOG=3,
GDK_WINDOW_TEMP=4,
GDK_WINDOW_FOREIGN=5,
}
enum GdkWindowClass {
GDK_INPUT_OUTPUT=0,
GDK_INPUT_ONLY=1,
}
alias _GdkPointerHooks GdkPointerHooks;
alias _GdkDrawable GdkWindow;
enum GdkModifierType {
GDK_SHIFT_MASK=1,
GDK_LOCK_MASK=2,
GDK_CONTROL_MASK=4,
GDK_MOD1_MASK=8,
GDK_MOD2_MASK=16,
GDK_MOD3_MASK=32,
GDK_MOD4_MASK=64,
GDK_MOD5_MASK=128,
GDK_BUTTON1_MASK=256,
GDK_BUTTON2_MASK=512,
GDK_BUTTON3_MASK=1024,
GDK_BUTTON4_MASK=2048,
GDK_BUTTON5_MASK=4096,
GDK_RELEASE_MASK=1073741824,
GDK_MODIFIER_MASK=1073750015,
}
alias _GdkDrawable * function(_GdkDrawable *, int *, int *, int *) _BCD_func__5904;
alias _GdkScreen GdkScreen;
alias _GdkDrawable * function(_GdkScreen *, int *, int *) _BCD_func__5905;
alias _GdkWindowAttr GdkWindowAttr;
alias _GdkVisual GdkVisual;
alias _GdkColormap GdkColormap;
alias _GdkCursor GdkCursor;
alias _GdkGeometry GdkGeometry;
enum GdkVisualType {
GDK_VISUAL_STATIC_GRAY=0,
GDK_VISUAL_GRAYSCALE=1,
GDK_VISUAL_STATIC_COLOR=2,
GDK_VISUAL_PSEUDO_COLOR=3,
GDK_VISUAL_TRUE_COLOR=4,
GDK_VISUAL_DIRECT_COLOR=5,
}
alias void GdkVisualClass;
alias void * GdkAtom;
alias void * GdkSelectionType;
alias void * GdkTarget;
alias void * GdkSelection;
alias _GdkScreenClass GdkScreenClass;
alias void function(_GdkScreen *) _BCD_func__5909;
alias _GdkSpan GdkSpan;
alias void function(_GdkSpan *, void *) _BCD_func__3713;
alias _BCD_func__3713 GdkSpanFunc;
enum GdkOverlapType {
GDK_OVERLAP_RECTANGLE_IN=0,
GDK_OVERLAP_RECTANGLE_OUT=1,
GDK_OVERLAP_RECTANGLE_PART=2,
}
enum GdkFillRule {
GDK_EVEN_ODD_RULE=0,
GDK_WINDING_RULE=1,
}
enum GdkPropMode {
GDK_PROP_MODE_REPLACE=0,
GDK_PROP_MODE_PREPEND=1,
GDK_PROP_MODE_APPEND=2,
}
alias _GdkPixmapObjectClass GdkPixmapObjectClass;
alias _GdkPixmapObject GdkPixmapObject;
alias _GdkPangoAttrEmbossed GdkPangoAttrEmbossed;
alias _GdkPangoAttrStipple GdkPangoAttrStipple;
alias _GdkDrawable GdkBitmap;
alias void GdkPangoRendererPrivate;
alias _GdkPangoRendererClass GdkPangoRendererClass;
alias _GdkPangoRenderer GdkPangoRenderer;
alias _GdkDisplayManagerClass GdkDisplayManagerClass;
alias void GdkDisplayManager;
alias _GdkDisplay GdkDisplay;
alias void function(void *, _GdkDisplay *) _BCD_func__5917;
alias _GdkKeymapClass GdkKeymapClass;
alias _GdkKeymap GdkKeymap;
alias void function(_GdkKeymap *) _BCD_func__5919;
alias _GdkKeymapKey GdkKeymapKey;
alias _GdkImageClass GdkImageClass;
enum GdkImageType {
GDK_IMAGE_NORMAL=0,
GDK_IMAGE_SHARED=1,
GDK_IMAGE_FASTEST=2,
}
enum GdkFontType {
GDK_FONT_FONT=0,
GDK_FONT_FONTSET=1,
}
alias _GdkTrapezoid GdkTrapezoid;
alias _GdkGC GdkGC;
alias _GdkGCValues GdkGCValues;
enum GdkGCValuesMask {
GDK_GC_FOREGROUND=1,
GDK_GC_BACKGROUND=2,
GDK_GC_FONT=4,
GDK_GC_FUNCTION=8,
GDK_GC_FILL=16,
GDK_GC_TILE=32,
GDK_GC_STIPPLE=64,
GDK_GC_CLIP_MASK=128,
GDK_GC_SUBWINDOW=256,
GDK_GC_TS_X_ORIGIN=512,
GDK_GC_TS_Y_ORIGIN=1024,
GDK_GC_CLIP_X_ORIGIN=2048,
GDK_GC_CLIP_Y_ORIGIN=4096,
GDK_GC_EXPOSURES=8192,
GDK_GC_LINE_WIDTH=16384,
GDK_GC_LINE_STYLE=32768,
GDK_GC_CAP_STYLE=65536,
GDK_GC_JOIN_STYLE=131072,
}
alias _GdkGC * function(_GdkDrawable *, _GdkGCValues *, int) _BCD_func__5925;
alias void function(_GdkDrawable *, _GdkGC *, int, int, int, int, int) _BCD_func__5926;
alias void function(_GdkDrawable *, _GdkGC *, int, int, int, int, int, int, int) _BCD_func__5927;
alias _GdkPoint GdkPoint;
alias void function(_GdkDrawable *, _GdkGC *, int, _GdkPoint *, int) _BCD_func__5928;
alias _GdkFont GdkFont;
alias void function(_GdkDrawable *, _GdkFont *, _GdkGC *, int, int, char *, int) _BCD_func__5929;
alias uint GdkWChar;
alias void function(_GdkDrawable *, _GdkFont *, _GdkGC *, int, int, uint *, int) _BCD_func__5930;
alias void function(_GdkDrawable *, _GdkGC *, _GdkDrawable *, int, int, int, int, int, int) _BCD_func__5931;
alias void function(_GdkDrawable *, _GdkGC *, _GdkPoint *, int) _BCD_func__5932;
alias _GdkSegment GdkSegment;
alias void function(_GdkDrawable *, _GdkGC *, _GdkSegment *, int) _BCD_func__5933;
alias void function(_GdkDrawable *, _GdkGC *, void *, int, int, _PangoGlyphString *) _BCD_func__5934;
alias _GdkImage GdkImage;
alias void function(_GdkDrawable *, _GdkGC *, _GdkImage *, int, int, int, int, int, int) _BCD_func__5935;
alias int function(_GdkDrawable *) _BCD_func__5936;
alias void function(_GdkDrawable *, int *, int *) _BCD_func__5937;
alias void function(_GdkDrawable *, _GdkColormap *) _BCD_func__5938;
alias _GdkColormap * function(_GdkDrawable *) _BCD_func__5939;
alias _GdkVisual * function(_GdkDrawable *) _BCD_func__5940;
alias _GdkScreen * function(_GdkDrawable *) _BCD_func__5941;
alias _GdkImage * function(_GdkDrawable *, int, int, int, int) _BCD_func__5942;
alias void * function(_GdkDrawable *) _BCD_func__5943;
alias _GdkDrawable * function(_GdkDrawable *, int, int, int, int, int *, int *) _BCD_func__5944;
alias void GdkPixbuf;
enum GdkRgbDither {
GDK_RGB_DITHER_NONE=0,
GDK_RGB_DITHER_NORMAL=1,
GDK_RGB_DITHER_MAX=2,
}
alias void function(_GdkDrawable *, _GdkGC *, void *, int, int, int, int, int, int, int, int, int) _BCD_func__5945;
alias _GdkImage * function(_GdkDrawable *, _GdkImage *, int, int, int, int, int, int) _BCD_func__5946;
alias void function(_GdkDrawable *, _GdkGC *, _PangoMatrix *, void *, int, int, _PangoGlyphString *) _BCD_func__5947;
alias void function(_GdkDrawable *, _GdkGC *, _GdkTrapezoid *, int) _BCD_func__5948;
alias void * function(_GdkDrawable *) _BCD_func__5949;
alias void function() _BCD_func__4827;
enum GdkSubwindowMode {
GDK_CLIP_BY_CHILDREN=0,
GDK_INCLUDE_INFERIORS=1,
}
enum GdkLineStyle {
GDK_LINE_SOLID=0,
GDK_LINE_ON_OFF_DASH=1,
GDK_LINE_DOUBLE_DASH=2,
}
enum GdkJoinStyle {
GDK_JOIN_MITER=0,
GDK_JOIN_ROUND=1,
GDK_JOIN_BEVEL=2,
}
enum GdkFunction {
GDK_COPY=0,
GDK_INVERT=1,
GDK_XOR=2,
GDK_CLEAR=3,
GDK_AND=4,
GDK_AND_REVERSE=5,
GDK_AND_INVERT=6,
GDK_NOOP=7,
GDK_OR=8,
GDK_EQUIV=9,
GDK_OR_REVERSE=10,
GDK_COPY_INVERT=11,
GDK_OR_INVERT=12,
GDK_NAND=13,
GDK_NOR=14,
GDK_SET=15,
}
enum GdkFill {
GDK_SOLID=0,
GDK_TILED=1,
GDK_STIPPLED=2,
GDK_OPAQUE_STIPPLED=3,
}
enum GdkCapStyle {
GDK_CAP_NOT_LAST=0,
GDK_CAP_BUTT=1,
GDK_CAP_ROUND=2,
GDK_CAP_PROJECTING=3,
}
alias _GdkGCClass GdkGCClass;
alias void function(_GdkGC *, _GdkGCValues *) _BCD_func__5951;
alias void function(_GdkGC *, _GdkGCValues *, int) _BCD_func__5952;
alias void function(_GdkGC *, int, char *, int) _BCD_func__5953;
alias _GdkDisplayPointerHooks GdkDisplayPointerHooks;
alias void function(_GdkDisplay *, _GdkScreen * *, int *, int *, int *) _BCD_func__5956;
alias _GdkDrawable * function(_GdkDisplay *, _GdkDrawable *, int *, int *, int *) _BCD_func__5957;
alias _GdkDrawable * function(_GdkDisplay *, int *, int *) _BCD_func__5958;
alias _GdkDisplayClass GdkDisplayClass;
alias char * function(_GdkDisplay *) _BCD_func__5960;
alias int function(_GdkDisplay *) _BCD_func__5961;
alias _GdkScreen * function(_GdkDisplay *, int) _BCD_func__5962;
alias _GdkScreen * function(_GdkDisplay *) _BCD_func__5963;
alias void function(_GdkDisplay *, int) _BCD_func__5964;
enum GdkOwnerChange {
GDK_OWNER_CHANGE_NEW_OWNER=0,
GDK_OWNER_CHANGE_DESTROY=1,
GDK_OWNER_CHANGE_CLOSE=2,
}
enum GdkSettingAction {
GDK_SETTING_ACTION_NEW=0,
GDK_SETTING_ACTION_CHANGED=1,
GDK_SETTING_ACTION_DELETED=2,
}
enum GdkPropertyState {
GDK_PROPERTY_NEW_VALUE=0,
GDK_PROPERTY_DELETE=1,
}
enum GdkCrossingMode {
GDK_CROSSING_NORMAL=0,
GDK_CROSSING_GRAB=1,
GDK_CROSSING_UNGRAB=2,
}
enum GdkNotifyType {
GDK_NOTIFY_ANCESTOR=0,
GDK_NOTIFY_VIRTUAL=1,
GDK_NOTIFY_INFERIOR=2,
GDK_NOTIFY_NONLINEAR=3,
GDK_NOTIFY_NONLINEAR_VIRTUAL=4,
GDK_NOTIFY_UNKNOWN=5,
}
enum GdkScrollDirection {
GDK_SCROLL_UP=0,
GDK_SCROLL_DOWN=1,
GDK_SCROLL_LEFT=2,
GDK_SCROLL_RIGHT=3,
}
enum GdkVisibilityState {
GDK_VISIBILITY_UNOBSCURED=0,
GDK_VISIBILITY_PARTIAL=1,
GDK_VISIBILITY_FULLY_OBSCURED=2,
}
enum GdkEventType {
GDK_NOTHING=-1,
GDK_DELETE=0,
GDK_DESTROY=1,
GDK_EXPOSE=2,
GDK_MOTION_NOTIFY=3,
GDK_BUTTON_PRESS=4,
GDK_2BUTTON_PRESS=5,
GDK_3BUTTON_PRESS=6,
GDK_BUTTON_RELEASE=7,
GDK_KEY_PRESS=8,
GDK_KEY_RELEASE=9,
GDK_ENTER_NOTIFY=10,
GDK_LEAVE_NOTIFY=11,
GDK_FOCUS_CHANGE=12,
GDK_CONFIGURE=13,
GDK_MAP=14,
GDK_UNMAP=15,
GDK_PROPERTY_NOTIFY=16,
GDK_SELECTION_CLEAR=17,
GDK_SELECTION_REQUEST=18,
GDK_SELECTION_NOTIFY=19,
GDK_PROXIMITY_IN=20,
GDK_PROXIMITY_OUT=21,
GDK_DRAG_ENTER=22,
GDK_DRAG_LEAVE=23,
GDK_DRAG_MOTION=24,
GDK_DRAG_STATUS=25,
GDK_DROP_START=26,
GDK_DROP_FINISHED=27,
GDK_CLIENT_EVENT=28,
GDK_VISIBILITY_NOTIFY=29,
GDK_NO_EXPOSE=30,
GDK_SCROLL=31,
GDK_WINDOW_STATE=32,
GDK_SETTING=33,
GDK_OWNER_CHANGE=34,
GDK_GRAB_BROKEN=35,
}
enum GdkFilterReturn {
GDK_FILTER_CONTINUE=0,
GDK_FILTER_TRANSLATE=1,
GDK_FILTER_REMOVE=2,
}
alias void GdkXEvent;
alias _GdkEvent GdkEvent;
alias int function(void *, _GdkEvent *, void *) _BCD_func__3886;
alias _BCD_func__3886 GdkFilterFunc;
alias void function(_GdkEvent *, void *) _BCD_func__3887;
alias _BCD_func__3887 GdkEventFunc;
alias _GdkEventAny GdkEventAny;
alias _GdkEventExpose GdkEventExpose;
alias _GdkEventNoExpose GdkEventNoExpose;
alias _GdkEventVisibility GdkEventVisibility;
alias _GdkEventMotion GdkEventMotion;
alias _GdkEventButton GdkEventButton;
alias _GdkEventScroll GdkEventScroll;
alias _GdkEventKey GdkEventKey;
alias _GdkEventCrossing GdkEventCrossing;
alias _GdkEventFocus GdkEventFocus;
alias _GdkEventConfigure GdkEventConfigure;
alias _GdkEventProperty GdkEventProperty;
alias _GdkEventSelection GdkEventSelection;
alias _GdkEventOwnerChange GdkEventOwnerChange;
alias _GdkEventProximity GdkEventProximity;
alias _GdkEventClient GdkEventClient;
alias _GdkEventDND GdkEventDND;
alias _GdkEventWindowState GdkEventWindowState;
alias _GdkEventSetting GdkEventSetting;
alias _GdkEventGrabBroken GdkEventGrabBroken;
alias _GdkDragContext GdkDragContext;
alias _GdkDevice GdkDevice;
alias uint GdkNativeWindow;
alias _GdkRectangle GdkRectangle;
enum GdkAxisUse {
GDK_AXIS_IGNORE=0,
GDK_AXIS_X=1,
GDK_AXIS_Y=2,
GDK_AXIS_PRESSURE=3,
GDK_AXIS_XTILT=4,
GDK_AXIS_YTILT=5,
GDK_AXIS_WHEEL=6,
GDK_AXIS_LAST=7,
}
enum GdkInputMode {
GDK_MODE_DISABLED=0,
GDK_MODE_SCREEN=1,
GDK_MODE_WINDOW=2,
}
enum GdkInputSource {
GDK_SOURCE_MOUSE=0,
GDK_SOURCE_PEN=1,
GDK_SOURCE_ERASER=2,
GDK_SOURCE_CURSOR=3,
}
enum GdkExtensionMode {
GDK_EXTENSION_EVENTS_NONE=0,
GDK_EXTENSION_EVENTS_ALL=1,
GDK_EXTENSION_EVENTS_CURSOR=2,
}
alias _GdkTimeCoord GdkTimeCoord;
alias void GdkDeviceClass;
alias _GdkDeviceAxis GdkDeviceAxis;
alias _GdkDeviceKey GdkDeviceKey;
alias _GdkDragContextClass GdkDragContextClass;
enum GdkDragProtocol {
GDK_DRAG_PROTO_MOTIF=0,
GDK_DRAG_PROTO_XDND=1,
GDK_DRAG_PROTO_ROOTWIN=2,
GDK_DRAG_PROTO_NONE=3,
GDK_DRAG_PROTO_WIN32_DROPFILES=4,
GDK_DRAG_PROTO_OLE2=5,
GDK_DRAG_PROTO_LOCAL=6,
}
enum GdkDragAction {
GDK_ACTION_DEFAULT=1,
GDK_ACTION_COPY=2,
GDK_ACTION_MOVE=4,
GDK_ACTION_LINK=8,
GDK_ACTION_PRIVATE=16,
GDK_ACTION_ASK=32,
}
enum GdkCursorType {
GDK_X_CURSOR=0,
GDK_ARROW=2,
GDK_BASED_ARROW_DOWN=4,
GDK_BASED_ARROW_UP=6,
GDK_BOAT=8,
GDK_BOGOSITY=10,
GDK_BOTTOM_LEFT_CORNER=12,
GDK_BOTTOM_RIGHT_CORNER=14,
GDK_BOTTOM_SIDE=16,
GDK_BOTTOM_TEE=18,
GDK_BOX_SPIRAL=20,
GDK_CENTER_PTR=22,
GDK_CIRCLE=24,
GDK_CLOCK=26,
GDK_COFFEE_MUG=28,
GDK_CROSS=30,
GDK_CROSS_REVERSE=32,
GDK_CROSSHAIR=34,
GDK_DIAMOND_CROSS=36,
GDK_DOT=38,
GDK_DOTBOX=40,
GDK_DOUBLE_ARROW=42,
GDK_DRAFT_LARGE=44,
GDK_DRAFT_SMALL=46,
GDK_DRAPED_BOX=48,
GDK_EXCHANGE=50,
GDK_FLEUR=52,
GDK_GOBBLER=54,
GDK_GUMBY=56,
GDK_HAND1=58,
GDK_HAND2=60,
GDK_HEART=62,
GDK_ICON=64,
GDK_IRON_CROSS=66,
GDK_LEFT_PTR=68,
GDK_LEFT_SIDE=70,
GDK_LEFT_TEE=72,
GDK_LEFTBUTTON=74,
GDK_LL_ANGLE=76,
GDK_LR_ANGLE=78,
GDK_MAN=80,
GDK_MIDDLEBUTTON=82,
GDK_MOUSE=84,
GDK_PENCIL=86,
GDK_PIRATE=88,
GDK_PLUS=90,
GDK_QUESTION_ARROW=92,
GDK_RIGHT_PTR=94,
GDK_RIGHT_SIDE=96,
GDK_RIGHT_TEE=98,
GDK_RIGHTBUTTON=100,
GDK_RTL_LOGO=102,
GDK_SAILBOAT=104,
GDK_SB_DOWN_ARROW=106,
GDK_SB_H_DOUBLE_ARROW=108,
GDK_SB_LEFT_ARROW=110,
GDK_SB_RIGHT_ARROW=112,
GDK_SB_UP_ARROW=114,
GDK_SB_V_DOUBLE_ARROW=116,
GDK_SHUTTLE=118,
GDK_SIZING=120,
GDK_SPIDER=122,
GDK_SPRAYCAN=124,
GDK_STAR=126,
GDK_TARGET=128,
GDK_TCROSS=130,
GDK_TOP_LEFT_ARROW=132,
GDK_TOP_LEFT_CORNER=134,
GDK_TOP_RIGHT_CORNER=136,
GDK_TOP_SIDE=138,
GDK_TOP_TEE=140,
GDK_TREK=142,
GDK_UL_ANGLE=144,
GDK_UMBRELLA=146,
GDK_UR_ANGLE=148,
GDK_WATCH=150,
GDK_XTERM=152,
GDK_LAST_CURSOR=153,
GDK_CURSOR_IS_PIXMAP=-1,
}
alias _GdkPixbufLoaderClass GdkPixbufLoaderClass;
alias _GdkPixbufLoader GdkPixbufLoader;
alias void function(_GdkPixbufLoader *, int, int) _BCD_func__5997;
alias void function(_GdkPixbufLoader *) _BCD_func__5998;
alias void function(_GdkPixbufLoader *, int, int, int, int) _BCD_func__5999;
alias void GdkPixbufFormat;
alias void GdkPixbufSimpleAnimClass;
alias void GdkPixbufSimpleAnim;
alias void GdkPixbufAnimationIter;
alias void GdkPixbufAnimation;
enum GdkPixbufRotation {
GDK_PIXBUF_ROTATE_NONE=0,
GDK_PIXBUF_ROTATE_COUNTERCLOCKWISE=90,
GDK_PIXBUF_ROTATE_UPSIDEDOWN=180,
GDK_PIXBUF_ROTATE_CLOCKWISE=270,
}
enum GdkInterpType {
GDK_INTERP_NEAREST=0,
GDK_INTERP_TILES=1,
GDK_INTERP_BILINEAR=2,
GDK_INTERP_HYPER=3,
}
alias int function(char *, uint, _GError * *, void *) _BCD_func__4300;
alias _BCD_func__4300 GdkPixbufSaveFunc;
enum GdkPixbufError {
GDK_PIXBUF_ERROR_CORRUPT_IMAGE=0,
GDK_PIXBUF_ERROR_INSUFFICIENT_MEMORY=1,
GDK_PIXBUF_ERROR_BAD_OPTION=2,
GDK_PIXBUF_ERROR_UNKNOWN_TYPE=3,
GDK_PIXBUF_ERROR_UNSUPPORTED_OPERATION=4,
GDK_PIXBUF_ERROR_FAILED=5,
}
alias void function(char *, void *) _BCD_func__4303;
alias _BCD_func__4303 GdkPixbufDestroyNotify;
enum GdkColorspace {
GDK_COLORSPACE_RGB=0,
}
enum GdkPixbufAlphaMode {
GDK_PIXBUF_ALPHA_BILEVEL=0,
GDK_PIXBUF_ALPHA_FULL=1,
}
alias _GdkRgbCmap GdkRgbCmap;
alias _GdkColormapClass GdkColormapClass;
alias void function(void *) _BCD_func__4216;
alias _BCD_func__4216 GdkDestroyNotify;
enum GdkInputCondition {
GDK_INPUT_READ=1,
GDK_INPUT_WRITE=2,
GDK_INPUT_EXCEPTION=4,
}
alias void function(void *, int, int) _BCD_func__4316;
alias _BCD_func__4316 GdkInputFunction;
enum GdkGrabStatus {
GDK_GRAB_SUCCESS=0,
GDK_GRAB_ALREADY_GRABBED=1,
GDK_GRAB_INVALID_TIME=2,
GDK_GRAB_NOT_VIEWABLE=3,
GDK_GRAB_FROZEN=4,
}
enum GdkStatus {
GDK_OK=0,
GDK_ERROR=-1,
GDK_ERROR_PARAM=-2,
GDK_ERROR_FILE=-3,
GDK_ERROR_MEM=-4,
}
enum GdkByteOrder {
GDK_LSB_FIRST=0,
GDK_MSB_FIRST=1,
}
extern (C) void gdk_threads_set_lock_functions(_BCD_func__4827, _BCD_func__4827);
extern (C) void gdk_threads_init();
extern (C) void gdk_threads_leave();
extern (C) void gdk_threads_enter();
extern (C) void gdk_notify_startup_complete();
extern (C) int gdk_event_send_client_message_for_display(_GdkDisplay *, _GdkEvent *, uint);
extern (C) void gdk_event_send_clientmessage_toall(_GdkEvent *);
extern (C) int gdk_event_send_client_message(_GdkEvent *, uint);
extern (C) int gdk_mbstowcs(uint *, char *, int);
extern (C) char * gdk_wcstombs(uint *);
extern (C) uint gdk_rectangle_get_type();
extern (C) void gdk_rectangle_union(_GdkRectangle *, _GdkRectangle *, _GdkRectangle *);
extern (C) int gdk_rectangle_intersect(_GdkRectangle *, _GdkRectangle *, _GdkRectangle *);
extern (C) void gdk_set_double_click_time(uint);
extern (C) void gdk_flush();
extern (C) void gdk_beep();
extern (C) int gdk_screen_height_mm();
extern (C) int gdk_screen_width_mm();
extern (C) int gdk_screen_height();
extern (C) int gdk_screen_width();
extern (C) int gdk_pointer_is_grabbed();
extern (C) void gdk_keyboard_ungrab(uint);
extern (C) void gdk_pointer_ungrab(uint);
extern (C) int gdk_keyboard_grab_info_libgtk_only(_GdkDisplay *, _GdkDrawable * *, int *);
extern (C) int gdk_pointer_grab_info_libgtk_only(_GdkDisplay *, _GdkDrawable * *, int *);
extern (C) int gdk_keyboard_grab(_GdkDrawable *, int, uint);
extern (C) int gdk_pointer_grab(_GdkDrawable *, int, int, _GdkDrawable *, _GdkCursor *, uint);
extern (C) void gdk_input_remove(int);
extern (C) int gdk_input_add(int, int, _BCD_func__4316, void *);
extern (C) int gdk_input_add_full(int, int, _BCD_func__4316, void *, _BCD_func__4216);
extern (C) char * gdk_get_display_arg_name();
extern (C) char * gdk_get_display();
extern (C) int gdk_get_use_xshm();
extern (C) void gdk_set_use_xshm(int);
extern (C) int gdk_error_trap_pop();
extern (C) void gdk_error_trap_push();
extern (C) void gdk_set_program_class(char *);
extern (C) char * gdk_get_program_class();
extern (C) char * gdk_set_locale();
extern (C) void gdk_exit(int);
extern (C) void gdk_pre_parse_libgtk_only();
extern (C) void gdk_add_option_entries_libgtk_only(void *);
extern (C) int gdk_init_check(int *, char * * *);
extern (C) void gdk_init(int *, char * * *);
extern (C) void gdk_parse_args(int *, char * * *);
extern (C) _GdkDrawable * gdk_get_default_root_window();
extern (C) _GdkPointerHooks * gdk_set_pointer_hooks(_GdkPointerHooks *);
extern (C) void gdk_window_configure_finished(_GdkDrawable *);
extern (C) void gdk_window_enable_synchronized_configure(_GdkDrawable *);
extern (C) void gdk_window_get_internal_paint_info(_GdkDrawable *, _GdkDrawable * *, int *, int *);
extern (C) void gdk_window_constrain_size(_GdkGeometry *, uint, int, int, int *, int *);
extern (C) void gdk_window_set_debug_updates(int);
extern (C) void gdk_window_process_updates(_GdkDrawable *, int);
extern (C) void gdk_window_process_all_updates();
extern (C) void gdk_window_thaw_updates(_GdkDrawable *);
extern (C) void gdk_window_freeze_updates(_GdkDrawable *);
extern (C) void * gdk_window_get_update_area(_GdkDrawable *);
alias int function(_GdkDrawable *, void *) _BCD_func__5461;
extern (C) void gdk_window_invalidate_maybe_recurse(_GdkDrawable *, void *, _BCD_func__5461, void *);
extern (C) void gdk_window_invalidate_region(_GdkDrawable *, void *, int);
extern (C) void gdk_window_invalidate_rect(_GdkDrawable *, _GdkRectangle *, int);
extern (C) void gdk_window_begin_move_drag(_GdkDrawable *, int, int, int, uint);
extern (C) void gdk_window_begin_resize_drag(_GdkDrawable *, int, int, int, int, uint);
extern (C) void gdk_window_register_dnd(_GdkDrawable *);
extern (C) void gdk_window_set_keep_below(_GdkDrawable *, int);
extern (C) void gdk_window_set_keep_above(_GdkDrawable *, int);
extern (C) void gdk_window_unfullscreen(_GdkDrawable *);
extern (C) void gdk_window_fullscreen(_GdkDrawable *);
extern (C) void gdk_window_unmaximize(_GdkDrawable *);
extern (C) void gdk_window_maximize(_GdkDrawable *);
extern (C) void gdk_window_unstick(_GdkDrawable *);
extern (C) void gdk_window_stick(_GdkDrawable *);
extern (C) void gdk_window_deiconify(_GdkDrawable *);
extern (C) void gdk_window_iconify(_GdkDrawable *);
extern (C) _GList * gdk_window_get_toplevels();
extern (C) void gdk_window_set_functions(_GdkDrawable *, int);
extern (C) int gdk_window_get_decorations(_GdkDrawable *, int *);
extern (C) void gdk_window_set_decorations(_GdkDrawable *, int);
extern (C) _GdkDrawable * gdk_window_get_group(_GdkDrawable *);
extern (C) void gdk_window_set_group(_GdkDrawable *, _GdkDrawable *);
extern (C) void gdk_window_set_icon_name(_GdkDrawable *, char *);
extern (C) void gdk_window_set_icon(_GdkDrawable *, _GdkDrawable *, _GdkDrawable *, _GdkDrawable *);
extern (C) void gdk_window_set_icon_list(_GdkDrawable *, _GList *);
extern (C) void gdk_window_set_events(_GdkDrawable *, int);
extern (C) int gdk_window_get_events(_GdkDrawable *);
extern (C) _GList * gdk_window_peek_children(_GdkDrawable *);
extern (C) _GList * gdk_window_get_children(_GdkDrawable *);
extern (C) _GdkDrawable * gdk_window_get_toplevel(_GdkDrawable *);
extern (C) _GdkDrawable * gdk_window_get_parent(_GdkDrawable *);
extern (C) _GdkDrawable * gdk_window_get_pointer(_GdkDrawable *, int *, int *, int *);
extern (C) void gdk_window_get_frame_extents(_GdkDrawable *, _GdkRectangle *);
extern (C) void gdk_window_get_root_origin(_GdkDrawable *, int *, int *);
extern (C) int gdk_window_get_deskrelative_origin(_GdkDrawable *, int *, int *);
extern (C) int gdk_window_get_origin(_GdkDrawable *, int *, int *);
extern (C) void gdk_window_get_position(_GdkDrawable *, int *, int *);
extern (C) void gdk_window_get_geometry(_GdkDrawable *, int *, int *, int *, int *, int *);
extern (C) void gdk_window_get_user_data(_GdkDrawable *, void * *);
extern (C) void gdk_window_set_cursor(_GdkDrawable *, _GdkCursor *);
extern (C) void gdk_window_set_back_pixmap(_GdkDrawable *, _GdkDrawable *, int);
extern (C) void gdk_window_set_background(_GdkDrawable *, _GdkColor *);
extern (C) void gdk_window_set_transient_for(_GdkDrawable *, _GdkDrawable *);
extern (C) void gdk_window_set_role(_GdkDrawable *, char *);
extern (C) void gdk_window_set_title(_GdkDrawable *, char *);
extern (C) void gdk_window_end_paint(_GdkDrawable *);
extern (C) void gdk_window_begin_paint_region(_GdkDrawable *, void *);
extern (C) void gdk_window_begin_paint_rect(_GdkDrawable *, _GdkRectangle *);
extern (C) void gdk_set_sm_client_id(char *);
extern (C) void gdk_window_set_geometry_hints(_GdkDrawable *, _GdkGeometry *, int);
extern (C) void gdk_window_set_urgency_hint(_GdkDrawable *, int);
extern (C) void gdk_window_set_skip_pager_hint(_GdkDrawable *, int);
extern (C) void gdk_window_set_skip_taskbar_hint(_GdkDrawable *, int);
extern (C) void gdk_window_set_modal_hint(_GdkDrawable *, int);
extern (C) void gdk_window_set_type_hint(_GdkDrawable *, int);
extern (C) void gdk_window_set_hints(_GdkDrawable *, int, int, int, int, int, int, int);
extern (C) _GdkDrawable * gdk_window_lookup_for_display(_GdkDisplay *, uint);
extern (C) _GdkDrawable * gdk_window_foreign_new_for_display(_GdkDisplay *, uint);
extern (C) _GdkDrawable * gdk_window_lookup(uint);
extern (C) _GdkDrawable * gdk_window_foreign_new(uint);
extern (C) int gdk_window_set_static_gravities(_GdkDrawable *, int);
extern (C) int gdk_window_get_state(_GdkDrawable *);
extern (C) int gdk_window_is_viewable(_GdkDrawable *);
extern (C) int gdk_window_is_visible(_GdkDrawable *);
extern (C) void gdk_window_merge_child_shapes(_GdkDrawable *);
extern (C) void gdk_window_set_child_shapes(_GdkDrawable *);
extern (C) void gdk_window_shape_combine_region(_GdkDrawable *, void *, int, int);
extern (C) void gdk_window_shape_combine_mask(_GdkDrawable *, _GdkDrawable *, int, int);
extern (C) void gdk_window_move_region(_GdkDrawable *, void *, int, int);
extern (C) void gdk_window_scroll(_GdkDrawable *, int, int);
extern (C) void gdk_window_remove_filter(_GdkDrawable *, _BCD_func__3886, void *);
extern (C) void gdk_window_add_filter(_GdkDrawable *, _BCD_func__3886, void *);
extern (C) void gdk_window_set_focus_on_map(_GdkDrawable *, int);
extern (C) void gdk_window_set_accept_focus(_GdkDrawable *, int);
extern (C) void gdk_window_set_override_redirect(_GdkDrawable *, int);
extern (C) void gdk_window_set_user_data(_GdkDrawable *, void *);
extern (C) void gdk_window_focus(_GdkDrawable *, uint);
extern (C) void gdk_window_lower(_GdkDrawable *);
extern (C) void gdk_window_raise(_GdkDrawable *);
extern (C) void gdk_window_clear_area_e(_GdkDrawable *, int, int, int, int);
extern (C) void gdk_window_clear_area(_GdkDrawable *, int, int, int, int);
extern (C) void gdk_window_clear(_GdkDrawable *);
extern (C) void gdk_window_reparent(_GdkDrawable *, _GdkDrawable *, int, int);
extern (C) void gdk_window_move_resize(_GdkDrawable *, int, int, int, int);
extern (C) void gdk_window_resize(_GdkDrawable *, int, int);
extern (C) void gdk_window_move(_GdkDrawable *, int, int);
extern (C) void gdk_window_show_unraised(_GdkDrawable *);
extern (C) void gdk_window_withdraw(_GdkDrawable *);
extern (C) void gdk_window_hide(_GdkDrawable *);
extern (C) void gdk_window_show(_GdkDrawable *);
extern (C) _GdkDrawable * gdk_window_at_pointer(int *, int *);
extern (C) int gdk_window_get_window_type(_GdkDrawable *);
extern (C) void gdk_window_destroy(_GdkDrawable *);
extern (C) _GdkDrawable * gdk_window_new(_GdkDrawable *, _GdkWindowAttr *, int);
extern (C) uint gdk_window_object_get_type();
extern (C) _GdkScreen * gdk_visual_get_screen(_GdkVisual *);
extern (C) _GList * gdk_list_visuals();
extern (C) void gdk_query_visual_types(int * *, int *);
extern (C) void gdk_query_depths(int * *, int *);
extern (C) _GdkVisual * gdk_visual_get_best_with_both(int, int);
extern (C) _GdkVisual * gdk_visual_get_best_with_type(int);
extern (C) _GdkVisual * gdk_visual_get_best_with_depth(int);
extern (C) _GdkVisual * gdk_visual_get_best();
extern (C) _GdkVisual * gdk_visual_get_system();
extern (C) int gdk_visual_get_best_type();
extern (C) int gdk_visual_get_best_depth();
extern (C) uint gdk_visual_get_type();
extern (C) int gdk_spawn_command_line_on_screen(_GdkScreen *, char *, _GError * *);
extern (C) int gdk_spawn_on_screen_with_pipes(_GdkScreen *, char *, char * *, char * *, int, _BCD_func__4216, void *, int *, int *, int *, int *, _GError * *);
extern (C) int gdk_spawn_on_screen(_GdkScreen *, char *, char * *, char * *, int, _BCD_func__4216, void *, int *, _GError * *);
extern (C) void gdk_selection_send_notify_for_display(_GdkDisplay *, uint, void *, void *, void *, uint);
extern (C) void gdk_selection_send_notify(uint, void *, void *, void *, uint);
extern (C) int gdk_selection_property_get(_GdkDrawable *, char * *, void * *, int *);
extern (C) void gdk_selection_convert(_GdkDrawable *, void *, void *, uint);
extern (C) _GdkDrawable * gdk_selection_owner_get_for_display(_GdkDisplay *, void *);
extern (C) int gdk_selection_owner_set_for_display(_GdkDisplay *, _GdkDrawable *, void *, uint, int);
extern (C) _GdkDrawable * gdk_selection_owner_get(void *);
extern (C) int gdk_selection_owner_set(_GdkDrawable *, void *, uint, int);
extern (C) double gdk_screen_get_resolution_libgtk_only(_GdkScreen *);
extern (C) void gdk_screen_set_resolution_libgtk_only(_GdkScreen *, double);
extern (C) void * gdk_screen_get_font_options_libgtk_only(_GdkScreen *);
extern (C) void gdk_screen_set_font_options_libgtk_only(_GdkScreen *, void *);
extern (C) int gdk_screen_get_setting(_GdkScreen *, char *, _GValue *);
extern (C) _GdkScreen * gdk_screen_get_default();
extern (C) void gdk_screen_broadcast_client_message(_GdkScreen *, _GdkEvent *);
extern (C) int gdk_screen_get_monitor_at_window(_GdkScreen *, _GdkDrawable *);
extern (C) int gdk_screen_get_monitor_at_point(_GdkScreen *, int, int);
extern (C) void gdk_screen_get_monitor_geometry(_GdkScreen *, int, _GdkRectangle *);
extern (C) int gdk_screen_get_n_monitors(_GdkScreen *);
extern (C) char * gdk_screen_make_display_name(_GdkScreen *);
extern (C) _GList * gdk_screen_get_toplevel_windows(_GdkScreen *);
extern (C) _GList * gdk_screen_list_visuals(_GdkScreen *);
extern (C) int gdk_screen_get_height_mm(_GdkScreen *);
extern (C) int gdk_screen_get_width_mm(_GdkScreen *);
extern (C) int gdk_screen_get_height(_GdkScreen *);
extern (C) int gdk_screen_get_width(_GdkScreen *);
extern (C) int gdk_screen_get_number(_GdkScreen *);
extern (C) _GdkDisplay * gdk_screen_get_display(_GdkScreen *);
extern (C) _GdkDrawable * gdk_screen_get_root_window(_GdkScreen *);
extern (C) _GdkVisual * gdk_screen_get_rgba_visual(_GdkScreen *);
extern (C) _GdkColormap * gdk_screen_get_rgba_colormap(_GdkScreen *);
extern (C) _GdkVisual * gdk_screen_get_rgb_visual(_GdkScreen *);
extern (C) _GdkColormap * gdk_screen_get_rgb_colormap(_GdkScreen *);
extern (C) _GdkVisual * gdk_screen_get_system_visual(_GdkScreen *);
extern (C) _GdkColormap * gdk_screen_get_system_colormap(_GdkScreen *);
extern (C) void gdk_screen_set_default_colormap(_GdkScreen *, _GdkColormap *);
extern (C) _GdkColormap * gdk_screen_get_default_colormap(_GdkScreen *);
extern (C) uint gdk_screen_get_type();
extern (C) void gdk_region_spans_intersect_foreach(void *, _GdkSpan *, int, int, _BCD_func__3713, void *);
extern (C) void gdk_region_xor(void *, void *);
extern (C) void gdk_region_subtract(void *, void *);
extern (C) void gdk_region_union(void *, void *);
extern (C) void gdk_region_intersect(void *, void *);
extern (C) void gdk_region_union_with_rect(void *, _GdkRectangle *);
extern (C) void gdk_region_shrink(void *, int, int);
extern (C) void gdk_region_offset(void *, int, int);
extern (C) int gdk_region_rect_in(void *, _GdkRectangle *);
extern (C) int gdk_region_point_in(void *, int, int);
extern (C) int gdk_region_equal(void *, void *);
extern (C) int gdk_region_empty(void *);
extern (C) void gdk_region_get_rectangles(void *, _GdkRectangle * *, int *);
extern (C) void gdk_region_get_clipbox(void *, _GdkRectangle *);
extern (C) void gdk_region_destroy(void *);
extern (C) void * gdk_region_rectangle(_GdkRectangle *);
extern (C) void * gdk_region_copy(void *);
extern (C) void * gdk_region_polygon(_GdkPoint *, int, int);
extern (C) void * gdk_region_new();
extern (C) void gdk_free_compound_text(char *);
extern (C) void gdk_free_text_list(char * *);
extern (C) int gdk_utf8_to_compound_text_for_display(_GdkDisplay *, char *, void * *, int *, char * *, int *);
extern (C) int gdk_string_to_compound_text_for_display(_GdkDisplay *, char *, void * *, int *, char * *, int *);
extern (C) char * gdk_utf8_to_string_target(char *);
extern (C) int gdk_text_property_to_utf8_list_for_display(_GdkDisplay *, void *, int, char *, int, char * * *);
extern (C) int gdk_text_property_to_text_list_for_display(_GdkDisplay *, void *, int, char *, int, char * * *);
extern (C) int gdk_string_to_compound_text(char *, void * *, int *, char * *, int *);
extern (C) int gdk_utf8_to_compound_text(char *, void * *, int *, char * *, int *);
extern (C) int gdk_text_property_to_utf8_list(void *, int, char *, int, char * * *);
extern (C) int gdk_text_property_to_text_list(void *, int, char *, int, char * * *);
extern (C) void gdk_property_delete(_GdkDrawable *, void *);
extern (C) void gdk_property_change(_GdkDrawable *, void *, void *, int, int, char *, int);
extern (C) int gdk_property_get(_GdkDrawable *, void *, void *, uint, uint, int, void * *, int *, int *, char * *);
extern (C) char * gdk_atom_name(void *);
extern (C) void * gdk_atom_intern(char *, int);
extern (C) _GdkDrawable * gdk_pixmap_lookup_for_display(_GdkDisplay *, uint);
extern (C) _GdkDrawable * gdk_pixmap_foreign_new_for_display(_GdkDisplay *, uint);
extern (C) _GdkDrawable * gdk_pixmap_lookup(uint);
extern (C) _GdkDrawable * gdk_pixmap_foreign_new(uint);
extern (C) _GdkDrawable * gdk_pixmap_colormap_create_from_xpm_d(_GdkDrawable *, _GdkColormap *, _GdkDrawable * *, _GdkColor *, char * *);
extern (C) _GdkDrawable * gdk_pixmap_create_from_xpm_d(_GdkDrawable *, _GdkDrawable * *, _GdkColor *, char * *);
extern (C) _GdkDrawable * gdk_pixmap_colormap_create_from_xpm(_GdkDrawable *, _GdkColormap *, _GdkDrawable * *, _GdkColor *, char *);
extern (C) _GdkDrawable * gdk_pixmap_create_from_xpm(_GdkDrawable *, _GdkDrawable * *, _GdkColor *, char *);
extern (C) _GdkDrawable * gdk_pixmap_create_from_data(_GdkDrawable *, char *, int, int, int, _GdkColor *, _GdkColor *);
extern (C) _GdkDrawable * gdk_bitmap_create_from_data(_GdkDrawable *, char *, int, int);
extern (C) _GdkDrawable * gdk_pixmap_new(_GdkDrawable *, int, int, int);
extern (C) uint gdk_pixmap_get_type();
extern (C) _PangoAttribute * gdk_pango_attr_embossed_new(int);
extern (C) _PangoAttribute * gdk_pango_attr_stipple_new(_GdkDrawable *);
extern (C) void * gdk_pango_layout_get_clip_region(void *, int, int, int *, int);
extern (C) void * gdk_pango_layout_line_get_clip_region(_PangoLayoutLine *, int, int, int *, int);
extern (C) void gdk_pango_context_set_colormap(void *, _GdkColormap *);
extern (C) void * gdk_pango_context_get();
extern (C) void * gdk_pango_context_get_for_screen(_GdkScreen *);
extern (C) void gdk_pango_renderer_set_override_color(_GdkPangoRenderer *, int, _GdkColor *);
extern (C) void gdk_pango_renderer_set_stipple(_GdkPangoRenderer *, int, _GdkDrawable *);
extern (C) void gdk_pango_renderer_set_gc(_GdkPangoRenderer *, _GdkGC *);
extern (C) void gdk_pango_renderer_set_drawable(_GdkPangoRenderer *, _GdkDrawable *);
extern (C) _PangoRenderer * gdk_pango_renderer_get_default(_GdkScreen *);
extern (C) _PangoRenderer * gdk_pango_renderer_new(_GdkScreen *);
extern (C) uint gdk_pango_renderer_get_type();
extern (C) _GSList * gdk_display_manager_list_displays(void *);
extern (C) void gdk_display_manager_set_default_display(void *, _GdkDisplay *);
extern (C) _GdkDisplay * gdk_display_manager_get_default_display(void *);
extern (C) void * gdk_display_manager_get();
extern (C) uint gdk_display_manager_get_type();
extern (C) uint gdk_unicode_to_keyval(uint);
extern (C) uint gdk_keyval_to_unicode(uint);
extern (C) int gdk_keyval_is_lower(uint);
extern (C) int gdk_keyval_is_upper(uint);
extern (C) uint gdk_keyval_to_lower(uint);
extern (C) uint gdk_keyval_to_upper(uint);
extern (C) void gdk_keyval_convert_case(uint, uint *, uint *);
extern (C) uint gdk_keyval_from_name(char *);
extern (C) char * gdk_keyval_name(uint);
extern (C) int gdk_keymap_get_direction(_GdkKeymap *);
extern (C) int gdk_keymap_get_entries_for_keycode(_GdkKeymap *, uint, _GdkKeymapKey * *, uint * *, int *);
extern (C) int gdk_keymap_get_entries_for_keyval(_GdkKeymap *, uint, _GdkKeymapKey * *, int *);
extern (C) int gdk_keymap_translate_keyboard_state(_GdkKeymap *, uint, int, int, uint *, int *, int *, int *);
extern (C) uint gdk_keymap_lookup_key(_GdkKeymap *, _GdkKeymapKey *);
extern (C) _GdkKeymap * gdk_keymap_get_for_display(_GdkDisplay *);
extern (C) _GdkKeymap * gdk_keymap_get_default();
extern (C) uint gdk_keymap_get_type();
extern (C) _GdkColormap * gdk_image_get_colormap(_GdkImage *);
extern (C) void gdk_image_set_colormap(_GdkImage *, _GdkColormap *);
extern (C) uint gdk_image_get_pixel(_GdkImage *, int, int);
extern (C) void gdk_image_put_pixel(_GdkImage *, int, int, uint);
extern (C) void gdk_image_unref(_GdkImage *);
extern (C) _GdkImage * gdk_image_ref(_GdkImage *);
extern (C) _GdkImage * gdk_image_get(_GdkDrawable *, int, int, int, int);
extern (C) _GdkImage * gdk_image_new(int, _GdkVisual *, int, int);
extern (C) uint gdk_image_get_type();
extern (C) _GdkDisplay * gdk_font_get_display(_GdkFont *);
extern (C) void gdk_string_extents(_GdkFont *, char *, int *, int *, int *, int *, int *);
extern (C) void gdk_text_extents_wc(_GdkFont *, uint *, int, int *, int *, int *, int *, int *);
extern (C) void gdk_text_extents(_GdkFont *, char *, int, int *, int *, int *, int *, int *);
extern (C) int gdk_char_height(_GdkFont *, char);
extern (C) int gdk_text_height(_GdkFont *, char *, int);
extern (C) int gdk_string_height(_GdkFont *, char *);
extern (C) int gdk_char_measure(_GdkFont *, char);
extern (C) int gdk_text_measure(_GdkFont *, char *, int);
extern (C) int gdk_string_measure(_GdkFont *, char *);
extern (C) int gdk_char_width_wc(_GdkFont *, uint);
extern (C) int gdk_char_width(_GdkFont *, char);
extern (C) int gdk_text_width_wc(_GdkFont *, uint *, int);
extern (C) int gdk_text_width(_GdkFont *, char *, int);
extern (C) int gdk_string_width(_GdkFont *, char *);
extern (C) _GdkFont * gdk_font_from_description(void *);
extern (C) _GdkFont * gdk_fontset_load(char *);
extern (C) _GdkFont * gdk_font_load(char *);
extern (C) _GdkFont * gdk_font_from_description_for_display(_GdkDisplay *, void *);
extern (C) _GdkFont * gdk_fontset_load_for_display(_GdkDisplay *, char *);
extern (C) _GdkFont * gdk_font_load_for_display(_GdkDisplay *, char *);
extern (C) int gdk_font_equal(_GdkFont *, _GdkFont *);
extern (C) int gdk_font_id(_GdkFont *);
extern (C) void gdk_font_unref(_GdkFont *);
extern (C) _GdkFont * gdk_font_ref(_GdkFont *);
extern (C) uint gdk_font_get_type();
extern (C) uint gdk_window_edge_get_type();
extern (C) uint gdk_gravity_get_type();
extern (C) uint gdk_wm_function_get_type();
extern (C) uint gdk_wm_decoration_get_type();
extern (C) uint gdk_window_type_hint_get_type();
extern (C) uint gdk_window_hints_get_type();
extern (C) uint gdk_window_attributes_type_get_type();
extern (C) uint gdk_window_type_get_type();
extern (C) uint gdk_window_class_get_type();
extern (C) uint gdk_visual_type_get_type();
extern (C) uint gdk_grab_status_get_type();
extern (C) uint gdk_status_get_type();
extern (C) uint gdk_input_condition_get_type();
extern (C) uint gdk_modifier_type_get_type();
extern (C) uint gdk_byte_order_get_type();
extern (C) uint gdk_rgb_dither_get_type();
extern (C) uint gdk_overlap_type_get_type();
extern (C) uint gdk_fill_rule_get_type();
extern (C) uint gdk_prop_mode_get_type();
extern (C) uint gdk_axis_use_get_type();
extern (C) uint gdk_input_mode_get_type();
extern (C) uint gdk_input_source_get_type();
extern (C) uint gdk_extension_mode_get_type();
extern (C) uint gdk_image_type_get_type();
extern (C) uint gdk_gc_values_mask_get_type();
extern (C) uint gdk_subwindow_mode_get_type();
extern (C) uint gdk_line_style_get_type();
extern (C) uint gdk_join_style_get_type();
extern (C) uint gdk_function_get_type();
extern (C) uint gdk_fill_get_type();
extern (C) uint gdk_cap_style_get_type();
extern (C) uint gdk_font_type_get_type();
extern (C) uint gdk_owner_change_get_type();
extern (C) uint gdk_setting_action_get_type();
extern (C) uint gdk_window_state_get_type();
extern (C) uint gdk_property_state_get_type();
extern (C) uint gdk_crossing_mode_get_type();
extern (C) uint gdk_notify_type_get_type();
extern (C) uint gdk_scroll_direction_get_type();
extern (C) uint gdk_visibility_state_get_type();
extern (C) uint gdk_event_mask_get_type();
extern (C) uint gdk_event_type_get_type();
extern (C) uint gdk_filter_return_get_type();
extern (C) uint gdk_drag_protocol_get_type();
extern (C) uint gdk_drag_action_get_type();
extern (C) uint gdk_cursor_type_get_type();
extern (C) void * gdk_drawable_get_visible_region(_GdkDrawable *);
extern (C) void * gdk_drawable_get_clip_region(_GdkDrawable *);
extern (C) _GdkImage * gdk_drawable_copy_to_image(_GdkDrawable *, _GdkImage *, int, int, int, int, int, int);
extern (C) _GdkImage * gdk_drawable_get_image(_GdkDrawable *, int, int, int, int);
extern (C) void gdk_draw_trapezoids(_GdkDrawable *, _GdkGC *, _GdkTrapezoid *, int);
extern (C) void gdk_draw_glyphs_transformed(_GdkDrawable *, _GdkGC *, _PangoMatrix *, void *, int, int, _PangoGlyphString *);
extern (C) void gdk_draw_layout_with_colors(_GdkDrawable *, _GdkGC *, int, int, void *, _GdkColor *, _GdkColor *);
extern (C) void gdk_draw_layout_line_with_colors(_GdkDrawable *, _GdkGC *, int, int, _PangoLayoutLine *, _GdkColor *, _GdkColor *);
extern (C) void gdk_draw_layout(_GdkDrawable *, _GdkGC *, int, int, void *);
extern (C) void gdk_draw_layout_line(_GdkDrawable *, _GdkGC *, int, int, _PangoLayoutLine *);
extern (C) void gdk_draw_glyphs(_GdkDrawable *, _GdkGC *, void *, int, int, _PangoGlyphString *);
extern (C) void gdk_draw_pixbuf(_GdkDrawable *, _GdkGC *, void *, int, int, int, int, int, int, int, int, int);
extern (C) void gdk_draw_lines(_GdkDrawable *, _GdkGC *, _GdkPoint *, int);
extern (C) void gdk_draw_segments(_GdkDrawable *, _GdkGC *, _GdkSegment *, int);
extern (C) void gdk_draw_points(_GdkDrawable *, _GdkGC *, _GdkPoint *, int);
extern (C) void gdk_draw_image(_GdkDrawable *, _GdkGC *, _GdkImage *, int, int, int, int, int, int);
extern (C) void gdk_draw_drawable(_GdkDrawable *, _GdkGC *, _GdkDrawable *, int, int, int, int, int, int);
extern (C) void gdk_draw_text_wc(_GdkDrawable *, _GdkFont *, _GdkGC *, int, int, uint *, int);
extern (C) void gdk_draw_text(_GdkDrawable *, _GdkFont *, _GdkGC *, int, int, char *, int);
extern (C) void gdk_draw_string(_GdkDrawable *, _GdkFont *, _GdkGC *, int, int, char *);
extern (C) void gdk_draw_polygon(_GdkDrawable *, _GdkGC *, int, _GdkPoint *, int);
extern (C) void gdk_draw_arc(_GdkDrawable *, _GdkGC *, int, int, int, int, int, int, int);
extern (C) void gdk_draw_rectangle(_GdkDrawable *, _GdkGC *, int, int, int, int, int);
extern (C) void gdk_draw_line(_GdkDrawable *, _GdkGC *, int, int, int, int);
extern (C) void gdk_draw_point(_GdkDrawable *, _GdkGC *, int, int);
extern (C) void gdk_drawable_unref(_GdkDrawable *);
extern (C) _GdkDrawable * gdk_drawable_ref(_GdkDrawable *);
extern (C) _GdkDisplay * gdk_drawable_get_display(_GdkDrawable *);
extern (C) _GdkScreen * gdk_drawable_get_screen(_GdkDrawable *);
extern (C) int gdk_drawable_get_depth(_GdkDrawable *);
extern (C) _GdkVisual * gdk_drawable_get_visual(_GdkDrawable *);
extern (C) _GdkColormap * gdk_drawable_get_colormap(_GdkDrawable *);
extern (C) void gdk_drawable_set_colormap(_GdkDrawable *, _GdkColormap *);
extern (C) void gdk_drawable_get_size(_GdkDrawable *, int *, int *);
extern (C) void * gdk_drawable_get_data(_GdkDrawable *, char *);
extern (C) void gdk_drawable_set_data(_GdkDrawable *, char *, void *, _BCD_func__4216);
extern (C) uint gdk_drawable_get_type();
extern (C) _GdkScreen * gdk_gc_get_screen(_GdkGC *);
extern (C) void gdk_gc_set_rgb_bg_color(_GdkGC *, _GdkColor *);
extern (C) void gdk_gc_set_rgb_fg_color(_GdkGC *, _GdkColor *);
extern (C) _GdkColormap * gdk_gc_get_colormap(_GdkGC *);
extern (C) void gdk_gc_set_colormap(_GdkGC *, _GdkColormap *);
extern (C) void gdk_gc_copy(_GdkGC *, _GdkGC *);
extern (C) void gdk_gc_offset(_GdkGC *, int, int);
extern (C) void gdk_gc_set_dashes(_GdkGC *, int, char *, int);
extern (C) void gdk_gc_set_line_attributes(_GdkGC *, int, int, int, int);
extern (C) void gdk_gc_set_exposures(_GdkGC *, int);
extern (C) void gdk_gc_set_subwindow(_GdkGC *, int);
extern (C) void gdk_gc_set_clip_region(_GdkGC *, void *);
extern (C) void gdk_gc_set_clip_rectangle(_GdkGC *, _GdkRectangle *);
extern (C) void gdk_gc_set_clip_mask(_GdkGC *, _GdkDrawable *);
extern (C) void gdk_gc_set_clip_origin(_GdkGC *, int, int);
extern (C) void gdk_gc_set_ts_origin(_GdkGC *, int, int);
extern (C) void gdk_gc_set_stipple(_GdkGC *, _GdkDrawable *);
extern (C) void gdk_gc_set_tile(_GdkGC *, _GdkDrawable *);
extern (C) void gdk_gc_set_fill(_GdkGC *, int);
extern (C) void gdk_gc_set_function(_GdkGC *, int);
extern (C) void gdk_gc_set_font(_GdkGC *, _GdkFont *);
extern (C) void gdk_gc_set_background(_GdkGC *, _GdkColor *);
extern (C) void gdk_gc_set_foreground(_GdkGC *, _GdkColor *);
extern (C) void gdk_gc_set_values(_GdkGC *, _GdkGCValues *, int);
extern (C) void gdk_gc_get_values(_GdkGC *, _GdkGCValues *);
extern (C) void gdk_gc_unref(_GdkGC *);
extern (C) _GdkGC * gdk_gc_ref(_GdkGC *);
extern (C) _GdkGC * gdk_gc_new_with_values(_GdkDrawable *, _GdkGCValues *, int);
extern (C) _GdkGC * gdk_gc_new(_GdkDrawable *);
extern (C) uint gdk_gc_get_type();
extern (C) void gdk_display_store_clipboard(_GdkDisplay *, _GdkDrawable *, uint, void * *, int);
extern (C) int gdk_display_supports_clipboard_persistence(_GdkDisplay *);
extern (C) int gdk_display_request_selection_notification(_GdkDisplay *, void *);
extern (C) int gdk_display_supports_selection_notification(_GdkDisplay *);
extern (C) _GdkDrawable * gdk_display_get_default_group(_GdkDisplay *);
extern (C) void gdk_display_get_maximal_cursor_size(_GdkDisplay *, uint *, uint *);
extern (C) uint gdk_display_get_default_cursor_size(_GdkDisplay *);
extern (C) int gdk_display_supports_cursor_color(_GdkDisplay *);
extern (C) int gdk_display_supports_cursor_alpha(_GdkDisplay *);
extern (C) _GdkDisplay * gdk_display_open_default_libgtk_only();
extern (C) _GdkDisplayPointerHooks * gdk_display_set_pointer_hooks(_GdkDisplay *, _GdkDisplayPointerHooks *);
extern (C) void gdk_display_warp_pointer(_GdkDisplay *, _GdkScreen *, int, int);
extern (C) _GdkDrawable * gdk_display_get_window_at_pointer(_GdkDisplay *, int *, int *);
extern (C) void gdk_display_get_pointer(_GdkDisplay *, _GdkScreen * *, int *, int *, int *);
extern (C) _GdkDevice * gdk_display_get_core_pointer(_GdkDisplay *);
extern (C) _GdkDisplay * gdk_display_get_default();
extern (C) void gdk_display_set_double_click_distance(_GdkDisplay *, uint);
extern (C) void gdk_display_set_double_click_time(_GdkDisplay *, uint);
extern (C) void gdk_display_add_client_message_filter(_GdkDisplay *, void *, _BCD_func__3886, void *);
extern (C) void gdk_display_put_event(_GdkDisplay *, _GdkEvent *);
extern (C) _GdkEvent * gdk_display_peek_event(_GdkDisplay *);
extern (C) _GdkEvent * gdk_display_get_event(_GdkDisplay *);
extern (C) _GList * gdk_display_list_devices(_GdkDisplay *);
extern (C) void gdk_display_close(_GdkDisplay *);
extern (C) void gdk_display_flush(_GdkDisplay *);
extern (C) void gdk_display_sync(_GdkDisplay *);
extern (C) void gdk_display_beep(_GdkDisplay *);
extern (C) int gdk_display_pointer_is_grabbed(_GdkDisplay *);
extern (C) void gdk_display_keyboard_ungrab(_GdkDisplay *, uint);
extern (C) void gdk_display_pointer_ungrab(_GdkDisplay *, uint);
extern (C) _GdkScreen * gdk_display_get_default_screen(_GdkDisplay *);
extern (C) _GdkScreen * gdk_display_get_screen(_GdkDisplay *, int);
extern (C) int gdk_display_get_n_screens(_GdkDisplay *);
extern (C) char * gdk_display_get_name(_GdkDisplay *);
extern (C) _GdkDisplay * gdk_display_open(char *);
extern (C) uint gdk_display_get_type();
extern (C) int gdk_setting_get(char *, _GValue *);
extern (C) void gdk_add_client_message_filter(void *, _BCD_func__3886, void *);
extern (C) int gdk_get_show_events();
extern (C) void gdk_set_show_events(int);
extern (C) _GdkScreen * gdk_event_get_screen(_GdkEvent *);
extern (C) void gdk_event_set_screen(_GdkEvent *, _GdkScreen *);
extern (C) void gdk_event_handler_set(_BCD_func__3887, void *, _BCD_func__4216);
extern (C) int gdk_event_get_axis(_GdkEvent *, int, double *);
extern (C) int gdk_event_get_root_coords(_GdkEvent *, double *, double *);
extern (C) int gdk_event_get_coords(_GdkEvent *, double *, double *);
extern (C) int gdk_event_get_state(_GdkEvent *, int *);
extern (C) uint gdk_event_get_time(_GdkEvent *);
extern (C) void gdk_event_free(_GdkEvent *);
extern (C) _GdkEvent * gdk_event_copy(_GdkEvent *);
extern (C) _GdkEvent * gdk_event_new(int);
extern (C) void gdk_event_put(_GdkEvent *);
extern (C) _GdkEvent * gdk_event_get_graphics_expose(_GdkDrawable *);
extern (C) _GdkEvent * gdk_event_peek();
extern (C) _GdkEvent * gdk_event_get();
extern (C) int gdk_events_pending();
extern (C) uint gdk_event_get_type();
extern (C) _GdkDevice * gdk_device_get_core_pointer();
extern (C) void gdk_input_set_extension_events(_GdkDrawable *, int, int);
extern (C) int gdk_device_get_axis(_GdkDevice *, double *, int, double *);
extern (C) void gdk_device_free_history(_GdkTimeCoord * *, int);
extern (C) int gdk_device_get_history(_GdkDevice *, _GdkDrawable *, uint, uint, _GdkTimeCoord * * *, int *);
extern (C) void gdk_device_get_state(_GdkDevice *, _GdkDrawable *, double *, int *);
extern (C) void gdk_device_set_axis_use(_GdkDevice *, uint, int);
extern (C) void gdk_device_set_key(_GdkDevice *, uint, uint, int);
extern (C) int gdk_device_set_mode(_GdkDevice *, int);
extern (C) void gdk_device_set_source(_GdkDevice *, int);
extern (C) _GList * gdk_devices_list();
extern (C) uint gdk_device_get_type();
extern (C) int gdk_drag_drop_succeeded(_GdkDragContext *);
extern (C) void gdk_drag_abort(_GdkDragContext *, uint);
extern (C) void gdk_drag_drop(_GdkDragContext *, uint);
extern (C) int gdk_drag_motion(_GdkDragContext *, _GdkDrawable *, int, int, int, int, int, uint);
extern (C) void gdk_drag_find_window(_GdkDragContext *, _GdkDrawable *, int, int, _GdkDrawable * *, int *);
extern (C) uint gdk_drag_get_protocol(uint, int *);
extern (C) void gdk_drag_find_window_for_screen(_GdkDragContext *, _GdkDrawable *, _GdkScreen *, int, int, _GdkDrawable * *, int *);
extern (C) uint gdk_drag_get_protocol_for_display(_GdkDisplay *, uint, int *);
extern (C) _GdkDragContext * gdk_drag_begin(_GdkDrawable *, _GList *);
extern (C) void * gdk_drag_get_selection(_GdkDragContext *);
extern (C) void gdk_drop_finish(_GdkDragContext *, int, uint);
extern (C) void gdk_drop_reply(_GdkDragContext *, int, uint);
extern (C) void gdk_drag_status(_GdkDragContext *, int, uint);
extern (C) void gdk_drag_context_unref(_GdkDragContext *);
extern (C) void gdk_drag_context_ref(_GdkDragContext *);
extern (C) _GdkDragContext * gdk_drag_context_new();
extern (C) uint gdk_drag_context_get_type();
extern (C) void * gdk_cursor_get_image(_GdkCursor *);
extern (C) _GdkCursor * gdk_cursor_new_from_name(_GdkDisplay *, char *);
extern (C) void gdk_cursor_unref(_GdkCursor *);
extern (C) _GdkCursor * gdk_cursor_ref(_GdkCursor *);
extern (C) _GdkDisplay * gdk_cursor_get_display(_GdkCursor *);
extern (C) _GdkCursor * gdk_cursor_new_from_pixbuf(_GdkDisplay *, void *, int, int);
extern (C) _GdkCursor * gdk_cursor_new_from_pixmap(_GdkDrawable *, _GdkDrawable *, _GdkColor *, _GdkColor *, int, int);
extern (C) _GdkCursor * gdk_cursor_new(int);
extern (C) _GdkCursor * gdk_cursor_new_for_display(_GdkDisplay *, int);
extern (C) uint gdk_cursor_get_type();
extern (C) void gdk_cairo_region(void *, void *);
extern (C) void gdk_cairo_rectangle(void *, _GdkRectangle *);
extern (C) void gdk_cairo_set_source_pixbuf(void *, void *, double, double);
extern (C) void gdk_cairo_set_source_color(void *, _GdkColor *);
extern (C) void * gdk_cairo_create(_GdkDrawable *);
extern (C) void * gdk_pixbuf_get_from_image(void *, _GdkImage *, _GdkColormap *, int, int, int, int, int, int);
extern (C) void * gdk_pixbuf_get_from_drawable(void *, _GdkDrawable *, _GdkColormap *, int, int, int, int, int, int);
extern (C) void gdk_pixbuf_render_pixmap_and_mask(void *, _GdkDrawable * *, _GdkDrawable * *, int);
extern (C) void gdk_pixbuf_render_pixmap_and_mask_for_colormap(void *, _GdkColormap *, _GdkDrawable * *, _GdkDrawable * *, int);
extern (C) void gdk_pixbuf_render_to_drawable_alpha(void *, _GdkDrawable *, int, int, int, int, int, int, int, int, int, int, int);
extern (C) void gdk_pixbuf_render_to_drawable(void *, _GdkDrawable *, _GdkGC *, int, int, int, int, int, int, int, int, int);
extern (C) void gdk_pixbuf_render_threshold_alpha(void *, _GdkDrawable *, int, int, int, int, int, int, int);
extern (C) uint gdk_pixbuf_rotation_get_type();
extern (C) uint gdk_interp_type_get_type();
extern (C) uint gdk_pixbuf_error_get_type();
extern (C) uint gdk_colorspace_get_type();
extern (C) uint gdk_pixbuf_alpha_mode_get_type();
extern (C) void * gdk_pixbuf_loader_get_format(_GdkPixbufLoader *);
extern (C) int gdk_pixbuf_loader_close(_GdkPixbufLoader *, _GError * *);
extern (C) void * gdk_pixbuf_loader_get_animation(_GdkPixbufLoader *);
extern (C) void * gdk_pixbuf_loader_get_pixbuf(_GdkPixbufLoader *);
extern (C) int gdk_pixbuf_loader_write(_GdkPixbufLoader *, char *, uint, _GError * *);
extern (C) void gdk_pixbuf_loader_set_size(_GdkPixbufLoader *, int, int);
extern (C) _GdkPixbufLoader * gdk_pixbuf_loader_new_with_mime_type(char *, _GError * *);
extern (C) _GdkPixbufLoader * gdk_pixbuf_loader_new_with_type(char *, _GError * *);
extern (C) _GdkPixbufLoader * gdk_pixbuf_loader_new();
extern (C) uint gdk_pixbuf_loader_get_type();
extern (C) void * gdk_pixbuf_get_file_info(char *, int *, int *);
extern (C) char * gdk_pixbuf_format_get_license(void *);
extern (C) void gdk_pixbuf_format_set_disabled(void *, int);
extern (C) int gdk_pixbuf_format_is_disabled(void *);
extern (C) int gdk_pixbuf_format_is_scalable(void *);
extern (C) int gdk_pixbuf_format_is_writable(void *);
extern (C) char * * gdk_pixbuf_format_get_extensions(void *);
extern (C) char * * gdk_pixbuf_format_get_mime_types(void *);
extern (C) char * gdk_pixbuf_format_get_description(void *);
extern (C) char * gdk_pixbuf_format_get_name(void *);
extern (C) _GSList * gdk_pixbuf_get_formats();
extern (C) void gdk_pixbuf_simple_anim_add_frame(void *, void *);
extern (C) void * gdk_pixbuf_simple_anim_new(int, int, float);
extern (C) uint gdk_pixbuf_simple_anim_iter_get_type();
extern (C) uint gdk_pixbuf_simple_anim_get_type();
extern (C) int gdk_pixbuf_animation_iter_advance(void *, _GTimeVal *);
extern (C) int gdk_pixbuf_animation_iter_on_currently_loading_frame(void *);
extern (C) void * gdk_pixbuf_animation_iter_get_pixbuf(void *);
extern (C) int gdk_pixbuf_animation_iter_get_delay_time(void *);
extern (C) uint gdk_pixbuf_animation_iter_get_type();
extern (C) void * gdk_pixbuf_animation_get_iter(void *, _GTimeVal *);
extern (C) void * gdk_pixbuf_animation_get_static_image(void *);
extern (C) int gdk_pixbuf_animation_is_static_image(void *);
extern (C) int gdk_pixbuf_animation_get_height(void *);
extern (C) int gdk_pixbuf_animation_get_width(void *);
extern (C) void gdk_pixbuf_animation_unref(void *);
extern (C) void * gdk_pixbuf_animation_ref(void *);
extern (C) void * gdk_pixbuf_animation_new_from_file(char *, _GError * *);
extern (C) uint gdk_pixbuf_animation_get_type();
extern (C) void * gdk_pixbuf_flip(void *, int);
extern (C) void * gdk_pixbuf_rotate_simple(void *, int);
extern (C) void * gdk_pixbuf_composite_color_simple(void *, int, int, int, int, int, uint, uint);
extern (C) void * gdk_pixbuf_scale_simple(void *, int, int, int);
extern (C) void gdk_pixbuf_composite_color(void *, void *, int, int, int, int, double, double, double, double, int, int, int, int, int, uint, uint);
extern (C) void gdk_pixbuf_composite(void *, void *, int, int, int, int, double, double, double, double, int, int);
extern (C) void gdk_pixbuf_scale(void *, void *, int, int, int, int, double, double, double, double, int);
extern (C) char * gdk_pixbuf_get_option(void *, char *);
extern (C) void gdk_pixbuf_saturate_and_pixelate(void *, void *, float, int);
extern (C) void gdk_pixbuf_copy_area(void *, int, int, int, int, void *, int, int);
extern (C) void * gdk_pixbuf_add_alpha(void *, int, char, char, char);
extern (C) int gdk_pixbuf_save_to_bufferv(void *, char * *, uint *, char *, char * *, char * *, _GError * *);
extern (C) int gdk_pixbuf_save_to_buffer(void *, char * *, uint *, char *, _GError * *, ...);
extern (C) int gdk_pixbuf_save_to_callbackv(void *, _BCD_func__4300, void *, char *, char * *, char * *, _GError * *);
extern (C) int gdk_pixbuf_save_to_callback(void *, _BCD_func__4300, void *, char *, _GError * *, ...);
extern (C) int gdk_pixbuf_savev(void *, char *, char *, char * *, char * *, _GError * *);
extern (C) int gdk_pixbuf_save(void *, char *, char *, _GError * *, ...);
extern (C) void gdk_pixbuf_fill(void *, uint);
extern (C) void * gdk_pixbuf_new_from_inline(int, char *, int, _GError * *);
extern (C) void * gdk_pixbuf_new_from_xpm_data(char * *);
extern (C) void * gdk_pixbuf_new_from_data(char *, int, int, int, int, int, int, _BCD_func__4303, void *);
extern (C) void * gdk_pixbuf_new_from_file_at_scale(char *, int, int, int, _GError * *);
extern (C) void * gdk_pixbuf_new_from_file_at_size(char *, int, int, _GError * *);
extern (C) void * gdk_pixbuf_new_from_file(char *, _GError * *);
extern (C) void * gdk_pixbuf_new_subpixbuf(void *, int, int, int, int);
extern (C) void * gdk_pixbuf_copy(void *);
extern (C) void * gdk_pixbuf_new(int, int, int, int, int);
extern (C) int gdk_pixbuf_get_rowstride(void *);
extern (C) int gdk_pixbuf_get_height(void *);
extern (C) int gdk_pixbuf_get_width(void *);
extern (C) char * gdk_pixbuf_get_pixels(void *);
extern (C) int gdk_pixbuf_get_bits_per_sample(void *);
extern (C) int gdk_pixbuf_get_has_alpha(void *);
extern (C) int gdk_pixbuf_get_n_channels(void *);
extern (C) int gdk_pixbuf_get_colorspace(void *);
extern (C) void gdk_pixbuf_unref(void *);
extern (C) void * gdk_pixbuf_ref(void *);
extern (C) uint gdk_pixbuf_get_type();
extern (C) uint gdk_pixbuf_error_quark();
extern (C) int gdk_rgb_colormap_ditherable(_GdkColormap *);
extern (C) int gdk_rgb_ditherable();
extern (C) _GdkVisual * gdk_rgb_get_visual();
extern (C) _GdkColormap * gdk_rgb_get_colormap();
extern (C) void gdk_rgb_set_min_colors(int);
extern (C) void gdk_rgb_set_install(int);
extern (C) void gdk_rgb_set_verbose(int);
extern (C) void gdk_rgb_cmap_free(_GdkRgbCmap *);
extern (C) _GdkRgbCmap * gdk_rgb_cmap_new(uint *, int);
extern (C) void gdk_draw_indexed_image(_GdkDrawable *, _GdkGC *, int, int, int, int, int, char *, int, _GdkRgbCmap *);
extern (C) void gdk_draw_gray_image(_GdkDrawable *, _GdkGC *, int, int, int, int, int, char *, int);
extern (C) void gdk_draw_rgb_32_image_dithalign(_GdkDrawable *, _GdkGC *, int, int, int, int, int, char *, int, int, int);
extern (C) void gdk_draw_rgb_32_image(_GdkDrawable *, _GdkGC *, int, int, int, int, int, char *, int);
extern (C) void gdk_draw_rgb_image_dithalign(_GdkDrawable *, _GdkGC *, int, int, int, int, int, char *, int, int, int);
extern (C) void gdk_draw_rgb_image(_GdkDrawable *, _GdkGC *, int, int, int, int, int, char *, int);
extern (C) void gdk_rgb_find_color(_GdkColormap *, _GdkColor *);
extern (C) void gdk_rgb_gc_set_background(_GdkGC *, uint);
extern (C) void gdk_rgb_gc_set_foreground(_GdkGC *, uint);
extern (C) uint gdk_rgb_xpixel_from_rgb(uint);
extern (C) void gdk_rgb_init();
extern (C) void gdk_colors_free(_GdkColormap *, uint *, int, uint);
extern (C) int gdk_colors_alloc(_GdkColormap *, int, uint *, int, uint *, int);
extern (C) int gdk_color_change(_GdkColormap *, _GdkColor *);
extern (C) int gdk_color_alloc(_GdkColormap *, _GdkColor *);
extern (C) int gdk_color_black(_GdkColormap *, _GdkColor *);
extern (C) int gdk_color_white(_GdkColormap *, _GdkColor *);
extern (C) void gdk_colors_store(_GdkColormap *, _GdkColor *, int);
extern (C) uint gdk_color_get_type();
extern (C) int gdk_color_equal(_GdkColor *, _GdkColor *);
extern (C) uint gdk_color_hash(_GdkColor *);
extern (C) int gdk_color_parse(char *, _GdkColor *);
extern (C) void gdk_color_free(_GdkColor *);
extern (C) _GdkColor * gdk_color_copy(_GdkColor *);
extern (C) _GdkVisual * gdk_colormap_get_visual(_GdkColormap *);
extern (C) void gdk_colormap_query_color(_GdkColormap *, uint, _GdkColor *);
extern (C) void gdk_colormap_free_colors(_GdkColormap *, _GdkColor *, int);
extern (C) int gdk_colormap_alloc_color(_GdkColormap *, _GdkColor *, int, int);
extern (C) int gdk_colormap_alloc_colors(_GdkColormap *, _GdkColor *, int, int, int, int *);
extern (C) void gdk_colormap_change(_GdkColormap *, int);
extern (C) int gdk_colormap_get_system_size();
extern (C) _GdkScreen * gdk_colormap_get_screen(_GdkColormap *);
extern (C) _GdkColormap * gdk_colormap_get_system();
extern (C) void gdk_colormap_unref(_GdkColormap *);
extern (C) _GdkColormap * gdk_colormap_ref(_GdkColormap *);
extern (C) _GdkColormap * gdk_colormap_new(_GdkVisual *, int);
extern (C) uint gdk_colormap_get_type();
alias void function(void *) _BCD_func__4157;
alias char * function(void *) _BCD_func__4158;
alias int function(void *) _BCD_func__899;
alias int function(void *, long *, int) _BCD_func__901;
alias int function(void *, char *, uint) _BCD_func__903;
alias int function(void *, char *, uint) _BCD_func__905;
alias int function(void * *, char *) _BCD_func__4217;
alias int function(char *, char * * *, uint *) _BCD_func__4218;
alias int function(void *, char *, char *, char *, char *) _BCD_func__4219;
alias int function(void *, void *, void *) _BCD_func__4506;
alias void * function(void *) _BCD_func__4527;
alias int function(_PangoAttribute *, void *) _BCD_func__4528;
alias void function(void *, uint, uint, _GInterfaceInfo *) _BCD_func__4627;
alias void function(void *, uint, _GTypeInfo *, _GTypeValueTable *) _BCD_func__4628;
alias void function(void *) _BCD_func__4629;
alias void function(void *, _GObject *, int) _BCD_func__4773;
alias void function(void *, _GObject *) _BCD_func__4777;
alias void function(_GObject *) _BCD_func__4778;
alias void function(_GObject *, uint, _GValue *, _GParamSpec *) _BCD_func__4779;
alias void function(_GObject *, uint, _GValue *, _GParamSpec *) _BCD_func__4780;
alias int function(_GSignalInvocationHint *, _GValue *, _GValue *, void *) _BCD_func__4805;
alias int function(_GSignalInvocationHint *, uint, _GValue *, void *) _BCD_func__4806;
alias void function(_GClosure *, _GValue *, uint, _GValue *, void *, void *) _BCD_func__4807;
alias void function(void *, _GClosure *) _BCD_func__4826;
alias void function(_GValue *, _GValue *) _BCD_func__4884;
alias void * function(void *) _BCD_func__4912;
alias void function(void *, void *) _BCD_func__4916;
alias int function(void *, _GTypeClass *) _BCD_func__4917;
alias void function(_GTypeInstance *, void *) _BCD_func__4918;
alias int function(void *, void *, void *) _BCD_func__4972;
alias void function(_GScanner *, char *, int) _BCD_func__4986;
alias void function(void *, void *, void *, _GError * *) _BCD_func__5069;
alias int function(void *, void *, void *, _GError * *) _BCD_func__5070;
alias int function(char *, char *, void *, _GError * *) _BCD_func__5071;
alias void * function(void *, void *) _BCD_func__5083;
alias void function(_GNode *, void *) _BCD_func__5084;
alias int function(_GNode *, void *) _BCD_func__5085;
alias void function(char *) _BCD_func__5093;
alias void function(char *, int, char *, void *) _BCD_func__5095;
alias int function(_GIOChannel *, int, void *) _BCD_func__5110;
alias int function(_GPollFD *, uint, int) _BCD_func__5172;
alias void function(int, int, void *) _BCD_func__5178;
alias int function(void *) _BCD_func__5179;
alias void function(_GHookList *, _GHook *) _BCD_func__5214;
alias int function(_GHook *, void *) _BCD_func__5215;
alias void function(_GHook *, void *) _BCD_func__5216;
alias int function(_GHook *, _GHook *) _BCD_func__5217;
alias void function(uint, void *, void *) _BCD_func__5251;
alias int function(char *, char *, uint) _BCD_func__5254;
alias char * function(void *) _BCD_func__5255;
alias char * function(char *, void *) _BCD_func__5375;
alias void function(void *, void *, void *) _BCD_func__5376;
alias uint function(void *) _BCD_func__5377;
alias int function(void *, void *) _BCD_func__5378;
alias int function(void *, void *, void *) _BCD_func__5379;
alias int function(void *, void *) _BCD_func__5380;
alias int function(void *, char *, uint) _BCD_func__5438;
alias int function(void *, char *, uint) _BCD_func__5439;
struct _GdkWindowObjectClass {
_GdkDrawableClass parent_class;
}
struct _GdkWindowObject {
_GdkDrawable parent_instance;
_GdkDrawable * impl;
_GdkWindowObject * parent;
void * user_data;
int x;
int y;
int extension_events;
_GList * filters;
_GList * children;
_GdkColor bg_color;
_GdkDrawable * bg_pixmap;
_GSList * paint_stack;
void * update_area;
uint update_freeze_count;
char window_type;
char depth;
char resize_count;
int state;
uint guffaw_gravity;
uint input_only;
uint modal_hint;
uint destroyed;
uint accept_focus;
uint focus_on_map;
int event_mask;
}
struct _GdkPointerHooks {
_BCD_func__5904 get_pointer;
_BCD_func__5905 window_at_pointer;
}
struct _GdkWindowAttr {
char * title;
int event_mask;
int x;
int y;
int width;
int height;
int wclass;
_GdkVisual * visual;
_GdkColormap * colormap;
int window_type;
_GdkCursor * cursor;
char * wmclass_name;
char * wmclass_class;
int override_redirect;
}
struct _GdkGeometry {
int min_width;
int min_height;
int max_width;
int max_height;
int base_width;
int base_height;
int width_inc;
int height_inc;
double min_aspect;
double max_aspect;
int win_gravity;
}
struct _GdkScreenClass {
_GObjectClass parent_class;
_BCD_func__5909 size_changed;
}
struct _GdkPixmapObjectClass {
_GdkDrawableClass parent_class;
}
struct _GdkPixmapObject {
_GdkDrawable parent_instance;
_GdkDrawable * impl;
int depth;
}
struct _GdkPangoAttrEmbossed {
_PangoAttribute attr;
int embossed;
}
struct _GdkPangoAttrStipple {
_PangoAttribute attr;
_GdkDrawable * stipple;
}
struct _GdkPangoRendererClass {
_PangoRendererClass parent_class;
}
struct _GdkPangoRenderer {
_PangoRenderer parent_instance;
void * priv;
}
struct _GdkDisplayManagerClass {
_GObjectClass parent_class;
_BCD_func__5917 display_opened;
}
struct _GdkKeymapClass {
_GObjectClass parent_class;
_BCD_func__5919 direction_changed;
_BCD_func__5919 keys_changed;
}
struct _GdkKeymap {
_GObject parent_instance;
_GdkDisplay * display;
}
struct _GdkKeymapKey {
uint keycode;
int group;
int level;
}
struct _GdkImageClass {
_GObjectClass parent_class;
}
struct _GdkTrapezoid {
double y1;
double x11;
double x21;
double y2;
double x12;
double x22;
}
struct _GdkDrawableClass {
_GObjectClass parent_class;
_BCD_func__5925 create_gc;
_BCD_func__5926 draw_rectangle;
_BCD_func__5927 draw_arc;
_BCD_func__5928 draw_polygon;
_BCD_func__5929 draw_text;
_BCD_func__5930 draw_text_wc;
_BCD_func__5931 draw_drawable;
_BCD_func__5932 draw_points;
_BCD_func__5933 draw_segments;
_BCD_func__5932 draw_lines;
_BCD_func__5934 draw_glyphs;
_BCD_func__5935 draw_image;
_BCD_func__5936 get_depth;
_BCD_func__5937 get_size;
_BCD_func__5938 set_colormap;
_BCD_func__5939 get_colormap;
_BCD_func__5940 get_visual;
_BCD_func__5941 get_screen;
_BCD_func__5942 get_image;
_BCD_func__5943 get_clip_region;
_BCD_func__5943 get_visible_region;
_BCD_func__5944 get_composite_drawable;
_BCD_func__5945 draw_pixbuf;
_BCD_func__5946 _copy_to_image;
_BCD_func__5947 draw_glyphs_transformed;
_BCD_func__5948 draw_trapezoids;
_BCD_func__5949 ref_cairo_surface;
_BCD_func__4827 _gdk_reserved4;
_BCD_func__4827 _gdk_reserved5;
_BCD_func__4827 _gdk_reserved6;
_BCD_func__4827 _gdk_reserved7;
_BCD_func__4827 _gdk_reserved9;
_BCD_func__4827 _gdk_reserved10;
_BCD_func__4827 _gdk_reserved11;
_BCD_func__4827 _gdk_reserved12;
_BCD_func__4827 _gdk_reserved13;
_BCD_func__4827 _gdk_reserved14;
_BCD_func__4827 _gdk_reserved15;
_BCD_func__4827 _gdk_reserved16;
}
struct _GdkGCClass {
_GObjectClass parent_class;
_BCD_func__5951 get_values;
_BCD_func__5952 set_values;
_BCD_func__5953 set_dashes;
_BCD_func__4827 _gdk_reserved1;
_BCD_func__4827 _gdk_reserved2;
_BCD_func__4827 _gdk_reserved3;
_BCD_func__4827 _gdk_reserved4;
}
struct _GdkGCValues {
_GdkColor foreground;
_GdkColor background;
_GdkFont * font;
int function_;
int fill;
_GdkDrawable * tile;
_GdkDrawable * stipple;
_GdkDrawable * clip_mask;
int subwindow_mode;
int ts_x_origin;
int ts_y_origin;
int clip_x_origin;
int clip_y_origin;
int graphics_exposures;
int line_width;
int line_style;
int cap_style;
int join_style;
}
struct _GdkDisplayPointerHooks {
_BCD_func__5956 get_pointer;
_BCD_func__5957 window_get_pointer;
_BCD_func__5958 window_at_pointer;
}
struct _GdkDisplayClass {
_GObjectClass parent_class;
_BCD_func__5960 get_display_name;
_BCD_func__5961 get_n_screens;
_BCD_func__5962 get_screen;
_BCD_func__5963 get_default_screen;
_BCD_func__5964 closed;
}
union _GdkEvent {
int type;
_GdkEventAny any;
_GdkEventExpose expose;
_GdkEventNoExpose no_expose;
_GdkEventVisibility visibility;
_GdkEventMotion motion;
_GdkEventButton button;
_GdkEventScroll scroll;
_GdkEventKey key;
_GdkEventCrossing crossing;
_GdkEventFocus focus_change;
_GdkEventConfigure configure;
_GdkEventProperty property;
_GdkEventSelection selection;
_GdkEventOwnerChange owner_change;
_GdkEventProximity proximity;
_GdkEventClient client;
_GdkEventDND dnd;
_GdkEventWindowState window_state;
_GdkEventSetting setting;
_GdkEventGrabBroken grab_broken;
}
struct _GdkEventGrabBroken {
int type;
_GdkDrawable * window;
char send_event;
int keyboard;
int implicit;
_GdkDrawable * grab_window;
}
struct _GdkEventSetting {
int type;
_GdkDrawable * window;
char send_event;
int action;
char * name;
}
struct _GdkEventWindowState {
int type;
_GdkDrawable * window;
char send_event;
int changed_mask;
int new_window_state;
}
struct _GdkEventDND {
int type;
_GdkDrawable * window;
char send_event;
_GdkDragContext * context;
uint time;
short x_root;
short y_root;
}
union N15_GdkEventClient5__106E {
char [20] b;
short [10] s;
int [5] l;
}
struct _GdkEventClient {
int type;
_GdkDrawable * window;
char send_event;
void * message_type;
ushort data_format;
N15_GdkEventClient5__106E data;
}
struct _GdkEventProximity {
int type;
_GdkDrawable * window;
char send_event;
uint time;
_GdkDevice * device;
}
struct _GdkEventOwnerChange {
int type;
_GdkDrawable * window;
char send_event;
uint owner;
int reason;
void * selection;
uint time;
uint selection_time;
}
struct _GdkEventSelection {
int type;
_GdkDrawable * window;
char send_event;
void * selection;
void * target;
void * property;
uint time;
uint requestor;
}
struct _GdkEventProperty {
int type;
_GdkDrawable * window;
char send_event;
void * atom;
uint time;
uint state;
}
struct _GdkEventConfigure {
int type;
_GdkDrawable * window;
char send_event;
int x;
int y;
int width;
int height;
}
struct _GdkEventCrossing {
int type;
_GdkDrawable * window;
char send_event;
_GdkDrawable * subwindow;
uint time;
double x;
double y;
double x_root;
double y_root;
int mode;
int detail;
int focus;
uint state;
}
struct _GdkEventFocus {
int type;
_GdkDrawable * window;
char send_event;
short in_;
}
struct _GdkEventKey {
int type;
_GdkDrawable * window;
char send_event;
uint time;
uint state;
uint keyval;
int length;
char * string;
ushort hardware_keycode;
char group;
}
struct _GdkEventScroll {
int type;
_GdkDrawable * window;
char send_event;
uint time;
double x;
double y;
uint state;
int direction;
_GdkDevice * device;
double x_root;
double y_root;
}
struct _GdkEventButton {
int type;
_GdkDrawable * window;
char send_event;
uint time;
double x;
double y;
double * axes;
uint state;
uint button;
_GdkDevice * device;
double x_root;
double y_root;
}
struct _GdkEventMotion {
int type;
_GdkDrawable * window;
char send_event;
uint time;
double x;
double y;
double * axes;
uint state;
short is_hint;
_GdkDevice * device;
double x_root;
double y_root;
}
struct _GdkEventVisibility {
int type;
_GdkDrawable * window;
char send_event;
int state;
}
struct _GdkEventNoExpose {
int type;
_GdkDrawable * window;
char send_event;
}
struct _GdkEventExpose {
int type;
_GdkDrawable * window;
char send_event;
_GdkRectangle area;
void * region;
int count;
}
struct _GdkEventAny {
int type;
_GdkDrawable * window;
char send_event;
}
struct _GdkTimeCoord {
uint time;
double [128] axes;
}
struct _GdkDevice {
_GObject parent_instance;
char * name;
int source;
int mode;
int has_cursor;
int num_axes;
_GdkDeviceAxis * axes;
int num_keys;
_GdkDeviceKey * keys;
}
struct _GdkDeviceAxis {
int use;
double min;
double max;
}
struct _GdkDeviceKey {
uint keyval;
int modifiers;
}
struct _GdkDragContextClass {
_GObjectClass parent_class;
}
struct _GdkDragContext {
_GObject parent_instance;
int protocol;
int is_source;
_GdkDrawable * source_window;
_GdkDrawable * dest_window;
_GList * targets;
int actions;
int suggested_action;
int action;
uint start_time;
void * windowing_data;
}
struct _GdkPixbufLoaderClass {
_GObjectClass parent_class;
_BCD_func__5997 size_prepared;
_BCD_func__5998 area_prepared;
_BCD_func__5999 area_updated;
_BCD_func__5998 closed;
}
struct _GdkPixbufLoader {
_GObject parent_instance;
void * priv;
}
struct _GdkRgbCmap {
uint [256] colors;
int n_colors;
_GSList * info_list;
}
struct _GdkColormapClass {
_GObjectClass parent_class;
}
struct _GdkScreen {
_GObject parent_instance;
uint closed;
_GdkGC * [32] normal_gcs;
_GdkGC * [32] exposure_gcs;
void * font_options;
double resolution;
}
struct _GdkDisplay {
_GObject parent_instance;
_GList * queued_events;
_GList * queued_tail;
uint [2] button_click_time;
_GdkDrawable * [2] button_window;
int [2] button_number;
uint double_click_time;
_GdkDevice * core_pointer;
_GdkDisplayPointerHooks * pointer_hooks;
uint closed;
uint double_click_distance;
int [2] button_x;
int [2] button_y;
}
struct _GdkDrawable {
_GObject parent_instance;
}
struct _GdkVisual {
_GObject parent_instance;
int type;
int depth;
int byte_order;
int colormap_size;
int bits_per_rgb;
uint red_mask;
int red_shift;
int red_prec;
uint green_mask;
int green_shift;
int green_prec;
uint blue_mask;
int blue_shift;
int blue_prec;
}
struct _GdkImage {
_GObject parent_instance;
int type;
_GdkVisual * visual;
int byte_order;
int width;
int height;
ushort depth;
ushort bpp;
ushort bpl;
ushort bits_per_pixel;
void * mem;
_GdkColormap * colormap;
void * windowing_data;
}
struct _GdkGC {
_GObject parent_instance;
int clip_x_origin;
int clip_y_origin;
int ts_x_origin;
int ts_y_origin;
_GdkColormap * colormap;
}
struct _GdkFont {
int type;
int ascent;
int descent;
}
struct _GdkCursor {
int type;
uint ref_count;
}
struct _GdkColormap {
_GObject parent_instance;
int size;
_GdkColor * colors;
_GdkVisual * visual;
void * windowing_data;
}
struct _GdkColor {
uint pixel;
ushort red;
ushort green;
ushort blue;
}
struct _GdkSpan {
int x;
int y;
int width;
}
struct _GdkSegment {
int x1;
int y1;
int x2;
int y2;
}
struct _GdkRectangle {
int x;
int y;
int width;
int height;
}
struct _GdkPoint {
int x;
int y;
}
extern (C) extern _BCD_func__4827 gdk_threads_unlock;
extern (C) extern _BCD_func__4827 gdk_threads_lock;
extern (C) extern void * gdk_threads_mutex;
extern (C) extern char * gdk_pixbuf_version;
extern (C) extern uint gdk_pixbuf_micro_version;
extern (C) extern uint gdk_pixbuf_minor_version;
extern (C) extern uint gdk_pixbuf_major_version;
