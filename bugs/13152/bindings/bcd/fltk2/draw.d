/* THIS FILE GENERATED BY bcd.gen */
module bcd.fltk2.draw;
align(4):
public import bcd.bind;
public import bcd.fltk2.FL_API;
public import bcd.fltk2.PixelType;
public import bcd.fltk2.Rectangle;
public import bcd.fltk2.Color;
public import bcd.fltk2.Flags;
extern (C) void _BCD_delete_N4fltk5GSaveE(void *);
extern (C) void *_BCD_new__ZN4fltk5GSaveC1Ev();
extern (C) void _BCD_RI_N4fltk5GSaveE(void *cd, void *dd);
extern (C) void _BCD_delete_N4fltk5GSaveE__GSave_R(void *This);
extern (C) void *_BCD_new__ZN4fltk5GSaveC1Ev_R();
extern (C) void _BCD__ZN4fltk13overlay_clearEv();
extern (C) void _BCD__ZN4fltk12overlay_rectEiiii(int, int, int, int);
extern (C) void _BCD__ZN4fltk10drawframe2EPKciiii(char *, int, int, int, int);
extern (C) void _BCD__ZN4fltk9drawframeEPKciiii(char *, int, int, int, int);
alias void function(void *, Rectangle) _BCD_func__331;
extern (C) void _BCD__ZN4fltk10scrollrectERKNS_9RectangleEiiPFvPvS2_ES3_(void *, int, int, _BCD_func__331, void *);
extern (C) char * _BCD__ZN4fltk9readimageEPhNS_9PixelTypeERKNS_9RectangleEi(char *, int, void *, int);
extern (C) char * _BCD__ZN4fltk9readimageEPhNS_9PixelTypeERKNS_9RectangleE(char *, int, void *);
alias char * function(void *, int, int, int, char *) _BCD_func__273;
alias _BCD_func__273 DrawImageCallback;
extern (C) void _BCD__ZN4fltk9drawimageEPFPKhPviiiPhES2_NS_9PixelTypeERKNS_9RectangleE(_BCD_func__273, void *, int, void *);
extern (C) void _BCD__ZN4fltk9drawimageEPKhNS_9PixelTypeERKNS_9RectangleEi(char *, int, void *, int);
extern (C) void _BCD__ZN4fltk9drawimageEPKhNS_9PixelTypeERKNS_9RectangleE(char *, int, void *);
extern (C) void _BCD__ZN4fltk13column_widthsEPKi(int *);
extern (C) int * _BCD__ZN4fltk13column_widthsEv();
extern (C) void _BCD_set__ZN4fltk14column_widths_E(int *);
extern (C) int * _BCD_get__ZN4fltk14column_widths_E();
alias void function(char *, int, float, float) _BCD_func__334;
alias float function(char *, int) _BCD_func__335;
extern (C) void _BCD__ZN4fltk8drawtextEPFvPKciffEPFfS1_iES1_RKNS_9RectangleEi(_BCD_func__334, _BCD_func__335, char *, void *, int);
extern (C) void _BCD__ZN4fltk8drawtextEPKcRKNS_9RectangleEi(char *, void *, int);
extern (C) void _BCD__ZN4fltk7measureEPFfPKciES1_RfS4_i(_BCD_func__335, char *, float *, float *, int);
extern (C) void _BCD__ZN4fltk7measureEPKcRiS2_i(char *, int *, int *, int);
extern (C) void _BCD__ZN4fltk8drawtextEPKciff(char *, int, float, float);
extern (C) void _BCD__ZN4fltk8drawtextEPKcff(char *, float, float);
extern (C) void _BCD__ZN4fltk20drawtext_transformedEPKciff(char *, int, float, float);
extern (C) float _BCD__ZN4fltk10getdescentEv();
extern (C) float _BCD__ZN4fltk9getascentEv();
extern (C) float _BCD__ZN4fltk8getwidthEPKci(char *, int);
extern (C) float _BCD__ZN4fltk8getwidthEPKc(char *);
extern (C) float _BCD__ZN4fltk7getsizeEv();
extern (C) bcd.bind.BoundClass * _BCD__ZN4fltk7getfontEv();
extern (C) void _BCD_set__ZN4fltk13current_size_E(float);
extern (C) float _BCD_get__ZN4fltk13current_size_E();
extern (C) void _BCD_set__ZN4fltk13current_font_E(bcd.bind.BoundClass *);
extern (C) bcd.bind.BoundClass * _BCD_get__ZN4fltk13current_font_E();
extern (C) void _BCD__ZN4fltk12set_encodingEPKc(char *);
extern (C) char * _BCD__ZN4fltk12get_encodingEv();
extern (C) void _BCD_set__ZN4fltk9encoding_E(char *);
extern (C) char * _BCD_get__ZN4fltk9encoding_E();
extern (C) void _BCD__ZN4fltk7setfontEPKcif(char *, int, float);
extern (C) void _BCD__ZN4fltk7setfontEPKcf(char *, float);
extern (C) void _BCD__ZN4fltk7setfontEPNS_4FontEf(void *, float);
extern (C) void _BCD__ZN4fltk9drawpointEff(float, float);
extern (C) void _BCD__ZN4fltk9drawpointEii(int, int);
extern (C) void _BCD__ZN4fltk8drawlineEffff(float, float, float, float);
extern (C) void _BCD__ZN4fltk8drawlineEiiii(int, int, int, int);
extern (C) void _BCD__ZN4fltk10strokerectERKNS_9RectangleE(void *);
extern (C) void _BCD__ZN4fltk10strokerectEiiii(int, int, int, int);
extern (C) void _BCD__ZN4fltk8fillrectERKNS_9RectangleE(void *);
extern (C) void _BCD__ZN4fltk8fillrectEiiii(int, int, int, int);
extern (C) void _BCD__ZN4fltk14fillstrokepathEj(uint);
extern (C) void _BCD__ZN4fltk8fillpathEv();
extern (C) void _BCD__ZN4fltk10strokepathEv();
extern (C) void _BCD__ZN4fltk9closepathEv();
extern (C) void _BCD__ZN4fltk8addchordERKNS_9RectangleEff(void *, float, float);
extern (C) void _BCD__ZN4fltk6addpieERKNS_9RectangleEff(void *, float, float);
extern (C) void _BCD__ZN4fltk6addarcEffffff(float, float, float, float, float, float);
extern (C) void _BCD__ZN4fltk8addcurveEffffffff(float, float, float, float, float, float, float, float);
extern (C) void _BCD__ZN4fltk23addvertices_transformedEiPA2_Kf(int, float [2] *);
extern (C) void _BCD__ZN4fltk11addverticesEiPA2_Ki(int, int [2] *);
extern (C) void _BCD__ZN4fltk11addverticesEiPA2_Kf(int, float [2] *);
extern (C) void _BCD__ZN4fltk9addvertexEii(int, int);
extern (C) void _BCD__ZN4fltk9addvertexEff(float, float);
extern (C) void _BCD__ZN4fltk7newpathEv();
extern (C) char * _BCD__ZN4fltk11line_dashesEv();
extern (C) void _BCD_set__ZN4fltk12line_dashes_E(char *);
extern (C) char * _BCD_get__ZN4fltk12line_dashes_E();
extern (C) float _BCD__ZN4fltk10line_widthEv();
extern (C) void _BCD_set__ZN4fltk11line_width_E(float);
extern (C) float _BCD_get__ZN4fltk11line_width_E();
extern (C) int _BCD__ZN4fltk10line_styleEv();
extern (C) void _BCD_set__ZN4fltk11line_style_E(int);
extern (C) int _BCD_get__ZN4fltk11line_style_E();
extern (C) void _BCD__ZN4fltk10line_styleEifPKc(int, float, char *);
extern (C) int _BCD__ZN4fltk9drawflagsEi(int);
extern (C) int _BCD__ZN4fltk9drawflagsEv();
extern (C) void _BCD__ZN4fltk12setdrawflagsEi(int);
extern (C) void _BCD_set__ZN4fltk10drawflags_E(int);
extern (C) int _BCD_get__ZN4fltk10drawflags_E();
extern (C) bcd.bind.BoundClass * _BCD__ZN4fltk9drawstyleEv();
extern (C) void _BCD__ZN4fltk9drawstyleEPKNS_5StyleEi(void *, int);
extern (C) void _BCD_set__ZN4fltk10drawstyle_E(bcd.bind.BoundClass *);
extern (C) bcd.bind.BoundClass * _BCD_get__ZN4fltk10drawstyle_E();
extern (C) uint _BCD__ZN4fltk10getbgcolorEv();
extern (C) void _BCD__ZN4fltk10setbgcolorEj(uint);
extern (C) void _BCD_set__ZN4fltk16current_bgcolor_E(uint);
extern (C) uint _BCD_get__ZN4fltk16current_bgcolor_E();
extern (C) uint _BCD__ZN4fltk8getcolorEv();
extern (C) void _BCD_set__ZN4fltk14current_color_E(uint);
extern (C) uint _BCD_get__ZN4fltk14current_color_E();
extern (C) void _BCD__ZN4fltk14setcolor_alphaEjf(uint, float);
extern (C) void _BCD__ZN4fltk8setcolorEj(uint);
extern (C) int _BCD__ZN4fltk19intersect_with_clipERNS_9RectangleE(void *);
extern (C) bool _BCD__ZN4fltk11not_clippedERKNS_9RectangleE(void *);
extern (C) void _BCD__ZN4fltk12push_no_clipEv();
extern (C) void _BCD__ZN4fltk8pop_clipEv();
extern (C) void _BCD__ZN4fltk7clipoutERKNS_9RectangleE(void *);
extern (C) void _BCD__ZN4fltk9push_clipEiiii(int, int, int, int);
extern (C) void _BCD__ZN4fltk9push_clipERKNS_9RectangleE(void *);
extern (C) void _BCD__ZN4fltk9transformERiS0_S0_S0_(int *, int *, int *, int *);
extern (C) void _BCD__ZN4fltk9transformERKNS_9RectangleERS0_(void *, void *);
extern (C) void _BCD__ZN4fltk9transformERiS0_(int *, int *);
extern (C) void _BCD__ZN4fltk18transform_distanceERfS0_(float *, float *);
extern (C) void _BCD__ZN4fltk9transformERfS0_(float *, float *);
extern (C) void _BCD__ZN4fltk13load_identityEv();
extern (C) void _BCD__ZN4fltk6concatEffffff(float, float, float, float, float, float);
extern (C) void _BCD__ZN4fltk6rotateEf(float);
extern (C) void _BCD__ZN4fltk9translateEii(int, int);
extern (C) void _BCD__ZN4fltk9translateEff(float, float);
extern (C) void _BCD__ZN4fltk5scaleEf(float);
extern (C) void _BCD__ZN4fltk5scaleEff(float, float);
extern (C) void _BCD__ZN4fltk10pop_matrixEv();
extern (C) void _BCD__ZN4fltk11push_matrixEv();
const int SOLID = 0;
const int DASH = 1;
const int DOT = 2;
const int DASHDOT = 3;
const int DASHDOTDOT = 4;
const int CAP_FLAT = 256;
const int CAP_ROUND = 512;
const int CAP_SQUARE = 768;
const int JOIN_MITER = 4096;
const int JOIN_ROUND = 8192;
const int JOIN_BEVEL = 12288;
class GSave : bcd.bind.BoundClass {
this(ifloat ignore) {
super(ignore);
}
this(ifloat ignore, void *x) {
super(ignore);
__C_data = x;
__C_data_owned = false;
}
~this() {
if (__C_data && __C_data_owned) _BCD_delete_N4fltk5GSaveE(__C_data);
__C_data = null;
}
this() {
super(cast(ifloat) 0);
__C_data = _BCD_new__ZN4fltk5GSaveC1Ev();
__C_data_owned = true;
}
}
class GSave_R : GSave {
~this() {
if (__C_data && __C_data_owned) _BCD_delete_N4fltk5GSaveE__GSave_R(__C_data);
__C_data = null;
}
this() {
super(cast(ifloat) 0);
__C_data = _BCD_new__ZN4fltk5GSaveC1Ev_R();
__C_data_owned = true;
_BCD_RI_N4fltk5GSaveE(__C_data, cast(void *) this);
}
}
bool overlay_clear() {
_BCD__ZN4fltk13overlay_clearEv();
return true;
}
void overlay_rect(int _0, int _1, int _2, int _3) {
_BCD__ZN4fltk12overlay_rectEiiii(_0, _1, _2, _3);
}
void drawframe2(char * s, int x, int y, int w, int h) {
_BCD__ZN4fltk10drawframe2EPKciiii(s, x, y, w, h);
}
void drawframe(char * s, int x, int y, int w, int h) {
_BCD__ZN4fltk9drawframeEPKciiii(s, x, y, w, h);
}
void scrollrect(Rectangle _0, int dx, int dy, _BCD_func__331 draw_area, void * _4) {
_BCD__ZN4fltk10scrollrectERKNS_9RectangleEiiPFvPvS2_ES3_(_0.__C_data, dx, dy, draw_area, _4);
}
char * readimage(char * p, int _1, Rectangle _2, int linedelta) {
return _BCD__ZN4fltk9readimageEPhNS_9PixelTypeERKNS_9RectangleEi(p, _1, _2.__C_data, linedelta);
}
char * readimage(char * p, int _1, Rectangle _2) {
return _BCD__ZN4fltk9readimageEPhNS_9PixelTypeERKNS_9RectangleE(p, _1, _2.__C_data);
}
void drawimage(_BCD_func__273 _0, void * _1, int _2, Rectangle _3) {
_BCD__ZN4fltk9drawimageEPFPKhPviiiPhES2_NS_9PixelTypeERKNS_9RectangleE(_0, _1, _2, _3.__C_data);
}
void drawimage(char * _0, int _1, Rectangle _2, int linedelta) {
_BCD__ZN4fltk9drawimageEPKhNS_9PixelTypeERKNS_9RectangleEi(_0, _1, _2.__C_data, linedelta);
}
void drawimage(char * _0, int _1, Rectangle _2) {
_BCD__ZN4fltk9drawimageEPKhNS_9PixelTypeERKNS_9RectangleE(_0, _1, _2.__C_data);
}
void column_widths(int * i) {
_BCD__ZN4fltk13column_widthsEPKi(i);
}
int * column_widths() {
return _BCD__ZN4fltk13column_widthsEv();
}
void set_column_widths_(int * x) {
_BCD_set__ZN4fltk14column_widths_E(x);
}
int * get_column_widths_() {
return _BCD_get__ZN4fltk14column_widths_E();
}
void drawtext(_BCD_func__334 textfunction, _BCD_func__335 getwidth, char * str, Rectangle r, int flags) {
_BCD__ZN4fltk8drawtextEPFvPKciffEPFfS1_iES1_RKNS_9RectangleEi(textfunction, getwidth, str, r.__C_data, flags);
}
void drawtext(char * _0, Rectangle _1, int _2) {
_BCD__ZN4fltk8drawtextEPKcRKNS_9RectangleEi(_0, _1.__C_data, _2);
}
void measure(_BCD_func__335 getwidth, char * _1, float * w, float * h, int _4 = 0) {
_BCD__ZN4fltk7measureEPFfPKciES1_RfS4_i(getwidth, _1, w, h, _4);
}
void measure(char * _0, int * w, int * h, int _3 = 0) {
_BCD__ZN4fltk7measureEPKcRiS2_i(_0, w, h, _3);
}
void drawtext(char * _0, int length, float x, float y) {
_BCD__ZN4fltk8drawtextEPKciff(_0, length, x, y);
}
void drawtext(char * _0, float x, float y) {
_BCD__ZN4fltk8drawtextEPKcff(_0, x, y);
}
void drawtext_transformed(char * _0, int n, float x, float y) {
_BCD__ZN4fltk20drawtext_transformedEPKciff(_0, n, x, y);
}
float getdescent() {
return _BCD__ZN4fltk10getdescentEv();
}
float getascent() {
return _BCD__ZN4fltk9getascentEv();
}
float getwidth(char * _0, int length) {
return _BCD__ZN4fltk8getwidthEPKci(_0, length);
}
float getwidth(char * _0) {
return _BCD__ZN4fltk8getwidthEPKc(_0);
}
float getsize() {
return _BCD__ZN4fltk7getsizeEv();
}
bcd.bind.BoundClass * getfont() {
return _BCD__ZN4fltk7getfontEv();
}
void set_current_size_(float x) {
_BCD_set__ZN4fltk13current_size_E(x);
}
float get_current_size_() {
return _BCD_get__ZN4fltk13current_size_E();
}
void set_current_font_(bcd.bind.BoundClass * x) {
_BCD_set__ZN4fltk13current_font_E(x);
}
bcd.bind.BoundClass * get_current_font_() {
return _BCD_get__ZN4fltk13current_font_E();
}
void set_encoding(char * _0) {
_BCD__ZN4fltk12set_encodingEPKc(_0);
}
char * get_encoding() {
return _BCD__ZN4fltk12get_encodingEv();
}
void set_encoding_(char * x) {
_BCD_set__ZN4fltk9encoding_E(x);
}
char * get_encoding_() {
return _BCD_get__ZN4fltk9encoding_E();
}
void setfont(char * _0, int attributes, float size) {
_BCD__ZN4fltk7setfontEPKcif(_0, attributes, size);
}
void setfont(char * _0, float size) {
_BCD__ZN4fltk7setfontEPKcf(_0, size);
}
void setfont(bcd.bind.BoundClass * _0, float size) {
_BCD__ZN4fltk7setfontEPNS_4FontEf(_0.__C_data, size);
}
void drawpoint(float x, float y) {
_BCD__ZN4fltk9drawpointEff(x, y);
}
void drawpoint(int x, int y) {
_BCD__ZN4fltk9drawpointEii(x, y);
}
void drawline(float x0, float y0, float x1, float y1) {
_BCD__ZN4fltk8drawlineEffff(x0, y0, x1, y1);
}
void drawline(int x0, int y0, int x1, int y1) {
_BCD__ZN4fltk8drawlineEiiii(x0, y0, x1, y1);
}
void strokerect(Rectangle r) {
_BCD__ZN4fltk10strokerectERKNS_9RectangleE(r.__C_data);
}
void strokerect(int _0, int _1, int _2, int _3) {
_BCD__ZN4fltk10strokerectEiiii(_0, _1, _2, _3);
}
void fillrect(Rectangle r) {
_BCD__ZN4fltk8fillrectERKNS_9RectangleE(r.__C_data);
}
void fillrect(int _0, int _1, int _2, int _3) {
_BCD__ZN4fltk8fillrectEiiii(_0, _1, _2, _3);
}
void fillstrokepath(uint _0) {
_BCD__ZN4fltk14fillstrokepathEj(_0);
}
void fillpath() {
_BCD__ZN4fltk8fillpathEv();
}
void strokepath() {
_BCD__ZN4fltk10strokepathEv();
}
void closepath() {
_BCD__ZN4fltk9closepathEv();
}
void addchord(Rectangle r, float a, float a2) {
_BCD__ZN4fltk8addchordERKNS_9RectangleEff(r.__C_data, a, a2);
}
void addpie(Rectangle r, float a, float a2) {
_BCD__ZN4fltk6addpieERKNS_9RectangleEff(r.__C_data, a, a2);
}
void addarc(float x, float y, float w, float h, float a1, float a2) {
_BCD__ZN4fltk6addarcEffffff(x, y, w, h, a1, a2);
}
void addcurve(float _0, float _1, float _2, float _3, float _4, float _5, float _6, float _7) {
_BCD__ZN4fltk8addcurveEffffffff(_0, _1, _2, _3, _4, _5, _6, _7);
}
void addvertices_transformed(int n, float [2] * v) {
_BCD__ZN4fltk23addvertices_transformedEiPA2_Kf(n, v);
}
void addvertices(int n, int [2] * v) {
_BCD__ZN4fltk11addverticesEiPA2_Ki(n, v);
}
void addvertices(int n, float [2] * v) {
_BCD__ZN4fltk11addverticesEiPA2_Kf(n, v);
}
void addvertex(int x, int y) {
_BCD__ZN4fltk9addvertexEii(x, y);
}
void addvertex(float x, float y) {
_BCD__ZN4fltk9addvertexEff(x, y);
}
void newpath() {
_BCD__ZN4fltk7newpathEv();
}
char * line_dashes() {
return _BCD__ZN4fltk11line_dashesEv();
}
void set_line_dashes_(char * x) {
_BCD_set__ZN4fltk12line_dashes_E(x);
}
char * get_line_dashes_() {
return _BCD_get__ZN4fltk12line_dashes_E();
}
float line_width() {
return _BCD__ZN4fltk10line_widthEv();
}
void set_line_width_(float x) {
_BCD_set__ZN4fltk11line_width_E(x);
}
float get_line_width_() {
return _BCD_get__ZN4fltk11line_width_E();
}
int line_style() {
return _BCD__ZN4fltk10line_styleEv();
}
void set_line_style_(int x) {
_BCD_set__ZN4fltk11line_style_E(x);
}
int get_line_style_() {
return _BCD_get__ZN4fltk11line_style_E();
}
void line_style(int _0, float width = 0, char * dashes = null) {
_BCD__ZN4fltk10line_styleEifPKc(_0, width, dashes);
}
int drawflags(int f) {
return _BCD__ZN4fltk9drawflagsEi(f);
}
int drawflags() {
return _BCD__ZN4fltk9drawflagsEv();
}
void setdrawflags(int f) {
_BCD__ZN4fltk12setdrawflagsEi(f);
}
void set_drawflags_(int x) {
_BCD_set__ZN4fltk10drawflags_E(x);
}
int get_drawflags_() {
return _BCD_get__ZN4fltk10drawflags_E();
}
bcd.bind.BoundClass * drawstyle() {
return _BCD__ZN4fltk9drawstyleEv();
}
void drawstyle(bcd.bind.BoundClass * s, int _1) {
_BCD__ZN4fltk9drawstyleEPKNS_5StyleEi(s.__C_data, _1);
}
void set_drawstyle_(bcd.bind.BoundClass * x) {
_BCD_set__ZN4fltk10drawstyle_E(x);
}
bcd.bind.BoundClass * get_drawstyle_() {
return _BCD_get__ZN4fltk10drawstyle_E();
}
uint getbgcolor() {
return _BCD__ZN4fltk10getbgcolorEv();
}
void setbgcolor(uint c) {
_BCD__ZN4fltk10setbgcolorEj(c);
}
void set_current_bgcolor_(uint x) {
_BCD_set__ZN4fltk16current_bgcolor_E(x);
}
uint get_current_bgcolor_() {
return _BCD_get__ZN4fltk16current_bgcolor_E();
}
uint getcolor() {
return _BCD__ZN4fltk8getcolorEv();
}
void set_current_color_(uint x) {
_BCD_set__ZN4fltk14current_color_E(x);
}
uint get_current_color_() {
return _BCD_get__ZN4fltk14current_color_E();
}
void setcolor_alpha(uint _0, float alpha) {
_BCD__ZN4fltk14setcolor_alphaEjf(_0, alpha);
}
void setcolor(uint _0) {
_BCD__ZN4fltk8setcolorEj(_0);
}
int intersect_with_clip(Rectangle _0) {
return _BCD__ZN4fltk19intersect_with_clipERNS_9RectangleE(_0.__C_data);
}
bool not_clipped(Rectangle _0) {
return _BCD__ZN4fltk11not_clippedERKNS_9RectangleE(_0.__C_data);
}
void push_no_clip() {
_BCD__ZN4fltk12push_no_clipEv();
}
void pop_clip() {
_BCD__ZN4fltk8pop_clipEv();
}
void clipout(Rectangle _0) {
_BCD__ZN4fltk7clipoutERKNS_9RectangleE(_0.__C_data);
}
void push_clip(int X, int Y, int W, int H) {
_BCD__ZN4fltk9push_clipEiiii(X, Y, W, H);
}
void push_clip(Rectangle _0) {
_BCD__ZN4fltk9push_clipERKNS_9RectangleE(_0.__C_data);
}
void transform(int * x, int * y, int * w, int * h) {
_BCD__ZN4fltk9transformERiS0_S0_S0_(x, y, w, h);
}
void transform(Rectangle from, Rectangle to) {
_BCD__ZN4fltk9transformERKNS_9RectangleERS0_(from.__C_data, to.__C_data);
}
void transform(int * x, int * y) {
_BCD__ZN4fltk9transformERiS0_(x, y);
}
void transform_distance(float * x, float * y) {
_BCD__ZN4fltk18transform_distanceERfS0_(x, y);
}
void transform(float * x, float * y) {
_BCD__ZN4fltk9transformERfS0_(x, y);
}
void load_identity() {
_BCD__ZN4fltk13load_identityEv();
}
void concat(float _0, float _1, float _2, float _3, float _4, float _5) {
_BCD__ZN4fltk6concatEffffff(_0, _1, _2, _3, _4, _5);
}
void rotate(float d) {
_BCD__ZN4fltk6rotateEf(d);
}
void translate(int x, int y) {
_BCD__ZN4fltk9translateEii(x, y);
}
void translate(float x, float y) {
_BCD__ZN4fltk9translateEff(x, y);
}
void scale(float x) {
_BCD__ZN4fltk5scaleEf(x);
}
void scale(float x, float y) {
_BCD__ZN4fltk5scaleEff(x, y);
}
void pop_matrix() {
_BCD__ZN4fltk10pop_matrixEv();
}
void push_matrix() {
_BCD__ZN4fltk11push_matrixEv();
}
