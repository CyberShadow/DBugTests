/* THIS FILE GENERATED BY bcd.gen */
module bcd.windows.windows;
const int _M_IX86 = 300;
const int WINVER = 0x0400;
const int MAX_PATH = 260;
const int NULL = 0;
const int FALSE = 0;
const int TRUE = 1;
const int STRICT = 1;
const int WSABASEERR = 10000;
const int SEVERITY_SUCCESS = 0;
const int SEVERITY_ERROR = 1;
const int FACILITY_WINDOWS = 8;
const int FACILITY_STORAGE = 3;
const int FACILITY_RPC = 1;
const int FACILITY_WIN32 = 7;
const int FACILITY_CONTROL = 10;
const int FACILITY_NULL = 0;
const int FACILITY_ITF = 4;
const int FACILITY_DISPATCH = 2;
const int FACILITY_NT_BIT = 0x10000000;
const int __MSVCRT_VERSION__ = 0x0600;
const double __MINGW32_VERSION = 3.9;
const int __MINGW32_MAJOR_VERSION = 3;
const int __MINGW32_MINOR_VERSION = 9;
const int _INTEGRAL_MAX_BITS = 64;
const int ACE_OBJECT_TYPE_PRESENT = 0x00000001;
const int ACE_INHERITED_OBJECT_TYPE_PRESENT = 0x00000002;
const int APPLICATION_ERROR_MASK = 0x20000000;
const int ERROR_SEVERITY_SUCCESS = 0x00000000;
const int ERROR_SEVERITY_INFORMATIONAL = 0x40000000;
const int ERROR_SEVERITY_WARNING = 0x80000000;
const int ERROR_SEVERITY_ERROR = 0xC0000000;
const int ANYSIZE_ARRAY = 1;
const int OBJECT_INHERIT_ACE = 1;
const int CONTAINER_INHERIT_ACE = 2;
const int NO_PROPAGATE_INHERIT_ACE = 4;
const int INHERIT_ONLY_ACE = 8;
const int VALID_INHERIT_FLAGS = 16;
const int SUCCESSFUL_ACCESS_ACE_FLAG = 64;
const int FAILED_ACCESS_ACE_FLAG = 128;
const int STANDARD_RIGHTS_REQUIRED = 0xF0000;
const int STANDARD_RIGHTS_READ = 0x20000;
const int STANDARD_RIGHTS_WRITE = 0x20000;
const int STANDARD_RIGHTS_EXECUTE = 0x20000;
const int STANDARD_RIGHTS_ALL = 0x1F0000;
const int SPECIFIC_RIGHTS_ALL = 0xFFFF;
const int ACCESS_SYSTEM_SECURITY = 0x1000000;
const int MAXIMUM_ALLOWED = 0x2000000;
const int GENERIC_READ = 0x80000000;
const int GENERIC_WRITE = 0x40000000;
const int GENERIC_EXECUTE = 0x20000000;
const int GENERIC_ALL = 0x10000000;
const int FILE_LIST_DIRECTORY = 0x00000001;
const int FILE_READ_DATA = 0x00000001;
const int FILE_ADD_FILE = 0x00000002;
const int FILE_WRITE_DATA = 0x00000002;
const int FILE_ADD_SUBDIRECTORY = 0x00000004;
const int FILE_APPEND_DATA = 0x00000004;
const int FILE_CREATE_PIPE_INSTANCE = 0x00000004;
const int FILE_READ_EA = 0x00000008;
const int FILE_READ_PROPERTIES = 0x00000008;
const int FILE_WRITE_EA = 0x00000010;
const int FILE_WRITE_PROPERTIES = 0x00000010;
const int FILE_EXECUTE = 0x00000020;
const int FILE_TRAVERSE = 0x00000020;
const int FILE_DELETE_CHILD = 0x00000040;
const int FILE_READ_ATTRIBUTES = 0x00000080;
const int FILE_WRITE_ATTRIBUTES = 0x00000100;
const int FILE_SHARE_READ = 0x00000001;
const int FILE_SHARE_WRITE = 0x00000002;
const int FILE_SHARE_DELETE = 0x00000004;
const int FILE_SHARE_VALID_FLAGS = 0x00000007;
const int FILE_ATTRIBUTE_READONLY = 0x00000001;
const int FILE_ATTRIBUTE_HIDDEN = 0x00000002;
const int FILE_ATTRIBUTE_SYSTEM = 0x00000004;
const int FILE_ATTRIBUTE_DIRECTORY = 0x00000010;
const int FILE_ATTRIBUTE_ARCHIVE = 0x00000020;
const int FILE_ATTRIBUTE_DEVICE = 0x00000040;
const int FILE_ATTRIBUTE_NORMAL = 0x00000080;
const int FILE_ATTRIBUTE_TEMPORARY = 0x00000100;
const int FILE_ATTRIBUTE_SPARSE_FILE = 0x00000200;
const int FILE_ATTRIBUTE_REPARSE_POINT = 0x00000400;
const int FILE_ATTRIBUTE_COMPRESSED = 0x00000800;
const int FILE_ATTRIBUTE_OFFLINE = 0x00001000;
const int FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x00002000;
const int FILE_ATTRIBUTE_ENCRYPTED = 0x00004000;
const int FILE_ATTRIBUTE_VALID_FLAGS = 0x00007fb7;
const int FILE_ATTRIBUTE_VALID_SET_FLAGS = 0x000031a7;
const int FILE_COPY_STRUCTURED_STORAGE = 0x00000041;
const int FILE_STRUCTURED_STORAGE = 0x00000441;
const int FILE_VALID_OPTION_FLAGS = 0x00ffffff;
const int FILE_VALID_PIPE_OPTION_FLAGS = 0x00000032;
const int FILE_VALID_MAILSLOT_OPTION_FLAGS = 0x00000032;
const int FILE_VALID_SET_FLAGS = 0x00000036;
const int FILE_SUPERSEDE = 0x00000000;
const int FILE_OPEN = 0x00000001;
const int FILE_CREATE = 0x00000002;
const int FILE_OPEN_IF = 0x00000003;
const int FILE_OVERWRITE = 0x00000004;
const int FILE_OVERWRITE_IF = 0x00000005;
const int FILE_MAXIMUM_DISPOSITION = 0x00000005;
const int FILE_DIRECTORY_FILE = 0x00000001;
const int FILE_WRITE_THROUGH = 0x00000002;
const int FILE_SEQUENTIAL_ONLY = 0x00000004;
const int FILE_NO_INTERMEDIATE_BUFFERING = 0x00000008;
const int FILE_SYNCHRONOUS_IO_ALERT = 0x00000010;
const int FILE_SYNCHRONOUS_IO_NONALERT = 0x00000020;
const int FILE_NON_DIRECTORY_FILE = 0x00000040;
const int FILE_CREATE_TREE_CONNECTION = 0x00000080;
const int FILE_COMPLETE_IF_OPLOCKED = 0x00000100;
const int FILE_NO_EA_KNOWLEDGE = 0x00000200;
const int FILE_OPEN_FOR_RECOVERY = 0x00000400;
const int FILE_RANDOM_ACCESS = 0x00000800;
const int FILE_DELETE_ON_CLOSE = 0x00001000;
const int FILE_OPEN_BY_FILE_ID = 0x00002000;
const int FILE_OPEN_FOR_BACKUP_INTENT = 0x00004000;
const int FILE_NO_COMPRESSION = 0x00008000;
const int FILE_RESERVE_OPFILTER = 0x00100000;
const int FILE_OPEN_REPARSE_POINT = 0x00200000;
const int FILE_OPEN_NO_RECALL = 0x00400000;
const int FILE_OPEN_FOR_FREE_SPACE_QUERY = 0x00800000;
const int FILE_NOTIFY_CHANGE_FILE_NAME = 0x00000001;
const int FILE_NOTIFY_CHANGE_DIR_NAME = 0x00000002;
const int FILE_NOTIFY_CHANGE_NAME = 0x00000003;
const int FILE_NOTIFY_CHANGE_ATTRIBUTES = 0x00000004;
const int FILE_NOTIFY_CHANGE_SIZE = 0x00000008;
const int FILE_NOTIFY_CHANGE_LAST_WRITE = 0x00000010;
const int FILE_NOTIFY_CHANGE_LAST_ACCESS = 0x00000020;
const int FILE_NOTIFY_CHANGE_CREATION = 0x00000040;
const int FILE_NOTIFY_CHANGE_EA = 0x00000080;
const int FILE_NOTIFY_CHANGE_SECURITY = 0x00000100;
const int FILE_NOTIFY_CHANGE_STREAM_NAME = 0x00000200;
const int FILE_NOTIFY_CHANGE_STREAM_SIZE = 0x00000400;
const int FILE_NOTIFY_CHANGE_STREAM_WRITE = 0x00000800;
const int FILE_NOTIFY_VALID_MASK = 0x00000fff;
const int FILE_CASE_SENSITIVE_SEARCH = 0x00000001;
const int FILE_CASE_PRESERVED_NAMES = 0x00000002;
const int FILE_UNICODE_ON_DISK = 0x00000004;
const int FILE_PERSISTENT_ACLS = 0x00000008;
const int FILE_FILE_COMPRESSION = 0x00000010;
const int FILE_VOLUME_QUOTAS = 0x00000020;
const int FILE_SUPPORTS_SPARSE_FILES = 0x00000040;
const int FILE_SUPPORTS_REPARSE_POINTS = 0x00000080;
const int FILE_SUPPORTS_REMOTE_STORAGE = 0x00000100;
const int FS_LFN_APIS = 0x00004000;
const int FILE_VOLUME_IS_COMPRESSED = 0x00008000;
const int FILE_SUPPORTS_OBJECT_IDS = 0x00010000;
const int FILE_SUPPORTS_ENCRYPTION = 0x00020000;
const int FILE_NAMED_STREAMS = 0x00040000;
const int IO_COMPLETION_QUERY_STATE = 0x0001;
const int IO_COMPLETION_MODIFY_STATE = 0x0002;
const int DUPLICATE_CLOSE_SOURCE = 0x00000001;
const int DUPLICATE_SAME_ACCESS = 0x00000002;
const int DUPLICATE_SAME_ATTRIBUTES = 0x00000004;
const int PROCESS_TERMINATE = 1;
const int PROCESS_CREATE_THREAD = 2;
const int PROCESS_SET_SESSIONID = 4;
const int PROCESS_VM_OPERATION = 8;
const int PROCESS_VM_READ = 16;
const int PROCESS_VM_WRITE = 32;
const int PROCESS_DUP_HANDLE = 64;
const int PROCESS_CREATE_PROCESS = 128;
const int PROCESS_SET_QUOTA = 256;
const int PROCESS_SET_INFORMATION = 512;
const int PROCESS_QUERY_INFORMATION = 1024;
const int THREAD_TERMINATE = 1;
const int THREAD_SUSPEND_RESUME = 2;
const int THREAD_GET_CONTEXT = 8;
const int THREAD_SET_CONTEXT = 16;
const int THREAD_SET_INFORMATION = 32;
const int THREAD_QUERY_INFORMATION = 64;
const int THREAD_SET_THREAD_TOKEN = 128;
const int THREAD_IMPERSONATE = 256;
const int THREAD_DIRECT_IMPERSONATION = 0x200;
const int THREAD_BASE_PRIORITY_LOWRT = 15;
const int THREAD_BASE_PRIORITY_MAX = 2;
const int EXCEPTION_NONCONTINUABLE = 1;
const int EXCEPTION_MAXIMUM_PARAMETERS = 15;
const int MUTANT_QUERY_STATE = 0x0001;
const int TIMER_QUERY_STATE = 0x0001;
const int TIMER_MODIFY_STATE = 0x0002;
const int SECURITY_NULL_RID = 0;
const int SECURITY_LOCAL_RID = 0;
const int SECURITY_CREATOR_OWNER_RID = 0;
const int SECURITY_CREATOR_GROUP_RID = 1;
const int SECURITY_DIALUP_RID = 1;
const int SECURITY_NETWORK_RID = 2;
const int SECURITY_BATCH_RID = 3;
const int SECURITY_INTERACTIVE_RID = 4;
const int SECURITY_LOGON_IDS_RID = 5;
const int SECURITY_SERVICE_RID = 6;
const int SECURITY_LOCAL_SYSTEM_RID = 18;
const int SECURITY_BUILTIN_DOMAIN_RID = 32;
const int SECURITY_PRINCIPAL_SELF_RID = 10;
const int SECURITY_CREATOR_OWNER_SERVER_RID = 0x2;
const int SECURITY_CREATOR_GROUP_SERVER_RID = 0x3;
const int SECURITY_LOGON_IDS_RID_COUNT = 0x3;
const int SECURITY_ANONYMOUS_LOGON_RID = 0x7;
const int SECURITY_PROXY_RID = 0x8;
const int SECURITY_ENTERPRISE_CONTROLLERS_RID = 0x9;
const int SECURITY_AUTHENTICATED_USER_RID = 0xB;
const int SECURITY_RESTRICTED_CODE_RID = 0xC;
const int SECURITY_NT_NON_UNIQUE_RID = 0x15;
const int SID_REVISION = 1;
const int SE_GROUP_MANDATORY = 1;
const int SE_GROUP_ENABLED_BY_DEFAULT = 2;
const int SE_GROUP_ENABLED = 4;
const int SE_GROUP_OWNER = 8;
const int SE_GROUP_USE_FOR_DENY_ONLY = 16;
const int SE_GROUP_RESOURCE = 536870912;
const int LANG_NEUTRAL = 0x00;
const int LANG_ARABIC = 0x01;
const int LANG_BULGARIAN = 0x02;
const int LANG_CATALAN = 0x03;
const int LANG_CHINESE = 0x04;
const int LANG_CZECH = 0x05;
const int LANG_DANISH = 0x06;
const int LANG_GERMAN = 0x07;
const int LANG_GREEK = 0x08;
const int LANG_ENGLISH = 0x09;
const int LANG_SPANISH = 0x0a;
const int LANG_FINNISH = 0x0b;
const int LANG_FRENCH = 0x0c;
const int LANG_HEBREW = 0x0d;
const double LANG_HUNGARIAN = 0x0e;
const int LANG_ICELANDIC = 0x0f;
const int LANG_ITALIAN = 0x10;
const int LANG_JAPANESE = 0x11;
const int LANG_KOREAN = 0x12;
const int LANG_DUTCH = 0x13;
const int LANG_NORWEGIAN = 0x14;
const int LANG_POLISH = 0x15;
const int LANG_PORTUGUESE = 0x16;
const int LANG_ROMANIAN = 0x18;
const int LANG_RUSSIAN = 0x19;
const int LANG_CROATIAN = 0x1a;
const int LANG_SERBIAN = 0x1a;
const int LANG_SLOVAK = 0x1b;
const int LANG_ALBANIAN = 0x1c;
const int LANG_SWEDISH = 0x1d;
const double LANG_THAI = 0x1e;
const int LANG_TURKISH = 0x1f;
const int LANG_URDU = 0x20;
const int LANG_INDONESIAN = 0x21;
const int LANG_UKRAINIAN = 0x22;
const int LANG_BELARUSIAN = 0x23;
const int LANG_SLOVENIAN = 0x24;
const int LANG_ESTONIAN = 0x25;
const int LANG_LATVIAN = 0x26;
const int LANG_LITHUANIAN = 0x27;
const int LANG_FARSI = 0x29;
const int LANG_VIETNAMESE = 0x2a;
const int LANG_ARMENIAN = 0x2b;
const int LANG_AZERI = 0x2c;
const int LANG_BASQUE = 0x2d;
const int LANG_MACEDONIAN = 0x2f;
const int LANG_AFRIKAANS = 0x36;
const int LANG_GEORGIAN = 0x37;
const int LANG_FAEROESE = 0x38;
const int LANG_HINDI = 0x39;
const double LANG_MALAY = 0x3e;
const int LANG_KAZAK = 0x3f;
const int LANG_KYRGYZ = 0x40;
const int LANG_SWAHILI = 0x41;
const int LANG_UZBEK = 0x43;
const int LANG_TATAR = 0x44;
const int LANG_BENGALI = 0x45;
const int LANG_PUNJABI = 0x46;
const int LANG_GUJARATI = 0x47;
const int LANG_ORIYA = 0x48;
const int LANG_TAMIL = 0x49;
const int LANG_TELUGU = 0x4a;
const int LANG_KANNADA = 0x4b;
const int LANG_MALAYALAM = 0x4c;
const int LANG_ASSAMESE = 0x4d;
const double LANG_MARATHI = 0x4e;
const int LANG_SANSKRIT = 0x4f;
const int LANG_MONGOLIAN = 0x50;
const int LANG_GALICIAN = 0x56;
const int LANG_KONKANI = 0x57;
const int LANG_MANIPURI = 0x58;
const int LANG_SINDHI = 0x59;
const int LANG_SYRIAC = 0x5a;
const int LANG_KASHMIRI = 0x60;
const int LANG_NEPALI = 0x61;
const int LANG_DIVEHI = 0x65;
const int LANG_INVARIANT = 0x7f;
const int SUBLANG_NEUTRAL = 0x00;
const int SUBLANG_DEFAULT = 0x01;
const int SUBLANG_SYS_DEFAULT = 0x02;
const int SUBLANG_ARABIC_SAUDI_ARABIA = 0x01;
const int SUBLANG_ARABIC_IRAQ = 0x02;
const int SUBLANG_ARABIC_EGYPT = 0x03;
const int SUBLANG_ARABIC_LIBYA = 0x04;
const int SUBLANG_ARABIC_ALGERIA = 0x05;
const int SUBLANG_ARABIC_MOROCCO = 0x06;
const int SUBLANG_ARABIC_TUNISIA = 0x07;
const int SUBLANG_ARABIC_OMAN = 0x08;
const int SUBLANG_ARABIC_YEMEN = 0x09;
const int SUBLANG_ARABIC_SYRIA = 0x0a;
const int SUBLANG_ARABIC_JORDAN = 0x0b;
const int SUBLANG_ARABIC_LEBANON = 0x0c;
const int SUBLANG_ARABIC_KUWAIT = 0x0d;
const double SUBLANG_ARABIC_UAE = 0x0e;
const int SUBLANG_ARABIC_BAHRAIN = 0x0f;
const int SUBLANG_ARABIC_QATAR = 0x10;
const int SUBLANG_AZERI_LATIN = 0x01;
const int SUBLANG_AZERI_CYRILLIC = 0x02;
const int SUBLANG_CHINESE_TRADITIONAL = 0x01;
const int SUBLANG_CHINESE_SIMPLIFIED = 0x02;
const int SUBLANG_CHINESE_HONGKONG = 0x03;
const int SUBLANG_CHINESE_SINGAPORE = 0x04;
const int SUBLANG_CHINESE_MACAU = 0x05;
const int SUBLANG_DUTCH = 0x01;
const int SUBLANG_DUTCH_BELGIAN = 0x02;
const int SUBLANG_ENGLISH_US = 0x01;
const int SUBLANG_ENGLISH_UK = 0x02;
const int SUBLANG_ENGLISH_AUS = 0x03;
const int SUBLANG_ENGLISH_CAN = 0x04;
const int SUBLANG_ENGLISH_NZ = 0x05;
const int SUBLANG_ENGLISH_EIRE = 0x06;
const int SUBLANG_ENGLISH_SOUTH_AFRICA = 0x07;
const int SUBLANG_ENGLISH_JAMAICA = 0x08;
const int SUBLANG_ENGLISH_CARIBBEAN = 0x09;
const int SUBLANG_ENGLISH_BELIZE = 0x0a;
const int SUBLANG_ENGLISH_TRINIDAD = 0x0b;
const int SUBLANG_ENGLISH_ZIMBABWE = 0x0c;
const int SUBLANG_ENGLISH_PHILIPPINES = 0x0d;
const int SUBLANG_FRENCH = 0x01;
const int SUBLANG_FRENCH_BELGIAN = 0x02;
const int SUBLANG_FRENCH_CANADIAN = 0x03;
const int SUBLANG_FRENCH_SWISS = 0x04;
const int SUBLANG_FRENCH_LUXEMBOURG = 0x05;
const int SUBLANG_FRENCH_MONACO = 0x06;
const int SUBLANG_GERMAN = 0x01;
const int SUBLANG_GERMAN_SWISS = 0x02;
const int SUBLANG_GERMAN_AUSTRIAN = 0x03;
const int SUBLANG_GERMAN_LUXEMBOURG = 0x04;
const int SUBLANG_GERMAN_LIECHTENSTEIN = 0x05;
const int SUBLANG_ITALIAN = 0x01;
const int SUBLANG_ITALIAN_SWISS = 0x02;
const int SUBLANG_KASHMIRI_INDIA = 0x02;
const int SUBLANG_KASHMIRI_SASIA = 0x02;
const int SUBLANG_KOREAN = 0x01;
const int SUBLANG_LITHUANIAN = 0x01;
const int SUBLANG_MALAY_MALAYSIA = 0x01;
const int SUBLANG_MALAY_BRUNEI_DARUSSALAM = 0x02;
const int SUBLANG_NEPALI_INDIA = 0x02;
const int SUBLANG_NORWEGIAN_BOKMAL = 0x01;
const int SUBLANG_NORWEGIAN_NYNORSK = 0x02;
const int SUBLANG_PORTUGUESE_BRAZILIAN = 0x01;
const int SUBLANG_PORTUGUESE = 0x02;
const int SUBLANG_SERBIAN_LATIN = 0x02;
const int SUBLANG_SERBIAN_CYRILLIC = 0x03;
const int SUBLANG_SPANISH = 0x01;
const int SUBLANG_SPANISH_MEXICAN = 0x02;
const int SUBLANG_SPANISH_MODERN = 0x03;
const int SUBLANG_SPANISH_GUATEMALA = 0x04;
const int SUBLANG_SPANISH_COSTA_RICA = 0x05;
const int SUBLANG_SPANISH_PANAMA = 0x06;
const int SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 0x07;
const int SUBLANG_SPANISH_VENEZUELA = 0x08;
const int SUBLANG_SPANISH_COLOMBIA = 0x09;
const int SUBLANG_SPANISH_PERU = 0x0a;
const int SUBLANG_SPANISH_ARGENTINA = 0x0b;
const int SUBLANG_SPANISH_ECUADOR = 0x0c;
const int SUBLANG_SPANISH_CHILE = 0x0d;
const double SUBLANG_SPANISH_URUGUAY = 0x0e;
const int SUBLANG_SPANISH_PARAGUAY = 0x0f;
const int SUBLANG_SPANISH_BOLIVIA = 0x10;
const int SUBLANG_SPANISH_EL_SALVADOR = 0x11;
const int SUBLANG_SPANISH_HONDURAS = 0x12;
const int SUBLANG_SPANISH_NICARAGUA = 0x13;
const int SUBLANG_SPANISH_PUERTO_RICO = 0x14;
const int SUBLANG_SWEDISH = 0x01;
const int SUBLANG_SWEDISH_FINLAND = 0x02;
const int SUBLANG_URDU_PAKISTAN = 0x01;
const int SUBLANG_URDU_INDIA = 0x02;
const int SUBLANG_UZBEK_LATIN = 0x01;
const int SUBLANG_UZBEK_CYRILLIC = 0x02;
const int NLS_VALID_LOCALE_MASK = 1048575;
const int SORT_DEFAULT = 0;
const int SORT_JAPANESE_XJIS = 0;
const int SORT_JAPANESE_UNICODE = 1;
const int SORT_CHINESE_BIG5 = 0;
const int SORT_CHINESE_PRCP = 0;
const int SORT_CHINESE_UNICODE = 1;
const int SORT_CHINESE_PRC = 2;
const int SORT_CHINESE_BOPOMOFO = 3;
const int SORT_KOREAN_KSC = 0;
const int SORT_KOREAN_UNICODE = 1;
const int SORT_GERMAN_PHONE_BOOK = 1;
const int SORT_HUNGARIAN_DEFAULT = 0;
const int SORT_HUNGARIAN_TECHNICAL = 1;
const int SORT_GEORGIAN_TRADITIONAL = 0;
const int SORT_GEORGIAN_MODERN = 1;
const int ACL_REVISION = 2;
const int ACL_REVISION_DS = 4;
const int ACL_REVISION1 = 1;
const int ACL_REVISION2 = 2;
const int ACL_REVISION3 = 3;
const int ACL_REVISION4 = 4;
const int MIN_ACL_REVISION = 2;
const int MAX_ACL_REVISION = 4;
const int MINCHAR = 0x80;
const int MAXCHAR = 0x7f;
const int MINSHORT = 0x8000;
const int MAXSHORT = 0x7fff;
const int MINLONG = 0x80000000;
const int MAXLONG = 0x7fffffff;
const int MAXBYTE = 0xff;
const int MAXWORD = 0xffff;
const int MAXDWORD = 0xffffffff;
const int PROCESSOR_INTEL_386 = 386;
const int PROCESSOR_INTEL_486 = 486;
const int PROCESSOR_INTEL_PENTIUM = 586;
const int PROCESSOR_MIPS_R4000 = 4000;
const int PROCESSOR_ALPHA_21064 = 21064;
const int PROCESSOR_INTEL_IA64 = 2200;
const int PROCESSOR_ARCHITECTURE_INTEL = 0;
const int PROCESSOR_ARCHITECTURE_MIPS = 1;
const int PROCESSOR_ARCHITECTURE_ALPHA = 2;
const int PROCESSOR_ARCHITECTURE_PPC = 3;
const int PROCESSOR_ARCHITECTURE_SHX = 4;
const int PROCESSOR_ARCHITECTURE_ARM = 5;
const int PROCESSOR_ARCHITECTURE_IA64 = 6;
const int PROCESSOR_ARCHITECTURE_ALPHA64 = 7;
const int PROCESSOR_ARCHITECTURE_MSIL = 8;
const int PROCESSOR_ARCHITECTURE_AMD64 = 9;
const int PROCESSOR_ARCHITECTURE_IA32_ON_WIN64 = 10;
const int PROCESSOR_ARCHITECTURE_UNKNOWN = 0xFFFF;
const int PF_FLOATING_POINT_PRECISION_ERRATA = 0;
const int PF_FLOATING_POINT_EMULATED = 1;
const int PF_COMPARE_EXCHANGE_DOUBLE = 2;
const int PF_MMX_INSTRUCTIONS_AVAILABLE = 3;
const int PF_PPC_MOVEMEM_64BIT_OK = 4;
const int PF_ALPHA_BYTE_INSTRUCTIONS = 5;
const int PF_XMMI_INSTRUCTIONS_AVAILABLE = 6;
const int PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7;
const int PF_RDTSC_INSTRUCTION_AVAILABLE = 8;
const int PF_PAE_ENABLED = 9;
const int PF_XMMI64_INSTRUCTIONS_AVAILABLE = 10;
const int FILE_ACTION_ADDED = 0x00000001;
const int FILE_ACTION_REMOVED = 0x00000002;
const int FILE_ACTION_MODIFIED = 0x00000003;
const int FILE_ACTION_RENAMED_OLD_NAME = 0x00000004;
const int FILE_ACTION_RENAMED_NEW_NAME = 0x00000005;
const int FILE_ACTION_ADDED_STREAM = 0x00000006;
const int FILE_ACTION_REMOVED_STREAM = 0x00000007;
const int FILE_ACTION_MODIFIED_STREAM = 0x00000008;
const int FILE_ACTION_REMOVED_BY_DELETE = 0x00000009;
const int FILE_ACTION_ID_NOT_TUNNELLED = 0x0000000A;
const int FILE_ACTION_TUNNELLED_ID_COLLISION = 0x0000000B;
const int HEAP_NO_SERIALIZE = 1;
const int HEAP_GROWABLE = 2;
const int HEAP_GENERATE_EXCEPTIONS = 4;
const int HEAP_ZERO_MEMORY = 8;
const int HEAP_REALLOC_IN_PLACE_ONLY = 16;
const int HEAP_TAIL_CHECKING_ENABLED = 32;
const int HEAP_FREE_CHECKING_ENABLED = 64;
const int HEAP_DISABLE_COALESCE_ON_FREE = 128;
const int HEAP_CREATE_ALIGN_16 = 0x0000;
const int HEAP_CREATE_ENABLE_TRACING = 0x20000;
const int HEAP_MAXIMUM_TAG = 0xFFF;
const int HEAP_PSEUDO_TAG_FLAG = 0x8000;
const int HEAP_TAG_SHIFT = 16;
const int KEY_QUERY_VALUE = 1;
const int KEY_SET_VALUE = 2;
const int KEY_CREATE_SUB_KEY = 4;
const int KEY_ENUMERATE_SUB_KEYS = 8;
const int KEY_NOTIFY = 16;
const int KEY_CREATE_LINK = 32;
const int KEY_WRITE = 0x20006;
const int KEY_EXECUTE = 0x20019;
const int KEY_READ = 0x20019;
const int KEY_ALL_ACCESS = 0xf003f;
const int REG_WHOLE_HIVE_VOLATILE = 1;
const int REG_REFRESH_HIVE = 2;
const int REG_NO_LAZY_FLUSH = 4;
const int REG_OPTION_RESERVED = 0;
const int REG_OPTION_NON_VOLATILE = 0;
const int REG_OPTION_VOLATILE = 1;
const int REG_OPTION_CREATE_LINK = 2;
const int REG_OPTION_BACKUP_RESTORE = 4;
const int REG_OPTION_OPEN_LINK = 8;
const int REG_LEGAL_OPTION = 15;
const int OWNER_SECURITY_INFORMATION = 1;
const int GROUP_SECURITY_INFORMATION = 2;
const int DACL_SECURITY_INFORMATION = 4;
const int SACL_SECURITY_INFORMATION = 8;
const int MAXIMUM_PROCESSORS = 32;
const int PAGE_NOACCESS = 0x0001;
const int PAGE_READONLY = 0x0002;
const int PAGE_READWRITE = 0x0004;
const int PAGE_WRITECOPY = 0x0008;
const int PAGE_EXECUTE = 0x0010;
const int PAGE_EXECUTE_READ = 0x0020;
const int PAGE_EXECUTE_READWRITE = 0x0040;
const int PAGE_EXECUTE_WRITECOPY = 0x0080;
const int PAGE_GUARD = 0x0100;
const int PAGE_NOCACHE = 0x0200;
const int MEM_COMMIT = 0x1000;
const int MEM_RESERVE = 0x2000;
const int MEM_DECOMMIT = 0x4000;
const int MEM_RELEASE = 0x8000;
const int MEM_FREE = 0x10000;
const int MEM_PRIVATE = 0x20000;
const int MEM_MAPPED = 0x40000;
const int MEM_RESET = 0x80000;
const int MEM_TOP_DOWN = 0x100000;
const int MEM_WRITE_WATCH = 0x200000;
const int MEM_PHYSICAL = 0x400000;
const int MEM_4MB_PAGES = 0x80000000;
const int SEC_BASED = 0x00200000;
const int SEC_NO_CHANGE = 0x00400000;
const int SEC_FILE = 0x00800000;
const int SEC_IMAGE = 0x01000000;
const int SEC_VLM = 0x02000000;
const int SEC_RESERVE = 0x04000000;
const int SEC_COMMIT = 0x08000000;
const int SEC_NOCACHE = 0x10000000;
const int SECTION_EXTEND_SIZE = 16;
const int SECTION_MAP_READ = 4;
const int SECTION_MAP_WRITE = 2;
const int SECTION_QUERY = 1;
const int SECTION_MAP_EXECUTE = 8;
const int SECTION_ALL_ACCESS = 0xf001f;
const int MESSAGE_RESOURCE_UNICODE = 1;
const int RTL_CRITSECT_TYPE = 0;
const int RTL_RESOURCE_TYPE = 1;
const int IMAGE_SIZEOF_FILE_HEADER = 20;
const int IMAGE_FILE_RELOCS_STRIPPED = 1;
const int IMAGE_FILE_EXECUTABLE_IMAGE = 2;
const int IMAGE_FILE_LINE_NUMS_STRIPPED = 4;
const int IMAGE_FILE_LOCAL_SYMS_STRIPPED = 8;
const int IMAGE_FILE_AGGRESIVE_WS_TRIM = 16;
const int IMAGE_FILE_LARGE_ADDRESS_AWARE = 32;
const int IMAGE_FILE_BYTES_REVERSED_LO = 128;
const int IMAGE_FILE_32BIT_MACHINE = 256;
const int IMAGE_FILE_DEBUG_STRIPPED = 512;
const int IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 1024;
const int IMAGE_FILE_NET_RUN_FROM_SWAP = 2048;
const int IMAGE_FILE_SYSTEM = 4096;
const int IMAGE_FILE_DLL = 8192;
const int IMAGE_FILE_UP_SYSTEM_ONLY = 16384;
const int IMAGE_FILE_BYTES_REVERSED_HI = 32768;
const int IMAGE_FILE_MACHINE_UNKNOWN = 0;
const int IMAGE_FILE_MACHINE_I386 = 332;
const int IMAGE_FILE_MACHINE_R3000 = 354;
const int IMAGE_FILE_MACHINE_R4000 = 358;
const int IMAGE_FILE_MACHINE_R10000 = 360;
const int IMAGE_FILE_MACHINE_ALPHA = 388;
const int IMAGE_FILE_MACHINE_POWERPC = 496;
const int IMAGE_DOS_SIGNATURE = 0x5A4D;
const double IMAGE_OS2_SIGNATURE = 0x454E;
const int IMAGE_OS2_SIGNATURE_LE = 0x454C;
const int IMAGE_VXD_SIGNATURE = 0x454C;
const int IMAGE_NT_SIGNATURE = 0x00004550;
const int IMAGE_NT_OPTIONAL_HDR_MAGIC = 0x10b;
const int IMAGE_ROM_OPTIONAL_HDR_MAGIC = 0x107;
const int IMAGE_SEPARATE_DEBUG_SIGNATURE = 0x4944;
const int IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 16;
const int IMAGE_SIZEOF_ROM_OPTIONAL_HEADER = 56;
const int IMAGE_SIZEOF_STD_OPTIONAL_HEADER = 28;
const int IMAGE_SIZEOF_NT_OPTIONAL_HEADER = 224;
const int IMAGE_SIZEOF_SHORT_NAME = 8;
const int IMAGE_SIZEOF_SECTION_HEADER = 40;
const int IMAGE_SIZEOF_SYMBOL = 18;
const int IMAGE_SIZEOF_AUX_SYMBOL = 18;
const int IMAGE_SIZEOF_RELOCATION = 10;
const int IMAGE_SIZEOF_BASE_RELOCATION = 8;
const int IMAGE_SIZEOF_LINENUMBER = 6;
const int IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60;
const int SIZEOF_RFPO_DATA = 16;
const int IMAGE_SUBSYSTEM_UNKNOWN = 0;
const int IMAGE_SUBSYSTEM_NATIVE = 1;
const int IMAGE_SUBSYSTEM_WINDOWS_GUI = 2;
const int IMAGE_SUBSYSTEM_WINDOWS_CUI = 3;
const int IMAGE_SUBSYSTEM_OS2_CUI = 5;
const int IMAGE_SUBSYSTEM_POSIX_CUI = 7;
const int IMAGE_SUBSYSTEM_XBOX = 14;
const int IMAGE_DIRECTORY_ENTRY_EXPORT = 0;
const int IMAGE_DIRECTORY_ENTRY_IMPORT = 1;
const int IMAGE_DIRECTORY_ENTRY_RESOURCE = 2;
const int IMAGE_DIRECTORY_ENTRY_EXCEPTION = 3;
const int IMAGE_DIRECTORY_ENTRY_SECURITY = 4;
const int IMAGE_DIRECTORY_ENTRY_BASERELOC = 5;
const int IMAGE_DIRECTORY_ENTRY_DEBUG = 6;
const int IMAGE_DIRECTORY_ENTRY_COPYRIGHT = 7;
const int IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 8;
const int IMAGE_DIRECTORY_ENTRY_TLS = 9;
const int IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 10;
const int IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 11;
const int IMAGE_DIRECTORY_ENTRY_IAT = 12;
const int IMAGE_SCN_TYPE_NO_PAD = 8;
const int IMAGE_SCN_CNT_CODE = 32;
const int IMAGE_SCN_CNT_INITIALIZED_DATA = 64;
const int IMAGE_SCN_CNT_UNINITIALIZED_DATA = 128;
const int IMAGE_SCN_LNK_OTHER = 256;
const int IMAGE_SCN_LNK_INFO = 512;
const int IMAGE_SCN_LNK_REMOVE = 2048;
const int IMAGE_SCN_LNK_COMDAT = 4096;
const int IMAGE_SCN_MEM_FARDATA = 0x8000;
const int IMAGE_SCN_MEM_PURGEABLE = 0x20000;
const int IMAGE_SCN_MEM_16BIT = 0x20000;
const int IMAGE_SCN_MEM_LOCKED = 0x40000;
const int IMAGE_SCN_MEM_PRELOAD = 0x80000;
const int IMAGE_SCN_ALIGN_1BYTES = 0x100000;
const int IMAGE_SCN_ALIGN_2BYTES = 0x200000;
const int IMAGE_SCN_ALIGN_4BYTES = 0x300000;
const int IMAGE_SCN_ALIGN_8BYTES = 0x400000;
const int IMAGE_SCN_ALIGN_16BYTES = 0x500000;
const int IMAGE_SCN_ALIGN_32BYTES = 0x600000;
const int IMAGE_SCN_ALIGN_64BYTES = 0x700000;
const int IMAGE_SCN_LNK_NRELOC_OVFL = 0x1000000;
const int IMAGE_SCN_MEM_DISCARDABLE = 0x2000000;
const int IMAGE_SCN_MEM_NOT_CACHED = 0x4000000;
const int IMAGE_SCN_MEM_NOT_PAGED = 0x8000000;
const int IMAGE_SCN_MEM_SHARED = 0x10000000;
const int IMAGE_SCN_MEM_EXECUTE = 0x20000000;
const int IMAGE_SCN_MEM_READ = 0x40000000;
const int IMAGE_SCN_MEM_WRITE = 0x80000000;
const int IMAGE_SYM_UNDEFINED = 0;
const int IMAGE_SYM_TYPE_NULL = 0;
const int IMAGE_SYM_TYPE_VOID = 1;
const int IMAGE_SYM_TYPE_CHAR = 2;
const int IMAGE_SYM_TYPE_SHORT = 3;
const int IMAGE_SYM_TYPE_INT = 4;
const int IMAGE_SYM_TYPE_LONG = 5;
const int IMAGE_SYM_TYPE_FLOAT = 6;
const int IMAGE_SYM_TYPE_DOUBLE = 7;
const int IMAGE_SYM_TYPE_STRUCT = 8;
const int IMAGE_SYM_TYPE_UNION = 9;
const int IMAGE_SYM_TYPE_ENUM = 10;
const int IMAGE_SYM_TYPE_MOE = 11;
const int IMAGE_SYM_TYPE_BYTE = 12;
const int IMAGE_SYM_TYPE_WORD = 13;
const int IMAGE_SYM_TYPE_UINT = 14;
const int IMAGE_SYM_TYPE_DWORD = 15;
const int IMAGE_SYM_TYPE_PCODE = 32768;
const int IMAGE_SYM_DTYPE_NULL = 0;
const int IMAGE_SYM_DTYPE_POINTER = 1;
const int IMAGE_SYM_DTYPE_FUNCTION = 2;
const int IMAGE_SYM_DTYPE_ARRAY = 3;
const int IMAGE_SYM_CLASS_NULL = 0;
const int IMAGE_SYM_CLASS_AUTOMATIC = 1;
const int IMAGE_SYM_CLASS_EXTERNAL = 2;
const int IMAGE_SYM_CLASS_STATIC = 3;
const int IMAGE_SYM_CLASS_REGISTER = 4;
const int IMAGE_SYM_CLASS_EXTERNAL_DEF = 5;
const int IMAGE_SYM_CLASS_LABEL = 6;
const int IMAGE_SYM_CLASS_UNDEFINED_LABEL = 7;
const int IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 8;
const int IMAGE_SYM_CLASS_ARGUMENT = 9;
const int IMAGE_SYM_CLASS_STRUCT_TAG = 10;
const int IMAGE_SYM_CLASS_MEMBER_OF_UNION = 11;
const int IMAGE_SYM_CLASS_UNION_TAG = 12;
const int IMAGE_SYM_CLASS_TYPE_DEFINITION = 13;
const int IMAGE_SYM_CLASS_UNDEFINED_STATIC = 14;
const int IMAGE_SYM_CLASS_ENUM_TAG = 15;
const int IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 16;
const int IMAGE_SYM_CLASS_REGISTER_PARAM = 17;
const int IMAGE_SYM_CLASS_BIT_FIELD = 18;
const int IMAGE_SYM_CLASS_FAR_EXTERNAL = 68;
const int IMAGE_SYM_CLASS_BLOCK = 100;
const int IMAGE_SYM_CLASS_FUNCTION = 101;
const int IMAGE_SYM_CLASS_END_OF_STRUCT = 102;
const int IMAGE_SYM_CLASS_FILE = 103;
const int IMAGE_SYM_CLASS_SECTION = 104;
const int IMAGE_SYM_CLASS_WEAK_EXTERNAL = 105;
const int IMAGE_COMDAT_SELECT_NODUPLICATES = 1;
const int IMAGE_COMDAT_SELECT_ANY = 2;
const int IMAGE_COMDAT_SELECT_SAME_SIZE = 3;
const int IMAGE_COMDAT_SELECT_EXACT_MATCH = 4;
const int IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5;
const int IMAGE_COMDAT_SELECT_LARGEST = 6;
const int IMAGE_COMDAT_SELECT_NEWEST = 7;
const int IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1;
const int IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2;
const int IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3;
const int IMAGE_REL_I386_ABSOLUTE = 0;
const int IMAGE_REL_I386_DIR16 = 1;
const int IMAGE_REL_I386_REL16 = 2;
const int IMAGE_REL_I386_DIR32 = 6;
const int IMAGE_REL_I386_DIR32NB = 7;
const int IMAGE_REL_I386_SEG12 = 9;
const int IMAGE_REL_I386_SECTION = 10;
const int IMAGE_REL_I386_SECREL = 11;
const int IMAGE_REL_I386_REL32 = 20;
const int IMAGE_REL_MIPS_ABSOLUTE = 0;
const int IMAGE_REL_MIPS_REFHALF = 1;
const int IMAGE_REL_MIPS_REFWORD = 2;
const int IMAGE_REL_MIPS_JMPADDR = 3;
const int IMAGE_REL_MIPS_REFHI = 4;
const int IMAGE_REL_MIPS_REFLO = 5;
const int IMAGE_REL_MIPS_GPREL = 6;
const int IMAGE_REL_MIPS_LITERAL = 7;
const int IMAGE_REL_MIPS_SECTION = 10;
const int IMAGE_REL_MIPS_SECREL = 11;
const int IMAGE_REL_MIPS_SECRELLO = 12;
const int IMAGE_REL_MIPS_SECRELHI = 13;
const int IMAGE_REL_MIPS_REFWORDNB = 34;
const int IMAGE_REL_MIPS_PAIR = 35;
const int IMAGE_REL_ALPHA_ABSOLUTE = 0;
const int IMAGE_REL_ALPHA_REFLONG = 1;
const int IMAGE_REL_ALPHA_REFQUAD = 2;
const int IMAGE_REL_ALPHA_GPREL32 = 3;
const int IMAGE_REL_ALPHA_LITERAL = 4;
const int IMAGE_REL_ALPHA_LITUSE = 5;
const int IMAGE_REL_ALPHA_GPDISP = 6;
const int IMAGE_REL_ALPHA_BRADDR = 7;
const int IMAGE_REL_ALPHA_HINT = 8;
const int IMAGE_REL_ALPHA_INLINE_REFLONG = 9;
const int IMAGE_REL_ALPHA_REFHI = 10;
const int IMAGE_REL_ALPHA_REFLO = 11;
const int IMAGE_REL_ALPHA_PAIR = 12;
const int IMAGE_REL_ALPHA_MATCH = 13;
const int IMAGE_REL_ALPHA_SECTION = 14;
const int IMAGE_REL_ALPHA_SECREL = 15;
const int IMAGE_REL_ALPHA_REFLONGNB = 16;
const int IMAGE_REL_ALPHA_SECRELLO = 17;
const int IMAGE_REL_ALPHA_SECRELHI = 18;
const int IMAGE_REL_PPC_ABSOLUTE = 0;
const int IMAGE_REL_PPC_ADDR64 = 1;
const int IMAGE_REL_PPC_ADDR32 = 2;
const int IMAGE_REL_PPC_ADDR24 = 3;
const int IMAGE_REL_PPC_ADDR16 = 4;
const int IMAGE_REL_PPC_ADDR14 = 5;
const int IMAGE_REL_PPC_REL24 = 6;
const int IMAGE_REL_PPC_REL14 = 7;
const int IMAGE_REL_PPC_TOCREL16 = 8;
const int IMAGE_REL_PPC_TOCREL14 = 9;
const int IMAGE_REL_PPC_ADDR32NB = 10;
const int IMAGE_REL_PPC_SECREL = 11;
const int IMAGE_REL_PPC_SECTION = 12;
const int IMAGE_REL_PPC_IFGLUE = 13;
const int IMAGE_REL_PPC_IMGLUE = 14;
const int IMAGE_REL_PPC_SECREL16 = 15;
const int IMAGE_REL_PPC_REFHI = 16;
const int IMAGE_REL_PPC_REFLO = 17;
const int IMAGE_REL_PPC_PAIR = 18;
const int IMAGE_REL_PPC_TYPEMASK = 255;
const int IMAGE_REL_PPC_NEG = 256;
const int IMAGE_REL_PPC_BRTAKEN = 512;
const int IMAGE_REL_PPC_BRNTAKEN = 1024;
const int IMAGE_REL_PPC_TOCDEFN = 2048;
const int IMAGE_REL_BASED_ABSOLUTE = 0;
const int IMAGE_REL_BASED_HIGH = 1;
const int IMAGE_REL_BASED_LOW = 2;
const int IMAGE_REL_BASED_HIGHLOW = 3;
const int IMAGE_REL_BASED_HIGHADJ = 4;
const int IMAGE_REL_BASED_MIPS_JMPADDR = 5;
const int IMAGE_ARCHIVE_START_SIZE = 8;
const int IMAGE_ORDINAL_FLAG32 = 0x80000000;
const int IMAGE_RESOURCE_NAME_IS_STRING = 0x80000000;
const int IMAGE_RESOURCE_DATA_IS_DIRECTORY = 0x80000000;
const int IMAGE_DEBUG_TYPE_UNKNOWN = 0;
const int IMAGE_DEBUG_TYPE_COFF = 1;
const int IMAGE_DEBUG_TYPE_CODEVIEW = 2;
const int IMAGE_DEBUG_TYPE_FPO = 3;
const int IMAGE_DEBUG_TYPE_MISC = 4;
const int IMAGE_DEBUG_TYPE_EXCEPTION = 5;
const int IMAGE_DEBUG_TYPE_FIXUP = 6;
const int IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7;
const int IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8;
const int FRAME_FPO = 0;
const int FRAME_TRAP = 1;
const int FRAME_TSS = 2;
const int FRAME_NONFPO = 3;
const int IMAGE_DEBUG_MISC_EXENAME = 1;
const int N_BTMASK = 0x000F;
const int N_TMASK = 0x0030;
const int N_TMASK1 = 0x00C0;
const int N_TMASK2 = 0x00F0;
const int N_BTSHFT = 4;
const int N_TSHIFT = 2;
const int IS_TEXT_UNICODE_ASCII16 = 1;
const int IS_TEXT_UNICODE_REVERSE_ASCII16 = 16;
const int IS_TEXT_UNICODE_STATISTICS = 2;
const int IS_TEXT_UNICODE_REVERSE_STATISTICS = 32;
const int IS_TEXT_UNICODE_CONTROLS = 4;
const int IS_TEXT_UNICODE_REVERSE_CONTROLS = 64;
const int IS_TEXT_UNICODE_SIGNATURE = 8;
const int IS_TEXT_UNICODE_REVERSE_SIGNATURE = 128;
const int IS_TEXT_UNICODE_ILLEGAL_CHARS = 256;
const int IS_TEXT_UNICODE_ODD_LENGTH = 512;
const int IS_TEXT_UNICODE_NULL_BYTES = 4096;
const int IS_TEXT_UNICODE_UNICODE_MASK = 15;
const int IS_TEXT_UNICODE_REVERSE_MASK = 240;
const int IS_TEXT_UNICODE_NOT_UNICODE_MASK = 3840;
const int IS_TEXT_UNICODE_NOT_ASCII_MASK = 61440;
const int SERVICE_KERNEL_DRIVER = 1;
const int SERVICE_FILE_SYSTEM_DRIVER = 2;
const int SERVICE_ADAPTER = 4;
const int SERVICE_RECOGNIZER_DRIVER = 8;
const int SERVICE_WIN32_OWN_PROCESS = 16;
const int SERVICE_WIN32_SHARE_PROCESS = 32;
const int SERVICE_INTERACTIVE_PROCESS = 256;
const int SERVICE_BOOT_START = 0;
const int SERVICE_SYSTEM_START = 1;
const int SERVICE_AUTO_START = 2;
const int SERVICE_DEMAND_START = 3;
const int SERVICE_DISABLED = 4;
const int SERVICE_ERROR_IGNORE = 0;
const int SERVICE_ERROR_NORMAL = 1;
const int SERVICE_ERROR_SEVERE = 2;
const int SERVICE_ERROR_CRITICAL = 3;
const int SE_OWNER_DEFAULTED = 1;
const int SE_GROUP_DEFAULTED = 2;
const int SE_DACL_PRESENT = 4;
const int SE_DACL_DEFAULTED = 8;
const int SE_SACL_PRESENT = 16;
const int SE_SACL_DEFAULTED = 32;
const int SE_DACL_AUTO_INHERIT_REQ = 256;
const int SE_SACL_AUTO_INHERIT_REQ = 512;
const int SE_DACL_AUTO_INHERITED = 1024;
const int SE_SACL_AUTO_INHERITED = 2048;
const int SE_DACL_PROTECTED = 4096;
const int SE_SACL_PROTECTED = 8192;
const int SE_SELF_RELATIVE = 0x8000;
const int SECURITY_DESCRIPTOR_MIN_LENGTH = 20;
const int SECURITY_DESCRIPTOR_REVISION = 1;
const int SECURITY_DESCRIPTOR_REVISION1 = 1;
const int SE_PRIVILEGE_ENABLED_BY_DEFAULT = 1;
const int SE_PRIVILEGE_ENABLED = 2;
const int SE_PRIVILEGE_USED_FOR_ACCESS = 0x80000000;
const int PRIVILEGE_SET_ALL_NECESSARY = 1;
const int TOKEN_SOURCE_LENGTH = 8;
const int DLL_PROCESS_DETACH = 0;
const int DLL_PROCESS_ATTACH = 1;
const int DLL_THREAD_ATTACH = 2;
const int DLL_THREAD_DETACH = 3;
const int DBG_CONTINUE = 0x10002;
const int DBG_TERMINATE_THREAD = 0x40010003;
const int DBG_TERMINATE_PROCESS = 0x40010004;
const int DBG_CONTROL_C = 0x40010005;
const int DBG_CONTROL_BREAK = 0x40010008;
const int DBG_EXCEPTION_NOT_HANDLED = 0x80010001;
const int TAPE_ABSOLUTE_POSITION = 0;
const int TAPE_LOGICAL_POSITION = 1;
const int TAPE_PSEUDO_LOGICAL_POSITION = 2;
const int TAPE_REWIND = 0;
const int TAPE_ABSOLUTE_BLOCK = 1;
const int TAPE_LOGICAL_BLOCK = 2;
const int TAPE_PSEUDO_LOGICAL_BLOCK = 3;
const int TAPE_SPACE_END_OF_DATA = 4;
const int TAPE_SPACE_RELATIVE_BLOCKS = 5;
const int TAPE_SPACE_FILEMARKS = 6;
const int TAPE_SPACE_SEQUENTIAL_FMKS = 7;
const int TAPE_SPACE_SETMARKS = 8;
const int TAPE_SPACE_SEQUENTIAL_SMKS = 9;
const int TAPE_DRIVE_FIXED = 1;
const int TAPE_DRIVE_SELECT = 2;
const int TAPE_DRIVE_INITIATOR = 4;
const int TAPE_DRIVE_ERASE_SHORT = 16;
const int TAPE_DRIVE_ERASE_LONG = 32;
const int TAPE_DRIVE_ERASE_BOP_ONLY = 64;
const int TAPE_DRIVE_ERASE_IMMEDIATE = 128;
const int TAPE_DRIVE_TAPE_CAPACITY = 256;
const int TAPE_DRIVE_TAPE_REMAINING = 512;
const int TAPE_DRIVE_FIXED_BLOCK = 1024;
const int TAPE_DRIVE_VARIABLE_BLOCK = 2048;
const int TAPE_DRIVE_WRITE_PROTECT = 4096;
const int TAPE_DRIVE_EOT_WZ_SIZE = 8192;
const int TAPE_DRIVE_ECC = 0x10000;
const int TAPE_DRIVE_COMPRESSION = 0x20000;
const int TAPE_DRIVE_PADDING = 0x40000;
const int TAPE_DRIVE_REPORT_SMKS = 0x80000;
const int TAPE_DRIVE_GET_ABSOLUTE_BLK = 0x100000;
const int TAPE_DRIVE_GET_LOGICAL_BLK = 0x200000;
const int TAPE_DRIVE_SET_EOT_WZ_SIZE = 0x400000;
const int TAPE_DRIVE_EJECT_MEDIA = 0x1000000;
const int TAPE_DRIVE_CLEAN_REQUESTS = 0x2000000;
const int TAPE_DRIVE_SET_CMP_BOP_ONLY = 0x4000000;
const int TAPE_DRIVE_RESERVED_BIT = 0x80000000;
const int TAPE_DRIVE_LOAD_UNLOAD = 0x80000001;
const int TAPE_DRIVE_TENSION = 0x80000002;
const int TAPE_DRIVE_LOCK_UNLOCK = 0x80000004;
const int TAPE_DRIVE_REWIND_IMMEDIATE = 0x80000008;
const int TAPE_DRIVE_SET_BLOCK_SIZE = 0x80000010;
const int TAPE_DRIVE_LOAD_UNLD_IMMED = 0x80000020;
const int TAPE_DRIVE_TENSION_IMMED = 0x80000040;
const int TAPE_DRIVE_LOCK_UNLK_IMMED = 0x80000080;
const int TAPE_DRIVE_SET_ECC = 0x80000100;
const int TAPE_DRIVE_SET_COMPRESSION = 0x80000200;
const int TAPE_DRIVE_SET_PADDING = 0x80000400;
const int TAPE_DRIVE_SET_REPORT_SMKS = 0x80000800;
const int TAPE_DRIVE_ABSOLUTE_BLK = 0x80001000;
const int TAPE_DRIVE_ABS_BLK_IMMED = 0x80002000;
const int TAPE_DRIVE_LOGICAL_BLK = 0x80004000;
const int TAPE_DRIVE_LOG_BLK_IMMED = 0x80008000;
const int TAPE_DRIVE_END_OF_DATA = 0x80010000;
const int TAPE_DRIVE_RELATIVE_BLKS = 0x80020000;
const int TAPE_DRIVE_FILEMARKS = 0x80040000;
const int TAPE_DRIVE_SEQUENTIAL_FMKS = 0x80080000;
const int TAPE_DRIVE_SETMARKS = 0x80100000;
const int TAPE_DRIVE_SEQUENTIAL_SMKS = 0x80200000;
const int TAPE_DRIVE_REVERSE_POSITION = 0x80400000;
const int TAPE_DRIVE_SPACE_IMMEDIATE = 0x80800000;
const int TAPE_DRIVE_WRITE_SETMARKS = 0x81000000;
const int TAPE_DRIVE_WRITE_FILEMARKS = 0x82000000;
const int TAPE_DRIVE_WRITE_SHORT_FMKS = 0x84000000;
const int TAPE_DRIVE_WRITE_LONG_FMKS = 0x88000000;
const int TAPE_DRIVE_WRITE_MARK_IMMED = 0x90000000;
const int TAPE_DRIVE_FORMAT = 0xA0000000;
const int TAPE_DRIVE_FORMAT_IMMEDIATE = 0xC0000000;
const int TAPE_DRIVE_HIGH_FEATURES = 0x80000000;
const int TAPE_FIXED_PARTITIONS = 0;
const int TAPE_INITIATOR_PARTITIONS = 2;
const int TAPE_SELECT_PARTITIONS = 1;
const int TAPE_FILEMARKS = 1;
const int TAPE_LONG_FILEMARKS = 3;
const int TAPE_SETMARKS = 0;
const int TAPE_SHORT_FILEMARKS = 2;
const int TAPE_ERASE_LONG = 1;
const int TAPE_ERASE_SHORT = 0;
const int TAPE_LOAD = 0;
const int TAPE_UNLOAD = 1;
const int TAPE_TENSION = 2;
const int TAPE_LOCK = 3;
const int TAPE_UNLOCK = 4;
const int TAPE_FORMAT = 5;
const int VER_PLATFORM_WIN32s = 0;
const int VER_PLATFORM_WIN32_WINDOWS = 1;
const int VER_PLATFORM_WIN32_NT = 2;
const int VER_NT_WORKSTATION = 1;
const int VER_NT_DOMAIN_CONTROLLER = 2;
const int VER_NT_SERVER = 3;
const int VER_SUITE_SMALLBUSINESS = 1;
const int VER_SUITE_ENTERPRISE = 2;
const int VER_SUITE_BACKOFFICE = 4;
const int VER_SUITE_TERMINAL = 16;
const int VER_SUITE_SMALLBUSINESS_RESTRICTED = 32;
const int VER_SUITE_DATACENTER = 128;
const int VER_SUITE_PERSONAL = 512;
const int VER_SUITE_BLADE = 1024;
const int WT_EXECUTEDEFAULT = 0x00000000;
const int WT_EXECUTEINIOTHREAD = 0x00000001;
const int WT_EXECUTEINWAITTHREAD = 0x00000004;
const int WT_EXECUTEONLYONCE = 0x00000008;
const int WT_EXECUTELONGFUNCTION = 0x00000010;
const int WT_EXECUTEINTIMERTHREAD = 0x00000020;
const int WT_EXECUTEINPERSISTENTTHREAD = 0x00000080;
const int WT_TRANSFER_IMPERSONATION = 0x00000100;
const int TLS_MINIMUM_AVAILABLE = 64;
const int MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16384;
const int IO_REPARSE_TAG_RESERVED_ZERO = 0;
const int IO_REPARSE_TAG_RESERVED_ONE = 1;
const double IO_REPARSE_TAG_VALID_VALUES = 0xE000FFFF;
const int IO_REPARSE_TAG_MOUNT_POINT = 0xA0000003;
const int SIZE_OF_80387_REGISTERS = 80;
const int CONTEXT_i386 = 0x10000;
const int CONTEXT_i486 = 0x10000;
const int MAXIMUM_SUPPORTED_EXTENSION = 512;
const int JOB_OBJECT_LIMIT_WORKINGSET = 0x0001;
const int JOB_OBJECT_LIMIT_PROCESS_TIME = 0x0002;
const int JOB_OBJECT_LIMIT_JOB_TIME = 0x0004;
const int JOB_OBJECT_LIMIT_ACTIVE_PROCESS = 0x0008;
const int JOB_OBJECT_LIMIT_AFFINITY = 0x0010;
const int JOB_OBJECT_LIMIT_PRIORITY_CLASS = 0x0020;
const int JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = 0x0040;
const int JOB_OBJECT_LIMIT_SCHEDULING_CLASS = 0x0080;
const int JOB_OBJECT_LIMIT_PROCESS_MEMORY = 0x0100;
const int JOB_OBJECT_LIMIT_JOB_MEMORY = 0x0200;
const int JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = 0x0400;
const int JOB_OBJECT_BREAKAWAY_OK = 0x0800;
const int JOB_OBJECT_SILENT_BREAKAWAY = 0x1000;
const int JOB_OBJECT_UILIMIT_HANDLES = 0x0001;
const int JOB_OBJECT_UILIMIT_READCLIPBOARD = 0x0002;
const int JOB_OBJECT_UILIMIT_WRITECLIPBOARD = 0x0004;
const int JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 0x0008;
const int JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = 0x0010;
const int JOB_OBJECT_UILIMIT_GLOBALATOMS = 0x0020;
const int JOB_OBJECT_UILIMIT_DESKTOP = 0x0040;
const int JOB_OBJECT_UILIMIT_EXITWINDOWS = 0x0080;
const int JOB_OBJECT_SECURITY_NO_ADMIN = 0x0001;
const int JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = 0x0002;
const int JOB_OBJECT_SECURITY_ONLY_TOKEN = 0x0004;
const int JOB_OBJECT_SECURITY_FILTER_TOKENS = 0x0008;
const int JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0;
const int JOB_OBJECT_POST_AT_END_OF_JOB = 1;
const int JOB_OBJECT_MSG_END_OF_JOB_TIME = 1;
const int JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2;
const int JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3;
const int JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4;
const int JOB_OBJECT_MSG_NEW_PROCESS = 6;
const int JOB_OBJECT_MSG_EXIT_PROCESS = 7;
const int JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS = 8;
const int JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT = 9;
const int JOB_OBJECT_MSG_JOB_MEMORY_LIMIT = 10;
const int ES_SYSTEM_REQUIRED = 0x00000001;
const int ES_DISPLAY_REQUIRED = 0x00000002;
const int ES_USER_PRESENT = 0x00000004;
const int ES_CONTINUOUS = 0x80000000;
const int POWER_ACTION_QUERY_ALLOWED = 0x00000001;
const int POWER_ACTION_UI_ALLOWED = 0x00000002;
const int POWER_ACTION_OVERRIDE_APPS = 0x00000004;
const int POWER_ACTION_LIGHTEST_FIRST = 0x10000000;
const int POWER_ACTION_LOCK_CONSOLE = 0x20000000;
const int POWER_ACTION_DISABLE_WAKES = 0x40000000;
const int POWER_ACTION_CRITICAL = 0x80000000;
const int POWER_LEVEL_USER_NOTIFY_TEXT = 0x00000001;
const int POWER_LEVEL_USER_NOTIFY_SOUND = 0x00000002;
const int POWER_LEVEL_USER_NOTIFY_EXEC = 0x00000004;
const int POWER_USER_NOTIFY_BUTTON = 0x00000008;
const int POWER_USER_NOTIFY_SHUTDOWN = 0x00000010;
const int POWER_FORCE_TRIGGER_RESET = 0x80000000;
const int DISCHARGE_POLICY_CRITICAL = 0;
const int DISCHARGE_POLICY_LOW = 1;
const int NUM_DISCHARGE_POLICIES = 4;
const int PO_THROTTLE_NONE = 0;
const int PO_THROTTLE_CONSTANT = 1;
const int PO_THROTTLE_DEGRADE = 2;
const int PO_THROTTLE_ADAPTIVE = 3;
const int PO_THROTTLE_MAXIMUM = 4;
const int HMONITOR_DECLARED = 1;
const int FOREGROUND_BLUE = 1;
const int FOREGROUND_GREEN = 2;
const int FOREGROUND_RED = 4;
const int FOREGROUND_INTENSITY = 8;
const int BACKGROUND_BLUE = 16;
const int BACKGROUND_GREEN = 32;
const int BACKGROUND_RED = 64;
const int BACKGROUND_INTENSITY = 128;
const int CTRL_C_EVENT = 0;
const int CTRL_BREAK_EVENT = 1;
const int CTRL_CLOSE_EVENT = 2;
const int CTRL_LOGOFF_EVENT = 5;
const int CTRL_SHUTDOWN_EVENT = 6;
const int ENABLE_LINE_INPUT = 2;
const int ENABLE_ECHO_INPUT = 4;
const int ENABLE_PROCESSED_INPUT = 1;
const int ENABLE_WINDOW_INPUT = 8;
const int ENABLE_MOUSE_INPUT = 16;
const int ENABLE_PROCESSED_OUTPUT = 1;
const int ENABLE_WRAP_AT_EOL_OUTPUT = 2;
const int KEY_EVENT = 1;
const int MOUSE_EVENT = 2;
const int WINDOW_BUFFER_SIZE_EVENT = 4;
const int MENU_EVENT = 8;
const int FOCUS_EVENT = 16;
const int CAPSLOCK_ON = 128;
const int ENHANCED_KEY = 256;
const int RIGHT_ALT_PRESSED = 1;
const int LEFT_ALT_PRESSED = 2;
const int RIGHT_CTRL_PRESSED = 4;
const int LEFT_CTRL_PRESSED = 8;
const int SHIFT_PRESSED = 16;
const int NUMLOCK_ON = 32;
const int SCROLLLOCK_ON = 64;
const int FROM_LEFT_1ST_BUTTON_PRESSED = 1;
const int RIGHTMOST_BUTTON_PRESSED = 2;
const int FROM_LEFT_2ND_BUTTON_PRESSED = 4;
const int FROM_LEFT_3RD_BUTTON_PRESSED = 8;
const int FROM_LEFT_4TH_BUTTON_PRESSED = 16;
const int MOUSE_MOVED = 1;
const int DOUBLE_CLICK = 2;
const int MOUSE_WHEELED = 4;
const int SP_SERIALCOMM = 1;
const int PST_UNSPECIFIED = 0;
const int PST_RS232 = 1;
const int PST_PARALLELPORT = 2;
const int PST_RS422 = 3;
const int PST_RS423 = 4;
const int PST_RS449 = 5;
const int PST_MODEM = 6;
const int PST_FAX = 0x21;
const int PST_SCANNER = 0x22;
const int PST_NETWORK_BRIDGE = 0x100;
const int PST_LAT = 0x101;
const int PST_TCPIP_TELNET = 0x102;
const int PST_X25 = 0x103;
const int BAUD_075 = 1;
const int BAUD_110 = 2;
const int BAUD_134_5 = 4;
const int BAUD_150 = 8;
const int BAUD_300 = 16;
const int BAUD_600 = 32;
const int BAUD_1200 = 64;
const int BAUD_1800 = 128;
const int BAUD_2400 = 256;
const int BAUD_4800 = 512;
const int BAUD_7200 = 1024;
const int BAUD_9600 = 2048;
const int BAUD_14400 = 4096;
const int BAUD_19200 = 8192;
const int BAUD_38400 = 16384;
const int BAUD_56K = 32768;
const int BAUD_128K = 65536;
const int BAUD_115200 = 131072;
const int BAUD_57600 = 262144;
const int BAUD_USER = 0x10000000;
const int PCF_DTRDSR = 1;
const int PCF_RTSCTS = 2;
const int PCF_RLSD = 4;
const int PCF_PARITY_CHECK = 8;
const int PCF_XONXOFF = 16;
const int PCF_SETXCHAR = 32;
const int PCF_TOTALTIMEOUTS = 64;
const int PCF_INTTIMEOUTS = 128;
const int PCF_SPECIALCHARS = 256;
const int PCF_16BITMODE = 512;
const int SP_PARITY = 1;
const int SP_BAUD = 2;
const int SP_DATABITS = 4;
const int SP_STOPBITS = 8;
const int SP_HANDSHAKING = 16;
const int SP_PARITY_CHECK = 32;
const int SP_RLSD = 64;
const int DATABITS_5 = 1;
const int DATABITS_6 = 2;
const int DATABITS_7 = 4;
const int DATABITS_8 = 8;
const int DATABITS_16 = 16;
const int DATABITS_16X = 32;
const int STOPBITS_10 = 1;
const int STOPBITS_15 = 2;
const int STOPBITS_20 = 4;
const int PARITY_NONE = 256;
const int PARITY_ODD = 512;
const int PARITY_EVEN = 1024;
const int PARITY_MARK = 2048;
const int PARITY_SPACE = 4096;
const int EXCEPTION_DEBUG_EVENT = 1;
const int CREATE_THREAD_DEBUG_EVENT = 2;
const int CREATE_PROCESS_DEBUG_EVENT = 3;
const int EXIT_THREAD_DEBUG_EVENT = 4;
const int EXIT_PROCESS_DEBUG_EVENT = 5;
const int LOAD_DLL_DEBUG_EVENT = 6;
const int UNLOAD_DLL_DEBUG_EVENT = 7;
const int OUTPUT_DEBUG_STRING_EVENT = 8;
const int RIP_EVENT = 9;
const int FILE_BEGIN = 0;
const int FILE_CURRENT = 1;
const int FILE_END = 2;
const int OF_READ = 0;
const int OF_READWRITE = 2;
const int OF_WRITE = 1;
const int OF_SHARE_COMPAT = 0;
const int OF_SHARE_DENY_NONE = 64;
const int OF_SHARE_DENY_READ = 48;
const int OF_SHARE_DENY_WRITE = 32;
const int OF_SHARE_EXCLUSIVE = 16;
const int OF_CANCEL = 2048;
const int OF_CREATE = 4096;
const int OF_DELETE = 512;
const int OF_EXIST = 16384;
const int OF_PARSE = 256;
const int OF_PROMPT = 8192;
const int OF_REOPEN = 32768;
const int OF_VERIFY = 1024;
const int NMPWAIT_NOWAIT = 1;
const int NMPWAIT_USE_DEFAULT_WAIT = 0;
const int CE_BREAK = 16;
const int CE_DNS = 2048;
const int CE_FRAME = 8;
const int CE_IOE = 1024;
const int CE_MODE = 32768;
const int CE_OOP = 4096;
const int CE_OVERRUN = 2;
const int CE_PTO = 512;
const int CE_RXOVER = 1;
const int CE_RXPARITY = 4;
const int CE_TXFULL = 256;
const int PROGRESS_CONTINUE = 0;
const int PROGRESS_CANCEL = 1;
const int PROGRESS_STOP = 2;
const int PROGRESS_QUIET = 3;
const int CALLBACK_CHUNK_FINISHED = 0;
const int CALLBACK_STREAM_SWITCH = 1;
const int COPY_FILE_FAIL_IF_EXISTS = 1;
const int COPY_FILE_RESTARTABLE = 2;
const int OFS_MAXPATHNAME = 128;
const int FILE_MAP_ALL_ACCESS = 0xf001f;
const int FILE_MAP_READ = 4;
const int FILE_MAP_WRITE = 2;
const int FILE_MAP_COPY = 1;
const int MUTEX_ALL_ACCESS = 0x1f0001;
const int MUTEX_MODIFY_STATE = 1;
const int SEMAPHORE_ALL_ACCESS = 0x1f0003;
const int SEMAPHORE_MODIFY_STATE = 2;
const int EVENT_ALL_ACCESS = 0x1f0003;
const int EVENT_MODIFY_STATE = 2;
const int PIPE_ACCESS_DUPLEX = 3;
const int PIPE_ACCESS_INBOUND = 1;
const int PIPE_ACCESS_OUTBOUND = 2;
const int PIPE_TYPE_BYTE = 0;
const int PIPE_TYPE_MESSAGE = 4;
const int PIPE_READMODE_BYTE = 0;
const int PIPE_READMODE_MESSAGE = 2;
const int PIPE_WAIT = 0;
const int PIPE_NOWAIT = 1;
const int PIPE_CLIENT_END = 0;
const int PIPE_SERVER_END = 1;
const int PIPE_UNLIMITED_INSTANCES = 255;
const int DEBUG_PROCESS = 0x00000001;
const int DEBUG_ONLY_THIS_PROCESS = 0x00000002;
const int CREATE_SUSPENDED = 0x00000004;
const int DETACHED_PROCESS = 0x00000008;
const int CREATE_NEW_CONSOLE = 0x00000010;
const int NORMAL_PRIORITY_CLASS = 0x00000020;
const int IDLE_PRIORITY_CLASS = 0x00000040;
const int HIGH_PRIORITY_CLASS = 0x00000080;
const int REALTIME_PRIORITY_CLASS = 0x00000100;
const int CREATE_NEW_PROCESS_GROUP = 0x00000200;
const int CREATE_UNICODE_ENVIRONMENT = 0x00000400;
const int CREATE_SEPARATE_WOW_VDM = 0x00000800;
const int CREATE_SHARED_WOW_VDM = 0x00001000;
const int CREATE_FORCEDOS = 0x00002000;
const int BELOW_NORMAL_PRIORITY_CLASS = 0x00004000;
const int ABOVE_NORMAL_PRIORITY_CLASS = 0x00008000;
const int CREATE_BREAKAWAY_FROM_JOB = 0x01000000;
const int CREATE_WITH_USERPROFILE = 0x02000000;
const int CREATE_DEFAULT_ERROR_MODE = 0x04000000;
const int CREATE_NO_WINDOW = 0x08000000;
const int PROFILE_USER = 0x10000000;
const int PROFILE_KERNEL = 0x20000000;
const int PROFILE_SERVER = 0x40000000;
const int CONSOLE_TEXTMODE_BUFFER = 1;
const int CREATE_NEW = 1;
const int CREATE_ALWAYS = 2;
const int OPEN_EXISTING = 3;
const int OPEN_ALWAYS = 4;
const int TRUNCATE_EXISTING = 5;
const int FILE_FLAG_WRITE_THROUGH = 0x80000000;
const int FILE_FLAG_OVERLAPPED = 1073741824;
const int FILE_FLAG_NO_BUFFERING = 536870912;
const int FILE_FLAG_RANDOM_ACCESS = 268435456;
const int FILE_FLAG_SEQUENTIAL_SCAN = 134217728;
const int FILE_FLAG_DELETE_ON_CLOSE = 67108864;
const int FILE_FLAG_BACKUP_SEMANTICS = 33554432;
const int FILE_FLAG_POSIX_SEMANTICS = 16777216;
const int FILE_FLAG_OPEN_REPARSE_POINT = 2097152;
const int FILE_FLAG_OPEN_NO_RECALL = 1048576;
const int CLRDTR = 6;
const int CLRRTS = 4;
const int SETDTR = 5;
const int SETRTS = 3;
const int SETXOFF = 1;
const int SETXON = 2;
const int SETBREAK = 8;
const int CLRBREAK = 9;
const int STILL_ACTIVE = 0x103;
const int FIND_FIRST_EX_CASE_SENSITIVE = 1;
const int SCS_32BIT_BINARY = 0;
const int SCS_DOS_BINARY = 1;
const int SCS_OS216_BINARY = 5;
const int SCS_PIF_BINARY = 3;
const int SCS_POSIX_BINARY = 4;
const int SCS_WOW_BINARY = 2;
const int MAX_COMPUTERNAME_LENGTH = 15;
const int HW_PROFILE_GUIDLEN = 39;
const int MAX_PROFILE_LEN = 80;
const int DOCKINFO_UNDOCKED = 1;
const int DOCKINFO_DOCKED = 2;
const int DOCKINFO_USER_SUPPLIED = 4;
const int DRIVE_REMOVABLE = 2;
const int DRIVE_FIXED = 3;
const int DRIVE_REMOTE = 4;
const int DRIVE_CDROM = 5;
const int DRIVE_RAMDISK = 6;
const int DRIVE_UNKNOWN = 0;
const int DRIVE_NO_ROOT_DIR = 1;
const int FILE_TYPE_UNKNOWN = 0;
const int FILE_TYPE_DISK = 1;
const int FILE_TYPE_CHAR = 2;
const int FILE_TYPE_PIPE = 3;
const int FILE_TYPE_REMOTE = 0x8000;
const int HANDLE_FLAG_INHERIT = 0x01;
const int HANDLE_FLAG_PROTECT_FROM_CLOSE = 0x02;
const int GET_TAPE_MEDIA_INFORMATION = 0;
const int GET_TAPE_DRIVE_INFORMATION = 1;
const int SET_TAPE_MEDIA_INFORMATION = 0;
const int SET_TAPE_DRIVE_INFORMATION = 1;
const int THREAD_PRIORITY_ABOVE_NORMAL = 1;
const int THREAD_PRIORITY_HIGHEST = 2;
const int THREAD_PRIORITY_NORMAL = 0;
const int THREAD_PRIORITY_TIME_CRITICAL = 15;
const int THREAD_PRIORITY_ERROR_RETURN = 2147483647;
const int TIME_ZONE_ID_UNKNOWN = 0;
const int TIME_ZONE_ID_STANDARD = 1;
const int TIME_ZONE_ID_DAYLIGHT = 2;
const int TIME_ZONE_ID_INVALID = 0xFFFFFFFF;
const int FS_CASE_IS_PRESERVED = 2;
const int FS_CASE_SENSITIVE = 1;
const int FS_UNICODE_STORED_ON_DISK = 4;
const int FS_PERSISTENT_ACLS = 8;
const int FS_FILE_COMPRESSION = 16;
const int FS_VOL_IS_COMPRESSED = 32768;
const int GMEM_FIXED = 0;
const int GMEM_MOVEABLE = 2;
const int GMEM_MODIFY = 128;
const int GPTR = 64;
const int GHND = 66;
const int GMEM_DDESHARE = 8192;
const int GMEM_DISCARDABLE = 256;
const int GMEM_LOWER = 4096;
const int GMEM_NOCOMPACT = 16;
const int GMEM_NODISCARD = 32;
const int GMEM_NOT_BANKED = 4096;
const int GMEM_NOTIFY = 16384;
const int GMEM_SHARE = 8192;
const int GMEM_ZEROINIT = 64;
const int GMEM_DISCARDED = 16384;
const int GMEM_INVALID_HANDLE = 32768;
const int GMEM_LOCKCOUNT = 255;
const int GMEM_VALID_FLAGS = 32626;
const int STATUS_WAIT_0 = 0;
const int STATUS_ABANDONED_WAIT_0 = 0x80;
const int STATUS_USER_APC = 0xC0;
const int STATUS_TIMEOUT = 0x102;
const int STATUS_PENDING = 0x103;
const int STATUS_SEGMENT_NOTIFICATION = 0x40000005;
const int STATUS_GUARD_PAGE_VIOLATION = 0x80000001;
const int STATUS_DATATYPE_MISALIGNMENT = 0x80000002;
const int STATUS_BREAKPOINT = 0x80000003;
const int STATUS_SINGLE_STEP = 0x80000004;
const int STATUS_ACCESS_VIOLATION = 0xC0000005;
const int STATUS_IN_PAGE_ERROR = 0xC0000006;
const int STATUS_NO_MEMORY = 0xC0000017;
const int STATUS_ILLEGAL_INSTRUCTION = 0xC000001D;
const int STATUS_NONCONTINUABLE_EXCEPTION = 0xC0000025;
const int STATUS_INVALID_DISPOSITION = 0xC0000026;
const int STATUS_ARRAY_BOUNDS_EXCEEDED = 0xC000008C;
const int STATUS_FLOAT_DENORMAL_OPERAND = 0xC000008D;
const double STATUS_FLOAT_DIVIDE_BY_ZERO = 0xC000008E;
const int STATUS_FLOAT_INEXACT_RESULT = 0xC000008F;
const int STATUS_FLOAT_INVALID_OPERATION = 0xC0000090;
const int STATUS_FLOAT_OVERFLOW = 0xC0000091;
const int STATUS_FLOAT_STACK_CHECK = 0xC0000092;
const int STATUS_FLOAT_UNDERFLOW = 0xC0000093;
const int STATUS_INTEGER_DIVIDE_BY_ZERO = 0xC0000094;
const int STATUS_INTEGER_OVERFLOW = 0xC0000095;
const int STATUS_PRIVILEGED_INSTRUCTION = 0xC0000096;
const int STATUS_STACK_OVERFLOW = 0xC00000FD;
const int STATUS_CONTROL_C_EXIT = 0xC000013A;
const int PROCESS_HEAP_REGION = 1;
const int PROCESS_HEAP_UNCOMMITTED_RANGE = 2;
const int PROCESS_HEAP_ENTRY_BUSY = 4;
const int PROCESS_HEAP_ENTRY_MOVEABLE = 16;
const int PROCESS_HEAP_ENTRY_DDESHARE = 32;
const int DONT_RESOLVE_DLL_REFERENCES = 1;
const int LOAD_LIBRARY_AS_DATAFILE = 2;
const int LOAD_WITH_ALTERED_SEARCH_PATH = 8;
const int LMEM_FIXED = 0;
const int LMEM_MOVEABLE = 2;
const int LMEM_NONZEROLHND = 2;
const int LMEM_NONZEROLPTR = 0;
const int LMEM_DISCARDABLE = 3840;
const int LMEM_NOCOMPACT = 16;
const int LMEM_NODISCARD = 32;
const int LMEM_ZEROINIT = 64;
const int LMEM_DISCARDED = 16384;
const int LMEM_MODIFY = 128;
const int LMEM_INVALID_HANDLE = 32768;
const int LMEM_LOCKCOUNT = 255;
const int LPTR = 64;
const int LHND = 66;
const int NONZEROLHND = 2;
const int NONZEROLPTR = 0;
const int LOCKFILE_FAIL_IMMEDIATELY = 1;
const int LOCKFILE_EXCLUSIVE_LOCK = 2;
const int LOGON32_PROVIDER_DEFAULT = 0;
const int LOGON32_PROVIDER_WINNT35 = 1;
const int LOGON32_LOGON_INTERACTIVE = 2;
const int LOGON32_LOGON_BATCH = 4;
const int LOGON32_LOGON_SERVICE = 5;
const int MOVEFILE_REPLACE_EXISTING = 1;
const int MOVEFILE_COPY_ALLOWED = 2;
const int MOVEFILE_DELAY_UNTIL_REBOOT = 4;
const int MOVEFILE_WRITE_THROUGH = 8;
const int MAXIMUM_WAIT_OBJECTS = 64;
const int MAXIMUM_SUSPEND_COUNT = 0x7F;
const int WAIT_OBJECT_0 = 0;
const int WAIT_ABANDONED_0 = 128;
const int WAIT_IO_COMPLETION = 0xC0;
const int WAIT_ABANDONED = 128;
const int PURGE_TXABORT = 1;
const int PURGE_RXABORT = 2;
const int PURGE_TXCLEAR = 4;
const int PURGE_RXCLEAR = 8;
const int EVENTLOG_SUCCESS = 0;
const int EVENTLOG_FORWARDS_READ = 4;
const int EVENTLOG_BACKWARDS_READ = 8;
const int EVENTLOG_SEEK_READ = 2;
const int EVENTLOG_SEQUENTIAL_READ = 1;
const int EVENTLOG_ERROR_TYPE = 1;
const int EVENTLOG_WARNING_TYPE = 2;
const int EVENTLOG_INFORMATION_TYPE = 4;
const int EVENTLOG_AUDIT_SUCCESS = 8;
const int EVENTLOG_AUDIT_FAILURE = 16;
const int FORMAT_MESSAGE_ALLOCATE_BUFFER = 256;
const int FORMAT_MESSAGE_IGNORE_INSERTS = 512;
const int FORMAT_MESSAGE_FROM_STRING = 1024;
const int FORMAT_MESSAGE_FROM_HMODULE = 2048;
const int FORMAT_MESSAGE_FROM_SYSTEM = 4096;
const int FORMAT_MESSAGE_ARGUMENT_ARRAY = 8192;
const int FORMAT_MESSAGE_MAX_WIDTH_MASK = 255;
const int EV_BREAK = 64;
const int EV_CTS = 8;
const int EV_DSR = 16;
const int EV_ERR = 128;
const int EV_EVENT1 = 2048;
const int EV_EVENT2 = 4096;
const int EV_PERR = 512;
const int EV_RING = 256;
const int EV_RLSD = 32;
const int EV_RX80FULL = 1024;
const int EV_RXCHAR = 1;
const int EV_RXFLAG = 2;
const int EV_TXEMPTY = 4;
const int SEM_FAILCRITICALERRORS = 0x0001;
const int SEM_NOGPFAULTERRORBOX = 0x0002;
const int SEM_NOALIGNMENTFAULTEXCEPT = 0x0004;
const int SEM_NOOPENFILEERRORBOX = 0x8000;
const int SLE_ERROR = 1;
const int SLE_MINORERROR = 2;
const int SLE_WARNING = 3;
const int SHUTDOWN_NORETRY = 1;
const int EXCEPTION_EXECUTE_HANDLER = 1;
const int EXCEPTION_CONTINUE_SEARCH = 0;
const int MAXINTATOM = 0xC000;
const int IGNORE = 0;
const int INFINITE = 0xFFFFFFFF;
const int NOPARITY = 0;
const int ODDPARITY = 1;
const int EVENPARITY = 2;
const int MARKPARITY = 3;
const int SPACEPARITY = 4;
const int ONESTOPBIT = 0;
const int ONE5STOPBITS = 1;
const int TWOSTOPBITS = 2;
const int CBR_110 = 110;
const int CBR_300 = 300;
const int CBR_600 = 600;
const int CBR_1200 = 1200;
const int CBR_2400 = 2400;
const int CBR_4800 = 4800;
const int CBR_9600 = 9600;
const int CBR_14400 = 14400;
const int CBR_19200 = 19200;
const int CBR_38400 = 38400;
const int CBR_56000 = 56000;
const int CBR_57600 = 57600;
const int CBR_115200 = 115200;
const int CBR_128000 = 128000;
const int CBR_256000 = 256000;
const int BACKUP_INVALID = 0;
const int BACKUP_DATA = 1;
const int BACKUP_EA_DATA = 2;
const int BACKUP_SECURITY_DATA = 3;
const int BACKUP_ALTERNATE_DATA = 4;
const int BACKUP_LINK = 5;
const int BACKUP_PROPERTY_DATA = 6;
const int BACKUP_OBJECT_ID = 7;
const int BACKUP_REPARSE_DATA = 8;
const int BACKUP_SPARSE_BLOCK = 9;
const int STREAM_NORMAL_ATTRIBUTE = 0;
const int STREAM_MODIFIED_WHEN_READ = 1;
const int STREAM_CONTAINS_SECURITY = 2;
const int STREAM_CONTAINS_PROPERTIES = 4;
const int STARTF_USESHOWWINDOW = 1;
const int STARTF_USESIZE = 2;
const int STARTF_USEPOSITION = 4;
const int STARTF_USECOUNTCHARS = 8;
const int STARTF_USEFILLATTRIBUTE = 16;
const int STARTF_RUNFULLSCREEN = 32;
const int STARTF_FORCEONFEEDBACK = 64;
const int STARTF_FORCEOFFFEEDBACK = 128;
const int STARTF_USESTDHANDLES = 256;
const int STARTF_USEHOTKEY = 512;
const int TC_NORMAL = 0;
const int TC_HARDERR = 1;
const int TC_GP_TRAP = 2;
const int TC_SIGNAL = 3;
const int AC_LINE_OFFLINE = 0;
const int AC_LINE_ONLINE = 1;
const int AC_LINE_BACKUP_POWER = 2;
const int AC_LINE_UNKNOWN = 255;
const int BATTERY_FLAG_HIGH = 1;
const int BATTERY_FLAG_LOW = 2;
const int BATTERY_FLAG_CRITICAL = 4;
const int BATTERY_FLAG_CHARGING = 8;
const int BATTERY_FLAG_NO_BATTERY = 128;
const int BATTERY_FLAG_UNKNOWN = 255;
const int BATTERY_PERCENTAGE_UNKNOWN = 255;
const int BATTERY_LIFE_UNKNOWN = 0xFFFFFFFF;
const int DDD_RAW_TARGET_PATH = 1;
const int DDD_REMOVE_DEFINITION = 2;
const int DDD_EXACT_MATCH_ON_REMOVE = 4;
const int HINSTANCE_ERROR = 32;
const int MS_CTS_ON = 16;
const int MS_DSR_ON = 32;
const int MS_RING_ON = 64;
const int MS_RLSD_ON = 128;
const int DTR_CONTROL_DISABLE = 0;
const int DTR_CONTROL_ENABLE = 1;
const int DTR_CONTROL_HANDSHAKE = 2;
const int RTS_CONTROL_DISABLE = 0;
const int RTS_CONTROL_ENABLE = 1;
const int RTS_CONTROL_HANDSHAKE = 2;
const int RTS_CONTROL_TOGGLE = 3;
const int SECURITY_CONTEXT_TRACKING = 0x40000;
const int SECURITY_EFFECTIVE_ONLY = 0x80000;
const int SECURITY_SQOS_PRESENT = 0x100000;
const int SECURITY_VALID_SQOS_FLAGS = 0x1F0000;
const int INVALID_FILE_SIZE = 0xFFFFFFFF;
const int WRITE_WATCH_FLAG_RESET = 1;
const int BI_RGB = 0;
const int BI_RLE8 = 1;
const int BI_RLE4 = 2;
const int BI_BITFIELDS = 3;
const int BI_JPEG = 4;
const int BI_PNG = 5;
const int LF_FACESIZE = 32;
const int LF_FULLFACESIZE = 64;
const int CA_NEGATIVE = 1;
const int CA_LOG_FILTER = 2;
const int ILLUMINANT_DEVICE_DEFAULT = 0;
const int ILLUMINANT_A = 1;
const int ILLUMINANT_B = 2;
const int ILLUMINANT_C = 3;
const int ILLUMINANT_D50 = 4;
const int ILLUMINANT_D55 = 5;
const int ILLUMINANT_D65 = 6;
const int ILLUMINANT_D75 = 7;
const int ILLUMINANT_F2 = 8;
const int RGB_GAMMA_MIN = 2500;
const int RGB_GAMMA_MAX = 65000;
const int REFERENCE_WHITE_MIN = 6000;
const int REFERENCE_WHITE_MAX = 10000;
const int REFERENCE_BLACK_MIN = 0;
const int REFERENCE_BLACK_MAX = 4000;
const int COLOR_ADJ_MAX = 100;
const int CCHDEVICENAME = 32;
const int CCHFORMNAME = 32;
const int DI_COMPAT = 4;
const int DI_DEFAULTSIZE = 8;
const int DI_IMAGE = 2;
const int DI_MASK = 1;
const int DI_NORMAL = 3;
const int DI_APPBANDING = 1;
const int EMR_HEADER = 1;
const int EMR_POLYBEZIER = 2;
const int EMR_POLYGON = 3;
const int EMR_POLYLINE = 4;
const int EMR_POLYBEZIERTO = 5;
const int EMR_POLYLINETO = 6;
const int EMR_POLYPOLYLINE = 7;
const int EMR_POLYPOLYGON = 8;
const int EMR_SETWINDOWEXTEX = 9;
const int EMR_SETWINDOWORGEX = 10;
const int EMR_SETVIEWPORTEXTEX = 11;
const int EMR_SETVIEWPORTORGEX = 12;
const int EMR_SETBRUSHORGEX = 13;
const int EMR_EOF = 14;
const int EMR_SETPIXELV = 15;
const int EMR_SETMAPPERFLAGS = 16;
const int EMR_SETMAPMODE = 17;
const int EMR_SETBKMODE = 18;
const int EMR_SETPOLYFILLMODE = 19;
const int EMR_SETROP2 = 20;
const int EMR_SETSTRETCHBLTMODE = 21;
const int EMR_SETTEXTALIGN = 22;
const int EMR_SETCOLORADJUSTMENT = 23;
const int EMR_SETTEXTCOLOR = 24;
const int EMR_SETBKCOLOR = 25;
const int EMR_OFFSETCLIPRGN = 26;
const int EMR_MOVETOEX = 27;
const int EMR_SETMETARGN = 28;
const int EMR_EXCLUDECLIPRECT = 29;
const int EMR_INTERSECTCLIPRECT = 30;
const int EMR_SCALEVIEWPORTEXTEX = 31;
const int EMR_SCALEWINDOWEXTEX = 32;
const int EMR_SAVEDC = 33;
const int EMR_RESTOREDC = 34;
const int EMR_SETWORLDTRANSFORM = 35;
const int EMR_MODIFYWORLDTRANSFORM = 36;
const int EMR_SELECTOBJECT = 37;
const int EMR_CREATEPEN = 38;
const int EMR_CREATEBRUSHINDIRECT = 39;
const int EMR_DELETEOBJECT = 40;
const int EMR_ANGLEARC = 41;
const int EMR_ELLIPSE = 42;
const int EMR_RECTANGLE = 43;
const int EMR_ROUNDRECT = 44;
const int EMR_ARC = 45;
const int EMR_CHORD = 46;
const int EMR_PIE = 47;
const int EMR_SELECTPALETTE = 48;
const int EMR_CREATEPALETTE = 49;
const int EMR_SETPALETTEENTRIES = 50;
const int EMR_RESIZEPALETTE = 51;
const int EMR_REALIZEPALETTE = 52;
const int EMR_EXTFLOODFILL = 53;
const int EMR_LINETO = 54;
const int EMR_ARCTO = 55;
const int EMR_POLYDRAW = 56;
const int EMR_SETARCDIRECTION = 57;
const int EMR_SETMITERLIMIT = 58;
const int EMR_BEGINPATH = 59;
const int EMR_ENDPATH = 60;
const int EMR_CLOSEFIGURE = 61;
const int EMR_FILLPATH = 62;
const int EMR_STROKEANDFILLPATH = 63;
const int EMR_STROKEPATH = 64;
const int EMR_FLATTENPATH = 65;
const int EMR_WIDENPATH = 66;
const int EMR_SELECTCLIPPATH = 67;
const int EMR_ABORTPATH = 68;
const int EMR_GDICOMMENT = 70;
const int EMR_FILLRGN = 71;
const int EMR_FRAMERGN = 72;
const int EMR_INVERTRGN = 73;
const int EMR_PAINTRGN = 74;
const int EMR_EXTSELECTCLIPRGN = 75;
const int EMR_BITBLT = 76;
const int EMR_STRETCHBLT = 77;
const int EMR_MASKBLT = 78;
const int EMR_PLGBLT = 79;
const int EMR_SETDIBITSTODEVICE = 80;
const int EMR_STRETCHDIBITS = 81;
const int EMR_EXTCREATEFONTINDIRECTW = 82;
const int EMR_EXTTEXTOUTA = 83;
const int EMR_EXTTEXTOUTW = 84;
const int EMR_POLYBEZIER16 = 85;
const int EMR_POLYGON16 = 86;
const int EMR_POLYLINE16 = 87;
const int EMR_POLYBEZIERTO16 = 88;
const int EMR_POLYLINETO16 = 89;
const int EMR_POLYPOLYLINE16 = 90;
const int EMR_POLYPOLYGON16 = 91;
const int EMR_POLYDRAW16 = 92;
const int EMR_CREATEMONOBRUSH = 93;
const int EMR_CREATEDIBPATTERNBRUSHPT = 94;
const int EMR_EXTCREATEPEN = 95;
const int EMR_POLYTEXTOUTA = 96;
const int EMR_POLYTEXTOUTW = 97;
const int EMR_SETICMMODE = 98;
const int EMR_CREATECOLORSPACE = 99;
const int EMR_SETCOLORSPACE = 100;
const int EMR_DELETECOLORSPACE = 101;
const int EMR_GLSRECORD = 102;
const int EMR_GLSBOUNDEDRECORD = 103;
const int EMR_PIXELFORMAT = 104;
const int ENHMETA_SIGNATURE = 1179469088;
const int EPS_SIGNATURE = 0x46535045;
const int META_SETBKCOLOR = 0x201;
const int META_SETBKMODE = 0x102;
const int META_SETMAPMODE = 0x103;
const int META_SETROP2 = 0x104;
const int META_SETRELABS = 0x105;
const int META_SETPOLYFILLMODE = 0x106;
const int META_SETSTRETCHBLTMODE = 0x107;
const int META_SETTEXTCHAREXTRA = 0x108;
const int META_SETTEXTCOLOR = 0x209;
const int META_SETTEXTJUSTIFICATION = 0x20A;
const int META_SETWINDOWORG = 0x20B;
const int META_SETWINDOWEXT = 0x20C;
const int META_SETVIEWPORTORG = 0x20D;
const double META_SETVIEWPORTEXT = 0x20E;
const int META_OFFSETWINDOWORG = 0x20F;
const int META_SCALEWINDOWEXT = 0x410;
const int META_OFFSETVIEWPORTORG = 0x211;
const int META_SCALEVIEWPORTEXT = 0x412;
const int META_LINETO = 0x213;
const int META_MOVETO = 0x214;
const int META_EXCLUDECLIPRECT = 0x415;
const int META_INTERSECTCLIPRECT = 0x416;
const int META_ARC = 0x817;
const int META_ELLIPSE = 0x418;
const int META_FLOODFILL = 0x419;
const int META_PIE = 0x81A;
const int META_RECTANGLE = 0x41B;
const int META_ROUNDRECT = 0x61C;
const int META_PATBLT = 0x61D;
const double META_SAVEDC = 0x1E;
const int META_SETPIXEL = 0x41F;
const int META_OFFSETCLIPRGN = 0x220;
const int META_TEXTOUT = 0x521;
const int META_BITBLT = 0x922;
const int META_STRETCHBLT = 0xB23;
const int META_POLYGON = 0x324;
const int META_POLYLINE = 0x325;
const int META_ESCAPE = 0x626;
const int META_RESTOREDC = 0x127;
const int META_FILLREGION = 0x228;
const int META_FRAMEREGION = 0x429;
const int META_INVERTREGION = 0x12A;
const int META_PAINTREGION = 0x12B;
const int META_SELECTCLIPREGION = 0x12C;
const int META_SELECTOBJECT = 0x12D;
const double META_SETTEXTALIGN = 0x12E;
const int META_CHORD = 0x830;
const int META_SETMAPPERFLAGS = 0x231;
const int META_EXTTEXTOUT = 0xa32;
const int META_SETDIBTODEV = 0xd33;
const int META_SELECTPALETTE = 0x234;
const int META_REALIZEPALETTE = 0x35;
const int META_ANIMATEPALETTE = 0x436;
const int META_SETPALENTRIES = 0x37;
const int META_POLYPOLYGON = 0x538;
const int META_RESIZEPALETTE = 0x139;
const int META_DIBBITBLT = 0x940;
const int META_DIBSTRETCHBLT = 0xb41;
const int META_DIBCREATEPATTERNBRUSH = 0x142;
const int META_STRETCHDIB = 0xf43;
const int META_EXTFLOODFILL = 0x548;
const int META_DELETEOBJECT = 0x1f0;
const int META_CREATEPALETTE = 0xf7;
const int META_CREATEPATTERNBRUSH = 0x1F9;
const int META_CREATEPENINDIRECT = 0x2FA;
const int META_CREATEFONTINDIRECT = 0x2FB;
const int META_CREATEBRUSHINDIRECT = 0x2FC;
const int META_CREATEREGION = 0x6FF;
const int PT_MOVETO = 6;
const int PT_LINETO = 2;
const int PT_BEZIERTO = 4;
const int PT_CLOSEFIGURE = 1;
const int ELF_VENDOR_SIZE = 4;
const int ELF_VERSION = 0;
const int ELF_CULTURE_LATIN = 0;
const int PFD_TYPE_RGBA = 0;
const int PFD_TYPE_COLORINDEX = 1;
const int PFD_MAIN_PLANE = 0;
const int PFD_OVERLAY_PLANE = 1;
const int PFD_DOUBLEBUFFER = 1;
const int PFD_STEREO = 2;
const int PFD_DRAW_TO_WINDOW = 4;
const int PFD_DRAW_TO_BITMAP = 8;
const int PFD_SUPPORT_GDI = 16;
const int PFD_SUPPORT_OPENGL = 32;
const int PFD_GENERIC_FORMAT = 64;
const int PFD_NEED_PALETTE = 128;
const int PFD_NEED_SYSTEM_PALETTE = 0x00000100;
const int PFD_SWAP_EXCHANGE = 0x00000200;
const int PFD_SWAP_COPY = 0x00000400;
const int PFD_SWAP_LAYER_BUFFERS = 0x00000800;
const int PFD_GENERIC_ACCELERATED = 0x00001000;
const int PFD_DEPTH_DONTCARE = 0x20000000;
const int PFD_DOUBLEBUFFER_DONTCARE = 0x40000000;
const int PFD_STEREO_DONTCARE = 0x80000000;
const int BLACKNESS = 0x42;
const int NOTSRCERASE = 0x1100A6;
const int NOTSRCCOPY = 0x330008;
const int SRCERASE = 0x440328;
const int DSTINVERT = 0x550009;
const int PATINVERT = 0x5A0049;
const int SRCINVERT = 0x660046;
const int SRCAND = 0x8800C6;
const int MERGEPAINT = 0xBB0226;
const int MERGECOPY = 0xC000CA;
const int SRCCOPY = 0xCC0020;
const double SRCPAINT = 0xEE0086;
const int PATCOPY = 0xF00021;
const int PATPAINT = 0xFB0A09;
const int WHITENESS = 0xFF0062;
const int R2_BLACK = 1;
const int R2_COPYPEN = 13;
const int R2_MASKNOTPEN = 3;
const int R2_MASKPEN = 9;
const int R2_MASKPENNOT = 5;
const int R2_MERGENOTPEN = 12;
const int R2_MERGEPEN = 15;
const int R2_MERGEPENNOT = 14;
const int R2_NOP = 11;
const int R2_NOT = 6;
const int R2_NOTCOPYPEN = 4;
const int R2_NOTMASKPEN = 8;
const int R2_NOTMERGEPEN = 2;
const int R2_NOTXORPEN = 10;
const int R2_WHITE = 16;
const int R2_XORPEN = 7;
const int CM_OUT_OF_GAMUT = 255;
const int CM_IN_GAMUT = 0;
const int RGN_AND = 1;
const int RGN_COPY = 5;
const int RGN_DIFF = 4;
const int RGN_OR = 2;
const int RGN_XOR = 3;
const int NULLREGION = 1;
const int SIMPLEREGION = 2;
const int COMPLEXREGION = 3;
const int ERROR = 0;
const int CBM_INIT = 4;
const int DIB_PAL_COLORS = 1;
const int DIB_RGB_COLORS = 0;
const int FW_DONTCARE = 0;
const int FW_THIN = 100;
const int FW_EXTRALIGHT = 200;
const int FW_LIGHT = 300;
const int FW_NORMAL = 400;
const int FW_REGULAR = 400;
const int FW_MEDIUM = 500;
const int FW_SEMIBOLD = 600;
const int FW_BOLD = 700;
const int FW_EXTRABOLD = 800;
const int FW_HEAVY = 900;
const int ANSI_CHARSET = 0;
const int DEFAULT_CHARSET = 1;
const int SYMBOL_CHARSET = 2;
const int SHIFTJIS_CHARSET = 128;
const int HANGEUL_CHARSET = 129;
const int HANGUL_CHARSET = 129;
const int GB2312_CHARSET = 134;
const int CHINESEBIG5_CHARSET = 136;
const int GREEK_CHARSET = 161;
const int TURKISH_CHARSET = 162;
const int HEBREW_CHARSET = 177;
const int ARABIC_CHARSET = 178;
const int BALTIC_CHARSET = 186;
const int RUSSIAN_CHARSET = 204;
const int THAI_CHARSET = 222;
const int EASTEUROPE_CHARSET = 238;
const int OEM_CHARSET = 255;
const int JOHAB_CHARSET = 130;
const int VIETNAMESE_CHARSET = 163;
const int MAC_CHARSET = 77;
const int OUT_DEFAULT_PRECIS = 0;
const int OUT_STRING_PRECIS = 1;
const int OUT_CHARACTER_PRECIS = 2;
const int OUT_STROKE_PRECIS = 3;
const int OUT_TT_PRECIS = 4;
const int OUT_DEVICE_PRECIS = 5;
const int OUT_RASTER_PRECIS = 6;
const int OUT_TT_ONLY_PRECIS = 7;
const int OUT_OUTLINE_PRECIS = 8;
const int CLIP_DEFAULT_PRECIS = 0;
const int CLIP_CHARACTER_PRECIS = 1;
const int CLIP_STROKE_PRECIS = 2;
const int CLIP_MASK = 15;
const int CLIP_LH_ANGLES = 16;
const int CLIP_TT_ALWAYS = 32;
const int CLIP_EMBEDDED = 128;
const int DEFAULT_QUALITY = 0;
const int DRAFT_QUALITY = 1;
const int PROOF_QUALITY = 2;
const int NONANTIALIASED_QUALITY = 3;
const int ANTIALIASED_QUALITY = 4;
const int DEFAULT_PITCH = 0;
const int FIXED_PITCH = 1;
const int VARIABLE_PITCH = 2;
const int MONO_FONT = 8;
const int FF_DECORATIVE = 80;
const int FF_DONTCARE = 0;
const int FF_MODERN = 48;
const int FF_ROMAN = 16;
const int FF_SCRIPT = 64;
const int FF_SWISS = 32;
const int PANOSE_COUNT = 10;
const int PAN_FAMILYTYPE_INDEX = 0;
const int PAN_SERIFSTYLE_INDEX = 1;
const int PAN_WEIGHT_INDEX = 2;
const int PAN_PROPORTION_INDEX = 3;
const int PAN_CONTRAST_INDEX = 4;
const int PAN_STROKEVARIATION_INDEX = 5;
const int PAN_ARMSTYLE_INDEX = 6;
const int PAN_LETTERFORM_INDEX = 7;
const int PAN_MIDLINE_INDEX = 8;
const int PAN_XHEIGHT_INDEX = 9;
const int PAN_CULTURE_LATIN = 0;
const int PAN_ANY = 0;
const int PAN_NO_FIT = 1;
const int PAN_FAMILY_TEXT_DISPLAY = 2;
const int PAN_FAMILY_SCRIPT = 3;
const int PAN_FAMILY_DECORATIVE = 4;
const int PAN_FAMILY_PICTORIAL = 5;
const int PAN_SERIF_COVE = 2;
const int PAN_SERIF_OBTUSE_COVE = 3;
const int PAN_SERIF_SQUARE_COVE = 4;
const int PAN_SERIF_OBTUSE_SQUARE_COVE = 5;
const int PAN_SERIF_SQUARE = 6;
const int PAN_SERIF_THIN = 7;
const int PAN_SERIF_BONE = 8;
const int PAN_SERIF_EXAGGERATED = 9;
const int PAN_SERIF_TRIANGLE = 10;
const int PAN_SERIF_NORMAL_SANS = 11;
const int PAN_SERIF_OBTUSE_SANS = 12;
const int PAN_SERIF_PERP_SANS = 13;
const int PAN_SERIF_FLARED = 14;
const int PAN_SERIF_ROUNDED = 15;
const int PAN_WEIGHT_VERY_LIGHT = 2;
const int PAN_WEIGHT_LIGHT = 3;
const int PAN_WEIGHT_THIN = 4;
const int PAN_WEIGHT_BOOK = 5;
const int PAN_WEIGHT_MEDIUM = 6;
const int PAN_WEIGHT_DEMI = 7;
const int PAN_WEIGHT_BOLD = 8;
const int PAN_WEIGHT_HEAVY = 9;
const int PAN_WEIGHT_BLACK = 10;
const int PAN_WEIGHT_NORD = 11;
const int PAN_PROP_OLD_STYLE = 2;
const int PAN_PROP_MODERN = 3;
const int PAN_PROP_EVEN_WIDTH = 4;
const int PAN_PROP_EXPANDED = 5;
const int PAN_PROP_CONDENSED = 6;
const int PAN_PROP_VERY_EXPANDED = 7;
const int PAN_PROP_VERY_CONDENSED = 8;
const int PAN_PROP_MONOSPACED = 9;
const int PAN_CONTRAST_NONE = 2;
const int PAN_CONTRAST_VERY_LOW = 3;
const int PAN_CONTRAST_LOW = 4;
const int PAN_CONTRAST_MEDIUM_LOW = 5;
const int PAN_CONTRAST_MEDIUM = 6;
const int PAN_CONTRAST_MEDIUM_HIGH = 7;
const int PAN_CONTRAST_HIGH = 8;
const int PAN_CONTRAST_VERY_HIGH = 9;
const int PAN_STROKE_GRADUAL_DIAG = 2;
const int PAN_STROKE_GRADUAL_TRAN = 3;
const int PAN_STROKE_GRADUAL_VERT = 4;
const int PAN_STROKE_GRADUAL_HORZ = 5;
const int PAN_STROKE_RAPID_VERT = 6;
const int PAN_STROKE_RAPID_HORZ = 7;
const int PAN_STROKE_INSTANT_VERT = 8;
const int PAN_STRAIGHT_ARMS_HORZ = 2;
const int PAN_STRAIGHT_ARMS_WEDGE = 3;
const int PAN_STRAIGHT_ARMS_VERT = 4;
const int PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5;
const int PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6;
const int PAN_BENT_ARMS_HORZ = 7;
const int PAN_BENT_ARMS_WEDGE = 8;
const int PAN_BENT_ARMS_VERT = 9;
const int PAN_BENT_ARMS_SINGLE_SERIF = 10;
const int PAN_BENT_ARMS_DOUBLE_SERIF = 11;
const int PAN_LETT_NORMAL_CONTACT = 2;
const int PAN_LETT_NORMAL_WEIGHTED = 3;
const int PAN_LETT_NORMAL_BOXED = 4;
const int PAN_LETT_NORMAL_FLATTENED = 5;
const int PAN_LETT_NORMAL_ROUNDED = 6;
const int PAN_LETT_NORMAL_OFF_CENTER = 7;
const int PAN_LETT_NORMAL_SQUARE = 8;
const int PAN_LETT_OBLIQUE_CONTACT = 9;
const int PAN_LETT_OBLIQUE_WEIGHTED = 10;
const int PAN_LETT_OBLIQUE_BOXED = 11;
const int PAN_LETT_OBLIQUE_FLATTENED = 12;
const int PAN_LETT_OBLIQUE_ROUNDED = 13;
const int PAN_LETT_OBLIQUE_OFF_CENTER = 14;
const int PAN_LETT_OBLIQUE_SQUARE = 15;
const int PAN_MIDLINE_STANDARD_TRIMMED = 2;
const int PAN_MIDLINE_STANDARD_POINTED = 3;
const int PAN_MIDLINE_STANDARD_SERIFED = 4;
const int PAN_MIDLINE_HIGH_TRIMMED = 5;
const int PAN_MIDLINE_HIGH_POINTED = 6;
const int PAN_MIDLINE_HIGH_SERIFED = 7;
const int PAN_MIDLINE_CONSTANT_TRIMMED = 8;
const int PAN_MIDLINE_CONSTANT_POINTED = 9;
const int PAN_MIDLINE_CONSTANT_SERIFED = 10;
const int PAN_MIDLINE_LOW_TRIMMED = 11;
const int PAN_MIDLINE_LOW_POINTED = 12;
const int PAN_MIDLINE_LOW_SERIFED = 13;
const int PAN_XHEIGHT_CONSTANT_SMALL = 2;
const int PAN_XHEIGHT_CONSTANT_STD = 3;
const int PAN_XHEIGHT_CONSTANT_LARGE = 4;
const int PAN_XHEIGHT_DUCKING_SMALL = 5;
const int PAN_XHEIGHT_DUCKING_STD = 6;
const int PAN_XHEIGHT_DUCKING_LARGE = 7;
const int FS_LATIN1 = 1;
const int FS_LATIN2 = 2;
const int FS_CYRILLIC = 4;
const int FS_GREEK = 8;
const int FS_TURKISH = 16;
const int FS_HEBREW = 32;
const int FS_ARABIC = 64;
const int FS_BALTIC = 128;
const int FS_THAI = 0x10000;
const int FS_JISJAPAN = 0x20000;
const int FS_CHINESESIMP = 0x40000;
const int FS_WANSUNG = 0x80000;
const int FS_CHINESETRAD = 0x100000;
const int FS_JOHAB = 0x200000;
const int FS_SYMBOL = 0x80000000;
const int HS_BDIAGONAL = 3;
const int HS_CROSS = 4;
const int HS_DIAGCROSS = 5;
const int HS_FDIAGONAL = 2;
const int HS_HORIZONTAL = 0;
const int HS_VERTICAL = 1;
const int PS_GEOMETRIC = 65536;
const int PS_COSMETIC = 0;
const int PS_ALTERNATE = 8;
const int PS_SOLID = 0;
const int PS_DASH = 1;
const int PS_DOT = 2;
const int PS_DASHDOT = 3;
const int PS_DASHDOTDOT = 4;
const int PS_NULL = 5;
const int PS_USERSTYLE = 7;
const int PS_INSIDEFRAME = 6;
const int PS_ENDCAP_ROUND = 0;
const int PS_ENDCAP_SQUARE = 256;
const int PS_ENDCAP_FLAT = 512;
const int PS_JOIN_BEVEL = 4096;
const int PS_JOIN_MITER = 8192;
const int PS_JOIN_ROUND = 0;
const int PS_STYLE_MASK = 15;
const int PS_ENDCAP_MASK = 3840;
const int PS_TYPE_MASK = 983040;
const int ALTERNATE = 1;
const int WINDING = 2;
const int DC_BINNAMES = 12;
const int DC_BINS = 6;
const int DC_COPIES = 18;
const int DC_DRIVER = 11;
const int DC_DATATYPE_PRODUCED = 21;
const int DC_DUPLEX = 7;
const int DC_EMF_COMPLIANT = 20;
const int DC_ENUMRESOLUTIONS = 13;
const int DC_EXTRA = 9;
const int DC_FIELDS = 1;
const int DC_FILEDEPENDENCIES = 14;
const int DC_MAXEXTENT = 5;
const int DC_MINEXTENT = 4;
const int DC_ORIENTATION = 17;
const int DC_PAPERNAMES = 16;
const int DC_PAPERS = 2;
const int DC_PAPERSIZE = 3;
const int DC_SIZE = 8;
const int DC_TRUETYPE = 15;
const int DCTT_BITMAP = 1;
const int DCTT_DOWNLOAD = 2;
const int DCTT_SUBDEV = 4;
const int DCTT_DOWNLOAD_OUTLINE = 8;
const int DC_VERSION = 10;
const int DC_BINADJUST = 19;
const int DC_MANUFACTURER = 23;
const int DC_MODEL = 24;
const int DCBA_FACEUPNONE = 0;
const int DCBA_FACEUPCENTER = 1;
const int DCBA_FACEUPLEFT = 2;
const int DCBA_FACEUPRIGHT = 3;
const int DCBA_FACEDOWNNONE = 256;
const int DCBA_FACEDOWNCENTER = 257;
const int DCBA_FACEDOWNLEFT = 258;
const int DCBA_FACEDOWNRIGHT = 259;
const int FLOODFILLBORDER = 0;
const int FLOODFILLSURFACE = 1;
const int ETO_CLIPPED = 4;
const int ETO_GLYPH_INDEX = 16;
const int ETO_OPAQUE = 2;
const int ETO_RTLREADING = 128;
const int GDICOMMENT_BEGINGROUP = 2;
const int GDICOMMENT_ENDGROUP = 3;
const int GDICOMMENT_MULTIFORMATS = 1073741828;
const int GDICOMMENT_IDENTIFIER = 1128875079;
const int AD_COUNTERCLOCKWISE = 1;
const int AD_CLOCKWISE = 2;
const int RDH_RECTANGLES = 1;
const int GCPCLASS_LATIN = 1;
const int GCPCLASS_HEBREW = 2;
const int GCPCLASS_ARABIC = 2;
const int GCPCLASS_NEUTRAL = 3;
const int GCPCLASS_LOCALNUMBER = 4;
const int GCPCLASS_LATINNUMBER = 5;
const int GCPCLASS_LATINNUMERICTERMINATOR = 6;
const int GCPCLASS_LATINNUMERICSEPARATOR = 7;
const int GCPCLASS_NUMERICSEPARATOR = 8;
const int GCPCLASS_PREBOUNDLTR = 128;
const int GCPCLASS_PREBOUNDRTL = 64;
const int GCPCLASS_POSTBOUNDLTR = 32;
const int GCPCLASS_POSTBOUNDRTL = 16;
const int GCPGLYPH_LINKBEFORE = 0x8000;
const int GCPGLYPH_LINKAFTER = 0x4000;
const int DCB_DISABLE = 8;
const int DCB_ENABLE = 4;
const int DCB_RESET = 1;
const int DCB_SET = 3;
const int DCB_ACCUMULATE = 2;
const int DCB_DIRTY = 2;
const int OBJ_BRUSH = 2;
const int OBJ_PEN = 1;
const int OBJ_PAL = 5;
const int OBJ_FONT = 6;
const int OBJ_BITMAP = 7;
const int OBJ_EXTPEN = 11;
const int OBJ_REGION = 8;
const int OBJ_DC = 3;
const int OBJ_MEMDC = 10;
const int OBJ_METAFILE = 9;
const int OBJ_METADC = 4;
const int OBJ_ENHMETAFILE = 13;
const int OBJ_ENHMETADC = 12;
const int DRIVERVERSION = 0;
const int TECHNOLOGY = 2;
const int DT_PLOTTER = 0;
const int DT_RASDISPLAY = 1;
const int DT_RASPRINTER = 2;
const int DT_RASCAMERA = 3;
const int DT_CHARSTREAM = 4;
const int DT_METAFILE = 5;
const int DT_DISPFILE = 6;
const int HORZSIZE = 4;
const int VERTSIZE = 6;
const int HORZRES = 8;
const int VERTRES = 10;
const int LOGPIXELSX = 88;
const int LOGPIXELSY = 90;
const int BITSPIXEL = 12;
const int PLANES = 14;
const int NUMBRUSHES = 16;
const int NUMPENS = 18;
const int NUMFONTS = 22;
const int NUMCOLORS = 24;
const int NUMMARKERS = 20;
const int ASPECTX = 40;
const int ASPECTY = 42;
const int ASPECTXY = 44;
const int PDEVICESIZE = 26;
const int CLIPCAPS = 36;
const int SIZEPALETTE = 104;
const int NUMRESERVED = 106;
const int COLORRES = 108;
const int PHYSICALWIDTH = 110;
const int PHYSICALHEIGHT = 111;
const int PHYSICALOFFSETX = 112;
const int PHYSICALOFFSETY = 113;
const int SCALINGFACTORX = 114;
const int SCALINGFACTORY = 115;
const int VREFRESH = 116;
const int DESKTOPHORZRES = 118;
const int DESKTOPVERTRES = 117;
const int BLTALIGNMENT = 119;
const int RASTERCAPS = 38;
const int RC_BANDING = 2;
const int RC_BITBLT = 1;
const int RC_BITMAP64 = 8;
const int RC_DI_BITMAP = 128;
const int RC_DIBTODEV = 512;
const int RC_FLOODFILL = 4096;
const int RC_GDI20_OUTPUT = 16;
const int RC_PALETTE = 256;
const int RC_SCALING = 4;
const int RC_STRETCHBLT = 2048;
const int RC_STRETCHDIB = 8192;
const int RC_DEVBITS = 0x8000;
const int RC_OP_DX_OUTPUT = 0x4000;
const int CURVECAPS = 28;
const int CC_NONE = 0;
const int CC_CIRCLES = 1;
const int CC_PIE = 2;
const int CC_CHORD = 4;
const int CC_ELLIPSES = 8;
const int CC_WIDE = 16;
const int CC_STYLED = 32;
const int CC_WIDESTYLED = 64;
const int CC_INTERIORS = 128;
const int CC_ROUNDRECT = 256;
const int LINECAPS = 30;
const int LC_NONE = 0;
const int LC_POLYLINE = 2;
const int LC_MARKER = 4;
const int LC_POLYMARKER = 8;
const int LC_WIDE = 16;
const int LC_STYLED = 32;
const int LC_WIDESTYLED = 64;
const int LC_INTERIORS = 128;
const int POLYGONALCAPS = 32;
const int RC_BIGFONT = 1024;
const int RC_GDI20_STATE = 32;
const int RC_NONE = 0;
const int RC_SAVEBITMAP = 64;
const int PC_NONE = 0;
const int PC_POLYGON = 1;
const int PC_POLYPOLYGON = 256;
const int PC_PATHS = 512;
const int PC_RECTANGLE = 2;
const int PC_WINDPOLYGON = 4;
const int PC_SCANLINE = 8;
const int PC_TRAPEZOID = 4;
const int PC_WIDE = 16;
const int PC_STYLED = 32;
const int PC_WIDESTYLED = 64;
const int PC_INTERIORS = 128;
const int TEXTCAPS = 34;
const int TC_OP_CHARACTER = 1;
const int TC_OP_STROKE = 2;
const int TC_CP_STROKE = 4;
const int TC_CR_90 = 8;
const int TC_CR_ANY = 16;
const int TC_SF_X_YINDEP = 32;
const int TC_SA_DOUBLE = 64;
const int TC_SA_INTEGER = 128;
const int TC_SA_CONTIN = 256;
const int TC_EA_DOUBLE = 512;
const int TC_IA_ABLE = 1024;
const int TC_UA_ABLE = 2048;
const int TC_SO_ABLE = 4096;
const int TC_RA_ABLE = 8192;
const int TC_VA_ABLE = 16384;
const int TC_RESERVED = 32768;
const int TC_SCROLLBLT = 65536;
const int GCP_DBCS = 1;
const int GCP_ERROR = 0x8000;
const int GCP_CLASSIN = 0x80000;
const int GCP_DIACRITIC = 256;
const int GCP_DISPLAYZWG = 0x400000;
const int GCP_GLYPHSHAPE = 16;
const int GCP_JUSTIFY = 0x10000;
const int GCP_JUSTIFYIN = 0x200000;
const int GCP_KASHIDA = 1024;
const int GCP_LIGATE = 32;
const int GCP_MAXEXTENT = 0x100000;
const int GCP_NEUTRALOVERRIDE = 0x2000000;
const int GCP_NUMERICOVERRIDE = 0x1000000;
const int GCP_NUMERICSLATIN = 0x4000000;
const int GCP_NUMERICSLOCAL = 0x8000000;
const int GCP_REORDER = 2;
const int GCP_SYMSWAPOFF = 0x800000;
const int GCP_USEKERNING = 8;
const int FLI_GLYPHS = 0x40000;
const int FLI_MASK = 0x103b;
const int GGO_METRICS = 0;
const int GGO_BITMAP = 1;
const int GGO_NATIVE = 2;
const int GGO_BEZIER = 3;
const int GGO_GRAY2_BITMAP = 4;
const int GGO_GRAY4_BITMAP = 5;
const int GGO_GRAY8_BITMAP = 6;
const int GGO_GLYPH_INDEX = 128;
const int GGO_UNHINTED = 256;
const int GM_COMPATIBLE = 1;
const int GM_ADVANCED = 2;
const int MM_ANISOTROPIC = 8;
const int MM_HIENGLISH = 5;
const int MM_HIMETRIC = 3;
const int MM_ISOTROPIC = 7;
const int MM_LOENGLISH = 4;
const int MM_LOMETRIC = 2;
const int MM_TEXT = 1;
const int MM_TWIPS = 6;
const int ABSOLUTE = 1;
const int RELATIVE = 2;
const int PC_EXPLICIT = 2;
const int PC_NOCOLLAPSE = 4;
const int PC_RESERVED = 1;
const int CLR_NONE = 0xffffffff;
const int CLR_DEFAULT = 0xff000000;
const int TT_AVAILABLE = 1;
const int TT_ENABLED = 2;
const int BLACK_BRUSH = 4;
const int DKGRAY_BRUSH = 3;
const int GRAY_BRUSH = 2;
const int HOLLOW_BRUSH = 5;
const int LTGRAY_BRUSH = 1;
const int NULL_BRUSH = 5;
const int WHITE_BRUSH = 0;
const int BLACK_PEN = 7;
const int NULL_PEN = 8;
const int WHITE_PEN = 6;
const int ANSI_FIXED_FONT = 11;
const int ANSI_VAR_FONT = 12;
const int DEVICE_DEFAULT_FONT = 14;
const int DEFAULT_GUI_FONT = 17;
const int OEM_FIXED_FONT = 10;
const int SYSTEM_FONT = 13;
const int SYSTEM_FIXED_FONT = 16;
const int DEFAULT_PALETTE = 15;
const int SYSPAL_ERROR = 0;
const int SYSPAL_STATIC = 1;
const int SYSPAL_NOSTATIC = 2;
const int SYSPAL_NOSTATIC256 = 3;
const int TA_BASELINE = 24;
const int TA_BOTTOM = 8;
const int TA_TOP = 0;
const int TA_CENTER = 6;
const int TA_LEFT = 0;
const int TA_RIGHT = 2;
const int TA_RTLREADING = 256;
const int TA_NOUPDATECP = 0;
const int TA_UPDATECP = 1;
const int VTA_BASELINE = 24;
const int VTA_CENTER = 6;
const int MWT_IDENTITY = 1;
const int MWT_LEFTMULTIPLY = 2;
const int MWT_RIGHTMULTIPLY = 3;
const int OPAQUE = 2;
const int TRANSPARENT = 1;
const int BLACKONWHITE = 1;
const int WHITEONBLACK = 2;
const int COLORONCOLOR = 3;
const int HALFTONE = 4;
const int MAXSTRETCHBLTMODE = 4;
const int STRETCH_ANDSCANS = 1;
const int STRETCH_DELETESCANS = 3;
const int STRETCH_HALFTONE = 4;
const int STRETCH_ORSCANS = 2;
const int TCI_SRCCHARSET = 1;
const int TCI_SRCCODEPAGE = 2;
const int TCI_SRCFONTSIG = 3;
const int ICM_ON = 2;
const int ICM_OFF = 1;
const int ICM_QUERY = 3;
const int NEWFRAME = 1;
const int ABORTDOC = 2;
const int NEXTBAND = 3;
const int SETCOLORTABLE = 4;
const int GETCOLORTABLE = 5;
const int FLUSHOUTPUT = 6;
const int DRAFTMODE = 7;
const int QUERYESCSUPPORT = 8;
const int SETABORTPROC = 9;
const int STARTDOC = 10;
const int ENDDOC = 11;
const int GETPHYSPAGESIZE = 12;
const int GETPRINTINGOFFSET = 13;
const int GETSCALINGFACTOR = 14;
const int MFCOMMENT = 15;
const int GETPENWIDTH = 16;
const int SETCOPYCOUNT = 17;
const int SELECTPAPERSOURCE = 18;
const int DEVICEDATA = 19;
const int PASSTHROUGH = 19;
const int GETTECHNOLGY = 20;
const int GETTECHNOLOGY = 20;
const int SETLINECAP = 21;
const int SETLINEJOIN = 22;
const int SETMITERLIMIT = 23;
const int BANDINFO = 24;
const int DRAWPATTERNRECT = 25;
const int GETVECTORPENSIZE = 26;
const int GETVECTORBRUSHSIZE = 27;
const int ENABLEDUPLEX = 28;
const int GETSETPAPERBINS = 29;
const int GETSETPRINTORIENT = 30;
const int ENUMPAPERBINS = 31;
const int SETDIBSCALING = 32;
const int EPSPRINTING = 33;
const int ENUMPAPERMETRICS = 34;
const int GETSETPAPERMETRICS = 35;
const int POSTSCRIPT_DATA = 37;
const int POSTSCRIPT_IGNORE = 38;
const int MOUSETRAILS = 39;
const int GETDEVICEUNITS = 42;
const int GETEXTENDEDTEXTMETRICS = 256;
const int GETEXTENTTABLE = 257;
const int GETPAIRKERNTABLE = 258;
const int GETTRACKKERNTABLE = 259;
const int EXTTEXTOUT = 512;
const int GETFACENAME = 513;
const int DOWNLOADFACE = 514;
const int ENABLERELATIVEWIDTHS = 768;
const int ENABLEPAIRKERNING = 769;
const int SETKERNTRACK = 770;
const int SETALLJUSTVALUES = 771;
const int SETCHARSET = 772;
const int STRETCHBLT = 2048;
const int GETSETSCREENPARAMS = 3072;
const int QUERYDIBSUPPORT = 3073;
const int BEGIN_PATH = 4096;
const int CLIP_TO_PATH = 4097;
const int END_PATH = 4098;
const int EXT_DEVICE_CAPS = 4099;
const int RESTORE_CTM = 4100;
const int SAVE_CTM = 4101;
const int SET_ARC_DIRECTION = 4102;
const int SET_BACKGROUND_COLOR = 4103;
const int SET_POLY_MODE = 4104;
const int SET_SCREEN_ANGLE = 4105;
const int SET_SPREAD = 4106;
const int TRANSFORM_CTM = 4107;
const int SET_CLIP_BOX = 4108;
const int SET_BOUNDS = 4109;
const int SET_MIRROR_MODE = 4110;
const int OPENCHANNEL = 4110;
const int DOWNLOADHEADER = 4111;
const int CLOSECHANNEL = 4112;
const int POSTSCRIPT_PASSTHROUGH = 4115;
const int ENCAPSULATED_POSTSCRIPT = 4116;
const int QDI_SETDIBITS = 1;
const int QDI_GETDIBITS = 2;
const int QDI_DIBTOSCREEN = 4;
const int QDI_STRETCHDIB = 8;
const int SP_NOTREPORTED = 0x4000;
const int PR_JOBSTATUS = 0;
const int ASPECT_FILTERING = 1;
const int BS_SOLID = 0;
const int BS_NULL = 1;
const int BS_HOLLOW = 1;
const int BS_HATCHED = 2;
const int BS_PATTERN = 3;
const int BS_INDEXED = 4;
const int BS_DIBPATTERN = 5;
const int BS_DIBPATTERNPT = 6;
const int BS_PATTERN8X8 = 7;
const int BS_DIBPATTERN8X8 = 8;
const int LCS_CALIBRATED_RGB = 0;
const int LCS_DEVICE_RGB = 1;
const int LCS_DEVICE_CMYK = 2;
const int LCS_GM_BUSINESS = 1;
const int LCS_GM_GRAPHICS = 2;
const int LCS_GM_IMAGES = 4;
const int RASTER_FONTTYPE = 1;
const int DEVICE_FONTTYPE = 2;
const int TRUETYPE_FONTTYPE = 4;
const int DMORIENT_PORTRAIT = 1;
const int DMORIENT_LANDSCAPE = 2;
const int DMPAPER_FIRST = 1;
const int DMPAPER_LETTER = 1;
const int DMPAPER_LETTERSMALL = 2;
const int DMPAPER_TABLOID = 3;
const int DMPAPER_LEDGER = 4;
const int DMPAPER_LEGAL = 5;
const int DMPAPER_STATEMENT = 6;
const int DMPAPER_EXECUTIVE = 7;
const int DMPAPER_A3 = 8;
const int DMPAPER_A4 = 9;
const int DMPAPER_A4SMALL = 10;
const int DMPAPER_A5 = 11;
const int DMPAPER_B4 = 12;
const int DMPAPER_B5 = 13;
const int DMPAPER_FOLIO = 14;
const int DMPAPER_QUARTO = 15;
const int DMPAPER_10X14 = 16;
const int DMPAPER_11X17 = 17;
const int DMPAPER_NOTE = 18;
const int DMPAPER_ENV_9 = 19;
const int DMPAPER_ENV_10 = 20;
const int DMPAPER_ENV_11 = 21;
const int DMPAPER_ENV_12 = 22;
const int DMPAPER_ENV_14 = 23;
const int DMPAPER_CSHEET = 24;
const int DMPAPER_DSHEET = 25;
const int DMPAPER_ESHEET = 26;
const int DMPAPER_ENV_DL = 27;
const int DMPAPER_ENV_C5 = 28;
const int DMPAPER_ENV_C3 = 29;
const int DMPAPER_ENV_C4 = 30;
const int DMPAPER_ENV_C6 = 31;
const int DMPAPER_ENV_C65 = 32;
const int DMPAPER_ENV_B4 = 33;
const int DMPAPER_ENV_B5 = 34;
const int DMPAPER_ENV_B6 = 35;
const int DMPAPER_ENV_ITALY = 36;
const int DMPAPER_ENV_MONARCH = 37;
const int DMPAPER_ENV_PERSONAL = 38;
const int DMPAPER_FANFOLD_US = 39;
const int DMPAPER_FANFOLD_STD_GERMAN = 40;
const int DMPAPER_FANFOLD_LGL_GERMAN = 41;
const int DMPAPER_ISO_B4 = 42;
const int DMPAPER_JAPANESE_POSTCARD = 43;
const int DMPAPER_9X11 = 44;
const int DMPAPER_10X11 = 45;
const int DMPAPER_15X11 = 46;
const int DMPAPER_ENV_INVITE = 47;
const int DMPAPER_RESERVED_48 = 48;
const int DMPAPER_RESERVED_49 = 49;
const int DMPAPER_LETTER_EXTRA = 50;
const int DMPAPER_LEGAL_EXTRA = 51;
const int DMPAPER_TABLOID_EXTRA = 52;
const int DMPAPER_A4_EXTRA = 53;
const int DMPAPER_LETTER_TRANSVERSE = 54;
const int DMPAPER_A4_TRANSVERSE = 55;
const int DMPAPER_LETTER_EXTRA_TRANSVERSE = 56;
const int DMPAPER_A_PLUS = 57;
const int DMPAPER_B_PLUS = 58;
const int DMPAPER_LETTER_PLUS = 59;
const int DMPAPER_A4_PLUS = 60;
const int DMPAPER_A5_TRANSVERSE = 61;
const int DMPAPER_B5_TRANSVERSE = 62;
const int DMPAPER_A3_EXTRA = 63;
const int DMPAPER_A5_EXTRA = 64;
const int DMPAPER_B5_EXTRA = 65;
const int DMPAPER_A2 = 66;
const int DMPAPER_A3_TRANSVERSE = 67;
const int DMPAPER_A3_EXTRA_TRANSVERSE = 68;
const int DMPAPER_LAST = 68;
const int DMPAPER_USER = 256;
const int DMBIN_FIRST = 1;
const int DMBIN_UPPER = 1;
const int DMBIN_ONLYONE = 1;
const int DMBIN_LOWER = 2;
const int DMBIN_MIDDLE = 3;
const int DMBIN_MANUAL = 4;
const int DMBIN_ENVELOPE = 5;
const int DMBIN_ENVMANUAL = 6;
const int DMBIN_AUTO = 7;
const int DMBIN_TRACTOR = 8;
const int DMBIN_SMALLFMT = 9;
const int DMBIN_LARGEFMT = 10;
const int DMBIN_LARGECAPACITY = 11;
const int DMBIN_CASSETTE = 14;
const int DMBIN_FORMSOURCE = 15;
const int DMBIN_LAST = 15;
const int DMBIN_USER = 256;
const int DMCOLOR_MONOCHROME = 1;
const int DMCOLOR_COLOR = 2;
const int DMDUP_SIMPLEX = 1;
const int DMDUP_VERTICAL = 2;
const int DMDUP_HORIZONTAL = 3;
const int DMTT_BITMAP = 1;
const int DMTT_DOWNLOAD = 2;
const int DMTT_SUBDEV = 3;
const int DMTT_DOWNLOAD_OUTLINE = 4;
const int DMCOLLATE_FALSE = 0;
const int DMCOLLATE_TRUE = 1;
const int DM_SPECVERSION = 800;
const int DM_GRAYSCALE = 1;
const int DM_INTERLACED = 2;
const int DM_UPDATE = 1;
const int DM_COPY = 2;
const int DM_PROMPT = 4;
const int DM_MODIFY = 8;
const int DM_ORIENTATION = 1;
const int DM_PAPERSIZE = 2;
const int DM_PAPERLENGTH = 4;
const int DM_PAPERWIDTH = 8;
const int DM_SCALE = 16;
const int DM_COPIES = 256;
const int DM_DEFAULTSOURCE = 512;
const int DM_PRINTQUALITY = 1024;
const int DM_COLOR = 2048;
const int DM_DUPLEX = 4096;
const int DM_YRESOLUTION = 8192;
const int DM_TTOPTION = 16384;
const int DM_COLLATE = 32768;
const int DM_FORMNAME = 65536;
const int DM_LOGPIXELS = 0x20000;
const int DM_BITSPERPEL = 0x40000;
const int DM_PELSWIDTH = 0x80000;
const int DM_PELSHEIGHT = 0x100000;
const int DM_DISPLAYFLAGS = 0x200000;
const int DM_DISPLAYFREQUENCY = 0x400000;
const int DM_ICMMETHOD = 0x800000;
const int DM_ICMINTENT = 0x1000000;
const int DM_MEDIATYPE = 0x2000000;
const int DM_DITHERTYPE = 0x4000000;
const int DMICMMETHOD_NONE = 1;
const int DMICMMETHOD_SYSTEM = 2;
const int DMICMMETHOD_DRIVER = 3;
const int DMICMMETHOD_DEVICE = 4;
const int DMICMMETHOD_USER = 256;
const int DMICM_SATURATE = 1;
const int DMICM_CONTRAST = 2;
const int DMICM_COLORMETRIC = 3;
const int DMICM_USER = 256;
const int DMMEDIA_STANDARD = 1;
const int DMMEDIA_TRANSPARENCY = 2;
const int DMMEDIA_GLOSSY = 3;
const int DMMEDIA_USER = 256;
const int DMDITHER_NONE = 1;
const int DMDITHER_COARSE = 2;
const int DMDITHER_FINE = 3;
const int DMDITHER_LINEART = 4;
const int DMDITHER_ERRORDIFFUSION = 5;
const int DMDITHER_RESERVED6 = 6;
const int DMDITHER_RESERVED7 = 7;
const int DMDITHER_RESERVED8 = 8;
const int DMDITHER_RESERVED9 = 9;
const int DMDITHER_GRAYSCALE = 10;
const int DMDITHER_USER = 256;
const int GDI_ERROR = 0xFFFFFFFF;
const int TMPF_FIXED_PITCH = 1;
const int TMPF_VECTOR = 2;
const int TMPF_TRUETYPE = 4;
const int TMPF_DEVICE = 8;
const int NTM_ITALIC = 1;
const int NTM_BOLD = 32;
const int NTM_REGULAR = 64;
const int TT_POLYGON_TYPE = 24;
const int TT_PRIM_LINE = 1;
const int TT_PRIM_QSPLINE = 2;
const int TT_PRIM_CSPLINE = 3;
const int FONTMAPPER_MAX = 10;
const int ENHMETA_STOCK_OBJECT = 0x80000000;
const int WGL_FONT_LINES = 0;
const int WGL_FONT_POLYGONS = 1;
const int LPD_DOUBLEBUFFER = 1;
const int LPD_STEREO = 2;
const int LPD_SUPPORT_GDI = 16;
const int LPD_SUPPORT_OPENGL = 32;
const int LPD_SHARE_DEPTH = 64;
const int LPD_SHARE_STENCIL = 128;
const int LPD_SHARE_ACCUM = 256;
const int LPD_SWAP_EXCHANGE = 512;
const int LPD_SWAP_COPY = 1024;
const int LPD_TRANSPARENT = 4096;
const int LPD_TYPE_RGBA = 0;
const int LPD_TYPE_COLORINDEX = 1;
const int WGL_SWAP_MAIN_PLANE = 1;
const int WGL_SWAP_OVERLAY1 = 2;
const int WGL_SWAP_OVERLAY2 = 4;
const int WGL_SWAP_OVERLAY3 = 8;
const int WGL_SWAP_OVERLAY4 = 16;
const int WGL_SWAP_OVERLAY5 = 32;
const int WGL_SWAP_OVERLAY6 = 64;
const int WGL_SWAP_OVERLAY7 = 128;
const int WGL_SWAP_OVERLAY8 = 256;
const int WGL_SWAP_OVERLAY9 = 512;
const int WGL_SWAP_OVERLAY10 = 1024;
const int WGL_SWAP_OVERLAY11 = 2048;
const int WGL_SWAP_OVERLAY12 = 4096;
const int WGL_SWAP_OVERLAY13 = 8192;
const int WGL_SWAP_OVERLAY14 = 16384;
const int WGL_SWAP_OVERLAY15 = 32768;
const int WGL_SWAP_UNDERLAY1 = 65536;
const int WGL_SWAP_UNDERLAY2 = 0x20000;
const int WGL_SWAP_UNDERLAY3 = 0x40000;
const int WGL_SWAP_UNDERLAY4 = 0x80000;
const int WGL_SWAP_UNDERLAY5 = 0x100000;
const int WGL_SWAP_UNDERLAY6 = 0x200000;
const int WGL_SWAP_UNDERLAY7 = 0x400000;
const int WGL_SWAP_UNDERLAY8 = 0x800000;
const int WGL_SWAP_UNDERLAY9 = 0x1000000;
const int WGL_SWAP_UNDERLAY10 = 0x2000000;
const int WGL_SWAP_UNDERLAY11 = 0x4000000;
const int WGL_SWAP_UNDERLAY12 = 0x8000000;
const int WGL_SWAP_UNDERLAY13 = 0x10000000;
const int WGL_SWAP_UNDERLAY14 = 0x20000000;
const int WGL_SWAP_UNDERLAY15 = 0x40000000;
const int AC_SRC_OVER = 0x00;
const int AC_SRC_ALPHA = 0x01;
const int AC_SRC_NO_PREMULT_ALPHA = 0x01;
const int AC_SRC_NO_ALPHA = 0x02;
const int AC_DST_NO_PREMULT_ALPHA = 0x10;
const int AC_DST_NO_ALPHA = 0x20;
const int LAYOUT_RTL = 1;
const int LAYOUT_BITMAPORIENTATIONPRESERVED = 8;
const int DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 0x00000001;
const int DISPLAY_DEVICE_MULTI_DRIVER = 0x00000002;
const int DISPLAY_DEVICE_PRIMARY_DEVICE = 0x00000004;
const int DISPLAY_DEVICE_MIRRORING_DRIVER = 0x00000008;
const int DISPLAY_DEVICE_VGA_COMPATIBLE = 0x00000010;
const int DISPLAY_DEVICE_REMOVABLE = 0x00000020;
const int DISPLAY_DEVICE_MODESPRUNED = 0x08000000;
const int SYSRGN = 4;
const int MM_MAX_NUMAXES = 16;
const int FALT = 16;
const int FCONTROL = 8;
const int FNOINVERT = 2;
const int FSHIFT = 4;
const int FVIRTKEY = 1;
const int ATF_TIMEOUTON = 1;
const int ATF_ONOFFFEEDBACK = 2;
const int ATF_AVAILABLE = 4;
const int WH_JOURNALRECORD = 0;
const int WH_JOURNALPLAYBACK = 1;
const int WH_KEYBOARD = 2;
const int WH_GETMESSAGE = 3;
const int WH_CALLWNDPROC = 4;
const int WH_CBT = 5;
const int WH_SYSMSGFILTER = 6;
const int WH_MOUSE = 7;
const int WH_HARDWARE = 8;
const int WH_DEBUG = 9;
const int WH_SHELL = 10;
const int WH_FOREGROUNDIDLE = 11;
const int WH_CALLWNDPROCRET = 12;
const int WH_KEYBOARD_LL = 13;
const int WH_MOUSE_LL = 14;
const int WH_MAX = 14;
const int HC_ACTION = 0;
const int HC_GETNEXT = 1;
const int HC_SKIP = 2;
const int HC_NOREMOVE = 3;
const int HC_NOREM = 3;
const int HC_SYSMODALON = 4;
const int HC_SYSMODALOFF = 5;
const int HCBT_MOVESIZE = 0;
const int HCBT_MINMAX = 1;
const int HCBT_QS = 2;
const int HCBT_CREATEWND = 3;
const int HCBT_DESTROYWND = 4;
const int HCBT_ACTIVATE = 5;
const int HCBT_CLICKSKIPPED = 6;
const int HCBT_KEYSKIPPED = 7;
const int HCBT_SYSCOMMAND = 8;
const int HCBT_SETFOCUS = 9;
const int CF_TEXT = 1;
const int CF_BITMAP = 2;
const int CF_METAFILEPICT = 3;
const int CF_SYLK = 4;
const int CF_DIF = 5;
const int CF_TIFF = 6;
const int CF_OEMTEXT = 7;
const int CF_DIB = 8;
const int CF_PALETTE = 9;
const int CF_PENDATA = 10;
const int CF_RIFF = 11;
const int CF_WAVE = 12;
const int CF_UNICODETEXT = 13;
const int CF_ENHMETAFILE = 14;
const int CF_HDROP = 15;
const int CF_LOCALE = 16;
const int CF_MAX = 17;
const int CF_OWNERDISPLAY = 128;
const int CF_DSPTEXT = 129;
const int CF_DSPBITMAP = 130;
const int CF_DSPMETAFILEPICT = 131;
const int CF_DSPENHMETAFILE = 142;
const int CF_PRIVATEFIRST = 512;
const int CF_PRIVATELAST = 767;
const int CF_GDIOBJFIRST = 768;
const int CF_GDIOBJLAST = 1023;
const int HKL_NEXT = 1;
const int HKL_PREV = 0;
const int KLF_ACTIVATE = 1;
const int KLF_SUBSTITUTE_OK = 2;
const int KLF_UNLOADPREVIOUS = 4;
const int KLF_REORDER = 8;
const int KLF_REPLACELANG = 16;
const int KLF_NOTELLSHELL = 128;
const int KLF_SETFORPROCESS = 256;
const int KL_NAMELENGTH = 9;
const int MF_ENABLED = 0;
const int MF_GRAYED = 1;
const int MF_DISABLED = 2;
const int MF_BITMAP = 4;
const int MF_CHECKED = 8;
const int MF_MENUBARBREAK = 32;
const int MF_MENUBREAK = 64;
const int MF_OWNERDRAW = 256;
const int MF_POPUP = 16;
const int MF_SEPARATOR = 0x800;
const int MF_STRING = 0;
const int MF_UNCHECKED = 0;
const int MF_DEFAULT = 4096;
const int MF_SYSMENU = 0x2000;
const int MF_HELP = 0x4000;
const int MF_END = 128;
const int MF_RIGHTJUSTIFY = 0x4000;
const int MF_MOUSESELECT = 0x8000;
const int MF_INSERT = 0;
const int MF_CHANGE = 128;
const int MF_APPEND = 256;
const int MF_DELETE = 512;
const int MF_REMOVE = 4096;
const int MF_USECHECKBITMAPS = 512;
const int MF_UNHILITE = 0;
const int MF_HILITE = 128;
const int BSM_ALLCOMPONENTS = 0;
const int BSM_APPLICATIONS = 8;
const int BSM_ALLDESKTOPS = 16;
const int BSM_INSTALLABLEDRIVERS = 4;
const int BSM_NETDRIVER = 2;
const int BSM_VXDS = 1;
const int BSF_FLUSHDISK = 0x00000004;
const int BSF_FORCEIFHUNG = 0x00000020;
const int BSF_IGNORECURRENTTASK = 0x00000002;
const int BSF_NOHANG = 0x00000008;
const int BSF_NOTIMEOUTIFNOTHUNG = 0x00000040;
const int BSF_POSTMESSAGE = 0x00000010;
const int BSF_QUERY = 0x00000001;
const int BROADCAST_QUERY_DENY = 1112363332;
const int CDS_UPDATEREGISTRY = 1;
const int CDS_TEST = 2;
const int CDS_FULLSCREEN = 4;
const int CDS_GLOBAL = 8;
const int CDS_SET_PRIMARY = 16;
const int CDS_RESET = 0x40000000;
const int CDS_SETRECT = 0x20000000;
const int CDS_NORESET = 0x10000000;
const int DISP_CHANGE_SUCCESSFUL = 0;
const int DISP_CHANGE_RESTART = 1;
const int BST_CHECKED = 1;
const int BST_INDETERMINATE = 2;
const int BST_UNCHECKED = 0;
const int BST_FOCUS = 8;
const int BST_PUSHED = 4;
const int MF_BYCOMMAND = 0;
const int MF_BYPOSITION = 1024;
const int CWP_ALL = 0;
const int CWP_SKIPINVISIBLE = 1;
const int CWP_SKIPDISABLED = 2;
const int CWP_SKIPTRANSPARENT = 4;
const int IMAGE_BITMAP = 0;
const int IMAGE_ICON = 1;
const int IMAGE_CURSOR = 2;
const int IMAGE_ENHMETAFILE = 3;
const int DF_ALLOWOTHERACCOUNTHOOK = 1;
const int DESKTOP_CREATEMENU = 4;
const int DESKTOP_CREATEWINDOW = 2;
const int DESKTOP_ENUMERATE = 64;
const int DESKTOP_HOOKCONTROL = 8;
const int DESKTOP_JOURNALPLAYBACK = 32;
const int DESKTOP_JOURNALRECORD = 16;
const int DESKTOP_READOBJECTS = 1;
const int DESKTOP_SWITCHDESKTOP = 256;
const int DESKTOP_WRITEOBJECTS = 128;
const int CW_USEDEFAULT = 0x80000000;
const int WS_BORDER = 0x800000;
const int WS_CAPTION = 0xc00000;
const int WS_CHILD = 0x40000000;
const int WS_CHILDWINDOW = 0x40000000;
const int WS_CLIPCHILDREN = 0x2000000;
const int WS_CLIPSIBLINGS = 0x4000000;
const int WS_DISABLED = 0x8000000;
const int WS_DLGFRAME = 0x400000;
const int WS_GROUP = 0x20000;
const int WS_HSCROLL = 0x100000;
const int WS_ICONIC = 0x20000000;
const int WS_MAXIMIZE = 0x1000000;
const int WS_MAXIMIZEBOX = 0x10000;
const int WS_MINIMIZE = 0x20000000;
const int WS_MINIMIZEBOX = 0x20000;
const int WS_OVERLAPPED = 0;
const int WS_OVERLAPPEDWINDOW = 0xcf0000;
const int WS_POPUP = 0x80000000;
const int WS_POPUPWINDOW = 0x80880000;
const int WS_SIZEBOX = 0x40000;
const int WS_SYSMENU = 0x80000;
const int WS_TABSTOP = 0x10000;
const int WS_THICKFRAME = 0x40000;
const int WS_TILED = 0;
const int WS_TILEDWINDOW = 0xcf0000;
const int WS_VISIBLE = 0x10000000;
const int WS_VSCROLL = 0x200000;
const int MDIS_ALLCHILDSTYLES = 1;
const int BS_3STATE = 5;
const int BS_AUTO3STATE = 6;
const int BS_AUTOCHECKBOX = 3;
const int BS_AUTORADIOBUTTON = 9;
const int BS_BITMAP = 128;
const int BS_BOTTOM = 0x800;
const int BS_CENTER = 0x300;
const int BS_CHECKBOX = 2;
const int BS_DEFPUSHBUTTON = 1;
const int BS_GROUPBOX = 7;
const int BS_ICON = 64;
const int BS_LEFT = 256;
const int BS_LEFTTEXT = 32;
const int BS_MULTILINE = 0x2000;
const int BS_NOTIFY = 0x4000;
const int BS_OWNERDRAW = 0xb;
const int BS_PUSHBUTTON = 0;
const int BS_PUSHLIKE = 4096;
const int BS_RADIOBUTTON = 4;
const int BS_RIGHT = 512;
const int BS_RIGHTBUTTON = 32;
const int BS_TEXT = 0;
const int BS_TOP = 0x400;
const int BS_USERBUTTON = 8;
const int BS_VCENTER = 0xc00;
const int BS_FLAT = 0x8000;
const int CBS_AUTOHSCROLL = 64;
const int CBS_DISABLENOSCROLL = 0x800;
const int CBS_DROPDOWN = 2;
const int CBS_DROPDOWNLIST = 3;
const int CBS_HASSTRINGS = 512;
const int CBS_LOWERCASE = 0x4000;
const int CBS_NOINTEGRALHEIGHT = 0x400;
const int CBS_OEMCONVERT = 128;
const int CBS_OWNERDRAWFIXED = 16;
const int CBS_OWNERDRAWVARIABLE = 32;
const int CBS_SIMPLE = 1;
const int CBS_SORT = 256;
const int CBS_UPPERCASE = 0x2000;
const int ES_AUTOHSCROLL = 128;
const int ES_AUTOVSCROLL = 64;
const int ES_CENTER = 1;
const int ES_LEFT = 0;
const int ES_LOWERCASE = 16;
const int ES_MULTILINE = 4;
const int ES_NOHIDESEL = 256;
const int ES_NUMBER = 0x2000;
const int ES_OEMCONVERT = 0x400;
const int ES_PASSWORD = 32;
const int ES_READONLY = 0x800;
const int ES_RIGHT = 2;
const int ES_UPPERCASE = 8;
const int ES_WANTRETURN = 4096;
const int LBS_DISABLENOSCROLL = 4096;
const int LBS_EXTENDEDSEL = 0x800;
const int LBS_HASSTRINGS = 64;
const int LBS_MULTICOLUMN = 512;
const int LBS_MULTIPLESEL = 8;
const int LBS_NODATA = 0x2000;
const int LBS_NOINTEGRALHEIGHT = 256;
const int LBS_NOREDRAW = 4;
const int LBS_NOSEL = 0x4000;
const int LBS_NOTIFY = 1;
const int LBS_OWNERDRAWFIXED = 16;
const int LBS_OWNERDRAWVARIABLE = 32;
const int LBS_SORT = 2;
const int LBS_STANDARD = 0xa00003;
const int LBS_USETABSTOPS = 128;
const int LBS_WANTKEYBOARDINPUT = 0x400;
const int SBS_BOTTOMALIGN = 4;
const int SBS_HORZ = 0;
const int SBS_LEFTALIGN = 2;
const int SBS_RIGHTALIGN = 4;
const int SBS_SIZEBOX = 8;
const int SBS_SIZEBOXBOTTOMRIGHTALIGN = 4;
const int SBS_SIZEBOXTOPLEFTALIGN = 2;
const int SBS_SIZEGRIP = 16;
const int SBS_TOPALIGN = 2;
const int SBS_VERT = 1;
const int SS_BITMAP = 14;
const int SS_BLACKFRAME = 7;
const int SS_BLACKRECT = 4;
const int SS_CENTER = 1;
const int SS_CENTERIMAGE = 512;
const int SS_ENHMETAFILE = 15;
const int SS_ETCHEDFRAME = 18;
const int SS_ETCHEDHORZ = 16;
const int SS_ETCHEDVERT = 17;
const int SS_GRAYFRAME = 8;
const int SS_GRAYRECT = 5;
const int SS_ICON = 3;
const int SS_LEFT = 0;
const int SS_LEFTNOWORDWRAP = 0xc;
const int SS_NOPREFIX = 128;
const int SS_NOTIFY = 256;
const int SS_OWNERDRAW = 0xd;
const int SS_REALSIZEIMAGE = 0x800;
const int SS_RIGHT = 2;
const int SS_RIGHTJUST = 0x400;
const int SS_SIMPLE = 11;
const int SS_SUNKEN = 4096;
const int SS_WHITEFRAME = 9;
const int SS_WHITERECT = 6;
const int SS_USERITEM = 10;
const int DS_3DLOOK = 4;
const int DS_ABSALIGN = 1;
const int DS_CENTER = 0x800;
const int DS_CENTERMOUSE = 4096;
const int DS_CONTEXTHELP = 0x2000;
const int DS_CONTROL = 0x400;
const int DS_FIXEDSYS = 8;
const int DS_LOCALEDIT = 32;
const int DS_MODALFRAME = 128;
const int DS_NOFAILCREATE = 16;
const int DS_NOIDLEMSG = 256;
const int DS_SETFONT = 64;
const int DS_SETFOREGROUND = 512;
const int DS_SYSMODAL = 2;
const int WS_EX_ACCEPTFILES = 16;
const int WS_EX_APPWINDOW = 0x40000;
const int WS_EX_CLIENTEDGE = 512;
const int WS_EX_COMPOSITED = 0x2000000;
const int WS_EX_CONTEXTHELP = 0x400;
const int WS_EX_CONTROLPARENT = 0x10000;
const int WS_EX_DLGMODALFRAME = 1;
const int WS_EX_LAYERED = 0x80000;
const int WS_EX_LAYOUTRTL = 0x400000;
const int WS_EX_LEFT = 0;
const int WS_EX_LEFTSCROLLBAR = 0x4000;
const int WS_EX_LTRREADING = 0;
const int WS_EX_MDICHILD = 64;
const int WS_EX_NOACTIVATE = 0x8000000;
const int WS_EX_NOINHERITLAYOUT = 0x100000;
const int WS_EX_NOPARENTNOTIFY = 4;
const int WS_EX_OVERLAPPEDWINDOW = 0x300;
const int WS_EX_PALETTEWINDOW = 0x188;
const int WS_EX_RIGHT = 0x1000;
const int WS_EX_RIGHTSCROLLBAR = 0;
const int WS_EX_RTLREADING = 0x2000;
const int WS_EX_STATICEDGE = 0x20000;
const int WS_EX_TOOLWINDOW = 128;
const int WS_EX_TOPMOST = 8;
const int WS_EX_TRANSPARENT = 32;
const int WS_EX_WINDOWEDGE = 256;
const int WINSTA_ALL_ACCESS = 895;
const int WINSTA_ACCESSCLIPBOARD = 4;
const int WINSTA_ACCESSGLOBALATOMS = 32;
const int WINSTA_CREATEDESKTOP = 8;
const int WINSTA_ENUMDESKTOPS = 1;
const int WINSTA_ENUMERATE = 256;
const int WINSTA_EXITWINDOWS = 64;
const int WINSTA_READATTRIBUTES = 2;
const int WINSTA_READSCREEN = 512;
const int WINSTA_WRITEATTRIBUTES = 16;
const int DDL_READWRITE = 0;
const int DDL_READONLY = 1;
const int DDL_HIDDEN = 2;
const int DDL_SYSTEM = 4;
const int DDL_DIRECTORY = 16;
const int DDL_ARCHIVE = 32;
const int DDL_POSTMSGS = 8192;
const int DDL_DRIVES = 16384;
const int DDL_EXCLUSIVE = 32768;
const int DC_ACTIVE = 0x00000001;
const int DC_SMALLCAP = 0x00000002;
const int DC_ICON = 0x00000004;
const int DC_TEXT = 0x00000008;
const int DC_INBUTTON = 0x00000010;
const int BDR_RAISEDOUTER = 1;
const int BDR_SUNKENOUTER = 2;
const int BDR_RAISEDINNER = 4;
const int BDR_SUNKENINNER = 8;
const int BDR_OUTER = 3;
const int BDR_INNER = 0xc;
const int BDR_RAISED = 5;
const int BDR_SUNKEN = 10;
const int BF_LEFT = 1;
const int BF_TOP = 2;
const int BF_RIGHT = 4;
const int BF_BOTTOM = 8;
const int BF_DIAGONAL = 16;
const int BF_MIDDLE = 0x800;
const int BF_SOFT = 0x1000;
const int BF_ADJUST = 0x2000;
const int BF_FLAT = 0x4000;
const int BF_MONO = 0x8000;
const int DFC_CAPTION = 1;
const int DFC_MENU = 2;
const int DFC_SCROLL = 3;
const int DFC_BUTTON = 4;
const int DFCS_CAPTIONCLOSE = 0;
const int DFCS_CAPTIONMIN = 1;
const int DFCS_CAPTIONMAX = 2;
const int DFCS_CAPTIONRESTORE = 3;
const int DFCS_CAPTIONHELP = 4;
const int DFCS_MENUARROW = 0;
const int DFCS_MENUCHECK = 1;
const int DFCS_MENUBULLET = 2;
const int DFCS_MENUARROWRIGHT = 4;
const int DFCS_SCROLLUP = 0;
const int DFCS_SCROLLDOWN = 1;
const int DFCS_SCROLLLEFT = 2;
const int DFCS_SCROLLRIGHT = 3;
const int DFCS_SCROLLCOMBOBOX = 5;
const int DFCS_SCROLLSIZEGRIP = 8;
const int DFCS_SCROLLSIZEGRIPRIGHT = 16;
const int DFCS_BUTTONCHECK = 0;
const int DFCS_BUTTONRADIOIMAGE = 1;
const int DFCS_BUTTONRADIOMASK = 2;
const int DFCS_BUTTONRADIO = 4;
const int DFCS_BUTTON3STATE = 8;
const int DFCS_BUTTONPUSH = 16;
const int DFCS_INACTIVE = 256;
const int DFCS_PUSHED = 512;
const int DFCS_CHECKED = 1024;
const int DFCS_ADJUSTRECT = 0x2000;
const int DFCS_FLAT = 0x4000;
const int DFCS_MONO = 0x8000;
const int DST_COMPLEX = 0;
const int DST_TEXT = 1;
const int DST_PREFIXTEXT = 2;
const int DST_ICON = 3;
const int DST_BITMAP = 4;
const int DSS_NORMAL = 0;
const int DSS_UNION = 16;
const int DSS_DISABLED = 32;
const int DSS_MONO = 128;
const int DSS_RIGHT = 0x8000;
const int DT_BOTTOM = 8;
const int DT_CALCRECT = 1024;
const int DT_CENTER = 1;
const int DT_EDITCONTROL = 8192;
const int DT_END_ELLIPSIS = 32768;
const int DT_PATH_ELLIPSIS = 16384;
const int DT_WORD_ELLIPSIS = 0x40000;
const int DT_EXPANDTABS = 64;
const int DT_EXTERNALLEADING = 512;
const int DT_LEFT = 0;
const int DT_MODIFYSTRING = 65536;
const int DT_NOCLIP = 256;
const int DT_NOPREFIX = 2048;
const int DT_RIGHT = 2;
const int DT_RTLREADING = 131072;
const int DT_SINGLELINE = 32;
const int DT_TABSTOP = 128;
const int DT_TOP = 0;
const int DT_VCENTER = 4;
const int DT_WORDBREAK = 16;
const int DT_INTERNAL = 4096;
const int WB_ISDELIMITER = 2;
const int WB_LEFT = 0;
const int WB_RIGHT = 1;
const int SB_HORZ = 0;
const int SB_VERT = 1;
const int SB_CTL = 2;
const int SB_BOTH = 3;
const int ESB_DISABLE_BOTH = 3;
const int ESB_DISABLE_DOWN = 2;
const int ESB_DISABLE_LEFT = 1;
const int ESB_DISABLE_LTUP = 1;
const int ESB_DISABLE_RIGHT = 2;
const int ESB_DISABLE_RTDN = 2;
const int ESB_DISABLE_UP = 1;
const int ESB_ENABLE_BOTH = 0;
const int SB_LINEUP = 0;
const int SB_LINEDOWN = 1;
const int SB_LINELEFT = 0;
const int SB_LINERIGHT = 1;
const int SB_PAGEUP = 2;
const int SB_PAGEDOWN = 3;
const int SB_PAGELEFT = 2;
const int SB_PAGERIGHT = 3;
const int SB_THUMBPOSITION = 4;
const int SB_THUMBTRACK = 5;
const int SB_ENDSCROLL = 8;
const int SB_LEFT = 6;
const int SB_RIGHT = 7;
const int SB_BOTTOM = 7;
const int SB_TOP = 6;
const int DIFFERENCE = 11;
const int EWX_FORCE = 4;
const int EWX_LOGOFF = 0;
const int EWX_POWEROFF = 8;
const int EWX_REBOOT = 2;
const int EWX_SHUTDOWN = 1;
const int CS_BYTEALIGNCLIENT = 4096;
const int CS_BYTEALIGNWINDOW = 8192;
const int CS_KEYCVTWINDOW = 4;
const int CS_NOKEYCVT = 256;
const int CS_CLASSDC = 64;
const int CS_DBLCLKS = 8;
const int CS_GLOBALCLASS = 16384;
const int CS_HREDRAW = 2;
const int CS_NOCLOSE = 512;
const int CS_OWNDC = 32;
const int CS_PARENTDC = 128;
const int CS_SAVEBITS = 2048;
const int CS_VREDRAW = 1;
const int CS_IME = 0x10000;
const int MIIM_STATE = 1;
const int MIIM_ID = 2;
const int MIIM_SUBMENU = 4;
const int MIIM_CHECKMARKS = 8;
const int MIIM_TYPE = 16;
const int MIIM_DATA = 32;
const int MIIM_STRING = 64;
const int MIIM_BITMAP = 128;
const int MIIM_FTYPE = 256;
const int MFT_BITMAP = 4;
const int MFT_MENUBARBREAK = 32;
const int MFT_MENUBREAK = 64;
const int MFT_OWNERDRAW = 256;
const int MFT_RADIOCHECK = 512;
const int MFT_RIGHTJUSTIFY = 0x4000;
const int MFT_SEPARATOR = 0x800;
const int MFT_STRING = 0;
const int MFS_CHECKED = 8;
const int MFS_DEFAULT = 4096;
const int MFS_DISABLED = 3;
const int MFS_ENABLED = 0;
const int MFS_GRAYED = 3;
const int MFS_HILITE = 128;
const int MFS_UNCHECKED = 0;
const int MFS_UNHILITE = 0;
const int GW_HWNDNEXT = 2;
const int GW_HWNDPREV = 3;
const int GW_CHILD = 5;
const int GW_HWNDFIRST = 0;
const int GW_HWNDLAST = 1;
const int GW_OWNER = 4;
const int SW_HIDE = 0;
const int SW_NORMAL = 1;
const int SW_SHOWNORMAL = 1;
const int SW_SHOWMINIMIZED = 2;
const int SW_MAXIMIZE = 3;
const int SW_SHOWMAXIMIZED = 3;
const int SW_SHOWNOACTIVATE = 4;
const int SW_SHOW = 5;
const int SW_MINIMIZE = 6;
const int SW_SHOWMINNOACTIVE = 7;
const int SW_SHOWNA = 8;
const int SW_RESTORE = 9;
const int SW_SHOWDEFAULT = 10;
const int SW_FORCEMINIMIZE = 11;
const int SW_MAX = 11;
const int MB_USERICON = 128;
const int MB_ICONASTERISK = 64;
const int MB_ICONEXCLAMATION = 0x30;
const int MB_ICONWARNING = 0x30;
const int MB_ICONERROR = 16;
const int MB_ICONHAND = 16;
const int MB_ICONQUESTION = 32;
const int MB_OK = 0;
const int MB_ABORTRETRYIGNORE = 2;
const int MB_APPLMODAL = 0;
const int MB_DEFAULT_DESKTOP_ONLY = 0x20000;
const int MB_HELP = 0x4000;
const int MB_RIGHT = 0x80000;
const int MB_RTLREADING = 0x100000;
const int MB_TOPMOST = 0x40000;
const int MB_DEFBUTTON1 = 0;
const int MB_DEFBUTTON2 = 256;
const int MB_DEFBUTTON3 = 512;
const int MB_DEFBUTTON4 = 0x300;
const int MB_ICONINFORMATION = 64;
const int MB_ICONSTOP = 16;
const int MB_OKCANCEL = 1;
const int MB_RETRYCANCEL = 5;
const int MB_SERVICE_NOTIFICATION = 0x00200000;
const int MB_SERVICE_NOTIFICATION_NT3X = 0x00040000;
const int MB_SETFOREGROUND = 0x10000;
const int MB_SYSTEMMODAL = 4096;
const int MB_TASKMODAL = 0x2000;
const int MB_YESNO = 4;
const int MB_YESNOCANCEL = 3;
const int MB_ICONMASK = 240;
const int MB_DEFMASK = 3840;
const int MB_MODEMASK = 0x00003000;
const int MB_MISCMASK = 0x0000C000;
const int MB_NOFOCUS = 0x00008000;
const int MB_TYPEMASK = 15;
const int IDOK = 1;
const int IDCANCEL = 2;
const int IDABORT = 3;
const int IDRETRY = 4;
const int IDIGNORE = 5;
const int IDYES = 6;
const int IDNO = 7;
const int IDCLOSE = 8;
const int IDHELP = 9;
const int DWL_DLGPROC = 4;
const int DWLP_DLGPROC = 4;
const int DWL_MSGRESULT = 0;
const int DWLP_MSGRESULT = 0;
const int DWL_USER = 8;
const int DWLP_USER = 8;
const int QS_ALLEVENTS = 191;
const int QS_ALLINPUT = 255;
const int QS_ALLPOSTMESSAGE = 256;
const int QS_HOTKEY = 128;
const int QS_INPUT = 7;
const int QS_KEY = 1;
const int QS_MOUSE = 6;
const int QS_MOUSEBUTTON = 4;
const int QS_MOUSEMOVE = 2;
const int QS_PAINT = 32;
const int QS_POSTMESSAGE = 8;
const int QS_SENDMESSAGE = 64;
const int QS_TIMER = 16;
const int MWMO_WAITALL = 1;
const int MWMO_ALERTABLE = 2;
const int MWMO_INPUTAVAILABLE = 4;
const int COLOR_3DDKSHADOW = 21;
const int COLOR_3DFACE = 15;
const int COLOR_3DHILIGHT = 20;
const int COLOR_3DHIGHLIGHT = 20;
const int COLOR_3DLIGHT = 22;
const int COLOR_BTNHILIGHT = 20;
const int COLOR_3DSHADOW = 16;
const int COLOR_ACTIVEBORDER = 10;
const int COLOR_ACTIVECAPTION = 2;
const int COLOR_APPWORKSPACE = 12;
const int COLOR_BACKGROUND = 1;
const int COLOR_DESKTOP = 1;
const int COLOR_BTNFACE = 15;
const int COLOR_BTNHIGHLIGHT = 20;
const int COLOR_BTNSHADOW = 16;
const int COLOR_BTNTEXT = 18;
const int COLOR_CAPTIONTEXT = 9;
const int COLOR_GRAYTEXT = 17;
const int COLOR_HIGHLIGHT = 13;
const int COLOR_HIGHLIGHTTEXT = 14;
const int COLOR_INACTIVEBORDER = 11;
const int COLOR_INACTIVECAPTION = 3;
const int COLOR_INACTIVECAPTIONTEXT = 19;
const int COLOR_INFOBK = 24;
const int COLOR_INFOTEXT = 23;
const int COLOR_MENU = 4;
const int COLOR_MENUTEXT = 7;
const int COLOR_SCROLLBAR = 0;
const int COLOR_WINDOW = 5;
const int COLOR_WINDOWFRAME = 6;
const int COLOR_WINDOWTEXT = 8;
const int COLOR_HOTLIGHT = 26;
const int COLOR_GRADIENTACTIVECAPTION = 27;
const int COLOR_GRADIENTINACTIVECAPTION = 28;
const int CTLCOLOR_MSGBOX = 0;
const int CTLCOLOR_EDIT = 1;
const int CTLCOLOR_LISTBOX = 2;
const int CTLCOLOR_BTN = 3;
const int CTLCOLOR_DLG = 4;
const int CTLCOLOR_SCROLLBAR = 5;
const int CTLCOLOR_STATIC = 6;
const int CTLCOLOR_MAX = 7;
const int SM_CXSCREEN = 0;
const int SM_CYSCREEN = 1;
const int SM_CXVSCROLL = 2;
const int SM_CYHSCROLL = 3;
const int SM_CYCAPTION = 4;
const int SM_CXBORDER = 5;
const int SM_CYBORDER = 6;
const int SM_CXDLGFRAME = 7;
const int SM_CXFIXEDFRAME = 7;
const int SM_CYDLGFRAME = 8;
const int SM_CYFIXEDFRAME = 8;
const int SM_CYVTHUMB = 9;
const int SM_CXHTHUMB = 10;
const int SM_CXICON = 11;
const int SM_CYICON = 12;
const int SM_CXCURSOR = 13;
const int SM_CYCURSOR = 14;
const int SM_CYMENU = 15;
const int SM_CXFULLSCREEN = 16;
const int SM_CYFULLSCREEN = 17;
const int SM_CYKANJIWINDOW = 18;
const int SM_MOUSEPRESENT = 19;
const int SM_CYVSCROLL = 20;
const int SM_CXHSCROLL = 21;
const int SM_DEBUG = 22;
const int SM_SWAPBUTTON = 23;
const int SM_RESERVED1 = 24;
const int SM_RESERVED2 = 25;
const int SM_RESERVED3 = 26;
const int SM_RESERVED4 = 27;
const int SM_CXMIN = 28;
const int SM_CYMIN = 29;
const int SM_CXSIZE = 30;
const int SM_CYSIZE = 31;
const int SM_CXSIZEFRAME = 32;
const int SM_CXFRAME = 32;
const int SM_CYSIZEFRAME = 33;
const int SM_CYFRAME = 33;
const int SM_CXMINTRACK = 34;
const int SM_CYMINTRACK = 35;
const int SM_CXDOUBLECLK = 36;
const int SM_CYDOUBLECLK = 37;
const int SM_CXICONSPACING = 38;
const int SM_CYICONSPACING = 39;
const int SM_MENUDROPALIGNMENT = 40;
const int SM_PENWINDOWS = 41;
const int SM_DBCSENABLED = 42;
const int SM_CMOUSEBUTTONS = 43;
const int SM_SECURE = 44;
const int SM_CXEDGE = 45;
const int SM_CYEDGE = 46;
const int SM_CXMINSPACING = 47;
const int SM_CYMINSPACING = 48;
const int SM_CXSMICON = 49;
const int SM_CYSMICON = 50;
const int SM_CYSMCAPTION = 51;
const int SM_CXSMSIZE = 52;
const int SM_CYSMSIZE = 53;
const int SM_CXMENUSIZE = 54;
const int SM_CYMENUSIZE = 55;
const int SM_ARRANGE = 56;
const int SM_CXMINIMIZED = 57;
const int SM_CYMINIMIZED = 58;
const int SM_CXMAXTRACK = 59;
const int SM_CYMAXTRACK = 60;
const int SM_CXMAXIMIZED = 61;
const int SM_CYMAXIMIZED = 62;
const int SM_NETWORK = 63;
const int LR_DEFAULTSIZE = 64;
const int SM_CLEANBOOT = 67;
const int SM_CXDRAG = 68;
const int SM_CYDRAG = 69;
const int SM_SHOWSOUNDS = 70;
const int SM_CXMENUCHECK = 71;
const int SM_CYMENUCHECK = 72;
const int SM_SLOWMACHINE = 73;
const int SM_MIDEASTENABLED = 74;
const int SM_MOUSEWHEELPRESENT = 75;
const int SM_XVIRTUALSCREEN = 76;
const int SM_YVIRTUALSCREEN = 77;
const int SM_CXVIRTUALSCREEN = 78;
const int SM_CYVIRTUALSCREEN = 79;
const int SM_CMONITORS = 80;
const int SM_SAMEDISPLAYFORMAT = 81;
const int SM_IMMENABLED = 82;
const int SM_CXFOCUSBORDER = 83;
const int SM_CYFOCUSBORDER = 84;
const int SM_TABLETPC = 86;
const int SM_MEDIACENTER = 87;
const int SM_CMETRICS = 88;
const int SM_REMOTESESSION = 0X1000;
const int ARW_BOTTOMLEFT = 0;
const int ARW_BOTTOMRIGHT = 1;
const int ARW_HIDE = 8;
const int ARW_TOPLEFT = 2;
const int ARW_TOPRIGHT = 3;
const int ARW_DOWN = 4;
const int ARW_LEFT = 0;
const int ARW_RIGHT = 0;
const int ARW_UP = 4;
const int UOI_FLAGS = 1;
const int UOI_NAME = 2;
const int UOI_TYPE = 3;
const int UOI_USER_SID = 4;
const int LR_DEFAULTCOLOR = 0;
const int LR_MONOCHROME = 1;
const int LR_COLOR = 2;
const int LR_COPYRETURNORG = 4;
const int LR_COPYDELETEORG = 8;
const int LR_LOADFROMFILE = 16;
const int LR_LOADTRANSPARENT = 32;
const int LR_LOADREALSIZE = 128;
const int LR_LOADMAP3DCOLORS = 4096;
const int LR_CREATEDIBSECTION = 8192;
const int LR_COPYFROMRESOURCE = 0x4000;
const int LR_SHARED = 32768;
const int KEYEVENTF_EXTENDEDKEY = 0x00000001;
const int KEYEVENTF_KEYUP = 00000002;
const int OBM_BTNCORNERS = 32758;
const int OBM_BTSIZE = 32761;
const int OBM_CHECK = 32760;
const int OBM_CHECKBOXES = 32759;
const int OBM_CLOSE = 32754;
const int OBM_COMBO = 32738;
const int OBM_DNARROW = 32752;
const int OBM_DNARROWD = 32742;
const int OBM_DNARROWI = 32736;
const int OBM_LFARROW = 32750;
const int OBM_LFARROWI = 32734;
const int OBM_LFARROWD = 32740;
const int OBM_MNARROW = 32739;
const int OBM_OLD_CLOSE = 32767;
const int OBM_OLD_DNARROW = 32764;
const int OBM_OLD_LFARROW = 32762;
const int OBM_OLD_REDUCE = 32757;
const int OBM_OLD_RESTORE = 32755;
const int OBM_OLD_RGARROW = 32763;
const int OBM_OLD_UPARROW = 32765;
const int OBM_OLD_ZOOM = 32756;
const int OBM_REDUCE = 32749;
const int OBM_REDUCED = 32746;
const int OBM_RESTORE = 32747;
const int OBM_RESTORED = 32744;
const int OBM_RGARROW = 32751;
const int OBM_RGARROWD = 32741;
const int OBM_RGARROWI = 32735;
const int OBM_SIZE = 32766;
const int OBM_UPARROW = 32753;
const int OBM_UPARROWD = 32743;
const int OBM_UPARROWI = 32737;
const int OBM_ZOOM = 32748;
const int OBM_ZOOMD = 32745;
const int OCR_NORMAL = 32512;
const int OCR_IBEAM = 32513;
const int OCR_WAIT = 32514;
const int OCR_CROSS = 32515;
const int OCR_UP = 32516;
const int OCR_SIZE = 32640;
const int OCR_ICON = 32641;
const int OCR_SIZENWSE = 32642;
const int OCR_SIZENESW = 32643;
const int OCR_SIZEWE = 32644;
const int OCR_SIZENS = 32645;
const int OCR_SIZEALL = 32646;
const int OCR_NO = 32648;
const int OCR_APPSTARTING = 32650;
const int OIC_SAMPLE = 32512;
const int OIC_HAND = 32513;
const int OIC_QUES = 32514;
const int OIC_BANG = 32515;
const int OIC_NOTE = 32516;
const int OIC_WINLOGO = 32517;
const int HELPINFO_MENUITEM = 2;
const int HELPINFO_WINDOW = 1;
const int MSGF_DIALOGBOX = 0;
const int MSGF_MESSAGEBOX = 1;
const int MSGF_MENU = 2;
const int MSGF_MOVE = 3;
const int MSGF_SIZE = 4;
const int MSGF_SCROLLBAR = 5;
const int MSGF_NEXTWINDOW = 6;
const int MSGF_MAINLOOP = 8;
const int MSGF_USER = 4096;
const int MOUSEEVENTF_MOVE = 1;
const int MOUSEEVENTF_LEFTDOWN = 2;
const int MOUSEEVENTF_LEFTUP = 4;
const int MOUSEEVENTF_RIGHTDOWN = 8;
const int MOUSEEVENTF_RIGHTUP = 16;
const int MOUSEEVENTF_MIDDLEDOWN = 32;
const int MOUSEEVENTF_MIDDLEUP = 64;
const int MOUSEEVENTF_WHEEL = 0x0800;
const int MOUSEEVENTF_ABSOLUTE = 32768;
const int PM_NOREMOVE = 0;
const int PM_REMOVE = 1;
const int PM_NOYIELD = 2;
const int RDW_ERASE = 4;
const int RDW_FRAME = 1024;
const int RDW_INTERNALPAINT = 2;
const int RDW_INVALIDATE = 1;
const int RDW_NOERASE = 32;
const int RDW_NOFRAME = 2048;
const int RDW_NOINTERNALPAINT = 16;
const int RDW_VALIDATE = 8;
const int RDW_ERASENOW = 512;
const int RDW_UPDATENOW = 256;
const int RDW_ALLCHILDREN = 128;
const int RDW_NOCHILDREN = 64;
const int SMTO_ABORTIFHUNG = 2;
const int SMTO_BLOCK = 1;
const int SMTO_NORMAL = 0;
const int SIF_ALL = 23;
const int SIF_PAGE = 2;
const int SIF_POS = 4;
const int SIF_RANGE = 1;
const int SIF_DISABLENOSCROLL = 8;
const int SIF_TRACKPOS = 16;
const int SWP_DRAWFRAME = 32;
const int SWP_FRAMECHANGED = 32;
const int SWP_HIDEWINDOW = 128;
const int SWP_NOACTIVATE = 16;
const int SWP_NOCOPYBITS = 256;
const int SWP_NOMOVE = 2;
const int SWP_NOSIZE = 1;
const int SWP_NOREDRAW = 8;
const int SWP_NOZORDER = 4;
const int SWP_SHOWWINDOW = 64;
const int SWP_NOOWNERZORDER = 512;
const int SWP_NOREPOSITION = 512;
const int SWP_NOSENDCHANGING = 1024;
const int SWP_DEFERERASE = 8192;
const int SWP_ASYNCWINDOWPOS = 16384;
const int HSHELL_ACTIVATESHELLWINDOW = 3;
const int HSHELL_GETMINRECT = 5;
const int HSHELL_LANGUAGE = 8;
const int HSHELL_REDRAW = 6;
const int HSHELL_TASKMAN = 7;
const int HSHELL_WINDOWACTIVATED = 4;
const int HSHELL_WINDOWCREATED = 1;
const int HSHELL_WINDOWDESTROYED = 2;
const int HSHELL_RUDEAPPACTIVATED = 32772;
const int HSHELL_FLASH = 32774;
const int SPI_GETACCESSTIMEOUT = 60;
const int SPI_GETACTIVEWNDTRKTIMEOUT = 8194;
const int SPI_GETANIMATION = 72;
const int SPI_GETBEEP = 1;
const int SPI_GETBORDER = 5;
const int SPI_GETDEFAULTINPUTLANG = 89;
const int SPI_GETDRAGFULLWINDOWS = 38;
const int SPI_GETFASTTASKSWITCH = 35;
const int SPI_GETFILTERKEYS = 50;
const int SPI_GETFONTSMOOTHING = 74;
const int SPI_GETGRIDGRANULARITY = 18;
const int SPI_GETHIGHCONTRAST = 66;
const int SPI_GETICONMETRICS = 45;
const int SPI_GETICONTITLELOGFONT = 31;
const int SPI_GETICONTITLEWRAP = 25;
const int SPI_GETKEYBOARDDELAY = 22;
const int SPI_GETKEYBOARDPREF = 68;
const int SPI_GETKEYBOARDSPEED = 10;
const int SPI_GETLOWPOWERACTIVE = 83;
const int SPI_GETLOWPOWERTIMEOUT = 79;
const int SPI_GETMENUDROPALIGNMENT = 27;
const int SPI_GETMINIMIZEDMETRICS = 43;
const int SPI_GETMOUSE = 3;
const int SPI_GETMOUSEKEYS = 54;
const int SPI_GETMOUSETRAILS = 94;
const int SPI_GETNONCLIENTMETRICS = 41;
const int SPI_GETPOWEROFFACTIVE = 84;
const int SPI_GETPOWEROFFTIMEOUT = 80;
const int SPI_GETSCREENREADER = 70;
const int SPI_GETSCREENSAVEACTIVE = 16;
const int SPI_GETSCREENSAVETIMEOUT = 14;
const int SPI_GETSERIALKEYS = 62;
const int SPI_GETSHOWSOUNDS = 56;
const int SPI_GETSOUNDSENTRY = 64;
const int SPI_GETSTICKYKEYS = 58;
const int SPI_GETTOGGLEKEYS = 52;
const int SPI_GETWHEELSCROLLLINES = 104;
const int SPI_GETWINDOWSEXTENSION = 92;
const int SPI_GETWORKAREA = 48;
const int SPI_ICONHORIZONTALSPACING = 13;
const int SPI_ICONVERTICALSPACING = 24;
const int SPI_LANGDRIVER = 12;
const int SPI_SCREENSAVERRUNNING = 97;
const int SPI_SETACCESSTIMEOUT = 61;
const int SPI_SETACTIVEWNDTRKTIMEOUT = 8195;
const int SPI_SETANIMATION = 73;
const int SPI_SETBEEP = 2;
const int SPI_SETBORDER = 6;
const int SPI_SETDEFAULTINPUTLANG = 90;
const int SPI_SETDESKPATTERN = 21;
const int SPI_SETDESKWALLPAPER = 20;
const int SPI_SETDOUBLECLICKTIME = 32;
const int SPI_SETDOUBLECLKHEIGHT = 30;
const int SPI_SETDOUBLECLKWIDTH = 29;
const int SPI_SETDRAGFULLWINDOWS = 37;
const int SPI_SETDRAGHEIGHT = 77;
const int SPI_SETDRAGWIDTH = 76;
const int SPI_SETFASTTASKSWITCH = 36;
const int SPI_SETFILTERKEYS = 51;
const int SPI_SETFONTSMOOTHING = 75;
const int SPI_SETGRIDGRANULARITY = 19;
const int SPI_SETHANDHELD = 78;
const int SPI_SETHIGHCONTRAST = 67;
const int SPI_SETICONMETRICS = 46;
const int SPI_SETICONTITLELOGFONT = 34;
const int SPI_SETICONTITLEWRAP = 26;
const int SPI_SETKEYBOARDDELAY = 23;
const int SPI_SETKEYBOARDPREF = 69;
const int SPI_SETKEYBOARDSPEED = 11;
const int SPI_SETLANGTOGGLE = 91;
const int SPI_SETLOWPOWERACTIVE = 85;
const int SPI_SETLOWPOWERTIMEOUT = 81;
const int SPI_SETMENUDROPALIGNMENT = 28;
const int SPI_SETMINIMIZEDMETRICS = 44;
const int SPI_SETMOUSE = 4;
const int SPI_SETMOUSEBUTTONSWAP = 33;
const int SPI_SETMOUSEKEYS = 55;
const int SPI_SETMOUSETRAILS = 93;
const int SPI_SETNONCLIENTMETRICS = 42;
const int SPI_SETPENWINDOWS = 49;
const int SPI_SETPOWEROFFACTIVE = 86;
const int SPI_SETPOWEROFFTIMEOUT = 82;
const int SPI_SETSCREENREADER = 71;
const int SPI_SETSCREENSAVEACTIVE = 17;
const int SPI_SETSCREENSAVERRUNNING = 97;
const int SPI_SETSCREENSAVETIMEOUT = 15;
const int SPI_SETSERIALKEYS = 63;
const int SPI_SETSHOWSOUNDS = 57;
const int SPI_SETSOUNDSENTRY = 65;
const int SPI_SETSTICKYKEYS = 59;
const int SPI_SETTOGGLEKEYS = 53;
const int SPI_SETWHEELSCROLLLINES = 105;
const int SPI_SETWORKAREA = 47;
const int SPIF_UPDATEINIFILE = 1;
const int SPIF_SENDWININICHANGE = 2;
const int SPIF_SENDCHANGE = 2;
const int WM_APP = 32768;
const int WM_ACTIVATE = 6;
const int WM_ACTIVATEAPP = 28;
const int WM_AFXFIRST = 864;
const int WM_AFXLAST = 895;
const int WM_ASKCBFORMATNAME = 780;
const int WM_CANCELJOURNAL = 75;
const int WM_CANCELMODE = 31;
const int WM_CAPTURECHANGED = 533;
const int WM_CHANGECBCHAIN = 781;
const int WM_CHAR = 258;
const int WM_CHARTOITEM = 47;
const int WM_CHILDACTIVATE = 34;
const int WM_CLEAR = 771;
const int WM_CLOSE = 16;
const int WM_COMMAND = 273;
const int WM_COMMNOTIFY = 68;
const int WM_COMPACTING = 65;
const int WM_COMPAREITEM = 57;
const int WM_CONTEXTMENU = 123;
const int WM_COPY = 769;
const int WM_COPYDATA = 74;
const int WM_CREATE = 1;
const int WM_CTLCOLORBTN = 309;
const int WM_CTLCOLORDLG = 310;
const int WM_CTLCOLOREDIT = 307;
const int WM_CTLCOLORLISTBOX = 308;
const int WM_CTLCOLORMSGBOX = 306;
const int WM_CTLCOLORSCROLLBAR = 311;
const int WM_CTLCOLORSTATIC = 312;
const int WM_CUT = 768;
const int WM_DEADCHAR = 259;
const int WM_DELETEITEM = 45;
const int WM_DESTROY = 2;
const int WM_DESTROYCLIPBOARD = 775;
const int WM_DEVICECHANGE = 537;
const int WM_DEVMODECHANGE = 27;
const int WM_DISPLAYCHANGE = 126;
const int WM_DRAWCLIPBOARD = 776;
const int WM_DRAWITEM = 43;
const int WM_DROPFILES = 563;
const int WM_ENABLE = 10;
const int WM_ENDSESSION = 22;
const int WM_ENTERIDLE = 289;
const int WM_ENTERMENULOOP = 529;
const int WM_ENTERSIZEMOVE = 561;
const int WM_ERASEBKGND = 20;
const int WM_EXITMENULOOP = 530;
const int WM_EXITSIZEMOVE = 562;
const int WM_FONTCHANGE = 29;
const int WM_GETDLGCODE = 135;
const int WM_GETFONT = 49;
const int WM_GETHOTKEY = 51;
const int WM_GETICON = 127;
const int WM_GETMINMAXINFO = 36;
const int WM_GETTEXT = 13;
const int WM_GETTEXTLENGTH = 14;
const int WM_HANDHELDFIRST = 856;
const int WM_HANDHELDLAST = 863;
const int WM_HELP = 83;
const int WM_HOTKEY = 786;
const int WM_HSCROLL = 276;
const int WM_HSCROLLCLIPBOARD = 782;
const int WM_ICONERASEBKGND = 39;
const int WM_INITDIALOG = 272;
const int WM_INITMENU = 278;
const int WM_INITMENUPOPUP = 279;
const int WM_INPUTLANGCHANGE = 81;
const int WM_INPUTLANGCHANGEREQUEST = 80;
const int WM_KEYDOWN = 256;
const int WM_KEYUP = 257;
const int WM_KILLFOCUS = 8;
const int WM_MDIACTIVATE = 546;
const int WM_MDICASCADE = 551;
const int WM_MDICREATE = 544;
const int WM_MDIDESTROY = 545;
const int WM_MDIGETACTIVE = 553;
const int WM_MDIICONARRANGE = 552;
const int WM_MDIMAXIMIZE = 549;
const int WM_MDINEXT = 548;
const int WM_MDIREFRESHMENU = 564;
const int WM_MDIRESTORE = 547;
const int WM_MDISETMENU = 560;
const int WM_MDITILE = 550;
const int WM_MEASUREITEM = 44;
const int WM_MENUCHAR = 288;
const int WM_MENUSELECT = 287;
const int WM_NEXTMENU = 531;
const int WM_MOVE = 3;
const int WM_MOVING = 534;
const int WM_NCACTIVATE = 134;
const int WM_NCCALCSIZE = 131;
const int WM_NCCREATE = 129;
const int WM_NCDESTROY = 130;
const int WM_NCHITTEST = 132;
const int WM_NCLBUTTONDBLCLK = 163;
const int WM_NCLBUTTONDOWN = 161;
const int WM_NCLBUTTONUP = 162;
const int WM_NCMBUTTONDBLCLK = 169;
const int WM_NCMBUTTONDOWN = 167;
const int WM_NCMBUTTONUP = 168;
const int WM_NCMOUSEMOVE = 160;
const int WM_NCPAINT = 133;
const int WM_NCRBUTTONDBLCLK = 166;
const int WM_NCRBUTTONDOWN = 164;
const int WM_NCRBUTTONUP = 165;
const int WM_NEXTDLGCTL = 40;
const int WM_NOTIFY = 78;
const int WM_NOTIFYFORMAT = 85;
const int WM_NULL = 0;
const int WM_PAINT = 15;
const int WM_PAINTCLIPBOARD = 777;
const int WM_PAINTICON = 38;
const int WM_PALETTECHANGED = 785;
const int WM_PALETTEISCHANGING = 784;
const int WM_PARENTNOTIFY = 528;
const int WM_PASTE = 770;
const int WM_PENWINFIRST = 896;
const int WM_PENWINLAST = 911;
const int WM_POWER = 72;
const int WM_POWERBROADCAST = 536;
const int WM_PRINT = 791;
const int WM_PRINTCLIENT = 792;
const int WM_QUERYDRAGICON = 55;
const int WM_QUERYENDSESSION = 17;
const int WM_QUERYNEWPALETTE = 783;
const int WM_QUERYOPEN = 19;
const int WM_QUEUESYNC = 35;
const int WM_QUIT = 18;
const int WM_RENDERALLFORMATS = 774;
const int WM_RENDERFORMAT = 773;
const int WM_SETCURSOR = 32;
const int WM_SETFOCUS = 7;
const int WM_SETFONT = 48;
const int WM_SETHOTKEY = 50;
const int WM_SETICON = 128;
const int WM_SETREDRAW = 11;
const int WM_SETTEXT = 12;
const int WM_SETTINGCHANGE = 26;
const int WM_SHOWWINDOW = 24;
const int WM_SIZE = 5;
const int WM_SIZECLIPBOARD = 779;
const int WM_SIZING = 532;
const int WM_SPOOLERSTATUS = 42;
const int WM_STYLECHANGED = 125;
const int WM_STYLECHANGING = 124;
const int WM_SYSCHAR = 262;
const int WM_SYSCOLORCHANGE = 21;
const int WM_SYSCOMMAND = 274;
const int WM_SYSDEADCHAR = 263;
const int WM_SYSKEYDOWN = 260;
const int WM_SYSKEYUP = 261;
const int WM_TCARD = 82;
const int WM_THEMECHANGED = 794;
const int WM_TIMECHANGE = 30;
const int WM_TIMER = 275;
const int WM_UNDO = 772;
const int WM_USER = 1024;
const int WM_USERCHANGED = 84;
const int WM_VKEYTOITEM = 46;
const int WM_VSCROLL = 277;
const int WM_VSCROLLCLIPBOARD = 778;
const int WM_WINDOWPOSCHANGED = 71;
const int WM_WINDOWPOSCHANGING = 70;
const int WM_WININICHANGE = 26;
const int WM_KEYFIRST = 256;
const int WM_KEYLAST = 264;
const int WM_SYNCPAINT = 136;
const int WM_MOUSEACTIVATE = 33;
const int WM_MOUSEMOVE = 512;
const int WM_LBUTTONDOWN = 513;
const int WM_LBUTTONUP = 514;
const int WM_LBUTTONDBLCLK = 515;
const int WM_RBUTTONDOWN = 516;
const int WM_RBUTTONUP = 517;
const int WM_RBUTTONDBLCLK = 518;
const int WM_MBUTTONDOWN = 519;
const int WM_MBUTTONUP = 520;
const int WM_MBUTTONDBLCLK = 521;
const int WM_MOUSEWHEEL = 522;
const int WM_MOUSEFIRST = 512;
const int WM_MOUSELAST = 522;
const int WM_MOUSEHOVER = 0x2A1;
const int WM_MOUSELEAVE = 0x2A3;
const int WHEEL_DELTA = 120;
const int BM_CLICK = 245;
const int BM_GETCHECK = 240;
const int BM_GETIMAGE = 246;
const int BM_GETSTATE = 242;
const int BM_SETCHECK = 241;
const int BM_SETIMAGE = 247;
const int BM_SETSTATE = 243;
const int BM_SETSTYLE = 244;
const int BN_CLICKED = 0;
const int BN_DBLCLK = 5;
const int BN_DISABLE = 4;
const int BN_DOUBLECLICKED = 5;
const int BN_HILITE = 2;
const int BN_KILLFOCUS = 7;
const int BN_PAINT = 1;
const int BN_PUSHED = 2;
const int BN_SETFOCUS = 6;
const int BN_UNHILITE = 3;
const int BN_UNPUSHED = 3;
const int CB_ADDSTRING = 323;
const int CB_DELETESTRING = 324;
const int CB_DIR = 325;
const int CB_FINDSTRING = 332;
const int CB_FINDSTRINGEXACT = 344;
const int CB_GETCOUNT = 326;
const int CB_GETCURSEL = 327;
const int CB_GETDROPPEDCONTROLRECT = 338;
const int CB_GETDROPPEDSTATE = 343;
const int CB_GETDROPPEDWIDTH = 351;
const int CB_GETEDITSEL = 320;
const int CB_GETEXTENDEDUI = 342;
const int CB_GETHORIZONTALEXTENT = 349;
const int CB_GETITEMDATA = 336;
const int CB_GETITEMHEIGHT = 340;
const int CB_GETLBTEXT = 328;
const int CB_GETLBTEXTLEN = 329;
const int CB_GETLOCALE = 346;
const int CB_GETTOPINDEX = 347;
const int CB_INITSTORAGE = 353;
const int CB_INSERTSTRING = 330;
const int CB_LIMITTEXT = 321;
const int CB_RESETCONTENT = 331;
const int CB_SELECTSTRING = 333;
const int CB_SETCURSEL = 334;
const int CB_SETDROPPEDWIDTH = 352;
const int CB_SETEDITSEL = 322;
const int CB_SETEXTENDEDUI = 341;
const int CB_SETHORIZONTALEXTENT = 350;
const int CB_SETITEMDATA = 337;
const int CB_SETITEMHEIGHT = 339;
const int CB_SETLOCALE = 345;
const int CB_SETTOPINDEX = 348;
const int CB_SHOWDROPDOWN = 335;
const int CBN_CLOSEUP = 8;
const int CBN_DBLCLK = 2;
const int CBN_DROPDOWN = 7;
const int CBN_EDITCHANGE = 5;
const int CBN_EDITUPDATE = 6;
const int CBN_KILLFOCUS = 4;
const int CBN_SELCHANGE = 1;
const int CBN_SELENDCANCEL = 10;
const int CBN_SELENDOK = 9;
const int CBN_SETFOCUS = 3;
const int EM_CANUNDO = 198;
const int EM_CHARFROMPOS = 215;
const int EM_EMPTYUNDOBUFFER = 205;
const int EM_FMTLINES = 200;
const int EM_GETFIRSTVISIBLELINE = 206;
const int EM_GETHANDLE = 189;
const int EM_GETLIMITTEXT = 213;
const int EM_GETLINE = 196;
const int EM_GETLINECOUNT = 186;
const int EM_GETMARGINS = 212;
const int EM_GETMODIFY = 184;
const int EM_GETPASSWORDCHAR = 210;
const int EM_GETRECT = 178;
const int EM_GETSEL = 176;
const int EM_GETTHUMB = 190;
const int EM_GETWORDBREAKPROC = 209;
const int EM_LIMITTEXT = 197;
const int EM_LINEFROMCHAR = 201;
const int EM_LINEINDEX = 187;
const int EM_LINELENGTH = 193;
const int EM_LINESCROLL = 182;
const int EM_POSFROMCHAR = 214;
const int EM_REPLACESEL = 194;
const int EM_SCROLL = 181;
const int EM_SCROLLCARET = 183;
const int EM_SETHANDLE = 188;
const int EM_SETLIMITTEXT = 197;
const int EM_SETMARGINS = 211;
const int EM_SETMODIFY = 185;
const int EM_SETPASSWORDCHAR = 204;
const int EM_SETREADONLY = 207;
const int EM_SETRECT = 179;
const int EM_SETRECTNP = 180;
const int EM_SETSEL = 177;
const int EM_SETTABSTOPS = 203;
const int EM_SETWORDBREAKPROC = 208;
const int EM_UNDO = 199;
const int EN_CHANGE = 768;
const int EN_ERRSPACE = 1280;
const int EN_HSCROLL = 1537;
const int EN_KILLFOCUS = 512;
const int EN_MAXTEXT = 1281;
const int EN_SETFOCUS = 256;
const int EN_UPDATE = 1024;
const int EN_VSCROLL = 1538;
const int LB_ADDFILE = 406;
const int LB_ADDSTRING = 384;
const int LB_DELETESTRING = 386;
const int LB_DIR = 397;
const int LB_FINDSTRING = 399;
const int LB_FINDSTRINGEXACT = 418;
const int LB_GETANCHORINDEX = 413;
const int LB_GETCARETINDEX = 415;
const int LB_GETCOUNT = 395;
const int LB_GETCURSEL = 392;
const int LB_GETHORIZONTALEXTENT = 403;
const int LB_GETITEMDATA = 409;
const int LB_GETITEMHEIGHT = 417;
const int LB_GETITEMRECT = 408;
const int LB_GETLOCALE = 422;
const int LB_GETSEL = 391;
const int LB_GETSELCOUNT = 400;
const int LB_GETSELITEMS = 401;
const int LB_GETTEXT = 393;
const int LB_GETTEXTLEN = 394;
const int LB_GETTOPINDEX = 398;
const int LB_INITSTORAGE = 424;
const int LB_INSERTSTRING = 385;
const int LB_ITEMFROMPOINT = 425;
const int LB_RESETCONTENT = 388;
const int LB_SELECTSTRING = 396;
const int LB_SELITEMRANGE = 411;
const int LB_SELITEMRANGEEX = 387;
const int LB_SETANCHORINDEX = 412;
const int LB_SETCARETINDEX = 414;
const int LB_SETCOLUMNWIDTH = 405;
const int LB_SETCOUNT = 423;
const int LB_SETCURSEL = 390;
const int LB_SETHORIZONTALEXTENT = 404;
const int LB_SETITEMDATA = 410;
const int LB_SETITEMHEIGHT = 416;
const int LB_SETLOCALE = 421;
const int LB_SETSEL = 389;
const int LB_SETTABSTOPS = 402;
const int LB_SETTOPINDEX = 407;
const int LBN_DBLCLK = 2;
const int LBN_KILLFOCUS = 5;
const int LBN_SELCANCEL = 3;
const int LBN_SELCHANGE = 1;
const int LBN_SETFOCUS = 4;
const int SBM_ENABLE_ARROWS = 228;
const int SBM_GETPOS = 225;
const int SBM_GETRANGE = 227;
const int SBM_GETSCROLLINFO = 234;
const int SBM_SETPOS = 224;
const int SBM_SETRANGE = 226;
const int SBM_SETRANGEREDRAW = 230;
const int SBM_SETSCROLLINFO = 233;
const int STM_GETICON = 369;
const int STM_GETIMAGE = 371;
const int STM_SETICON = 368;
const int STM_SETIMAGE = 370;
const int STN_CLICKED = 0;
const int STN_DBLCLK = 1;
const int STN_DISABLE = 3;
const int STN_ENABLE = 2;
const int PSI_SETACTIVE = 1;
const int PSI_KILLACTIVE = 2;
const int PSI_APPLY = 3;
const int PSI_RESET = 4;
const int PSI_HASHELP = 5;
const int PSI_HELP = 6;
const int PSI_CHANGED = 1;
const int PSI_GUISTART = 2;
const int PSI_REBOOT = 3;
const int PSI_GETSIBLINGS = 4;
const int DCX_WINDOW = 1;
const int DCX_CACHE = 2;
const int DCX_PARENTCLIP = 32;
const int DCX_CLIPSIBLINGS = 16;
const int DCX_CLIPCHILDREN = 8;
const int DCX_NORESETATTRS = 4;
const int DCX_INTERSECTUPDATE = 0x200;
const int DCX_LOCKWINDOWUPDATE = 0x400;
const int DCX_EXCLUDERGN = 64;
const int DCX_INTERSECTRGN = 128;
const int DCX_VALIDATE = 0x200000;
const int GMDI_GOINTOPOPUPS = 2;
const int GMDI_USEDISABLED = 1;
const int FKF_AVAILABLE = 2;
const int FKF_CLICKON = 64;
const int FKF_FILTERKEYSON = 1;
const int FKF_HOTKEYACTIVE = 4;
const int FKF_HOTKEYSOUND = 16;
const int FKF_CONFIRMHOTKEY = 8;
const int FKF_INDICATOR = 32;
const int HCF_HIGHCONTRASTON = 1;
const int HCF_AVAILABLE = 2;
const int HCF_HOTKEYACTIVE = 4;
const int HCF_CONFIRMHOTKEY = 8;
const int HCF_HOTKEYSOUND = 16;
const int HCF_INDICATOR = 32;
const int HCF_HOTKEYAVAILABLE = 64;
const int MKF_AVAILABLE = 2;
const int MKF_CONFIRMHOTKEY = 8;
const int MKF_HOTKEYACTIVE = 4;
const int MKF_HOTKEYSOUND = 16;
const int MKF_INDICATOR = 32;
const int MKF_MOUSEKEYSON = 1;
const int MKF_MODIFIERS = 64;
const int MKF_REPLACENUMBERS = 128;
const int SERKF_ACTIVE = 8;
const int SERKF_AVAILABLE = 2;
const int SERKF_INDICATOR = 4;
const int SERKF_SERIALKEYSON = 1;
const int SSF_AVAILABLE = 2;
const int SSF_SOUNDSENTRYON = 1;
const int SSTF_BORDER = 2;
const int SSTF_CHARS = 1;
const int SSTF_DISPLAY = 3;
const int SSTF_NONE = 0;
const int SSGF_DISPLAY = 3;
const int SSGF_NONE = 0;
const int SSWF_CUSTOM = 4;
const int SSWF_DISPLAY = 3;
const int SSWF_NONE = 0;
const int SSWF_TITLE = 1;
const int SSWF_WINDOW = 2;
const int SKF_AUDIBLEFEEDBACK = 64;
const int SKF_AVAILABLE = 2;
const int SKF_CONFIRMHOTKEY = 8;
const int SKF_HOTKEYACTIVE = 4;
const int SKF_HOTKEYSOUND = 16;
const int SKF_INDICATOR = 32;
const int SKF_STICKYKEYSON = 1;
const int SKF_TRISTATE = 128;
const int SKF_TWOKEYSOFF = 256;
const int TKF_AVAILABLE = 2;
const int TKF_CONFIRMHOTKEY = 8;
const int TKF_HOTKEYACTIVE = 4;
const int TKF_HOTKEYSOUND = 16;
const int TKF_TOGGLEKEYSON = 1;
const int MDITILE_SKIPDISABLED = 2;
const int MDITILE_HORIZONTAL = 1;
const int MDITILE_VERTICAL = 0;
const int VK_LBUTTON = 1;
const int VK_RBUTTON = 2;
const int VK_CANCEL = 3;
const int VK_MBUTTON = 4;
const int VK_BACK = 8;
const int VK_TAB = 9;
const int VK_CLEAR = 12;
const int VK_RETURN = 13;
const int VK_SHIFT = 16;
const int VK_CONTROL = 17;
const int VK_MENU = 18;
const int VK_PAUSE = 19;
const int VK_CAPITAL = 20;
const int VK_KANA = 0x15;
const int VK_HANGEUL = 0x15;
const int VK_HANGUL = 0x15;
const int VK_JUNJA = 0x17;
const int VK_FINAL = 0x18;
const int VK_HANJA = 0x19;
const int VK_KANJI = 0x19;
const int VK_ESCAPE = 0x1B;
const int VK_CONVERT = 0x1C;
const int VK_NONCONVERT = 0x1D;
const double VK_ACCEPT = 0x1E;
const int VK_MODECHANGE = 0x1F;
const int VK_SPACE = 32;
const int VK_PRIOR = 33;
const int VK_NEXT = 34;
const int VK_END = 35;
const int VK_HOME = 36;
const int VK_LEFT = 37;
const int VK_UP = 38;
const int VK_RIGHT = 39;
const int VK_DOWN = 40;
const int VK_SELECT = 41;
const int VK_PRINT = 42;
const int VK_EXECUTE = 43;
const int VK_SNAPSHOT = 44;
const int VK_INSERT = 45;
const int VK_DELETE = 46;
const int VK_HELP = 47;
const int VK_LWIN = 0x5B;
const int VK_RWIN = 0x5C;
const int VK_APPS = 0x5D;
const int VK_SLEEP = 0x5F;
const int VK_NUMPAD0 = 0x60;
const int VK_NUMPAD1 = 0x61;
const int VK_NUMPAD2 = 0x62;
const int VK_NUMPAD3 = 0x63;
const int VK_NUMPAD4 = 0x64;
const int VK_NUMPAD5 = 0x65;
const int VK_NUMPAD6 = 0x66;
const int VK_NUMPAD7 = 0x67;
const int VK_NUMPAD8 = 0x68;
const int VK_NUMPAD9 = 0x69;
const int VK_MULTIPLY = 0x6A;
const int VK_ADD = 0x6B;
const int VK_SEPARATOR = 0x6C;
const int VK_SUBTRACT = 0x6D;
const double VK_DECIMAL = 0x6E;
const int VK_DIVIDE = 0x6F;
const int VK_F1 = 0x70;
const int VK_F2 = 0x71;
const int VK_F3 = 0x72;
const int VK_F4 = 0x73;
const int VK_F5 = 0x74;
const int VK_F6 = 0x75;
const int VK_F7 = 0x76;
const int VK_F8 = 0x77;
const int VK_F9 = 0x78;
const int VK_F10 = 0x79;
const int VK_F11 = 0x7A;
const int VK_F12 = 0x7B;
const int VK_F13 = 0x7C;
const int VK_F14 = 0x7D;
const double VK_F15 = 0x7E;
const int VK_F16 = 0x7F;
const int VK_F17 = 0x80;
const int VK_F18 = 0x81;
const int VK_F19 = 0x82;
const int VK_F20 = 0x83;
const int VK_F21 = 0x84;
const int VK_F22 = 0x85;
const int VK_F23 = 0x86;
const int VK_F24 = 0x87;
const int VK_NUMLOCK = 0x90;
const int VK_SCROLL = 0x91;
const int VK_LSHIFT = 0xA0;
const int VK_RSHIFT = 0xA1;
const int VK_LCONTROL = 0xA2;
const int VK_RCONTROL = 0xA3;
const int VK_LMENU = 0xA4;
const int VK_RMENU = 0xA5;
const int VK_OEM_1 = 0xBA;
const int VK_OEM_2 = 0xBF;
const int VK_OEM_3 = 0xC0;
const int VK_OEM_4 = 0xDB;
const int VK_OEM_5 = 0xDC;
const int VK_OEM_6 = 0xDD;
const double VK_OEM_7 = 0xDE;
const int VK_OEM_8 = 0xDF;
const double VK_PROCESSKEY = 0xE5;
const int VK_ATTN = 0xF6;
const int VK_CRSEL = 0xF7;
const int VK_EXSEL = 0xF8;
const int VK_EREOF = 0xF9;
const int VK_PLAY = 0xFA;
const int VK_ZOOM = 0xFB;
const int VK_NONAME = 0xFC;
const int VK_PA1 = 0xFD;
const double VK_OEM_CLEAR = 0xFE;
const int TME_HOVER = 1;
const int TME_LEAVE = 2;
const int TME_QUERY = 0x40000000;
const int TME_CANCEL = 0x80000000;
const int HOVER_DEFAULT = 0xFFFFFFFF;
const int MK_LBUTTON = 1;
const int MK_RBUTTON = 2;
const int MK_SHIFT = 4;
const int MK_CONTROL = 8;
const int MK_MBUTTON = 16;
const int TPM_CENTERALIGN = 4;
const int TPM_LEFTALIGN = 0;
const int TPM_RIGHTALIGN = 8;
const int TPM_LEFTBUTTON = 0;
const int TPM_RIGHTBUTTON = 2;
const int TPM_HORIZONTAL = 0;
const int TPM_VERTICAL = 64;
const int TPM_TOPALIGN = 0;
const int TPM_VCENTERALIGN = 16;
const int TPM_BOTTOMALIGN = 32;
const int TPM_NONOTIFY = 128;
const int TPM_RETURNCMD = 256;
const int HELP_COMMAND = 0x102;
const int HELP_CONTENTS = 3;
const int HELP_CONTEXT = 1;
const int HELP_CONTEXTPOPUP = 8;
const int HELP_FORCEFILE = 9;
const int HELP_HELPONHELP = 4;
const int HELP_INDEX = 3;
const int HELP_KEY = 0x101;
const int HELP_MULTIKEY = 0x201;
const int HELP_PARTIALKEY = 0x105;
const int HELP_QUIT = 2;
const int HELP_SETCONTENTS = 5;
const int HELP_SETINDEX = 5;
const int HELP_SETWINPOS = 0x203;
const int HELP_CONTEXTMENU = 0xa;
const int HELP_FINDER = 0xb;
const int HELP_WM_HELP = 0xc;
const int HELP_TCARD = 0x8000;
const int HELP_TCARD_DATA = 16;
const int HELP_TCARD_OTHER_CALLER = 0x11;
const int IDH_NO_HELP = 28440;
const int IDH_MISSING_CONTEXT = 28441;
const int IDH_GENERIC_HELP_BUTTON = 28442;
const int IDH_OK = 28443;
const int IDH_CANCEL = 28444;
const int IDH_HELP = 28445;
const int LB_CTLCODE = 0;
const int LB_OKAY = 0;
const int CB_OKAY = 0;
const int HIDE_WINDOW = 0;
const int SHOW_OPENWINDOW = 1;
const int SHOW_ICONWINDOW = 2;
const int SHOW_FULLSCREEN = 3;
const int SHOW_OPENNOACTIVATE = 4;
const int SW_PARENTCLOSING = 1;
const int SW_OTHERZOOM = 2;
const int SW_PARENTOPENING = 3;
const int SW_OTHERUNZOOM = 4;
const int KF_EXTENDED = 256;
const int KF_DLGMODE = 2048;
const int KF_MENUMODE = 4096;
const int KF_ALTDOWN = 8192;
const int KF_REPEAT = 16384;
const int KF_UP = 32768;
const int WSF_VISIBLE = 1;
const int PWR_OK = 1;
const int PWR_SUSPENDREQUEST = 1;
const int PWR_SUSPENDRESUME = 2;
const int PWR_CRITICALRESUME = 3;
const int NFR_ANSI = 1;
const int NFR_UNICODE = 2;
const int NF_QUERY = 3;
const int NF_REQUERY = 4;
const int MENULOOP_WINDOW = 0;
const int MENULOOP_POPUP = 1;
const int WMSZ_LEFT = 1;
const int WMSZ_RIGHT = 2;
const int WMSZ_TOP = 3;
const int WMSZ_TOPLEFT = 4;
const int WMSZ_TOPRIGHT = 5;
const int WMSZ_BOTTOM = 6;
const int WMSZ_BOTTOMLEFT = 7;
const int WMSZ_BOTTOMRIGHT = 8;
const int HTNOWHERE = 0;
const int HTCLIENT = 1;
const int HTCAPTION = 2;
const int HTSYSMENU = 3;
const int HTGROWBOX = 4;
const int HTSIZE = 4;
const int HTMENU = 5;
const int HTHSCROLL = 6;
const int HTVSCROLL = 7;
const int HTMINBUTTON = 8;
const int HTMAXBUTTON = 9;
const int HTREDUCE = 8;
const int HTZOOM = 9;
const int HTLEFT = 10;
const int HTSIZEFIRST = 10;
const int HTRIGHT = 11;
const int HTTOP = 12;
const int HTTOPLEFT = 13;
const int HTTOPRIGHT = 14;
const int HTBOTTOM = 15;
const int HTBOTTOMLEFT = 16;
const int HTBOTTOMRIGHT = 17;
const int HTSIZELAST = 17;
const int HTBORDER = 18;
const int HTOBJECT = 19;
const int HTCLOSE = 20;
const int HTHELP = 21;
const int MA_ACTIVATE = 1;
const int MA_ACTIVATEANDEAT = 2;
const int MA_NOACTIVATE = 3;
const int MA_NOACTIVATEANDEAT = 4;
const int SIZE_RESTORED = 0;
const int SIZE_MINIMIZED = 1;
const int SIZE_MAXIMIZED = 2;
const int SIZE_MAXSHOW = 3;
const int SIZE_MAXHIDE = 4;
const int SIZENORMAL = 0;
const int SIZEICONIC = 1;
const int SIZEFULLSCREEN = 2;
const int SIZEZOOMSHOW = 3;
const int SIZEZOOMHIDE = 4;
const int WVR_ALIGNTOP = 16;
const int WVR_ALIGNLEFT = 32;
const int WVR_ALIGNBOTTOM = 64;
const int WVR_ALIGNRIGHT = 128;
const int WVR_HREDRAW = 256;
const int WVR_VREDRAW = 512;
const int WVR_VALIDRECTS = 1024;
const int PRF_CHECKVISIBLE = 1;
const int PRF_NONCLIENT = 2;
const int PRF_CLIENT = 4;
const int PRF_ERASEBKGND = 8;
const int PRF_CHILDREN = 16;
const int PRF_OWNED = 32;
const int IDANI_OPEN = 1;
const int IDANI_CLOSE = 2;
const int IDANI_CAPTION = 3;
const int WPF_RESTORETOMAXIMIZED = 2;
const int WPF_SETMINPOSITION = 1;
const int ODT_MENU = 1;
const int ODT_LISTBOX = 2;
const int ODT_COMBOBOX = 3;
const int ODT_BUTTON = 4;
const int ODT_STATIC = 5;
const int ODA_DRAWENTIRE = 1;
const int ODA_SELECT = 2;
const int ODA_FOCUS = 4;
const int ODS_SELECTED = 1;
const int ODS_GRAYED = 2;
const int ODS_DISABLED = 4;
const int ODS_CHECKED = 8;
const int ODS_FOCUS = 16;
const int ODS_DEFAULT = 32;
const int ODS_COMBOBOXEDIT = 4096;
const int DBWF_LPARAMPOINTER = 0x8000;
const int DLGWINDOWEXTRA = 30;
const int MNC_IGNORE = 0;
const int MNC_CLOSE = 1;
const int MNC_EXECUTE = 2;
const int MNC_SELECT = 3;
const int DOF_EXECUTABLE = 0x8001;
const int DOF_DOCUMENT = 0x8002;
const int DOF_DIRECTORY = 0x8003;
const int DOF_MULTIPLE = 0x8004;
const int DOF_PROGMAN = 1;
const int DOF_SHELLDATA = 2;
const int DO_DROPFILE = 0x454C4946;
const double DO_PRINTFILE = 0x544E5250;
const int SW_SCROLLCHILDREN = 1;
const int SW_INVALIDATE = 2;
const int SW_ERASE = 4;
const int SC_SIZE = 0xF000;
const int SC_MOVE = 0xF010;
const int SC_MINIMIZE = 0xF020;
const int SC_ICON = 0xf020;
const int SC_MAXIMIZE = 0xF030;
const int SC_ZOOM = 0xF030;
const int SC_NEXTWINDOW = 0xF040;
const int SC_PREVWINDOW = 0xF050;
const int SC_CLOSE = 0xF060;
const int SC_VSCROLL = 0xF070;
const int SC_HSCROLL = 0xF080;
const int SC_MOUSEMENU = 0xF090;
const int SC_KEYMENU = 0xF100;
const int SC_ARRANGE = 0xF110;
const int SC_RESTORE = 0xF120;
const int SC_TASKLIST = 0xF130;
const int SC_SCREENSAVE = 0xF140;
const int SC_HOTKEY = 0xF150;
const int SC_DEFAULT = 0xF160;
const int SC_MONITORPOWER = 0xF170;
const int SC_CONTEXTHELP = 0xF180;
const int SC_SEPARATOR = 0xF00F;
const int EC_LEFTMARGIN = 1;
const int EC_RIGHTMARGIN = 2;
const int EC_USEFONTINFO = 0xffff;
const int DC_HASDEFID = 0x534B;
const int DLGC_WANTARROWS = 1;
const int DLGC_WANTTAB = 2;
const int DLGC_WANTALLKEYS = 4;
const int DLGC_WANTMESSAGE = 4;
const int DLGC_HASSETSEL = 8;
const int DLGC_DEFPUSHBUTTON = 16;
const int DLGC_UNDEFPUSHBUTTON = 32;
const int DLGC_RADIOBUTTON = 64;
const int DLGC_WANTCHARS = 128;
const int DLGC_STATIC = 256;
const int DLGC_BUTTON = 0x2000;
const int WA_INACTIVE = 0;
const int WA_ACTIVE = 1;
const int WA_CLICKACTIVE = 2;
const int ICON_SMALL = 0;
const int ICON_BIG = 1;
const int MOD_ALT = 1;
const int MOD_CONTROL = 2;
const int MOD_SHIFT = 4;
const int MOD_WIN = 8;
const int MOD_IGNORE_ALL_MODIFIER = 1024;
const int MOD_ON_KEYUP = 2048;
const int MOD_RIGHT = 16384;
const int MOD_LEFT = 32768;
const int LLKHF_INJECTED = 0x00000010;
const int CURSOR_SHOWING = 0x00000001;
const int WS_ACTIVECAPTION = 0x00000001;
const int ENDSESSION_LOGOFF = 0x80000000;
const int GA_PARENT = 1;
const int GA_ROOT = 2;
const int GA_ROOTOWNER = 3;
const int CCHILDREN_SCROLLBAR = 5;
const int CCHILDREN_TITLEBAR = 5;
const int MAX_LEADBYTES = 12;
const int MAX_DEFAULTCHAR = 2;
const int LOCALE_NOUSEROVERRIDE = 0x80000000;
const int LOCALE_USE_CP_ACP = 0x40000000;
const int LOCALE_RETURN_NUMBER = 0x20000000;
const int LOCALE_ILANGUAGE = 1;
const int LOCALE_SLANGUAGE = 2;
const int LOCALE_SENGLANGUAGE = 0x1001;
const int LOCALE_SABBREVLANGNAME = 3;
const int LOCALE_SNATIVELANGNAME = 4;
const int LOCALE_ICOUNTRY = 5;
const int LOCALE_SCOUNTRY = 6;
const int LOCALE_SENGCOUNTRY = 0x1002;
const int LOCALE_SABBREVCTRYNAME = 7;
const int LOCALE_SNATIVECTRYNAME = 8;
const int LOCALE_IDEFAULTLANGUAGE = 9;
const int LOCALE_IDEFAULTCOUNTRY = 10;
const int LOCALE_IDEFAULTCODEPAGE = 11;
const int LOCALE_IDEFAULTANSICODEPAGE = 0x1004;
const int LOCALE_SLIST = 12;
const int LOCALE_IMEASURE = 13;
const int LOCALE_SDECIMAL = 14;
const int LOCALE_STHOUSAND = 15;
const int LOCALE_SGROUPING = 16;
const int LOCALE_IDIGITS = 17;
const int LOCALE_ILZERO = 18;
const int LOCALE_INEGNUMBER = 0x1010;
const int LOCALE_SNATIVEDIGITS = 19;
const int LOCALE_SCURRENCY = 20;
const int LOCALE_SINTLSYMBOL = 21;
const int LOCALE_SMONDECIMALSEP = 22;
const int LOCALE_SMONTHOUSANDSEP = 23;
const int LOCALE_SMONGROUPING = 24;
const int LOCALE_ICURRDIGITS = 25;
const int LOCALE_IINTLCURRDIGITS = 26;
const int LOCALE_ICURRENCY = 27;
const int LOCALE_INEGCURR = 28;
const int LOCALE_SDATE = 29;
const int LOCALE_STIME = 30;
const int LOCALE_SSHORTDATE = 31;
const int LOCALE_SLONGDATE = 32;
const int LOCALE_STIMEFORMAT = 0x1003;
const int LOCALE_IDATE = 33;
const int LOCALE_ILDATE = 34;
const int LOCALE_ITIME = 35;
const int LOCALE_ITIMEMARKPOSN = 0x1005;
const int LOCALE_ICENTURY = 36;
const int LOCALE_ITLZERO = 37;
const int LOCALE_IDAYLZERO = 38;
const int LOCALE_IMONLZERO = 39;
const int LOCALE_S1159 = 40;
const int LOCALE_S2359 = 41;
const int LOCALE_ICALENDARTYPE = 0x1009;
const int LOCALE_IOPTIONALCALENDAR = 0x100B;
const int LOCALE_IFIRSTDAYOFWEEK = 0x100C;
const int LOCALE_IFIRSTWEEKOFYEAR = 0x100D;
const int LOCALE_SDAYNAME1 = 42;
const int LOCALE_SDAYNAME2 = 43;
const int LOCALE_SDAYNAME3 = 44;
const int LOCALE_SDAYNAME4 = 45;
const int LOCALE_SDAYNAME5 = 46;
const int LOCALE_SDAYNAME6 = 47;
const int LOCALE_SDAYNAME7 = 48;
const int LOCALE_SABBREVDAYNAME1 = 49;
const int LOCALE_SABBREVDAYNAME2 = 50;
const int LOCALE_SABBREVDAYNAME3 = 51;
const int LOCALE_SABBREVDAYNAME4 = 52;
const int LOCALE_SABBREVDAYNAME5 = 53;
const int LOCALE_SABBREVDAYNAME6 = 54;
const int LOCALE_SABBREVDAYNAME7 = 55;
const int LOCALE_SMONTHNAME1 = 56;
const int LOCALE_SMONTHNAME2 = 57;
const int LOCALE_SMONTHNAME3 = 58;
const int LOCALE_SMONTHNAME4 = 59;
const int LOCALE_SMONTHNAME5 = 60;
const int LOCALE_SMONTHNAME6 = 61;
const int LOCALE_SMONTHNAME7 = 62;
const int LOCALE_SMONTHNAME8 = 63;
const int LOCALE_SMONTHNAME9 = 64;
const int LOCALE_SMONTHNAME10 = 65;
const int LOCALE_SMONTHNAME11 = 66;
const int LOCALE_SMONTHNAME12 = 67;
const double LOCALE_SMONTHNAME13 = 0x100E;
const int LOCALE_SABBREVMONTHNAME1 = 68;
const int LOCALE_SABBREVMONTHNAME2 = 69;
const int LOCALE_SABBREVMONTHNAME3 = 70;
const int LOCALE_SABBREVMONTHNAME4 = 71;
const int LOCALE_SABBREVMONTHNAME5 = 72;
const int LOCALE_SABBREVMONTHNAME6 = 73;
const int LOCALE_SABBREVMONTHNAME7 = 74;
const int LOCALE_SABBREVMONTHNAME8 = 75;
const int LOCALE_SABBREVMONTHNAME9 = 76;
const int LOCALE_SABBREVMONTHNAME10 = 77;
const int LOCALE_SABBREVMONTHNAME11 = 78;
const int LOCALE_SABBREVMONTHNAME12 = 79;
const int LOCALE_SABBREVMONTHNAME13 = 0x100F;
const int LOCALE_SPOSITIVESIGN = 80;
const int LOCALE_SNEGATIVESIGN = 81;
const int LOCALE_IPOSSIGNPOSN = 82;
const int LOCALE_INEGSIGNPOSN = 83;
const int LOCALE_IPOSSYMPRECEDES = 84;
const int LOCALE_IPOSSEPBYSPACE = 85;
const int LOCALE_INEGSYMPRECEDES = 86;
const int LOCALE_INEGSEPBYSPACE = 87;
const int LOCALE_FONTSIGNATURE = 88;
const int LOCALE_SISO639LANGNAME = 89;
const int LOCALE_SISO3166CTRYNAME = 90;
const int LOCALE_SYSTEM_DEFAULT = 0x800;
const int LOCALE_USER_DEFAULT = 0x400;
const int NORM_IGNORECASE = 1;
const int NORM_IGNOREKANATYPE = 65536;
const int NORM_IGNORENONSPACE = 2;
const int NORM_IGNORESYMBOLS = 4;
const int NORM_IGNOREWIDTH = 131072;
const int SORT_STRINGSORT = 4096;
const int LCMAP_LOWERCASE = 0x00000100;
const int LCMAP_UPPERCASE = 0x00000200;
const int LCMAP_SORTKEY = 0x00000400;
const int LCMAP_BYTEREV = 0x00000800;
const int LCMAP_HIRAGANA = 0x00100000;
const int LCMAP_KATAKANA = 0x00200000;
const int LCMAP_HALFWIDTH = 0x00400000;
const int LCMAP_FULLWIDTH = 0x00800000;
const int LCMAP_LINGUISTIC_CASING = 0x01000000;
const int LCMAP_SIMPLIFIED_CHINESE = 0x02000000;
const int LCMAP_TRADITIONAL_CHINESE = 0x04000000;
const int DATE_SHORTDATE = 1;
const int DATE_LONGDATE = 2;
const int DATE_USE_ALT_CALENDAR = 4;
const int CP_INSTALLED = 1;
const int CP_SUPPORTED = 2;
const int LCID_INSTALLED = 1;
const int LCID_SUPPORTED = 2;
const int LCID_ALTERNATE_SORTS = 4;
const int MAP_FOLDCZONE = 16;
const int MAP_FOLDDIGITS = 128;
const int MAP_PRECOMPOSED = 32;
const int MAP_COMPOSITE = 64;
const int CP_ACP = 0;
const int CP_OEMCP = 1;
const int CP_MACCP = 2;
const int CP_THREAD_ACP = 3;
const int CP_SYMBOL = 42;
const int CP_UTF7 = 65000;
const int CP_UTF8 = 65001;
const int CT_CTYPE1 = 1;
const int CT_CTYPE2 = 2;
const int CT_CTYPE3 = 4;
const int C1_UPPER = 1;
const int C1_LOWER = 2;
const int C1_DIGIT = 4;
const int C1_SPACE = 8;
const int C1_PUNCT = 16;
const int C1_CNTRL = 32;
const int C1_BLANK = 64;
const int C1_XDIGIT = 128;
const int C1_ALPHA = 256;
const int C2_LEFTTORIGHT = 1;
const int C2_RIGHTTOLEFT = 2;
const int C2_EUROPENUMBER = 3;
const int C2_EUROPESEPARATOR = 4;
const int C2_EUROPETERMINATOR = 5;
const int C2_ARABICNUMBER = 6;
const int C2_COMMONSEPARATOR = 7;
const int C2_BLOCKSEPARATOR = 8;
const int C2_SEGMENTSEPARATOR = 9;
const int C2_WHITESPACE = 10;
const int C2_OTHERNEUTRAL = 11;
const int C2_NOTAPPLICABLE = 0;
const int C3_NONSPACING = 1;
const int C3_DIACRITIC = 2;
const int C3_VOWELMARK = 4;
const int C3_SYMBOL = 8;
const int C3_KATAKANA = 16;
const int C3_HIRAGANA = 32;
const int C3_HALFWIDTH = 64;
const int C3_FULLWIDTH = 128;
const int C3_IDEOGRAPH = 256;
const int C3_KASHIDA = 512;
const int C3_LEXICAL = 1024;
const int C3_ALPHA = 32768;
const int C3_NOTAPPLICABLE = 0;
const int TIME_NOMINUTESORSECONDS = 1;
const int TIME_NOSECONDS = 2;
const int TIME_NOTIMEMARKER = 4;
const int TIME_FORCE24HOURFORMAT = 8;
const int MB_PRECOMPOSED = 1;
const int MB_COMPOSITE = 2;
const int MB_ERR_INVALID_CHARS = 8;
const int MB_USEGLYPHCHARS = 4;
const int WC_COMPOSITECHECK = 512;
const int WC_DISCARDNS = 16;
const int WC_SEPCHARS = 32;
const int WC_DEFAULTCHAR = 64;
const int CTRY_DEFAULT = 0;
const int CTRY_ALBANIA = 355;
const int CTRY_ALGERIA = 213;
const int CTRY_ARGENTINA = 54;
const int CTRY_ARMENIA = 374;
const int CTRY_AUSTRALIA = 61;
const int CTRY_AUSTRIA = 43;
const int CTRY_AZERBAIJAN = 994;
const int CTRY_BAHRAIN = 973;
const int CTRY_BELARUS = 375;
const int CTRY_BELGIUM = 32;
const int CTRY_BELIZE = 501;
const int CTRY_BOLIVIA = 591;
const int CTRY_BRAZIL = 55;
const int CTRY_BRUNEI_DARUSSALAM = 673;
const int CTRY_BULGARIA = 359;
const int CTRY_CANADA = 2;
const int CTRY_CARIBBEAN = 1;
const int CTRY_CHILE = 56;
const int CTRY_COLOMBIA = 57;
const int CTRY_COSTA_RICA = 506;
const int CTRY_CROATIA = 385;
const int CTRY_CZECH = 420;
const int CTRY_DENMARK = 45;
const int CTRY_DOMINICAN_REPUBLIC = 1;
const int CTRY_ECUADOR = 593;
const int CTRY_EGYPT = 20;
const int CTRY_EL_SALVADOR = 503;
const int CTRY_ESTONIA = 372;
const int CTRY_FAEROE_ISLANDS = 298;
const int CTRY_FINLAND = 358;
const int CTRY_FRANCE = 33;
const int CTRY_GEORGIA = 995;
const int CTRY_GERMANY = 49;
const int CTRY_GREECE = 30;
const int CTRY_GUATEMALA = 502;
const int CTRY_HONDURAS = 504;
const int CTRY_HONG_KONG = 852;
const int CTRY_HUNGARY = 36;
const int CTRY_ICELAND = 354;
const int CTRY_INDIA = 91;
const int CTRY_INDONESIA = 62;
const int CTRY_IRAN = 981;
const int CTRY_IRAQ = 964;
const int CTRY_IRELAND = 353;
const int CTRY_ISRAEL = 972;
const int CTRY_ITALY = 39;
const int CTRY_JAMAICA = 1;
const int CTRY_JAPAN = 81;
const int CTRY_JORDAN = 962;
const int CTRY_KAZAKSTAN = 7;
const int CTRY_KENYA = 254;
const int CTRY_KUWAIT = 965;
const int CTRY_KYRGYZSTAN = 996;
const int CTRY_LATVIA = 371;
const int CTRY_LEBANON = 961;
const int CTRY_LIBYA = 218;
const int CTRY_LIECHTENSTEIN = 41;
const int CTRY_LITHUANIA = 370;
const int CTRY_LUXEMBOURG = 352;
const int CTRY_MACAU = 853;
const int CTRY_MACEDONIA = 389;
const int CTRY_MALAYSIA = 60;
const int CTRY_MALDIVES = 960;
const int CTRY_MEXICO = 52;
const int CTRY_MONACO = 33;
const int CTRY_MONGOLIA = 976;
const int CTRY_MOROCCO = 212;
const int CTRY_NETHERLANDS = 31;
const int CTRY_NEW_ZEALAND = 64;
const int CTRY_NICARAGUA = 505;
const int CTRY_NORWAY = 47;
const int CTRY_OMAN = 968;
const int CTRY_PAKISTAN = 92;
const int CTRY_PANAMA = 507;
const int CTRY_PARAGUAY = 595;
const int CTRY_PERU = 51;
const int CTRY_PHILIPPINES = 63;
const int CTRY_POLAND = 48;
const int CTRY_PORTUGAL = 351;
const int CTRY_PRCHINA = 86;
const int CTRY_PUERTO_RICO = 1;
const int CTRY_QATAR = 974;
const int CTRY_ROMANIA = 40;
const int CTRY_RUSSIA = 7;
const int CTRY_SAUDI_ARABIA = 966;
const int CTRY_SERBIA = 381;
const int CTRY_SINGAPORE = 65;
const int CTRY_SLOVAK = 421;
const int CTRY_SLOVENIA = 386;
const int CTRY_SOUTH_AFRICA = 27;
const int CTRY_SOUTH_KOREA = 82;
const int CTRY_SPAIN = 34;
const int CTRY_SWEDEN = 46;
const int CTRY_SWITZERLAND = 41;
const int CTRY_SYRIA = 963;
const int CTRY_TAIWAN = 886;
const int CTRY_TATARSTAN = 7;
const int CTRY_THAILAND = 66;
const int CTRY_TRINIDAD_Y_TOBAGO = 1;
const int CTRY_TUNISIA = 216;
const int CTRY_TURKEY = 90;
const int CTRY_UAE = 971;
const int CTRY_UKRAINE = 380;
const int CTRY_UNITED_KINGDOM = 44;
const int CTRY_UNITED_STATES = 1;
const int CTRY_URUGUAY = 598;
const int CTRY_UZBEKISTAN = 7;
const int CTRY_VENEZUELA = 58;
const int CTRY_VIET_NAM = 84;
const int CTRY_YEMEN = 967;
const int CTRY_ZIMBABWE = 263;
const int CAL_ICALINTVALUE = 1;
const int CAL_SCALNAME = 2;
const int CAL_IYEAROFFSETRANGE = 3;
const int CAL_SERASTRING = 4;
const int CAL_SSHORTDATE = 5;
const int CAL_SLONGDATE = 6;
const int CAL_SDAYNAME1 = 7;
const int CAL_SDAYNAME2 = 8;
const int CAL_SDAYNAME3 = 9;
const int CAL_SDAYNAME4 = 10;
const int CAL_SDAYNAME5 = 11;
const int CAL_SDAYNAME6 = 12;
const int CAL_SDAYNAME7 = 13;
const int CAL_SABBREVDAYNAME1 = 14;
const int CAL_SABBREVDAYNAME2 = 15;
const int CAL_SABBREVDAYNAME3 = 16;
const int CAL_SABBREVDAYNAME4 = 17;
const int CAL_SABBREVDAYNAME5 = 18;
const int CAL_SABBREVDAYNAME6 = 19;
const int CAL_SABBREVDAYNAME7 = 20;
const int CAL_SMONTHNAME1 = 21;
const int CAL_SMONTHNAME2 = 22;
const int CAL_SMONTHNAME3 = 23;
const int CAL_SMONTHNAME4 = 24;
const int CAL_SMONTHNAME5 = 25;
const int CAL_SMONTHNAME6 = 26;
const int CAL_SMONTHNAME7 = 27;
const int CAL_SMONTHNAME8 = 28;
const int CAL_SMONTHNAME9 = 29;
const int CAL_SMONTHNAME10 = 30;
const int CAL_SMONTHNAME11 = 31;
const int CAL_SMONTHNAME12 = 32;
const int CAL_SMONTHNAME13 = 33;
const int CAL_SABBREVMONTHNAME1 = 34;
const int CAL_SABBREVMONTHNAME2 = 35;
const int CAL_SABBREVMONTHNAME3 = 36;
const int CAL_SABBREVMONTHNAME4 = 37;
const int CAL_SABBREVMONTHNAME5 = 38;
const int CAL_SABBREVMONTHNAME6 = 39;
const int CAL_SABBREVMONTHNAME7 = 40;
const int CAL_SABBREVMONTHNAME8 = 41;
const int CAL_SABBREVMONTHNAME9 = 42;
const int CAL_SABBREVMONTHNAME10 = 43;
const int CAL_SABBREVMONTHNAME11 = 44;
const int CAL_SABBREVMONTHNAME12 = 45;
const int CAL_SABBREVMONTHNAME13 = 46;
const int CAL_GREGORIAN = 1;
const int CAL_GREGORIAN_US = 2;
const int CAL_JAPAN = 3;
const int CAL_TAIWAN = 4;
const int CAL_KOREA = 5;
const int CAL_HIJRI = 6;
const int CAL_THAI = 7;
const int CAL_HEBREW = 8;
const int CAL_GREGORIAN_ME_FRENCH = 9;
const int CAL_GREGORIAN_ARABIC = 10;
const int CAL_GREGORIAN_XLIT_ENGLISH = 11;
const int CAL_GREGORIAN_XLIT_FRENCH = 12;
const int CSTR_LESS_THAN = 1;
const int CSTR_EQUAL = 2;
const int CSTR_GREATER_THAN = 3;
const int LGRPID_INSTALLED = 1;
const int LGRPID_SUPPORTED = 2;
const int LGRPID_WESTERN_EUROPE = 1;
const int LGRPID_CENTRAL_EUROPE = 2;
const int LGRPID_BALTIC = 3;
const int LGRPID_GREEK = 4;
const int LGRPID_CYRILLIC = 5;
const int LGRPID_TURKISH = 6;
const int LGRPID_JAPANESE = 7;
const int LGRPID_KOREAN = 8;
const int LGRPID_TRADITIONAL_CHINESE = 9;
const int LGRPID_SIMPLIFIED_CHINESE = 10;
const int LGRPID_THAI = 11;
const int LGRPID_HEBREW = 12;
const int LGRPID_ARABIC = 13;
const int LGRPID_VIETNAMESE = 14;
const int LGRPID_INDIC = 15;
const int LGRPID_GEORGIAN = 16;
const int LGRPID_ARMENIAN = 17;
const int VS_VERSION_INFO = 1;
const int VS_USER_DEFINED = 100;
const double VS_FFI_SIGNATURE = 0xFEEF04BD;
const int VS_FFI_STRUCVERSION = 0x10000;
const int VS_FFI_FILEFLAGSMASK = 0x3F;
const int VS_FF_DEBUG = 1;
const int VS_FF_PRERELEASE = 2;
const int VS_FF_PATCHED = 4;
const int VS_FF_PRIVATEBUILD = 8;
const int VS_FF_INFOINFERRED = 16;
const int VS_FF_SPECIALBUILD = 32;
const int VOS_UNKNOWN = 0;
const int VOS_DOS = 0x10000;
const int VOS_OS216 = 0x20000;
const int VOS_OS232 = 0x30000;
const int VOS_NT = 0x40000;
const int VOS__BASE = 0;
const int VOS__WINDOWS16 = 1;
const int VOS__PM16 = 2;
const int VOS__PM32 = 3;
const int VOS__WINDOWS32 = 4;
const int VOS_DOS_WINDOWS16 = 0x10001;
const int VOS_DOS_WINDOWS32 = 0x10004;
const int VOS_OS216_PM16 = 0x20002;
const int VOS_OS232_PM32 = 0x30003;
const int VOS_NT_WINDOWS32 = 0x40004;
const int VFT_UNKNOWN = 0;
const int VFT_APP = 1;
const int VFT_DLL = 2;
const int VFT_DRV = 3;
const int VFT_FONT = 4;
const int VFT_VXD = 5;
const int VFT_STATIC_LIB = 7;
const int VFT2_UNKNOWN = 0;
const int VFT2_DRV_PRINTER = 1;
const int VFT2_DRV_KEYBOARD = 2;
const int VFT2_DRV_LANGUAGE = 3;
const int VFT2_DRV_DISPLAY = 4;
const int VFT2_DRV_MOUSE = 5;
const int VFT2_DRV_NETWORK = 6;
const int VFT2_DRV_SYSTEM = 7;
const int VFT2_DRV_INSTALLABLE = 8;
const int VFT2_DRV_SOUND = 9;
const int VFT2_DRV_COMM = 10;
const int VFT2_DRV_INPUTMETHOD = 11;
const int VFT2_FONT_RASTER = 1;
const int VFT2_FONT_VECTOR = 2;
const int VFT2_FONT_TRUETYPE = 3;
const int VFFF_ISSHAREDFILE = 1;
const int VFF_CURNEDEST = 1;
const int VFF_FILEINUSE = 2;
const int VFF_BUFFTOOSMALL = 4;
const int VIFF_FORCEINSTALL = 1;
const int VIFF_DONTDELETEOLD = 2;
const int VIF_TEMPFILE = 1;
const int VIF_MISMATCH = 2;
const int VIF_SRCOLD = 4;
const int VIF_DIFFLANG = 8;
const int VIF_DIFFCODEPG = 16;
const int VIF_DIFFTYPE = 32;
const int VIF_WRITEPROT = 64;
const int VIF_FILEINUSE = 128;
const int VIF_OUTOFSPACE = 256;
const int VIF_ACCESSVIOLATION = 512;
const int VIF_SHARINGVIOLATION = 1024;
const int VIF_CANNOTCREATE = 2048;
const int VIF_CANNOTDELETE = 4096;
const int VIF_CANNOTRENAME = 8192;
const int VIF_CANNOTDELETECUR = 16384;
const int VIF_OUTOFMEMORY = 32768;
const int VIF_CANNOTREADSRC = 65536;
const int VIF_CANNOTREADDST = 0x20000;
const int VIF_BUFFTOOSMALL = 0x40000;
const int WNNC_NET_MSNET = 0x00010000;
const int WNNC_NET_LANMAN = 0x00020000;
const int WNNC_NET_NETWARE = 0x00030000;
const int WNNC_NET_VINES = 0x00040000;
const int WNNC_NET_10NET = 0x00050000;
const int WNNC_NET_LOCUS = 0x00060000;
const int WNNC_NET_SUN_PC_NFS = 0x00070000;
const int WNNC_NET_LANSTEP = 0x00080000;
const int WNNC_NET_9TILES = 0x00090000;
const int WNNC_NET_LANTASTIC = 0x000A0000;
const int WNNC_NET_AS400 = 0x000B0000;
const int WNNC_NET_FTP_NFS = 0x000C0000;
const int WNNC_NET_PATHWORKS = 0x000D0000;
const double WNNC_NET_LIFENET = 0x000E0000;
const int WNNC_NET_POWERLAN = 0x000F0000;
const int WNNC_NET_BWNFS = 0x00100000;
const int WNNC_NET_COGENT = 0x00110000;
const int WNNC_NET_FARALLON = 0x00120000;
const int WNNC_NET_APPLETALK = 0x00130000;
const int WNNC_NET_INTERGRAPH = 0x00140000;
const int WNNC_NET_SYMFONET = 0x00150000;
const int WNNC_NET_CLEARCASE = 0x00160000;
const int WNNC_NET_FRONTIER = 0x00170000;
const int WNNC_NET_BMC = 0x00180000;
const int WNNC_NET_DCE = 0x00190000;
const int WNNC_NET_AVID = 0x001A0000;
const int WNNC_NET_DOCUSPACE = 0x001B0000;
const int WNNC_NET_MANGOSOFT = 0x001C0000;
const int WNNC_NET_SERNET = 0x001D0000;
const int WNNC_NET_DECORB = 0x00200000;
const int WNNC_NET_PROTSTOR = 0x00210000;
const int WNNC_NET_FJ_REDIR = 0x00220000;
const int WNNC_NET_DISTINCT = 0x00230000;
const int WNNC_NET_TWINS = 0x00240000;
const int WNNC_NET_RDR2SAMPLE = 0x00250000;
const int WNNC_NET_CSC = 0x00260000;
const int WNNC_NET_3IN1 = 0x00270000;
const int WNNC_NET_EXTENDNET = 0x00290000;
const int WNNC_NET_OBJECT_DIRE = 0x00300000;
const int WNNC_NET_MASFAX = 0x00310000;
const int WNNC_NET_HOB_NFS = 0x00320000;
const int WNNC_NET_SHIVA = 0x00330000;
const int WNNC_NET_IBMAL = 0x00340000;
const int WNNC_CRED_MANAGER = 0xFFFF0000;
const int RESOURCE_CONNECTED = 1;
const int RESOURCE_GLOBALNET = 2;
const int RESOURCE_REMEMBERED = 3;
const int RESOURCE_RECENT = 4;
const int RESOURCE_CONTEXT = 5;
const int RESOURCETYPE_ANY = 0;
const int RESOURCETYPE_DISK = 1;
const int RESOURCETYPE_PRINT = 2;
const int RESOURCETYPE_RESERVED = 8;
const int RESOURCETYPE_UNKNOWN = 0xFFFFFFFF;
const int RESOURCEUSAGE_CONNECTABLE = 0x00000001;
const int RESOURCEUSAGE_CONTAINER = 0x00000002;
const int RESOURCEUSAGE_NOLOCALDEVICE = 0x00000004;
const int RESOURCEUSAGE_SIBLING = 0x00000008;
const int RESOURCEUSAGE_ATTACHED = 0x00000010;
const int RESOURCEUSAGE_RESERVED = 0x80000000;
const int RESOURCEDISPLAYTYPE_GENERIC = 0;
const int RESOURCEDISPLAYTYPE_DOMAIN = 1;
const int RESOURCEDISPLAYTYPE_SERVER = 2;
const int RESOURCEDISPLAYTYPE_SHARE = 3;
const int RESOURCEDISPLAYTYPE_FILE = 4;
const int RESOURCEDISPLAYTYPE_GROUP = 5;
const int RESOURCEDISPLAYTYPE_NETWORK = 6;
const int RESOURCEDISPLAYTYPE_ROOT = 7;
const int RESOURCEDISPLAYTYPE_SHAREADMIN = 8;
const int RESOURCEDISPLAYTYPE_DIRECTORY = 9;
const int RESOURCEDISPLAYTYPE_TREE = 10;
const int NETPROPERTY_PERSISTENT = 1;
const int CONNECT_UPDATE_PROFILE = 1;
const int CONNECT_UPDATE_RECENT = 2;
const int CONNECT_TEMPORARY = 4;
const int CONNECT_INTERACTIVE = 8;
const int CONNECT_PROMPT = 16;
const int CONNECT_NEED_DRIVE = 32;
const int CONNECT_REFCOUNT = 64;
const int CONNECT_REDIRECT = 128;
const int CONNECT_LOCALDRIVE = 256;
const int CONNECT_CURRENT_MEDIA = 512;
const int CONNDLG_RO_PATH = 1;
const int CONNDLG_CONN_POINT = 2;
const int CONNDLG_USE_MRU = 4;
const int CONNDLG_HIDE_BOX = 8;
const int CONNDLG_PERSIST = 16;
const int CONNDLG_NOT_PERSIST = 32;
const int DISC_UPDATE_PROFILE = 1;
const int DISC_NO_FORCE = 64;
const int WNFMT_MULTILINE = 1;
const int WNFMT_ABBREVIATED = 2;
const int WNFMT_INENUM = 16;
const int WNFMT_CONNECTION = 32;
const int UNIVERSAL_NAME_INFO_LEVEL = 1;
const int REMOTE_NAME_INFO_LEVEL = 2;
const int NETINFO_DLL16 = 1;
const int NETINFO_DISKRED = 4;
const int NETINFO_PRINTERRED = 8;
const int RP_LOGON = 1;
const int RP_INIFILE = 2;
const int PP_DISPLAYERRORS = 1;
const int WNCON_FORNETCARD = 1;
const int WNCON_NOTROUTED = 2;
const int WNCON_SLOWLINK = 4;
const int WNCON_DYNAMIC = 8;
const int REG_CREATED_NEW_KEY = 1;
const int REG_OPENED_EXISTING_KEY = 2;
const int REG_NONE = 0;
const int REG_SZ = 1;
const int REG_EXPAND_SZ = 2;
const int REG_BINARY = 3;
const int REG_DWORD_LITTLE_ENDIAN = 4;
const int REG_DWORD = 4;
const int REG_DWORD_BIG_ENDIAN = 5;
const int REG_LINK = 6;
const int REG_MULTI_SZ = 7;
const int REG_RESOURCE_LIST = 8;
const int REG_FULL_RESOURCE_DESCRIPTOR = 9;
const int REG_RESOURCE_REQUIREMENTS_LIST = 10;
const int REG_QWORD_LITTLE_ENDIAN = 11;
const int REG_QWORD = 11;
const int REG_NOTIFY_CHANGE_NAME = 1;
const int REG_NOTIFY_CHANGE_ATTRIBUTES = 2;
const int REG_NOTIFY_CHANGE_LAST_SET = 4;
const int REG_NOTIFY_CHANGE_SECURITY = 8;
const int SC_MANAGER_ALL_ACCESS = 0xf003f;
const int SC_MANAGER_CONNECT = 1;
const int SC_MANAGER_CREATE_SERVICE = 2;
const int SC_MANAGER_ENUMERATE_SERVICE = 4;
const int SC_MANAGER_LOCK = 8;
const int SC_MANAGER_QUERY_LOCK_STATUS = 16;
const int SC_MANAGER_MODIFY_BOOT_CONFIG = 32;
const int SERVICE_NO_CHANGE = 0xffffffff;
const int SERVICE_STOPPED = 1;
const int SERVICE_START_PENDING = 2;
const int SERVICE_STOP_PENDING = 3;
const int SERVICE_RUNNING = 4;
const int SERVICE_CONTINUE_PENDING = 5;
const int SERVICE_PAUSE_PENDING = 6;
const int SERVICE_PAUSED = 7;
const int SERVICE_ACCEPT_STOP = 1;
const int SERVICE_ACCEPT_PAUSE_CONTINUE = 2;
const int SERVICE_ACCEPT_SHUTDOWN = 4;
const int SERVICE_ACCEPT_PARAMCHANGE = 8;
const int SERVICE_ACCEPT_NETBINDCHANGE = 16;
const int SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 32;
const int SERVICE_ACCEPT_POWEREVENT = 64;
const int SERVICE_ACCEPT_SESSIONCHANGE = 128;
const int SERVICE_CONTROL_STOP = 1;
const int SERVICE_CONTROL_PAUSE = 2;
const int SERVICE_CONTROL_CONTINUE = 3;
const int SERVICE_CONTROL_INTERROGATE = 4;
const int SERVICE_CONTROL_SHUTDOWN = 5;
const int SERVICE_CONTROL_PARAMCHANGE = 6;
const int SERVICE_CONTROL_NETBINDADD = 7;
const int SERVICE_CONTROL_NETBINDREMOVE = 8;
const int SERVICE_CONTROL_NETBINDENABLE = 9;
const int SERVICE_CONTROL_NETBINDDISABLE = 10;
const int SERVICE_CONTROL_DEVICEEVENT = 11;
const int SERVICE_CONTROL_HARDWAREPROFILECHANGE = 12;
const int SERVICE_CONTROL_POWEREVENT = 13;
const int SERVICE_CONTROL_SESSIONCHANGE = 14;
const int SERVICE_ACTIVE = 1;
const int SERVICE_INACTIVE = 2;
const int SERVICE_STATE_ALL = 3;
const int SERVICE_QUERY_CONFIG = 1;
const int SERVICE_CHANGE_CONFIG = 2;
const int SERVICE_QUERY_STATUS = 4;
const int SERVICE_ENUMERATE_DEPENDENTS = 8;
const int SERVICE_START = 16;
const int SERVICE_STOP = 32;
const int SERVICE_PAUSE_CONTINUE = 64;
const int SERVICE_INTERROGATE = 128;
const int SERVICE_USER_DEFINED_CONTROL = 256;
const int SERVICE_RUNS_IN_SYSTEM_PROCESS = 1;
const int SERVICE_CONFIG_DESCRIPTION = 1;
const int SERVICE_CONFIG_FAILURE_ACTIONS = 2;
alias _SERVICE_FAILURE_ACTIONSA * LPSERVICE_FAILURE_ACTIONSA;
alias _SERVICE_FAILURE_ACTIONSA * LPSERVICE_FAILURE_ACTIONS;
alias _SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONSA;
alias _SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
alias _SERVICE_DESCRIPTIONA * LPSERVICE_DESCRIPTIONA;
alias _SERVICE_DESCRIPTIONA * LPSERVICE_DESCRIPTION;
alias _SERVICE_DESCRIPTIONA SERVICE_DESCRIPTIONA;
alias _SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
alias char CHAR;
alias char * LPSTR;
alias void function(uint, char * *) _BCD_func__4605;
alias _BCD_func__4605 LPSERVICE_MAIN_FUNCTIONA;
alias _BCD_func__4605 LPSERVICE_MAIN_FUNCTION;
alias _SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRYA;
alias _SERVICE_TABLE_ENTRYA * LPSERVICE_TABLE_ENTRY;
alias _SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
alias _QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUSA;
alias _QUERY_SERVICE_LOCK_STATUSA * LPQUERY_SERVICE_LOCK_STATUS;
alias _QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
alias _QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIGA;
alias _QUERY_SERVICE_CONFIGA * LPQUERY_SERVICE_CONFIG;
alias _QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
alias _ENUM_SERVICE_STATUS_PROCESSA * LPENUM_SERVICE_STATUS_PROCESSA;
alias _ENUM_SERVICE_STATUS_PROCESSA * LPENUM_SERVICE_STATUS_PROCESS;
alias _ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESSA;
alias _ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
alias _ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUSA;
alias _ENUM_SERVICE_STATUSA * LPENUM_SERVICE_STATUS;
alias _ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
alias _SERVICE_FAILURE_ACTIONSW * LPSERVICE_FAILURE_ACTIONSW;
alias _SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONSW;
alias uint DWORD;
alias wchar WCHAR;
alias wchar * LPWSTR;
alias _SC_ACTION SC_ACTION;
alias _SC_ACTION * LPSC_ACTION;
enum _SC_ACTION_TYPE {
SC_ACTION_NONE=0,
SC_ACTION_RESTART=1,
SC_ACTION_REBOOT=2,
SC_ACTION_RUN_COMMAND=3,
}
alias int SC_ACTION_TYPE;
alias _SERVICE_DESCRIPTIONW * LPSERVICE_DESCRIPTIONW;
alias _SERVICE_DESCRIPTIONW SERVICE_DESCRIPTIONW;
alias uint function(uint, uint, void *, void *) _BCD_func__4652;
alias _BCD_func__4652 LPHANDLER_FUNCTION_EX;
alias void function(uint) _BCD_func__4653;
alias _BCD_func__4653 LPHANDLER_FUNCTION;
alias uint SERVICE_STATUS_HANDLE;
alias void * PVOID;
alias void * SC_LOCK;
alias SC_HANDLE__ * SC_HANDLE;
alias SC_HANDLE__ * * LPSC_HANDLE;
alias _SERVICE_TABLE_ENTRYW * LPSERVICE_TABLE_ENTRYW;
alias _SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRYW;
alias void function(uint, wchar * *) _BCD_func__4661;
alias _BCD_func__4661 LPSERVICE_MAIN_FUNCTIONW;
alias _SERVICE_TABLE_ENTRYA * LPSERVICE_TABLE_ENTRYA;
alias _QUERY_SERVICE_LOCK_STATUSW * LPQUERY_SERVICE_LOCK_STATUSW;
alias _QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUSW;
alias _QUERY_SERVICE_LOCK_STATUSA * LPQUERY_SERVICE_LOCK_STATUSA;
alias _QUERY_SERVICE_CONFIGW * LPQUERY_SERVICE_CONFIGW;
alias _QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIGW;
alias _QUERY_SERVICE_CONFIGA * LPQUERY_SERVICE_CONFIGA;
alias _ENUM_SERVICE_STATUS_PROCESSW * LPENUM_SERVICE_STATUS_PROCESSW;
alias _ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESSW;
alias _SERVICE_STATUS_PROCESS SERVICE_STATUS_PROCESS;
alias _ENUM_SERVICE_STATUSW * LPENUM_SERVICE_STATUSW;
alias _ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUSW;
alias _SERVICE_STATUS SERVICE_STATUS;
alias _ENUM_SERVICE_STATUSA * LPENUM_SERVICE_STATUSA;
enum _SC_ENUM_TYPE {
SC_ENUM_PROCESS_INFO=0,
}
alias int SC_ENUM_TYPE;
enum _SC_STATUS_TYPE {
SC_STATUS_PROCESS_INFO=0,
}
alias int SC_STATUS_TYPE;
alias _SERVICE_STATUS_PROCESS * LPSERVICE_STATUS_PROCESS;
alias _SERVICE_STATUS * LPSERVICE_STATUS;
alias value_entA VALENTA;
alias value_entA * PVALENT;
alias value_entA VALENT;
alias value_entW * PVALENTW;
alias value_entW VALENTW;
alias value_entA * PVALENTA;
alias uint ACCESS_MASK;
alias uint REGSAM;
alias _REMOTE_NAME_INFOA REMOTE_NAME_INFOA;
alias _REMOTE_NAME_INFOA * LPREMOTE_NAME_INFO;
alias _REMOTE_NAME_INFOA REMOTE_NAME_INFO;
alias _UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFOA;
alias _UNIVERSAL_NAME_INFOA * LPUNIVERSAL_NAME_INFO;
alias _UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
alias _DISCDLGSTRUCTA DISCDLGSTRUCTA;
alias _DISCDLGSTRUCTA * LPDISCDLGSTRUCT;
alias _DISCDLGSTRUCTA DISCDLGSTRUCT;
alias _CONNECTDLGSTRUCTA CONNECTDLGSTRUCTA;
alias _CONNECTDLGSTRUCTA * LPCONNECTDLGSTRUCT;
alias _CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
alias _NETRESOURCEA NETRESOURCEA;
alias _NETRESOURCEA * LPNETRESOURCE;
alias _NETRESOURCEA NETRESOURCE;
alias _NETCONNECTINFOSTRUCT * LPNETCONNECTINFOSTRUCT;
alias _NETCONNECTINFOSTRUCT NETCONNECTINFOSTRUCT;
alias int WINBOOL;
alias int BOOL;
alias int function(HWND__ *, wchar *, wchar *, wchar *, uint) _BCD_func__4762;
alias _BCD_func__4762 PFNPROCESSPOLICIESW;
alias int function(HWND__ *, char *, char *, char *, uint) _BCD_func__4763;
alias _BCD_func__4763 PFNPROCESSPOLICIESA;
alias uint UINT;
alias uint function(wchar *, wchar *, uint) _BCD_func__4764;
alias _BCD_func__4764 PFNRECONCILEPROFILEW;
alias uint function(char *, char *, uint) _BCD_func__4765;
alias _BCD_func__4765 PFNRECONCILEPROFILEA;
alias uint function(wchar *, wchar *, uint) _BCD_func__4766;
alias _BCD_func__4766 PFNGETPROFILEPATHW;
alias uint function(char *, char *, uint) _BCD_func__4767;
alias _BCD_func__4767 PFNGETPROFILEPATHA;
alias _NETINFOSTRUCT * LPNETINFOSTRUCT;
alias _NETINFOSTRUCT NETINFOSTRUCT;
alias ushort WORD;
alias _REMOTE_NAME_INFOW * LPREMOTE_NAME_INFOW;
alias _REMOTE_NAME_INFOW REMOTE_NAME_INFOW;
alias _REMOTE_NAME_INFOA * LPREMOTE_NAME_INFOA;
alias _UNIVERSAL_NAME_INFOW * LPUNIVERSAL_NAME_INFOW;
alias _UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFOW;
alias _UNIVERSAL_NAME_INFOA * LPUNIVERSAL_NAME_INFOA;
alias _DISCDLGSTRUCTW * LPDISCDLGSTRUCTW;
alias _DISCDLGSTRUCTW DISCDLGSTRUCTW;
alias HWND__ * HWND;
alias _DISCDLGSTRUCTA * LPDISCDLGSTRUCTA;
alias _CONNECTDLGSTRUCTW * LPCONNECTDLGSTRUCTW;
alias _CONNECTDLGSTRUCTW CONNECTDLGSTRUCTW;
alias _NETRESOURCEW * LPNETRESOURCEW;
alias _CONNECTDLGSTRUCTA * LPCONNECTDLGSTRUCTA;
alias _NETRESOURCEA * LPNETRESOURCEA;
alias _NETRESOURCEW NETRESOURCEW;
alias tagVS_FIXEDFILEINFO VS_FIXEDFILEINFO;
alias _numberfmtA * LPNUMBERFMTA;
alias _numberfmtA * LPNUMBERFMT;
alias _numberfmtA NUMBERFMTA;
alias _numberfmtA NUMBERFMT;
alias _currencyfmtA * LPCURRENCYFMTA;
alias _currencyfmtA * LPCURRENCYFMT;
alias _currencyfmtA CURRENCYFMTA;
alias _currencyfmtA CURRENCYFMT;
alias _cpinfoexA * LPCPINFOEXA;
alias _cpinfoexA * LPCPINFOEX;
alias _cpinfoexA CPINFOEXA;
alias _cpinfoexA CPINFOEX;
alias _numberfmtW * LPNUMBERFMTW;
alias _numberfmtW NUMBERFMTW;
alias nlsversioninfo * LPNLSVERSIONINFO;
alias nlsversioninfo NLSVERSIONINFO;
alias _currencyfmtW * LPCURRENCYFMTW;
alias _currencyfmtW CURRENCYFMTW;
alias _cpinfoexW * LPCPINFOEXW;
alias _cpinfoexW CPINFOEXW;
alias char BYTE;
alias _cpinfo * LPCPINFO;
alias _cpinfo CPINFO;
enum SYSGEOTYPE {
GEO_NATION=1,
GEO_LATITUDE=2,
GEO_LONGITUDE=3,
GEO_ISO2=4,
GEO_ISO3=5,
GEO_RFC1766=6,
GEO_LCID=7,
GEO_FRIENDLYNAME=8,
GEO_OFFICIALNAME=9,
GEO_TIMEZONES=10,
GEO_OFFICIALLANGUAGES=10,
}
enum SYSGEOCLASS {
GEOCLASS_NATION=16,
GEOCLASS_REGION=14,
}
enum NLS_FUNCTION {
COMPARE_STRING=1,
}
alias int function(uint) _BCD_func__4894;
alias _BCD_func__4894 GEO_ENUMPROC;
alias int function(wchar *) _BCD_func__4895;
alias _BCD_func__4895 TIMEFMT_ENUMPROCW;
alias int function(char *) _BCD_func__4896;
alias _BCD_func__4896 TIMEFMT_ENUMPROCA;
alias int function(wchar *, uint) _BCD_func__4897;
alias _BCD_func__4897 DATEFMT_ENUMPROCEXW;
alias int function(char *, uint) _BCD_func__4898;
alias _BCD_func__4898 DATEFMT_ENUMPROCEXA;
alias _BCD_func__4895 DATEFMT_ENUMPROCW;
alias _BCD_func__4896 DATEFMT_ENUMPROCA;
alias _BCD_func__4895 CODEPAGE_ENUMPROCW;
alias _BCD_func__4896 CODEPAGE_ENUMPROCA;
alias _BCD_func__4895 LOCALE_ENUMPROCW;
alias _BCD_func__4896 LOCALE_ENUMPROCA;
alias int function(char *, int) _BCD_func__4899;
alias _BCD_func__4899 UILANGUAGE_ENUMPROCA;
alias int function(wchar *, int) _BCD_func__4900;
alias _BCD_func__4900 UILANGUAGE_ENUMPROCW;
alias int function(uint, uint, wchar *, int) _BCD_func__4901;
alias _BCD_func__4901 LANGGROUPLOCALE_ENUMPROCW;
alias int function(uint, uint, char *, int) _BCD_func__4902;
alias _BCD_func__4902 LANGGROUPLOCALE_ENUMPROCA;
alias int function(uint, wchar *, wchar *, uint, int) _BCD_func__4903;
alias _BCD_func__4903 LANGUAGEGROUP_ENUMPROCW;
alias int function(uint, char *, char *, uint, int) _BCD_func__4904;
alias _BCD_func__4904 LANGUAGEGROUP_ENUMPROCA;
alias _BCD_func__4897 CALINFO_ENUMPROCEXW;
alias _BCD_func__4898 CALINFO_ENUMPROCEXA;
alias _BCD_func__4895 CALINFO_ENUMPROCW;
alias _BCD_func__4896 CALINFO_ENUMPROCA;
alias uint GEOCLASS;
alias uint GEOTYPE;
alias uint GEOID;
alias uint LGRPID;
alias uint CALID;
alias uint CALTYPE;
alias uint LCTYPE;
alias tagNONCLIENTMETRICSA NONCLIENTMETRICSA;
alias tagNONCLIENTMETRICSA * LPNONCLIENTMETRICS;
alias tagNONCLIENTMETRICSA NONCLIENTMETRICS;
alias tagICONMETRICSA ICONMETRICSA;
alias tagICONMETRICSA * LPICONMETRICS;
alias tagICONMETRICSA ICONMETRICS;
alias tagMONITORINFOEXA MONITORINFOEXA;
alias tagMONITORINFOEXA * LPMONITORINFOEX;
alias tagMONITORINFOEXA MONITORINFOEX;
alias tagMULTIKEYHELPA MULTIKEYHELPA;
alias tagMULTIKEYHELPA * LPMULTIKEYHELP;
alias tagMULTIKEYHELPA * PMULTIKEYHELP;
alias tagMULTIKEYHELPA MULTIKEYHELP;
alias tagMDICREATESTRUCTA MDICREATESTRUCTA;
alias tagMDICREATESTRUCTA * LPMDICREATESTRUCT;
alias tagMDICREATESTRUCTA MDICREATESTRUCT;
alias tagCBT_CREATEWNDA CBT_CREATEWNDA;
alias tagCBT_CREATEWNDA * LPCBT_CREATEWND;
alias tagCBT_CREATEWNDA CBT_CREATEWND;
alias tagCREATESTRUCTA CREATESTRUCTA;
alias tagCREATESTRUCTA * LPCREATESTRUCT;
alias tagCREATESTRUCTA CREATESTRUCT;
alias tagSOUNDSENTRYA SOUNDSENTRYA;
alias tagSOUNDSENTRYA * LPSOUNDSENTRY;
alias tagSOUNDSENTRYA SOUNDSENTRY;
alias tagSERIALKEYSA SERIALKEYSA;
alias tagSERIALKEYSA * LPSERIALKEYS;
alias tagSERIALKEYSA SERIALKEYS;
alias tagHIGHCONTRASTA HIGHCONTRASTA;
alias tagHIGHCONTRASTA * LPHIGHCONTRAST;
alias tagHIGHCONTRASTA HIGHCONTRAST;
alias MSGBOXPARAMSA * LPMSGBOXPARAMS;
alias MSGBOXPARAMSA * PMSGBOXPARAMS;
alias MSGBOXPARAMSA MSGBOXPARAMS;
alias tagMENUITEMINFOA MENUITEMINFOA;
alias tagMENUITEMINFOA * LPCMENUITEMINFOA;
alias tagMENUITEMINFOA * LPCMENUITEMINFO;
alias tagMENUITEMINFOA * LPMENUITEMINFO;
alias tagMENUITEMINFOA MENUITEMINFO;
alias _WNDCLASSEXA WNDCLASSEXA;
alias _WNDCLASSEXA * PWNDCLASSEX;
alias _WNDCLASSEXA * LPWNDCLASSEX;
alias _WNDCLASSEXA WNDCLASSEX;
alias _WNDCLASSA WNDCLASSA;
alias _WNDCLASSA * PWNDCLASS;
alias _WNDCLASSA * LPWNDCLASS;
alias _WNDCLASSA WNDCLASS;
alias MSLLHOOKSTRUCT * PMSLLHOOKSTRUCT;
alias tagPOINT POINT;
alias uint ULONG_PTR;
alias tagKBDLLHOOKSTRUCT * PKBDLLHOOKSTRUCT;
alias tagKBDLLHOOKSTRUCT * LPKBDLLHOOKSTRUCT;
alias tagKBDLLHOOKSTRUCT KBDLLHOOKSTRUCT;
alias tagMONITORINFOEXW * LPMONITORINFOEXW;
alias tagMONITORINFOEXW MONITORINFOEXW;
alias tagMONITORINFOEXA * LPMONITORINFOEXA;
alias tagMONITORINFO * LPMONITORINFO;
alias tagMONITORINFO MONITORINFO;
alias tagRECT RECT;
alias tagLASTINPUTINFO * PLASTINPUTINFO;
alias tagLASTINPUTINFO LASTINPUTINFO;
alias tagWINDOWINFO * LPWINDOWINFO;
alias tagWINDOWINFO * PWINDOWINFO;
alias tagWINDOWINFO WINDOWINFO;
alias ushort ATOM;
alias tagTITLEBARINFO * LPTITLEBARINFO;
alias tagTITLEBARINFO * PTITLEBARINFO;
alias tagTITLEBARINFO TITLEBARINFO;
alias tagSCROLLBARINFO * LPSCROLLBARINFO;
alias tagSCROLLBARINFO * PSCROLLBARINFO;
alias tagSCROLLBARINFO SCROLLBARINFO;
alias tagMENUINFO MENUINFO;
alias tagMENUINFO * LPCMENUINFO;
alias tagMENUINFO * LPMENUINFO;
alias HBRUSH__ * HBRUSH;
alias tagMENUBARINFO * PMENUBARINFO;
alias tagMENUBARINFO MENUBARINFO;
alias HMENU__ * HMENU;
alias tagCURSORINFO * LPCURSORINFO;
alias tagCURSORINFO * PCURSORINFO;
alias tagCURSORINFO CURSORINFO;
alias HICON__ * HICON;
alias HICON__ * HCURSOR;
alias tagCOMBOBOXINFO * LPCOMBOBOXINFO;
alias tagCOMBOBOXINFO * PCOMBOBOXINFO;
alias tagCOMBOBOXINFO COMBOBOXINFO;
alias tagALTTABINFO * LPALTTABINFO;
alias tagALTTABINFO * PALTTABINFO;
alias tagALTTABINFO ALTTABINFO;
alias tagSTYLESTRUCT * LPSTYLESTRUCT;
alias tagSTYLESTRUCT STYLESTRUCT;
alias tagHELPWININFOW * LPHELPWININFOW;
alias tagHELPWININFOW * PHELPWININFOW;
alias tagHELPWININFOW HELPWININFOW;
alias tagHELPWININFOA * LPHELPWININFOA;
alias tagHELPWININFOA * PHELPWININFOA;
alias tagHELPWININFOA HELPWININFOA;
alias tagMULTIKEYHELPW * LPMULTIKEYHELPW;
alias tagMULTIKEYHELPW * PMULTIKEYHELPW;
alias tagMULTIKEYHELPW MULTIKEYHELPW;
alias tagMULTIKEYHELPA * LPMULTIKEYHELPA;
alias tagMULTIKEYHELPA * PMULTIKEYHELPA;
alias uint HELPPOLY;
alias tagDROPSTRUCT * LPDROPSTRUCT;
alias tagDROPSTRUCT * PDROPSTRUCT;
alias tagDROPSTRUCT DROPSTRUCT;
alias tagMEASUREITEMSTRUCT * LPMEASUREITEMSTRUCT;
alias tagMEASUREITEMSTRUCT * PMEASUREITEMSTRUCT;
alias tagMEASUREITEMSTRUCT MEASUREITEMSTRUCT;
alias tagMDINEXTMENU * LPMDINEXTMENU;
alias tagMDINEXTMENU * PMDINEXTMENU;
alias tagMDINEXTMENU MDINEXTMENU;
alias tagMINMAXINFO * LPMINMAXINFO;
alias tagMINMAXINFO * PMINMAXINFO;
alias tagMINMAXINFO MINMAXINFO;
alias tagMDICREATESTRUCTW * LPMDICREATESTRUCTW;
alias tagMDICREATESTRUCTW MDICREATESTRUCTW;
alias wchar * LPCWSTR;
alias void * HANDLE;
alias int LONG_PTR;
alias int LPARAM;
alias tagMDICREATESTRUCTA * LPMDICREATESTRUCTA;
alias char * LPCSTR;
alias tagNCCALCSIZE_PARAMS * LPNCCALCSIZE_PARAMS;
alias tagNCCALCSIZE_PARAMS NCCALCSIZE_PARAMS;
alias _WINDOWPOS * PWINDOWPOS;
alias _WINDOWPOS * LPWINDOWPOS;
alias _WINDOWPOS WINDOWPOS;
alias tagEVENTMSG * LPEVENTMSG;
alias tagEVENTMSG * PEVENTMSG;
alias tagEVENTMSG * LPEVENTMSGMSG;
alias tagEVENTMSG * PEVENTMSGMSG;
alias tagEVENTMSG EVENTMSG;
alias tagTPMPARAMS * LPTPMPARAMS;
alias tagTPMPARAMS TPMPARAMS;
alias tagTRACKMOUSEEVENT * LPTRACKMOUSEEVENT;
alias tagTRACKMOUSEEVENT TRACKMOUSEEVENT;
alias tagMOUSEHOOKSTRUCT * PMOUSEHOOKSTRUCT;
alias tagMOUSEHOOKSTRUCT * LPMOUSEHOOKSTRUCT;
alias tagMOUSEHOOKSTRUCT MOUSEHOOKSTRUCT;
alias tagTOGGLEKEYS TOGGLEKEYS;
alias tagSTICKYKEYS * LPSTICKYKEYS;
alias tagSTICKYKEYS STICKYKEYS;
alias tagSOUNDSENTRYW * LPSOUNDSENTRYW;
alias tagSOUNDSENTRYW SOUNDSENTRYW;
alias tagSOUNDSENTRYA * LPSOUNDSENTRYA;
alias tagSERIALKEYSW * LPSERIALKEYSW;
alias tagSERIALKEYSW SERIALKEYSW;
alias tagSERIALKEYSA * LPSERIALKEYSA;
alias tagNONCLIENTMETRICSW * LPNONCLIENTMETRICSW;
alias tagNONCLIENTMETRICSW NONCLIENTMETRICSW;
alias tagLOGFONTW LOGFONTW;
alias tagNONCLIENTMETRICSA * LPNONCLIENTMETRICSA;
alias tagLOGFONTA LOGFONTA;
alias tagMOUSEKEYS * LPMOUSEKEYS;
alias tagMOUSEKEYS MOUSEKEYS;
alias tagMINIMIZEDMETRICS * LPMINIMIZEDMETRICS;
alias tagMINIMIZEDMETRICS MINIMIZEDMETRICS;
alias tagICONMETRICSW * LPICONMETRICSW;
alias tagICONMETRICSW ICONMETRICSW;
alias tagICONMETRICSA * LPICONMETRICSA;
alias tagHIGHCONTRASTW * LPHIGHCONTRASTW;
alias tagHIGHCONTRASTW HIGHCONTRASTW;
alias tagHIGHCONTRASTA * LPHIGHCONTRASTA;
alias tagFILTERKEYS FILTERKEYS;
alias tagUSEROBJECTFLAGS USEROBJECTFLAGS;
alias MSGBOXPARAMSW * LPMSGBOXPARAMSW;
alias MSGBOXPARAMSW * PMSGBOXPARAMSW;
alias HINSTANCE__ * HINSTANCE;
alias void function(tagHELPINFO *) _BCD_func__5363;
alias _BCD_func__5363 MSGBOXCALLBACK;
alias MSGBOXPARAMSA * LPMSGBOXPARAMSA;
alias MSGBOXPARAMSA * PMSGBOXPARAMSA;
alias tagHELPINFO * LPHELPINFO;
alias tagHELPINFO HELPINFO;
alias void * LPMENUTEMPLATE;
alias void * LPMENUTEMPLATEW;
alias void * LPMENUTEMPLATEA;
alias void MENUTEMPLATEW;
alias void MENUTEMPLATEA;
alias void MENUTEMPLATE;
alias _WINDOWPLACEMENT * PWINDOWPLACEMENT;
alias _WINDOWPLACEMENT * LPWINDOWPLACEMENT;
alias _WINDOWPLACEMENT WINDOWPLACEMENT;
alias tagSCROLLINFO SCROLLINFO;
alias tagSCROLLINFO * LPCSCROLLINFO;
alias tagSCROLLINFO * LPSCROLLINFO;
alias tagMENUITEMINFOW MENUITEMINFOW;
alias tagMENUITEMINFOW * LPCMENUITEMINFOW;
alias tagMENUITEMINFOW * LPMENUITEMINFOW;
alias HBITMAP__ * HBITMAP;
alias tagMENUITEMINFOA * LPMENUITEMINFOA;
alias _WNDCLASSEXW * PWNDCLASSEXW;
alias _WNDCLASSEXW * LPWNDCLASSEXW;
alias _WNDCLASSEXW WNDCLASSEXW;
alias int LRESULT;
alias int function(HWND__ *, uint, uint, int) _BCD_func__5608;
alias _BCD_func__5608 WNDPROC;
alias _WNDCLASSEXA * PWNDCLASSEXA;
alias _WNDCLASSEXA * LPWNDCLASSEXA;
alias _WNDCLASSW * PWNDCLASSW;
alias _WNDCLASSW * LPWNDCLASSW;
alias _WNDCLASSW WNDCLASSW;
alias _WNDCLASSA * PWNDCLASSA;
alias _WNDCLASSA * LPWNDCLASSA;
alias tagNMHDR * LPNMHDR;
alias tagNMHDR NMHDR;
alias _ICONINFO * PICONINFO;
alias _ICONINFO ICONINFO;
alias tagMSG * PMSG;
alias tagMSG * LPMSG;
alias tagMSG MSG;
alias uint UINT_PTR;
alias uint WPARAM;
alias tagPAINTSTRUCT * LPPAINTSTRUCT;
alias tagPAINTSTRUCT PAINTSTRUCT;
alias HDC__ * HDC;
alias DRAWTEXTPARAMS * LPDRAWTEXTPARAMS;
alias tagDRAWITEMSTRUCT * PDRAWITEMSTRUCT;
alias tagDRAWITEMSTRUCT * LPDRAWITEMSTRUCT;
alias tagDRAWITEMSTRUCT DRAWITEMSTRUCT;
alias DLGTEMPLATE * LPCDLGTEMPLATE;
alias DLGTEMPLATE * LPDLGTEMPLATEW;
alias DLGTEMPLATE * LPDLGTEMPLATEA;
alias DLGTEMPLATE * LPDLGTEMPLATE;
alias DLGITEMTEMPLATE * LPDLGITEMTEMPLATE;
alias tagDELETEITEMSTRUCT * LPDELETEITEMSTRUCT;
alias tagDELETEITEMSTRUCT * PDELETEITEMSTRUCT;
alias tagDELETEITEMSTRUCT DELETEITEMSTRUCT;
alias tagDEBUGHOOKINFO * LPDEBUGHOOKINFO;
alias tagDEBUGHOOKINFO * PDEBUGHOOKINFO;
alias tagDEBUGHOOKINFO DEBUGHOOKINFO;
alias tagCWPSTRUCT * PCWPSTRUCT;
alias tagCWPSTRUCT CWPSTRUCT;
alias tagCWPRETSTRUCT CWPRETSTRUCT;
alias tagCURSORSHAPE * LPCURSORSHAPE;
alias tagCURSORSHAPE CURSORSHAPE;
alias tagCOPYDATASTRUCT * PCOPYDATASTRUCT;
alias tagCOPYDATASTRUCT COPYDATASTRUCT;
alias tagCOMPAREITEMSTRUCT * LPCOMPAREITEMSTRUCT;
alias tagCOMPAREITEMSTRUCT COMPAREITEMSTRUCT;
alias tagCLIENTCREATESTRUCT * LPCLIENTCREATESTRUCT;
alias tagCLIENTCREATESTRUCT CLIENTCREATESTRUCT;
alias tagCBTACTIVATESTRUCT * LPCBTACTIVATESTRUCT;
alias tagCBTACTIVATESTRUCT CBTACTIVATESTRUCT;
alias tagCBT_CREATEWNDW * LPCBT_CREATEWNDW;
alias tagCBT_CREATEWNDW CBT_CREATEWNDW;
alias tagCREATESTRUCTW * LPCREATESTRUCTW;
alias tagCBT_CREATEWNDA * LPCBT_CREATEWNDA;
alias tagCREATESTRUCTA * LPCREATESTRUCTA;
alias tagCREATESTRUCTW CREATESTRUCTW;
alias void * LPVOID;
alias int LONG;
alias tagANIMATIONINFO * LPANIMATIONINFO;
alias tagANIMATIONINFO ANIMATIONINFO;
alias tagACCESSTIMEOUT * LPACCESSTIMEOUT;
alias tagACCESSTIMEOUT ACCESSTIMEOUT;
alias tagACCEL * LPACCEL;
alias tagACCEL ACCEL;
alias HDEVNOTIFY__ * HDEVNOTIFY;
alias HDWP__ * HDWP;
alias HHOOK__ * HHOOK;
alias void function(HWND__ *, uint, uint, int) _BCD_func__5604;
alias _BCD_func__5604 SENDASYNCPROC;
alias _BCD_func__4900 NAMEENUMPROCW;
alias _BCD_func__4900 WINSTAENUMPROCW;
alias _BCD_func__4899 NAMEENUMPROCA;
alias _BCD_func__4899 WINSTAENUMPROCA;
alias _BCD_func__4900 DESKTOPENUMPROCW;
alias _BCD_func__4899 DESKTOPENUMPROCA;
alias int function(HMONITOR__ *, HDC__ *, tagRECT *, int) _BCD_func__5605;
alias _BCD_func__5605 MONITORENUMPROC;
alias int function(HWND__ *, int) _BCD_func__5606;
alias _BCD_func__5606 ENUMWINDOWSPROC;
alias _BCD_func__5606 WNDENUMPROC;
alias int function(HDC__ *, int, uint, int, int) _BCD_func__5607;
alias _BCD_func__5607 DRAWSTATEPROC;
alias int function(wchar *, int, int, int) _BCD_func__5609;
alias _BCD_func__5609 EDITWORDBREAKPROCW;
alias int function(char *, int, int, int) _BCD_func__5610;
alias _BCD_func__5610 EDITWORDBREAKPROCA;
alias int function(HWND__ *, wchar *, void *, uint) _BCD_func__5611;
alias _BCD_func__5611 PROPENUMPROCEXW;
alias int function(HWND__ *, char *, void *, uint) _BCD_func__5612;
alias _BCD_func__5612 PROPENUMPROCEXA;
alias int function(HWND__ *, wchar *, void *) _BCD_func__5613;
alias _BCD_func__5613 PROPENUMPROCW;
alias int function(HWND__ *, char *, void *) _BCD_func__5614;
alias _BCD_func__5614 PROPENUMPROCA;
alias int function(int, uint, int) _BCD_func__5615;
alias _BCD_func__5615 HOOKPROC;
alias int function(HDC__ *, int, int) _BCD_func__5616;
alias _BCD_func__5616 GRAYSTRINGPROC;
alias void function(HWND__ *, uint, uint, uint) _BCD_func__5617;
alias _BCD_func__5617 TIMERPROC;
alias int function(HWND__ *, uint, uint, int) _BCD_func__5618;
alias _BCD_func__5618 DLGPROC;
alias _DISPLAY_DEVICEA DISPLAY_DEVICEA;
alias _DISPLAY_DEVICEA * LPDISPLAY_DEVICE;
alias _DISPLAY_DEVICEA * PDISPLAY_DEVICE;
alias _DISPLAY_DEVICEA DISPLAY_DEVICE;
alias tagENUMLOGFONTEXA ENUMLOGFONTEXA;
alias tagENUMLOGFONTEXA * LPENUMLOGFONTEX;
alias tagENUMLOGFONTEXA ENUMLOGFONTEX;
alias tagENUMLOGFONTA ENUMLOGFONTA;
alias tagENUMLOGFONTA * LPENUMLOGFONT;
alias tagENUMLOGFONTA ENUMLOGFONT;
alias tagNEWTEXTMETRICEXA NEWTEXTMETRICEXA;
alias tagNEWTEXTMETRICEXA NEWTEXTMETRICEX;
alias tagNEWTEXTMETRICA NEWTEXTMETRICA;
alias tagNEWTEXTMETRICA * LPNEWTEXTMETRIC;
alias tagNEWTEXTMETRICA * PNEWTEXTMETRIC;
alias tagNEWTEXTMETRICA NEWTEXTMETRIC;
alias tagLOGCOLORSPACEA LOGCOLORSPACEA;
alias tagLOGCOLORSPACEA * LPLOGCOLORSPACE;
alias tagLOGCOLORSPACEA LOGCOLORSPACE;
alias _POLYTEXTA POLYTEXTA;
alias _POLYTEXTA * LPPOLYTEXT;
alias _POLYTEXTA * PPOLYTEXT;
alias _POLYTEXTA POLYTEXT;
alias _OUTLINETEXTMETRICA OUTLINETEXTMETRICA;
alias _OUTLINETEXTMETRICA * LPOUTLINETEXTMETRIC;
alias _OUTLINETEXTMETRICA * POUTLINETEXTMETRIC;
alias _OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
alias tagGCP_RESULTSA GCP_RESULTSA;
alias tagGCP_RESULTSA * LPGCP_RESULTS;
alias tagGCP_RESULTSA GCP_RESULTS;
alias tagEXTLOGFONTA EXTLOGFONTA;
alias tagEXTLOGFONTA * LPEXTLOGFONT;
alias tagEXTLOGFONTA * PEXTLOGFONT;
alias tagEXTLOGFONTA EXTLOGFONT;
alias _devicemodeA DEVMODEA;
alias _devicemodeA * LPDEVMODE;
alias _devicemodeA * PDEVMODE;
alias _devicemodeA DEVMODE;
alias tagTEXTMETRICA TEXTMETRICA;
alias tagTEXTMETRICA * LPTEXTMETRIC;
alias tagTEXTMETRICA * PTEXTMETRIC;
alias tagTEXTMETRICA TEXTMETRIC;
alias tagLOGFONTA * LPLOGFONT;
alias tagLOGFONTA * PLOGFONT;
alias tagLOGFONTA LOGFONT;
alias _DOCINFOA DOCINFOA;
alias _DOCINFOA * LPDOCINFO;
alias _DOCINFOA DOCINFO;
alias char BCHAR;
alias uint function(char *, char *, uint, char *, _devicemodeA *) _BCD_func__5850;
alias _BCD_func__5850 LPFNDEVCAPS;
alias uint function(HWND__ *, HINSTANCE__ *, _devicemodeA *, char *, char *, _devicemodeA *, char *, uint) _BCD_func__5851;
alias _BCD_func__5851 LPFNDEVMODE;
alias void function(int, int, int) _BCD_func__5852;
alias _BCD_func__5852 LINEDDAPROC;
alias void function(void *, int) _BCD_func__5853;
alias _BCD_func__5853 GOBJENUMPROC;
alias int function(wchar *, int) _BCD_func__5854;
alias _BCD_func__5854 ICMENUMPROCW;
alias int function(char *, int) _BCD_func__5855;
alias _BCD_func__5855 ICMENUMPROCA;
alias tagTEXTMETRICW TEXTMETRICW;
alias int function(tagLOGFONTW *, tagTEXTMETRICW *, uint, int) _BCD_func__5856;
alias _BCD_func__5856 OLDFONTENUMPROCW;
alias _BCD_func__5856 FONTENUMPROCW;
alias int function(tagLOGFONTA *, tagTEXTMETRICA *, uint, int) _BCD_func__5857;
alias _BCD_func__5857 OLDFONTENUMPROCA;
alias _BCD_func__5857 FONTENUMPROCA;
alias tagHANDLETABLE HANDLETABLE;
alias tagENHMETARECORD ENHMETARECORD;
alias int function(HDC__ *, tagHANDLETABLE *, tagENHMETARECORD *, int, int) _BCD_func__5858;
alias _BCD_func__5858 ENHMFENUMPROC;
alias tagMETARECORD METARECORD;
alias int function(HDC__ *, tagHANDLETABLE *, tagMETARECORD *, int, int) _BCD_func__5859;
alias _BCD_func__5859 MFENUMPROC;
alias int function(HDC__ *, int) _BCD_func__5860;
alias _BCD_func__5860 ABORTPROC;
alias _DISPLAY_DEVICEW * LPDISPLAY_DEVICEW;
alias _DISPLAY_DEVICEW * PDISPLAY_DEVICEW;
alias _DISPLAY_DEVICEW DISPLAY_DEVICEW;
alias _DISPLAY_DEVICEA * LPDISPLAY_DEVICEA;
alias _DISPLAY_DEVICEA * PDISPLAY_DEVICEA;
alias _GRADIENT_RECT * LPGRADIENT_RECT;
alias _GRADIENT_RECT * PGRADIENT_RECT;
alias _GRADIENT_RECT GRADIENT_RECT;
alias uint ULONG;
alias _GRADIENT_TRIANGLE * LPGRADIENT_TRIANGLE;
alias _GRADIENT_TRIANGLE * PGRADIENT_TRIANGLE;
alias _GRADIENT_TRIANGLE GRADIENT_TRIANGLE;
alias _TRIVERTEX * LPTRIVERTEX;
alias _TRIVERTEX * PTRIVERTEX;
alias _TRIVERTEX TRIVERTEX;
alias ushort USHORT;
alias ushort COLOR16;
alias _DESIGNVECTOR * LPDESIGNVECTOR;
alias _DESIGNVECTOR * PDESIGNVECTOR;
alias _DESIGNVECTOR DESIGNVECTOR;
alias _BLENDFUNCTION * LPBLENDFUNCTION;
alias _BLENDFUNCTION * PBLENDFUNCTION;
alias _BLENDFUNCTION BLENDFUNCTION;
alias tagLAYERPLANEDESCRIPTOR * LPLAYERPLANEDESCRIPTOR;
alias tagLAYERPLANEDESCRIPTOR * PLAYERPLANEDESCRIPTOR;
alias tagLAYERPLANEDESCRIPTOR LAYERPLANEDESCRIPTOR;
alias uint COLORREF;
alias _GLYPHMETRICSFLOAT * LPGLYPHMETRICSFLOAT;
alias _GLYPHMETRICSFLOAT * PGLYPHMETRICSFLOAT;
alias _GLYPHMETRICSFLOAT GLYPHMETRICSFLOAT;
alias float FLOAT;
alias _POINTFLOAT POINTFLOAT;
alias _POINTFLOAT * PPOINTFLOAT;
alias tagTTPOLYGONHEADER * LPTTPOLYGONHEADER;
alias tagTTPOLYGONHEADER TTPOLYGONHEADER;
alias tagPOINTFX POINTFX;
alias tagTTPOLYCURVE * LPTTPOLYCURVE;
alias tagTTPOLYCURVE TTPOLYCURVE;
alias tagPOINTFX * LPPOINTFX;
alias _FIXED FIXED;
alias tagENUMLOGFONTEXW * LPENUMLOGFONTEXW;
alias tagENUMLOGFONTEXW ENUMLOGFONTEXW;
alias tagENUMLOGFONTEXA * LPENUMLOGFONTEXA;
alias tagENUMLOGFONTW * LPENUMLOGFONTW;
alias tagENUMLOGFONTW ENUMLOGFONTW;
alias tagENUMLOGFONTA * LPENUMLOGFONTA;
alias tagPELARRAY * LPPELARRAY;
alias tagPELARRAY * PPELARRAY;
alias tagPELARRAY PELARRAY;
alias tagNEWTEXTMETRICEXW NEWTEXTMETRICEXW;
alias tagNEWTEXTMETRICW NEWTEXTMETRICW;
alias tagFONTSIGNATURE FONTSIGNATURE;
alias tagNEWTEXTMETRICW * LPNEWTEXTMETRICW;
alias tagNEWTEXTMETRICW * PNEWTEXTMETRICW;
alias tagNEWTEXTMETRICA * LPNEWTEXTMETRICA;
alias tagNEWTEXTMETRICA * PNEWTEXTMETRICA;
alias int LCSTYPE;
alias tagLOCALESIGNATURE * LPLOCALESIGNATURE;
alias tagLOCALESIGNATURE * PLOCALESIGNATURE;
alias tagLOCALESIGNATURE LOCALESIGNATURE;
alias tagMETAFILEPICT * LPMETAFILEPICT;
alias tagMETAFILEPICT METAFILEPICT;
alias HMETAFILE__ * HMETAFILE;
alias tagPIXELFORMATDESCRIPTOR * LPPIXELFORMATDESCRIPTOR;
alias tagPIXELFORMATDESCRIPTOR * PPIXELFORMATDESCRIPTOR;
alias tagPIXELFORMATDESCRIPTOR PIXELFORMATDESCRIPTOR;
alias _POLYTEXTW * LPPOLYTEXTW;
alias _POLYTEXTW * PPOLYTEXTW;
alias _POLYTEXTW POLYTEXTW;
alias _POLYTEXTA * LPPOLYTEXTA;
alias _POLYTEXTA * PPOLYTEXTA;
alias _RASTERIZER_STATUS * LPRASTERIZER_STATUS;
alias _RASTERIZER_STATUS RASTERIZER_STATUS;
alias _OUTLINETEXTMETRICW * LPOUTLINETEXTMETRICW;
alias _OUTLINETEXTMETRICW * POUTLINETEXTMETRICW;
alias _OUTLINETEXTMETRICW OUTLINETEXTMETRICW;
alias tagPANOSE PANOSE;
alias char * PSTR;
alias _OUTLINETEXTMETRICA * LPOUTLINETEXTMETRICA;
alias _OUTLINETEXTMETRICA * POUTLINETEXTMETRICA;
alias _MAT2 * LPMAT2;
alias _MAT2 MAT2;
alias tagKERNINGPAIR * LPKERNINGPAIR;
alias tagKERNINGPAIR KERNINGPAIR;
alias _GLYPHMETRICS * LPGLYPHMETRICS;
alias _GLYPHMETRICS GLYPHMETRICS;
alias tagGCP_RESULTSW * LPGCP_RESULTSW;
alias tagGCP_RESULTSW GCP_RESULTSW;
alias int INT;
alias tagGCP_RESULTSA * LPGCP_RESULTSA;
alias _RGNDATA * LPRGNDATA;
alias _RGNDATA * PRGNDATA;
alias _RGNDATA RGNDATA;
alias _RGNDATAHEADER RGNDATAHEADER;
alias tagTEXTMETRICW * LPTEXTMETRICW;
alias tagTEXTMETRICW * PTEXTMETRICW;
alias tagTEXTMETRICA * LPTEXTMETRICA;
alias tagTEXTMETRICA * PTEXTMETRICA;
alias tagHANDLETABLE * LPHANDLETABLE;
alias void * HGDIOBJ;
alias tagENHMETARECORD * LPENHMETARECORD;
alias tagMETARECORD * LPMETARECORD;
alias tagMETARECORD * PMETARECORD;
alias tagENHMETAHEADER * LPENHMETAHEADER;
alias tagENHMETAHEADER ENHMETAHEADER;
alias tagRECTL RECTL;
alias tagSIZE SIZEL;
alias tagMETAHEADER * LPMETAHEADER;
alias tagMETAHEADER * PMETAHEADER;
alias tagMETAHEADER METAHEADER;
alias tagEMRSELECTCLIPPATH * PEMRENABLEICM;
alias tagEMRSELECTCLIPPATH EMRENABLEICM;
alias tagEMRSELECTCLIPPATH * PEMRSETTEXTALIGN;
alias tagEMRSELECTCLIPPATH EMRSETTEXTALIGN;
alias tagEMRSELECTCLIPPATH * PEMRSETSTRETCHBLTMODE;
alias tagEMRSELECTCLIPPATH EMRSETSTRETCHBLTMODE;
alias tagEMRSELECTCLIPPATH * PEMRSETROP2;
alias tagEMRSELECTCLIPPATH EMRSETROP2;
alias tagEMRSELECTCLIPPATH * PEMRSETPOLYFILLMODE;
alias tagEMRSELECTCLIPPATH EMRSETPOLYFILLMODE;
alias tagEMRSELECTCLIPPATH * PEMRSETMAPMODE;
alias tagEMRSELECTCLIPPATH EMRSETMAPMODE;
alias tagEMRSELECTCLIPPATH * PEMRSETBKMODE;
alias tagEMRSELECTCLIPPATH EMRSETBKMODE;
alias tagEMRSELECTCLIPPATH * PEMRSELECTCLIPPATH;
alias tagEMRSELECTCLIPPATH EMRSELECTCLIPPATH;
alias tagEMR EMR;
alias tagABORTPATH * PEMRREALIZEPALETTE;
alias tagABORTPATH EMRREALIZEPALETTE;
alias tagABORTPATH * PEMRSAVEDC;
alias tagABORTPATH EMRSAVEDC;
alias tagABORTPATH * PEMRSETMETARGN;
alias tagABORTPATH EMRSETMETARGN;
alias tagABORTPATH * PEMRWIDENPATH;
alias tagABORTPATH EMRWIDENPATH;
alias tagABORTPATH * PEMRFLATTENPATH;
alias tagABORTPATH EMRFLATTENPATH;
alias tagABORTPATH * PEMRCLOSEFIGURE;
alias tagABORTPATH EMRCLOSEFIGURE;
alias tagABORTPATH * PEMRENDPATH;
alias tagABORTPATH EMRENDPATH;
alias tagABORTPATH * PEMRBEGINPATH;
alias tagABORTPATH EMRBEGINPATH;
alias tagABORTPATH * PEMRABORTPATH;
alias tagABORTPATH EMRABORTPATH;
alias tagEMRSTRETCHDIBITS * PEMRSTRETCHDIBITS;
alias tagEMRSTRETCHDIBITS EMRSTRETCHDIBITS;
alias tagEMRSTRETCHBLT * PEMRSTRETCHBLT;
alias tagEMRSTRETCHBLT EMRSTRETCHBLT;
alias _XFORM XFORM;
alias tagEMRSETWORLDTRANSFORM * PEMRSETWORLDTRANSFORM;
alias tagEMRSETWORLDTRANSFORM EMRSETWORLDTRANSFORM;
alias tagEMRSETVIEWPORTORGEX * PEMRSETBRUSHORGEX;
alias tagEMRSETVIEWPORTORGEX EMRSETBRUSHORGEX;
alias tagEMRSETVIEWPORTORGEX * PEMRSETWINDOWORGEX;
alias tagEMRSETVIEWPORTORGEX EMRSETWINDOWORGEX;
alias tagEMRSETVIEWPORTORGEX * PEMRSETVIEWPORTORGEX;
alias tagEMRSETVIEWPORTORGEX EMRSETVIEWPORTORGEX;
alias tagPOINT POINTL;
alias tagEMRSETVIEWPORTEXTEX * PEMRSETWINDOWEXTEX;
alias tagEMRSETVIEWPORTEXTEX EMRSETWINDOWEXTEX;
alias tagEMRSETVIEWPORTEXTEX * PEMRSETVIEWPORTEXTEX;
alias tagEMRSETVIEWPORTEXTEX EMRSETVIEWPORTEXTEX;
alias tagEMRSETPIXELV * PEMRSETPIXELV;
alias tagEMRSETPIXELV EMRSETPIXELV;
alias tagEMRSETPALETTEENTRIES * PEMRSETPALETTEENTRIES;
alias tagEMRSETPALETTEENTRIES EMRSETPALETTEENTRIES;
alias tagPALETTEENTRY PALETTEENTRY;
alias tagEMRSETMITERLIMIT * PEMRSETMITERLIMIT;
alias tagEMRSETMITERLIMIT EMRSETMITERLIMIT;
alias tagEMRSETMAPPERFLAGS * PEMRSETMAPPERFLAGS;
alias tagEMRSETMAPPERFLAGS EMRSETMAPPERFLAGS;
alias tagEMRSETDIBITSTODEVICE * PEMRSETDIBITSTODEVICE;
alias tagEMRSETDIBITSTODEVICE EMRSETDIBITSTODEVICE;
alias tagEMRSETCOLORADJUSTMENT * PEMRSETCOLORADJUSTMENT;
alias tagEMRSETCOLORADJUSTMENT EMRSETCOLORADJUSTMENT;
alias tagCOLORADJUSTMENT COLORADJUSTMENT;
alias tagEMRSETTEXTCOLOR * PEMRSETTEXTCOLOR;
alias tagEMRSETTEXTCOLOR EMRSETTEXTCOLOR;
alias tagEMRSETTEXTCOLOR * PEMRSETBKCOLOR;
alias tagEMRSETTEXTCOLOR EMRSETBKCOLOR;
alias tagEMRSETARCDIRECTION * PEMRSETARCDIRECTION;
alias tagEMRSETARCDIRECTION EMRSETARCDIRECTION;
alias tagEMRSELECTPALETTE * PEMRSELECTPALETTE;
alias tagEMRSELECTPALETTE EMRSELECTPALETTE;
alias tagEMRSELECTOBJECT * PEMRDELETEOBJECT;
alias tagEMRSELECTOBJECT EMRDELETEOBJECT;
alias tagEMRSELECTOBJECT * PEMRSELECTOBJECT;
alias tagEMRSELECTOBJECT EMRSELECTOBJECT;
alias tagEMRSELECTCOLORSPACE * PEMRDELETECOLORSPACE;
alias tagEMRSELECTCOLORSPACE EMRDELETECOLORSPACE;
alias tagEMRSELECTCOLORSPACE * PEMRSELECTCOLORSPACE;
alias tagEMRSELECTCOLORSPACE EMRSELECTCOLORSPACE;
alias tagEMRSCALEVIEWPORTEXTEX * PEMRSCALEWINDOWEXTEX;
alias tagEMRSCALEVIEWPORTEXTEX EMRSCALEWINDOWEXTEX;
alias tagEMRSCALEVIEWPORTEXTEX * PEMRSCALEVIEWPORTEXTEX;
alias tagEMRSCALEVIEWPORTEXTEX EMRSCALEVIEWPORTEXTEX;
alias tagEMRROUNDRECT * PEMRROUNDRECT;
alias tagEMRROUNDRECT EMRROUNDRECT;
alias tagEMRRESTOREDC * PEMRRESTOREDC;
alias tagEMRRESTOREDC EMRRESTOREDC;
alias tagEMRRESIZEPALETTE * PEMRRESIZEPALETTE;
alias tagEMRRESIZEPALETTE EMRRESIZEPALETTE;
alias tagEMRPOLYTEXTOUTA * PEMRPOLYTEXTOUTW;
alias tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTW;
alias tagEMRPOLYTEXTOUTA * PEMRPOLYTEXTOUTA;
alias tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTA;
alias tagEMRTEXT EMRTEXT;
alias tagEMRPOLYPOLYLINE16 * PEMRPOLYPOLYGON16;
alias tagEMRPOLYPOLYLINE16 EMRPOLYPOLYGON16;
alias tagEMRPOLYPOLYLINE16 * PEMRPOLYPOLYLINE16;
alias tagEMRPOLYPOLYLINE16 EMRPOLYPOLYLINE16;
alias tagPOINTS POINTS;
alias tagEMRPOLYPOLYLINE * PEMRPOLYPOLYGON;
alias tagEMRPOLYPOLYLINE EMRPOLYPOLYGON;
alias tagEMRPOLYPOLYLINE * PEMRPOLYPOLYLINE;
alias tagEMRPOLYPOLYLINE EMRPOLYPOLYLINE;
alias tagEMRPOLYLINE16 * PEMRPOLYLINETO16;
alias tagEMRPOLYLINE16 EMRPOLYLINETO16;
alias tagEMRPOLYLINE16 * PEMRPOLYBEZIERTO16;
alias tagEMRPOLYLINE16 EMRPOLYBEZIERTO16;
alias tagEMRPOLYLINE16 * PEMRPOLYGON16;
alias tagEMRPOLYLINE16 EMRPOLYGON16;
alias tagEMRPOLYLINE16 * PEMRPOLYBEZIER16;
alias tagEMRPOLYLINE16 EMRPOLYBEZIER16;
alias tagEMRPOLYLINE16 * PEMRPOLYLINE16;
alias tagEMRPOLYLINE16 EMRPOLYLINE16;
alias tagEMRPOLYLINE * PEMRPOLYLINETO;
alias tagEMRPOLYLINE EMRPOLYLINETO;
alias tagEMRPOLYLINE * PEMRPOLYBEZIERTO;
alias tagEMRPOLYLINE EMRPOLYBEZIERTO;
alias tagEMRPOLYLINE * PEMRPOLYGON;
alias tagEMRPOLYLINE EMRPOLYGON;
alias tagEMRPOLYLINE * PEMRPOLYBEZIER;
alias tagEMRPOLYLINE EMRPOLYBEZIER;
alias tagEMRPOLYLINE * PEMRPOLYLINE;
alias tagEMRPOLYLINE EMRPOLYLINE;
alias tagEMRPOLYDRAW16 * PEMRPOLYDRAW16;
alias tagEMRPOLYDRAW16 EMRPOLYDRAW16;
alias tagEMRPOLYDRAW * PEMRPOLYDRAW;
alias tagEMRPOLYDRAW EMRPOLYDRAW;
alias tagEMRPLGBLT * PEMRPLGBLT;
alias tagEMRPLGBLT EMRPLGBLT;
alias tagEMROFFSETCLIPRGN * PEMROFFSETCLIPRGN;
alias tagEMROFFSETCLIPRGN EMROFFSETCLIPRGN;
alias tagEMRMODIFYWORLDTRANSFORM * PEMRMODIFYWORLDTRANSFORM;
alias tagEMRMODIFYWORLDTRANSFORM EMRMODIFYWORLDTRANSFORM;
alias tagEMRMASKBLT * PEMRMASKBLT;
alias tagEMRMASKBLT EMRMASKBLT;
alias tagEMRLINETO * PEMRMOVETOEX;
alias tagEMRLINETO EMRMOVETOEX;
alias tagEMRLINETO * PEMRLINETO;
alias tagEMRLINETO EMRLINETO;
alias tagEMRINVERTRGN * PEMRPAINTRGN;
alias tagEMRINVERTRGN EMRPAINTRGN;
alias tagEMRINVERTRGN * PEMRINVERTRGN;
alias tagEMRINVERTRGN EMRINVERTRGN;
alias tagEMRGDICOMMENT * PEMRGDICOMMENT;
alias tagEMRGDICOMMENT EMRGDICOMMENT;
alias tagEMRFRAMERGN * PEMRFRAMERGN;
alias tagEMRFRAMERGN EMRFRAMERGN;
alias tagEMRFORMAT EMRFORMAT;
alias tagEMRFILLRGN * PEMRFILLRGN;
alias tagEMRFILLRGN EMRFILLRGN;
alias tagEMRFILLPATH * PEMRSTROKEPATH;
alias tagEMRFILLPATH EMRSTROKEPATH;
alias tagEMRFILLPATH * PEMRSTROKEANDFILLPATH;
alias tagEMRFILLPATH EMRSTROKEANDFILLPATH;
alias tagEMRFILLPATH * PEMRFILLPATH;
alias tagEMRFILLPATH EMRFILLPATH;
alias tagEMREXTTEXTOUTA * PEMREXTTEXTOUTW;
alias tagEMREXTTEXTOUTA EMREXTTEXTOUTW;
alias tagEMREXTTEXTOUTA * PEMREXTTEXTOUTA;
alias tagEMREXTTEXTOUTA EMREXTTEXTOUTA;
alias tagEMRTEXT * PEMRTEXT;
alias tagEMREXTSELECTCLIPRGN * PEMREXTSELECTCLIPRGN;
alias tagEMREXTSELECTCLIPRGN EMREXTSELECTCLIPRGN;
alias tagEMREXTFLOODFILL * PEMREXTFLOODFILL;
alias tagEMREXTFLOODFILL EMREXTFLOODFILL;
alias tagEMREXTCREATEPEN * PEMREXTCREATEPEN;
alias tagEMREXTCREATEPEN EMREXTCREATEPEN;
alias tagEXTLOGPEN EXTLOGPEN;
alias tagEXTLOGPEN * LPEXTLOGPEN;
alias tagEXTLOGPEN * PEXTLOGPEN;
alias tagEMREXTCREATEFONTINDIRECTW * PEMREXTCREATEFONTINDIRECTW;
alias tagEMREXTCREATEFONTINDIRECTW EMREXTCREATEFONTINDIRECTW;
alias tagEXTLOGFONTW EXTLOGFONTW;
alias tagEXTLOGFONTW * LPEXTLOGFONTW;
alias tagEXTLOGFONTW * PEXTLOGFONTW;
alias tagEXTLOGFONTA * LPEXTLOGFONTA;
alias tagEXTLOGFONTA * PEXTLOGFONTA;
alias tagLOGFONTW * LPLOGFONTW;
alias tagLOGFONTW * PLOGFONTW;
alias tagLOGFONTA * LPLOGFONTA;
alias tagLOGFONTA * PLOGFONTA;
alias tagEMREXCLUDECLIPRECT * PEMRINTERSECTCLIPRECT;
alias tagEMREXCLUDECLIPRECT EMRINTERSECTCLIPRECT;
alias tagEMREXCLUDECLIPRECT * PEMREXCLUDECLIPRECT;
alias tagEMREXCLUDECLIPRECT EMREXCLUDECLIPRECT;
alias tagEMREOF * PEMREOF;
alias tagEMREOF EMREOF;
alias tagEMRELLIPSE * PEMRRECTANGLE;
alias tagEMRELLIPSE EMRRECTANGLE;
alias tagEMRELLIPSE * PEMRELLIPSE;
alias tagEMRELLIPSE EMRELLIPSE;
alias tagEMRCREATEPEN * PEMRCREATEPEN;
alias tagEMRCREATEPEN EMRCREATEPEN;
alias tagLOGPEN LOGPEN;
alias tagLOGPEN * LPLOGPEN;
alias tagLOGPEN * PLOGPEN;
alias tagEMRCREATEPALETTE * PEMRCREATEPALETTE;
alias tagEMRCREATEPALETTE EMRCREATEPALETTE;
alias tagLOGPALETTE LOGPALETTE;
alias tagLOGPALETTE * LPLOGPALETTE;
alias tagLOGPALETTE * PLOGPALETTE;
alias tagLOGPALETTE * NPLOGPALETTE;
alias tagPALETTEENTRY * PPALETTEENTRY;
alias tagPALETTEENTRY * LPPALETTEENTRY;
alias tagEMRCREATEMONOBRUSH * PEMRCREATEMONOBRUSH;
alias tagEMRCREATEMONOBRUSH EMRCREATEMONOBRUSH;
alias tagEMRCREATEDIBPATTERNBRUSHPT * PEMRCREATEDIBPATTERNBRUSHPT;
alias tagEMRCREATEDIBPATTERNBRUSHPT EMRCREATEDIBPATTERNBRUSHPT;
alias tagEMRCREATECOLORSPACE * PEMRCREATECOLORSPACE;
alias tagEMRCREATECOLORSPACE EMRCREATECOLORSPACE;
alias tagLOGCOLORSPACEW LOGCOLORSPACEW;
alias tagLOGCOLORSPACEW * LPLOGCOLORSPACEW;
alias int LCSCSTYPE;
alias int LCSGAMUTMATCH;
alias tagCIEXYZTRIPLE CIEXYZTRIPLE;
alias tagLOGCOLORSPACEA * LPLOGCOLORSPACEA;
alias tagEMRCREATEBRUSHINDIRECT * PEMRCREATEBRUSHINDIRECT;
alias tagEMRCREATEBRUSHINDIRECT EMRCREATEBRUSHINDIRECT;
alias tagLOGBRUSH LOGBRUSH;
alias tagLOGBRUSH * LPPATTERN;
alias tagLOGBRUSH * PPATTERN;
alias tagLOGBRUSH PATTERN;
alias tagLOGBRUSH * LPLOGBRUSH;
alias tagLOGBRUSH * PLOGBRUSH;
alias tagEMRBITBLT * PEMRBITBLT;
alias tagEMRBITBLT EMRBITBLT;
alias _XFORM * LPXFORM;
alias _XFORM * PXFORM;
alias tagEMRARC * PEMRPIE;
alias tagEMRARC EMRPIE;
alias tagEMRARC * PEMRCHORD;
alias tagEMRARC EMRCHORD;
alias tagEMRARC * PEMRARCTO;
alias tagEMRARC EMRARCTO;
alias tagEMRARC * PEMRARC;
alias tagEMRARC EMRARC;
alias tagEMRANGLEARC * PEMRANGLEARC;
alias tagEMRANGLEARC EMRANGLEARC;
alias tagEMR * PEMR;
alias _DOCINFOW * LPDOCINFOW;
alias _DOCINFOW DOCINFOW;
alias _DOCINFOA * LPDOCINFOA;
alias tagDIBSECTION DIBSECTION;
alias tagBITMAP BITMAP;
alias tagBITMAPINFOHEADER BITMAPINFOHEADER;
alias _devicemodeW * PDEVMODEW;
alias _devicemodeW * LPDEVMODEW;
alias _devicemodeW DEVMODEW;
alias _devicemodeA * PDEVMODEA;
alias _devicemodeA * LPDEVMODEA;
alias tagCOLORADJUSTMENT * LPCOLORADJUSTMENT;
alias short SHORT;
alias CHARSETINFO * LPCHARSETINFO;
alias tagFONTSIGNATURE * LPFONTSIGNATURE;
alias BITMAPV4HEADER * PBITMAPV4HEADER;
alias BITMAPV4HEADER * LPBITMAPV4HEADER;
alias tagCIEXYZTRIPLE * LPCIEXYZTRIPLE;
alias tagCIEXYZ CIEXYZ;
alias tagCIEXYZ * LPCIEXYZ;
alias int FXPT2DOT30;
alias int * LPFXPT2DOT30;
alias int * LPFXPT16DOT16;
alias int FXPT16DOT16;
alias tagBITMAPINFO * PBITMAPINFO;
alias tagBITMAPINFO * LPBITMAPINFO;
alias tagBITMAPINFO BITMAPINFO;
alias tagRGBQUAD RGBQUAD;
alias tagRGBQUAD * LPRGBQUAD;
alias tagBITMAPINFOHEADER * PBITMAPINFOHEADER;
alias tagBITMAPINFOHEADER * LPBITMAPINFOHEADER;
alias _BITMAPCOREINFO * PBITMAPCOREINFO;
alias _BITMAPCOREINFO * LPBITMAPCOREINFO;
alias _BITMAPCOREINFO BITMAPCOREINFO;
alias tagBITMAPCOREHEADER BITMAPCOREHEADER;
alias tagRGBTRIPLE RGBTRIPLE;
alias tagBITMAPFILEHEADER * PBITMAPFILEHEADER;
alias tagBITMAPFILEHEADER * LPBITMAPFILEHEADER;
alias tagBITMAPFILEHEADER BITMAPFILEHEADER;
alias tagRGBTRIPLE * LPRGBTRIPLE;
alias tagBITMAPCOREHEADER * PBITMAPCOREHEADER;
alias tagBITMAPCOREHEADER * LPBITMAPCOREHEADER;
alias tagBITMAP * LPBITMAP;
alias tagBITMAP * PBITMAP;
alias _ABCFLOAT * LPABCFLOAT;
alias _ABCFLOAT ABCFLOAT;
alias _ABC * LPABC;
alias _ABC ABC;
alias tagHW_PROFILE_INFOA HW_PROFILE_INFOA;
alias tagHW_PROFILE_INFOA * LPHW_PROFILE_INFO;
alias tagHW_PROFILE_INFOA HW_PROFILE_INFO;
alias _WIN32_FIND_DATAA WIN32_FIND_DATAA;
alias _WIN32_FIND_DATAA * LPWIN32_FIND_DATA;
alias _WIN32_FIND_DATAA * PWIN32_FIND_DATA;
alias _WIN32_FIND_DATAA WIN32_FIND_DATA;
alias _STARTUPINFOA STARTUPINFOA;
alias _STARTUPINFOA * LPSTARTUPINFO;
alias _STARTUPINFOA STARTUPINFO;
alias void function(void *, uint, uint) _BCD_func__6911;
alias _BCD_func__6911 PTIMERAPCROUTINE;
alias _BCD_func__4653 PAPCFUNC;
alias int function(_EXCEPTION_POINTERS *) _BCD_func__6912;
alias _BCD_func__6912 PTOP_LEVEL_EXCEPTION_FILTER;
alias _BCD_func__6912 LPTOP_LEVEL_EXCEPTION_FILTER;
alias void function(uint, uint, _OVERLAPPED *) _BCD_func__6913;
alias _BCD_func__6913 LPOVERLAPPED_COMPLETION_ROUTINE;
alias char TCHAR;
alias int function(HINSTANCE__ *, char *, int) _BCD_func__6914;
alias _BCD_func__6914 ENUMRESTYPEPROC;
alias int function(HINSTANCE__ *, char *, char *, int) _BCD_func__6915;
alias _BCD_func__6915 ENUMRESNAMEPROC;
alias int function(HINSTANCE__ *, char *, char *, ushort, int) _BCD_func__6916;
alias _BCD_func__6916 ENUMRESLANGPROC;
alias void function(void *) _BCD_func__6917;
alias _BCD_func__6917 LPFIBER_START_ROUTINE;
alias uint function(_LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, _LARGE_INTEGER, uint, uint, void *, void *, void *) _BCD_func__6918;
alias _BCD_func__6918 LPPROGRESS_ROUTINE;
alias _WIN_CERTIFICATE * LPWIN_CERTIFICATE;
alias _WIN_CERTIFICATE WIN_CERTIFICATE;
alias _OFSTRUCT * POFSTRUCT;
alias _OFSTRUCT * LPOFSTRUCT;
alias _OFSTRUCT OFSTRUCT;
alias _PROCESS_HEAP_ENTRY * LPPROCESS_HEAP_ENTRY;
alias _PROCESS_HEAP_ENTRY PROCESS_HEAP_ENTRY;
alias _LDT_ENTRY * LPLDT_ENTRY;
alias _LDT_ENTRY * PLDT_ENTRY;
alias _LDT_ENTRY LDT_ENTRY;
alias _MEMORYSTATUS * LPMEMORYSTATUS;
alias _MEMORYSTATUS MEMORYSTATUS;
alias _TIME_ZONE_INFORMATION * LPTIME_ZONE_INFORMATION;
alias _TIME_ZONE_INFORMATION TIME_ZONE_INFORMATION;
alias _SYSTEMTIME SYSTEMTIME;
alias _SYSTEM_POWER_STATUS * LPSYSTEM_POWER_STATUS;
alias _SYSTEM_POWER_STATUS SYSTEM_POWER_STATUS;
alias _SYSTEM_INFO * LPSYSTEM_INFO;
alias _SYSTEM_INFO SYSTEM_INFO;
enum _GET_FILEEX_INFO_LEVELS {
GetFileExInfoStandard=0,
GetFileExMaxInfoLevel=1,
}
alias int GET_FILEEX_INFO_LEVELS;
alias tagHW_PROFILE_INFOW * LPHW_PROFILE_INFOW;
alias tagHW_PROFILE_INFOW HW_PROFILE_INFOW;
alias tagHW_PROFILE_INFOA * LPHW_PROFILE_INFOA;
enum _ACL_INFORMATION_CLASS {
AclRevisionInformation=1,
AclSizeInformation=2,
}
alias int ACL_INFORMATION_CLASS;
enum _FINDEX_SEARCH_OPS {
FindExSearchNameMatch=0,
FindExSearchLimitToDirectories=1,
FindExSearchLimitToDevices=2,
FindExSearchMaxSearchOp=3,
}
alias int FINDEX_SEARCH_OPS;
enum _FINDEX_INFO_LEVELS {
FindExInfoStandard=0,
FindExInfoMaxInfoLevel=1,
}
alias int FINDEX_INFO_LEVELS;
alias _WIN32_STREAM_ID * LPWIN32_STREAM_ID;
alias _WIN32_STREAM_ID WIN32_STREAM_ID;
alias _LARGE_INTEGER LARGE_INTEGER;
alias _WIN32_FIND_DATAW * LPWIN32_FIND_DATAW;
alias _WIN32_FIND_DATAW * PWIN32_FIND_DATAW;
alias _WIN32_FIND_DATAW WIN32_FIND_DATAW;
alias _FILETIME FILETIME;
alias _WIN32_FIND_DATAA * LPWIN32_FIND_DATAA;
alias _WIN32_FIND_DATAA * PWIN32_FIND_DATAA;
alias _WIN32_FILE_ATTRIBUTE_DATA * LPWIN32_FILE_ATTRIBUTE_DATA;
alias _WIN32_FILE_ATTRIBUTE_DATA WIN32_FILE_ATTRIBUTE_DATA;
alias _SYSTEMTIME * LPSYSTEMTIME;
alias _CRITICAL_SECTION * LPCRITICAL_SECTION;
alias _CRITICAL_SECTION * PCRITICAL_SECTION;
alias _CRITICAL_SECTION CRITICAL_SECTION;
alias _CRITICAL_SECTION_DEBUG * PCRITICAL_SECTION_DEBUG;
alias _CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
alias _LIST_ENTRY LIST_ENTRY;
alias _PROCESS_INFORMATION * LPPROCESS_INFORMATION;
alias _PROCESS_INFORMATION * PPROCESS_INFORMATION;
alias _PROCESS_INFORMATION PROCESS_INFORMATION;
alias _STARTUPINFOW * LPSTARTUPINFOW;
alias _STARTUPINFOW STARTUPINFOW;
alias char * PBYTE;
alias _STARTUPINFOA * LPSTARTUPINFOA;
alias _OVERLAPPED * LPOVERLAPPED;
alias _OVERLAPPED * POVERLAPPED;
alias _OVERLAPPED OVERLAPPED;
alias _DEBUG_EVENT * LPDEBUG_EVENT;
alias _DEBUG_EVENT DEBUG_EVENT;
alias _EXCEPTION_DEBUG_INFO EXCEPTION_DEBUG_INFO;
alias _CREATE_THREAD_DEBUG_INFO CREATE_THREAD_DEBUG_INFO;
alias _CREATE_PROCESS_DEBUG_INFO CREATE_PROCESS_DEBUG_INFO;
alias _EXIT_THREAD_DEBUG_INFO EXIT_THREAD_DEBUG_INFO;
alias _EXIT_PROCESS_DEBUG_INFO EXIT_PROCESS_DEBUG_INFO;
alias _LOAD_DLL_DEBUG_INFO LOAD_DLL_DEBUG_INFO;
alias _UNLOAD_DLL_DEBUG_INFO UNLOAD_DLL_DEBUG_INFO;
alias _OUTPUT_DEBUG_STRING_INFO OUTPUT_DEBUG_STRING_INFO;
alias _RIP_INFO RIP_INFO;
alias _RIP_INFO * LPRIP_INFO;
alias _OUTPUT_DEBUG_STRING_INFO * LPOUTPUT_DEBUG_STRING_INFO;
alias _UNLOAD_DLL_DEBUG_INFO * LPUNLOAD_DLL_DEBUG_INFO;
alias _LOAD_DLL_DEBUG_INFO * LPLOAD_DLL_DEBUG_INFO;
alias _EXIT_PROCESS_DEBUG_INFO * LPEXIT_PROCESS_DEBUG_INFO;
alias _EXIT_THREAD_DEBUG_INFO * LPEXIT_THREAD_DEBUG_INFO;
alias _EXCEPTION_DEBUG_INFO * LPEXCEPTION_DEBUG_INFO;
alias _EXCEPTION_RECORD EXCEPTION_RECORD;
alias _CREATE_THREAD_DEBUG_INFO * LPCREATE_THREAD_DEBUG_INFO;
alias uint function(void *) _BCD_func__7134;
alias _BCD_func__7134 LPTHREAD_START_ROUTINE;
alias _CREATE_PROCESS_DEBUG_INFO * LPCREATE_PROCESS_DEBUG_INFO;
alias _COMSTAT * LPCOMSTAT;
alias _COMSTAT COMSTAT;
alias _COMMTIMEOUTS * LPCOMMTIMEOUTS;
alias _COMMTIMEOUTS COMMTIMEOUTS;
alias _COMMPROP * LPCOMMPROP;
alias _COMMPROP COMMPROP;
alias _COMM_CONFIG * LPCOMMCONFIG;
alias _COMM_CONFIG COMMCONFIG;
alias _DCB DCB;
alias _DCB * LPDCB;
alias _BY_HANDLE_FILE_INFORMATION * LPBY_HANDLE_FILE_INFORMATION;
alias _BY_HANDLE_FILE_INFORMATION BY_HANDLE_FILE_INFORMATION;
alias _FILETIME * LPFILETIME;
alias _FILETIME * PFILETIME;
alias _INPUT_RECORD * PINPUT_RECORD;
alias _INPUT_RECORD INPUT_RECORD;
alias _KEY_EVENT_RECORD KEY_EVENT_RECORD;
alias _MOUSE_EVENT_RECORD MOUSE_EVENT_RECORD;
alias _WINDOW_BUFFER_SIZE_RECORD WINDOW_BUFFER_SIZE_RECORD;
alias _MENU_EVENT_RECORD MENU_EVENT_RECORD;
alias _FOCUS_EVENT_RECORD FOCUS_EVENT_RECORD;
alias _MENU_EVENT_RECORD * PMENU_EVENT_RECORD;
alias _COORD COORD;
alias _BCD_func__4894 PHANDLER_ROUTINE;
alias _CONSOLE_SCREEN_BUFFER_INFO * PCONSOLE_SCREEN_BUFFER_INFO;
alias _CONSOLE_SCREEN_BUFFER_INFO CONSOLE_SCREEN_BUFFER_INFO;
alias _SMALL_RECT SMALL_RECT;
alias _CONSOLE_FONT_INFO * PCONSOLE_FONT_INFO;
alias _CONSOLE_FONT_INFO CONSOLE_FONT_INFO;
alias _COORD * PCOORD;
alias _CONSOLE_CURSOR_INFO * PCONSOLE_CURSOR_INFO;
alias _CONSOLE_CURSOR_INFO CONSOLE_CURSOR_INFO;
alias _SMALL_RECT * PSMALL_RECT;
alias _CHAR_INFO * PCHAR_INFO;
alias _CHAR_INFO CHAR_INFO;
alias tagPOINTS * LPPOINTS;
alias tagPOINTS * PPOINTS;
alias tagSIZE * LPSIZEL;
alias tagSIZE * PSIZEL;
alias tagSIZE * LPSIZE;
alias tagSIZE * PSIZE;
alias tagSIZE SIZE;
alias tagPOINT * LPPOINTL;
alias tagPOINT * PPOINTL;
alias tagPOINT * LPPOINT;
alias tagPOINT * PPOINT;
alias tagRECTL * LPCRECTL;
alias tagRECTL * LPRECTL;
alias tagRECTL * PRECTL;
alias tagRECT * LPCRECT;
alias tagRECT * LPRECT;
alias tagRECT * PRECT;
alias int function() _BCD_func__7321;
alias _BCD_func__7321 PROC;
alias _BCD_func__7321 NEARPROC;
alias _BCD_func__7321 FARPROC;
alias int HFILE;
alias HKL__ * HKL;
alias HWINSTA__ * HWINSTA;
alias HTASK__ * HTASK;
alias HSTR__ * HSTR;
alias HRSRC__ * HRSRC;
alias HRGN__ * HRGN;
alias HPEN__ * HPEN;
alias HPALETTE__ * HPALETTE;
alias HINSTANCE__ * HMODULE;
alias HKEY__ * HKEY;
alias HKEY__ * * PHKEY;
alias HWINEVENTHOOK__ * HWINEVENTHOOK;
alias HTERMINAL__ * HTERMINAL;
alias HMONITOR__ * HMONITOR;
alias HFONT__ * HFONT;
alias HENHMETAFILE__ * HENHMETAFILE;
alias HDESK__ * HDESK;
alias HGLRC__ * HGLRC;
alias HCOLORSPACE__ * HCOLORSPACE;
alias HACCEL__ * HACCEL;
alias void * LOCALHANDLE;
alias void * GLOBALHANDLE;
alias void * HLOCAL;
alias void * HGLOBAL;
alias int HRESULT;
alias _OSVERSIONINFOEXA OSVERSIONINFOEXA;
alias _OSVERSIONINFOEXA * LPOSVERSIONINFOEX;
alias _OSVERSIONINFOEXA * POSVERSIONINFOEX;
alias _OSVERSIONINFOEXA OSVERSIONINFOEX;
alias _OSVERSIONINFOA OSVERSIONINFOA;
alias _OSVERSIONINFOA * LPOSVERSIONINFO;
alias _OSVERSIONINFOA * POSVERSIONINFO;
alias _OSVERSIONINFOA OSVERSIONINFO;
alias _ADMINISTRATOR_POWER_POLICY * PADMINISTRATOR_POWER_POLICY;
alias _ADMINISTRATOR_POWER_POLICY ADMINISTRATOR_POWER_POLICY;
enum _SYSTEM_POWER_STATE {
PowerSystemUnspecified=0,
PowerSystemWorking=1,
PowerSystemSleeping1=2,
PowerSystemSleeping2=3,
PowerSystemSleeping3=4,
PowerSystemHibernate=5,
PowerSystemShutdown=6,
PowerSystemMaximum=7,
}
alias int SYSTEM_POWER_STATE;
alias _PROCESSOR_POWER_POLICY * PPROCESSOR_POWER_POLICY;
alias _PROCESSOR_POWER_POLICY PROCESSOR_POWER_POLICY;
alias char UCHAR;
alias _PROCESSOR_POWER_POLICY_INFO PROCESSOR_POWER_POLICY_INFO;
alias _PROCESSOR_POWER_POLICY_INFO * PPROCESSOR_POWER_POLICY_INFO;
alias _SYSTEM_POWER_INFORMATION * PSYSTEM_POWER_INFORMATION;
alias _SYSTEM_POWER_INFORMATION SYSTEM_POWER_INFORMATION;
enum _POWER_INFORMATION_LEVEL {
SystemPowerPolicyAc=0,
SystemPowerPolicyDc=1,
VerifySystemPolicyAc=2,
VerifySystemPolicyDc=3,
SystemPowerCapabilities=4,
SystemBatteryState=5,
SystemPowerStateHandler=6,
ProcessorStateHandler=7,
SystemPowerPolicyCurrent=8,
AdministratorPowerPolicy=9,
SystemReserveHiberFile=10,
ProcessorInformation=11,
SystemPowerInformation=12,
ProcessorStateHandler2=13,
LastWakeTime=14,
LastSleepTime=15,
SystemExecutionState=16,
SystemPowerStateNotifyHandler=17,
ProcessorPowerPolicyAc=18,
ProcessorPowerPolicyDc=19,
VerifyProcessorPowerPolicyAc=20,
VerifyProcessorPowerPolicyDc=21,
ProcessorPowerPolicyCurrent=22,
}
alias int POWER_INFORMATION_LEVEL;
alias _SYSTEM_BATTERY_STATE * PSYSTEM_BATTERY_STATE;
alias _SYSTEM_BATTERY_STATE SYSTEM_BATTERY_STATE;
alias char BOOLEAN;
alias _SYSTEM_POWER_CAPABILITIES * PSYSTEM_POWER_CAPABILITIES;
alias _SYSTEM_POWER_CAPABILITIES SYSTEM_POWER_CAPABILITIES;
alias _SYSTEM_POWER_POLICY * PSYSTEM_POWER_POLICY;
alias _SYSTEM_POWER_POLICY SYSTEM_POWER_POLICY;
alias _POWER_ACTION_POLICY POWER_ACTION_POLICY;
alias _SYSTEM_POWER_LEVEL SYSTEM_POWER_LEVEL;
alias _SYSTEM_POWER_LEVEL * PSYSTEM_POWER_LEVEL;
alias _POWER_ACTION_POLICY * PPOWER_ACTION_POLICY;
enum POWER_ACTION {
PowerActionNone=0,
PowerActionReserved=1,
PowerActionSleep=2,
PowerActionHibernate=3,
PowerActionShutdown=4,
PowerActionShutdownReset=5,
PowerActionShutdownOff=6,
PowerActionWarmEject=7,
}
alias BATTERY_REPORTING_SCALE * PBATTERY_REPORTING_SCALE;
enum _DEVICE_POWER_STATE {
PowerDeviceUnspecified=0,
PowerDeviceD0=1,
PowerDeviceD1=2,
PowerDeviceD2=3,
PowerDeviceD3=4,
PowerDeviceMaximum=5,
}
alias int * PDEVICE_POWER_STATE;
alias int DEVICE_POWER_STATE;
alias int * PPOWER_ACTION;
alias int * PSYSTEM_POWER_STATE;
enum _LATENCY_TIME {
LT_DONT_CARE=0,
LT_LOWEST_LATENCY=1,
}
alias int * PLATENCY_TIME;
alias int LATENCY_TIME;
alias _JOBOBJECT_JOBSET_INFORMATION * PJOBOBJECT_JOBSET_INFORMATION;
alias _JOBOBJECT_JOBSET_INFORMATION JOBOBJECT_JOBSET_INFORMATION;
alias _JOBOBJECT_EXTENDED_LIMIT_INFORMATION * PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;
alias _JOBOBJECT_EXTENDED_LIMIT_INFORMATION JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
alias _JOBOBJECT_BASIC_LIMIT_INFORMATION JOBOBJECT_BASIC_LIMIT_INFORMATION;
alias _IO_COUNTERS IO_COUNTERS;
alias uint SIZE_T;
alias _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION * PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
alias _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
alias _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
alias _JOBOBJECT_ASSOCIATE_COMPLETION_PORT * PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
alias _JOBOBJECT_ASSOCIATE_COMPLETION_PORT JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
alias _JOBOBJECT_END_OF_JOB_TIME_INFORMATION * PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
alias _JOBOBJECT_END_OF_JOB_TIME_INFORMATION JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
alias _JOBOBJECT_SECURITY_LIMIT_INFORMATION * PJOBOBJECT_SECURITY_LIMIT_INFORMATION;
alias _JOBOBJECT_SECURITY_LIMIT_INFORMATION JOBOBJECT_SECURITY_LIMIT_INFORMATION;
alias _TOKEN_GROUPS * PTOKEN_GROUPS;
alias _TOKEN_PRIVILEGES * PTOKEN_PRIVILEGES;
alias _JOBOBJECT_BASIC_UI_RESTRICTIONS * PJOBOBJECT_BASIC_UI_RESTRICTIONS;
alias _JOBOBJECT_BASIC_UI_RESTRICTIONS JOBOBJECT_BASIC_UI_RESTRICTIONS;
alias _JOBOBJECT_BASIC_PROCESS_ID_LIST * PJOBOBJECT_BASIC_PROCESS_ID_LIST;
alias _JOBOBJECT_BASIC_PROCESS_ID_LIST JOBOBJECT_BASIC_PROCESS_ID_LIST;
alias _JOBOBJECT_BASIC_LIMIT_INFORMATION * PJOBOBJECT_BASIC_LIMIT_INFORMATION;
alias _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION * PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
enum _JOBOBJECTINFOCLASS {
JobObjectBasicAccountingInformation=1,
JobObjectBasicLimitInformation=2,
JobObjectBasicProcessIdList=3,
JobObjectBasicUIRestrictions=4,
JobObjectSecurityLimitInformation=5,
JobObjectEndOfJobTimeInformation=6,
JobObjectAssociateCompletionPortInformation=7,
JobObjectBasicAndIoAccountingInformation=8,
JobObjectExtendedLimitInformation=9,
JobObjectJobSetInformation=10,
MaxJobObjectInfoClass=11,
}
alias int JOBOBJECTINFOCLASS;
alias _FILE_SEGMENT_ELEMENT * PFILE_SEGMENT_ELEMENT;
alias _FILE_SEGMENT_ELEMENT FILE_SEGMENT_ELEMENT;
alias void * PVOID64;
alias ulong DWORDLONG;
alias ulong ULONGLONG;
alias _REPARSE_POINT_INFORMATION * PREPARSE_POINT_INFORMATION;
alias _REPARSE_POINT_INFORMATION REPARSE_POINT_INFORMATION;
alias _REPARSE_GUID_DATA_BUFFER * PREPARSE_GUID_DATA_BUFFER;
alias _REPARSE_GUID_DATA_BUFFER REPARSE_GUID_DATA_BUFFER;
alias _GUID GUID;
alias _REPARSE_DATA_BUFFER * PREPARSE_DATA_BUFFER;
alias _REPARSE_DATA_BUFFER REPARSE_DATA_BUFFER;
alias _NT_TIB * PNT_TIB;
alias _NT_TIB NT_TIB;
enum _CM_ERROR_CONTROL_TYPE {
IgnoreError=0,
NormalError=1,
SevereError=2,
CriticalError=3,
}
alias int SERVICE_ERROR_TYPE;
enum _CM_SERVICE_LOAD_TYPE {
BootLoad=0,
SystemLoad=1,
AutoLoad=2,
DemandLoad=3,
DisableLoad=4,
}
alias int SERVICE_LOAD_TYPE;
enum _CM_SERVICE_NODE_TYPE {
DriverType=1,
FileSystemType=2,
Win32ServiceOwnProcess=16,
Win32ServiceShareProcess=32,
AdapterType=4,
RecognizerType=8,
}
alias int SERVICE_NODE_TYPE;
alias _IMAGE_SEPARATE_DEBUG_HEADER * PIMAGE_SEPARATE_DEBUG_HEADER;
alias _IMAGE_SEPARATE_DEBUG_HEADER IMAGE_SEPARATE_DEBUG_HEADER;
alias _IMAGE_FUNCTION_ENTRY * PIMAGE_FUNCTION_ENTRY;
alias _IMAGE_FUNCTION_ENTRY IMAGE_FUNCTION_ENTRY;
alias _IMAGE_DEBUG_MISC * PIMAGE_DEBUG_MISC;
alias _IMAGE_DEBUG_MISC IMAGE_DEBUG_MISC;
alias _FPO_DATA * PFPO_DATA;
alias _FPO_DATA FPO_DATA;
alias _IMAGE_DEBUG_DIRECTORY * PIMAGE_DEBUG_DIRECTORY;
alias _IMAGE_DEBUG_DIRECTORY IMAGE_DEBUG_DIRECTORY;
alias _IMAGE_RUNTIME_FUNCTION_ENTRY * PIMAGE_RUNTIME_FUNCTION_ENTRY;
alias _IMAGE_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
alias _IMAGE_LOAD_CONFIG_DIRECTORY * PIMAGE_LOAD_CONFIG_DIRECTORY;
alias _IMAGE_LOAD_CONFIG_DIRECTORY IMAGE_LOAD_CONFIG_DIRECTORY;
alias _IMAGE_RESOURCE_DATA_ENTRY * PIMAGE_RESOURCE_DATA_ENTRY;
alias _IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY;
alias _IMAGE_RESOURCE_DIR_STRING_U * PIMAGE_RESOURCE_DIR_STRING_U;
alias _IMAGE_RESOURCE_DIR_STRING_U IMAGE_RESOURCE_DIR_STRING_U;
alias _IMAGE_RESOURCE_DIRECTORY_STRING * PIMAGE_RESOURCE_DIRECTORY_STRING;
alias _IMAGE_RESOURCE_DIRECTORY_STRING IMAGE_RESOURCE_DIRECTORY_STRING;
alias _IMAGE_RESOURCE_DIRECTORY_ENTRY * PIMAGE_RESOURCE_DIRECTORY_ENTRY;
alias _IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY;
alias _IMAGE_RESOURCE_DIRECTORY * PIMAGE_RESOURCE_DIRECTORY;
alias _IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY;
alias _IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;
alias _IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY;
alias _IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY32;
alias _IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
alias _IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;
alias _IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY64;
alias void function(void *, uint, void *) _BCD_func__7751;
alias _BCD_func__7751 PIMAGE_TLS_CALLBACK;
alias _IMAGE_BOUND_FORWARDER_REF * PIMAGE_BOUND_FORWARDER_REF;
alias _IMAGE_BOUND_FORWARDER_REF IMAGE_BOUND_FORWARDER_REF;
alias _IMAGE_BOUND_IMPORT_DESCRIPTOR * PIMAGE_BOUND_IMPORT_DESCRIPTOR;
alias _IMAGE_BOUND_IMPORT_DESCRIPTOR IMAGE_BOUND_IMPORT_DESCRIPTOR;
alias _IMAGE_IMPORT_DESCRIPTOR * PIMAGE_IMPORT_DESCRIPTOR;
alias _IMAGE_IMPORT_DESCRIPTOR IMAGE_IMPORT_DESCRIPTOR;
alias _IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;
alias _IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA;
alias _IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA32;
alias _IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
alias _IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;
alias _IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA64;
alias _IMAGE_IMPORT_BY_NAME * PIMAGE_IMPORT_BY_NAME;
alias _IMAGE_IMPORT_BY_NAME IMAGE_IMPORT_BY_NAME;
alias _IMAGE_EXPORT_DIRECTORY * PIMAGE_EXPORT_DIRECTORY;
alias _IMAGE_EXPORT_DIRECTORY IMAGE_EXPORT_DIRECTORY;
alias _IMAGE_ARCHIVE_MEMBER_HEADER * PIMAGE_ARCHIVE_MEMBER_HEADER;
alias _IMAGE_ARCHIVE_MEMBER_HEADER IMAGE_ARCHIVE_MEMBER_HEADER;
alias _IMAGE_LINENUMBER * PIMAGE_LINENUMBER;
alias _IMAGE_LINENUMBER IMAGE_LINENUMBER;
alias _IMAGE_BASE_RELOCATION * PIMAGE_BASE_RELOCATION;
alias _IMAGE_BASE_RELOCATION IMAGE_BASE_RELOCATION;
alias _IMAGE_RELOCATION * PIMAGE_RELOCATION;
alias _IMAGE_RELOCATION IMAGE_RELOCATION;
alias _IMAGE_COFF_SYMBOLS_HEADER * PIMAGE_COFF_SYMBOLS_HEADER;
alias _IMAGE_COFF_SYMBOLS_HEADER IMAGE_COFF_SYMBOLS_HEADER;
alias _IMAGE_AUX_SYMBOL * PIMAGE_AUX_SYMBOL;
alias _IMAGE_AUX_SYMBOL IMAGE_AUX_SYMBOL;
alias _IMAGE_SYMBOL * PIMAGE_SYMBOL;
alias _IMAGE_SYMBOL IMAGE_SYMBOL;
alias _IMAGE_SECTION_HEADER * PIMAGE_SECTION_HEADER;
alias _IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER;
alias _IMAGE_ROM_HEADERS * PIMAGE_ROM_HEADERS;
alias _IMAGE_ROM_HEADERS IMAGE_ROM_HEADERS;
alias _IMAGE_FILE_HEADER IMAGE_FILE_HEADER;
alias _IMAGE_ROM_OPTIONAL_HEADER IMAGE_ROM_OPTIONAL_HEADER;
alias _IMAGE_NT_HEADERS * PIMAGE_NT_HEADERS;
alias _IMAGE_NT_HEADERS IMAGE_NT_HEADERS;
alias _IMAGE_OPTIONAL_HEADER IMAGE_OPTIONAL_HEADER;
alias _IMAGE_OS2_HEADER * PIMAGE_OS2_HEADER;
alias _IMAGE_OS2_HEADER IMAGE_OS2_HEADER;
alias _IMAGE_DOS_HEADER * PIMAGE_DOS_HEADER;
alias _IMAGE_DOS_HEADER IMAGE_DOS_HEADER;
alias _IMAGE_ROM_OPTIONAL_HEADER * PIMAGE_ROM_OPTIONAL_HEADER;
alias _IMAGE_OPTIONAL_HEADER * PIMAGE_OPTIONAL_HEADER;
alias _IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY;
alias _IMAGE_DATA_DIRECTORY * PIMAGE_DATA_DIRECTORY;
alias _IMAGE_FILE_HEADER * PIMAGE_FILE_HEADER;
alias _IMAGE_VXD_HEADER * PIMAGE_VXD_HEADER;
alias _IMAGE_VXD_HEADER IMAGE_VXD_HEADER;
alias _OSVERSIONINFOEXW * LPOSVERSIONINFOEXW;
alias _OSVERSIONINFOEXW * POSVERSIONINFOEXW;
alias _OSVERSIONINFOEXW OSVERSIONINFOEXW;
alias _OSVERSIONINFOEXA * LPOSVERSIONINFOEXA;
alias _OSVERSIONINFOEXA * POSVERSIONINFOEXA;
alias _OSVERSIONINFOW * LPOSVERSIONINFOW;
alias _OSVERSIONINFOW * POSVERSIONINFOW;
alias _OSVERSIONINFOW OSVERSIONINFOW;
alias _OSVERSIONINFOA * LPOSVERSIONINFOA;
alias _OSVERSIONINFOA * POSVERSIONINFOA;
alias _EVENTLOGRECORD * PEVENTLOGRECORD;
alias _EVENTLOGRECORD EVENTLOGRECORD;
alias _RTL_CRITICAL_SECTION * PRTL_CRITICAL_SECTION;
alias _RTL_CRITICAL_SECTION RTL_CRITICAL_SECTION;
alias _RTL_CRITICAL_SECTION_DEBUG * PRTL_CRITICAL_SECTION_DEBUG;
alias _RTL_CRITICAL_SECTION_DEBUG RTL_CRITICAL_SECTION_DEBUG;
alias _SLIST_HEADER * PSLIST_HEADER;
alias _SLIST_HEADER SLIST_HEADER;
alias _SINGLE_LIST_ENTRY SINGLE_LIST_ENTRY;
alias _SINGLE_LIST_ENTRY * PSINGLE_LIST_ENTRY;
alias _LIST_ENTRY * PLIST_ENTRY;
alias _MESSAGE_RESOURCE_DATA * PMESSAGE_RESOURCE_DATA;
alias _MESSAGE_RESOURCE_DATA MESSAGE_RESOURCE_DATA;
alias _MESSAGE_RESOURCE_BLOCK MESSAGE_RESOURCE_BLOCK;
alias _MESSAGE_RESOURCE_BLOCK * PMESSAGE_RESOURCE_BLOCK;
alias _MESSAGE_RESOURCE_ENTRY * PMESSAGE_RESOURCE_ENTRY;
alias _MESSAGE_RESOURCE_ENTRY MESSAGE_RESOURCE_ENTRY;
alias _MEMORY_BASIC_INFORMATION * PMEMORY_BASIC_INFORMATION;
alias _MEMORY_BASIC_INFORMATION MEMORY_BASIC_INFORMATION;
alias _TAPE_CREATE_PARTITION * PTAPE_CREATE_PARTITION;
alias _TAPE_CREATE_PARTITION TAPE_CREATE_PARTITION;
alias _TAPE_WRITE_MARKS * PTAPE_WRITE_MARKS;
alias _TAPE_WRITE_MARKS TAPE_WRITE_MARKS;
alias _TAPE_SET_POSITION * PTAPE_SET_POSITION;
alias _TAPE_SET_POSITION TAPE_SET_POSITION;
alias _TAPE_SET_MEDIA_PARAMETERS * PTAPE_SET_MEDIA_PARAMETERS;
alias _TAPE_SET_MEDIA_PARAMETERS TAPE_SET_MEDIA_PARAMETERS;
alias _TAPE_SET_DRIVE_PARAMETERS * PTAPE_SET_DRIVE_PARAMETERS;
alias _TAPE_SET_DRIVE_PARAMETERS TAPE_SET_DRIVE_PARAMETERS;
alias _TAPE_PREPARE * PTAPE_PREPARE;
alias _TAPE_PREPARE TAPE_PREPARE;
alias _TAPE_GET_POSITION * PTAPE_GET_POSITION;
alias _TAPE_GET_POSITION TAPE_GET_POSITION;
alias _TAPE_GET_MEDIA_PARAMETERS * PTAPE_GET_MEDIA_PARAMETERS;
alias _TAPE_GET_MEDIA_PARAMETERS TAPE_GET_MEDIA_PARAMETERS;
alias _TAPE_GET_DRIVE_PARAMETERS * PTAPE_GET_DRIVE_PARAMETERS;
alias _TAPE_GET_DRIVE_PARAMETERS TAPE_GET_DRIVE_PARAMETERS;
alias _TAPE_ERASE * PTAPE_ERASE;
alias _TAPE_ERASE TAPE_ERASE;
alias _FILE_NOTIFY_INFORMATION * PFILE_NOTIFY_INFORMATION;
alias _FILE_NOTIFY_INFORMATION FILE_NOTIFY_INFORMATION;
alias _IO_COUNTERS * PIO_COUNTERS;
alias _QUOTA_LIMITS * PQUOTA_LIMITS;
alias _QUOTA_LIMITS QUOTA_LIMITS;
enum _SID_NAME_USE {
SidTypeUser=1,
SidTypeGroup=2,
SidTypeDomain=3,
SidTypeAlias=4,
SidTypeWellKnownGroup=5,
SidTypeDeletedAccount=6,
SidTypeInvalid=7,
SidTypeUnknown=8,
SidTypeComputer=9,
}
alias int * PSID_NAME_USE;
alias int SID_NAME_USE;
enum _TOKEN_INFORMATION_CLASS {
TokenUser=1,
TokenGroups=2,
TokenPrivileges=3,
TokenOwner=4,
TokenPrimaryGroup=5,
TokenDefaultDacl=6,
TokenSource=7,
TokenType=8,
TokenImpersonationLevel=9,
TokenStatistics=10,
TokenRestrictedSids=11,
TokenSessionId=12,
TokenGroupsAndPrivileges=13,
TokenSessionReference=14,
TokenSandBoxInert=15,
TokenAuditPolicy=16,
TokenOrigin=17,
}
alias int TOKEN_INFORMATION_CLASS;
alias _SECURITY_DESCRIPTOR * PISECURITY_DESCRIPTOR;
alias _SECURITY_DESCRIPTOR * PSECURITY_DESCRIPTOR;
alias _SECURITY_DESCRIPTOR SECURITY_DESCRIPTOR;
alias ushort SECURITY_DESCRIPTOR_CONTROL;
alias void * PSID;
alias _ACL * PACL;
alias ushort * PSECURITY_DESCRIPTOR_CONTROL;
alias uint * PSECURITY_INFORMATION;
alias uint SECURITY_INFORMATION;
alias _TOKEN_USER * PTOKEN_USER;
alias _TOKEN_USER TOKEN_USER;
alias _SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES;
alias _TOKEN_STATISTICS * PTOKEN_STATISTICS;
alias _TOKEN_STATISTICS TOKEN_STATISTICS;
alias _LUID LUID;
enum tagTOKEN_TYPE {
TokenPrimary=1,
TokenImpersonation=2,
}
alias int TOKEN_TYPE;
enum _SECURITY_IMPERSONATION_LEVEL {
SecurityAnonymous=0,
SecurityIdentification=1,
SecurityImpersonation=2,
SecurityDelegation=3,
}
alias int SECURITY_IMPERSONATION_LEVEL;
alias int * PTOKEN_TYPE;
alias _TOKEN_PRIVILEGES * LPTOKEN_PRIVILEGES;
alias _TOKEN_PRIVILEGES TOKEN_PRIVILEGES;
alias _LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES;
alias _TOKEN_PRIMARY_GROUP * PTOKEN_PRIMARY_GROUP;
alias _TOKEN_PRIMARY_GROUP TOKEN_PRIMARY_GROUP;
alias _TOKEN_OWNER * PTOKEN_OWNER;
alias _TOKEN_OWNER TOKEN_OWNER;
alias _TOKEN_GROUPS * LPTOKEN_GROUPS;
alias _TOKEN_GROUPS TOKEN_GROUPS;
alias _TOKEN_DEFAULT_DACL * PTOKEN_DEFAULT_DACL;
alias _TOKEN_DEFAULT_DACL TOKEN_DEFAULT_DACL;
alias _TOKEN_CONTROL * PTOKEN_CONTROL;
alias _TOKEN_CONTROL TOKEN_CONTROL;
alias _TOKEN_SOURCE TOKEN_SOURCE;
alias _TOKEN_SOURCE * PTOKEN_SOURCE;
alias _SID_AND_ATTRIBUTES [1] SID_AND_ATTRIBUTES_ARRAY;
alias _SID_AND_ATTRIBUTES [1] * PSID_AND_ATTRIBUTES_ARRAY;
alias _SID_AND_ATTRIBUTES * PSID_AND_ATTRIBUTES;
alias _SID * PISID;
alias _SID SID;
alias _SID_IDENTIFIER_AUTHORITY SID_IDENTIFIER_AUTHORITY;
alias _SID_IDENTIFIER_AUTHORITY * LPSID_IDENTIFIER_AUTHORITY;
alias _SID_IDENTIFIER_AUTHORITY * PSID_IDENTIFIER_AUTHORITY;
alias _SE_IMPERSONATION_STATE * PSE_IMPERSONATION_STATE;
alias _SE_IMPERSONATION_STATE SE_IMPERSONATION_STATE;
alias void * PACCESS_TOKEN;
alias _SECURITY_QUALITY_OF_SERVICE * PSECURITY_QUALITY_OF_SERVICE;
alias _SECURITY_QUALITY_OF_SERVICE SECURITY_QUALITY_OF_SERVICE;
alias char SECURITY_CONTEXT_TRACKING_MODE;
alias char * PSECURITY_CONTEXT_TRACKING_MODE;
alias int * PSECURITY_IMPERSONATION_LEVEL;
alias _SECURITY_ATTRIBUTES * LPSECURITY_ATTRIBUTES;
alias _SECURITY_ATTRIBUTES * PSECURITY_ATTRIBUTES;
alias _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;
alias _PRIVILEGE_SET * PPRIVILEGE_SET;
alias _PRIVILEGE_SET PRIVILEGE_SET;
alias _LUID_AND_ATTRIBUTES [1] LUID_AND_ATTRIBUTES_ARRAY;
alias _LUID_AND_ATTRIBUTES [1] * PLUID_AND_ATTRIBUTES_ARRAY;
alias _LUID_AND_ATTRIBUTES * PLUID_AND_ATTRIBUTES;
alias _LUID * PLUID;
alias _ULARGE_INTEGER * PULARGE_INTEGER;
alias _ULARGE_INTEGER ULARGE_INTEGER;
alias _LARGE_INTEGER * PLARGE_INTEGER;
alias long LONGLONG;
alias _EXCEPTION_POINTERS * LPEXCEPTION_POINTERS;
alias _EXCEPTION_POINTERS * PEXCEPTION_POINTERS;
alias _EXCEPTION_POINTERS EXCEPTION_POINTERS;
alias _EXCEPTION_RECORD * PEXCEPTION_RECORD;
alias _CONTEXT CONTEXT;
alias _CONTEXT * PCONTEXT;
alias _EXCEPTION_RECORD * LPEXCEPTION_RECORD;
alias _CONTEXT * LPCONTEXT;
alias _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;
alias _ACL_SIZE_INFORMATION ACL_SIZE_INFORMATION;
alias _ACL_REVISION_INFORMATION ACL_REVISION_INFORMATION;
alias _ACL ACL;
alias _SYSTEM_ALARM_OBJECT_ACE * PSYSTEM_ALARM_OBJECT_ACE;
alias _SYSTEM_ALARM_OBJECT_ACE SYSTEM_ALARM_OBJECT_ACE;
alias _ACE_HEADER ACE_HEADER;
alias _SYSTEM_AUDIT_OBJECT_ACE * PSYSTEM_AUDIT_OBJECT_ACE;
alias _SYSTEM_AUDIT_OBJECT_ACE SYSTEM_AUDIT_OBJECT_ACE;
alias _ACCESS_DENIED_OBJECT_ACE * PACCESS_DENIED_OBJECT_ACE;
alias _ACCESS_DENIED_OBJECT_ACE ACCESS_DENIED_OBJECT_ACE;
alias _ACCESS_ALLOWED_OBJECT_ACE * PACCESS_ALLOWED_OBJECT_ACE;
alias _ACCESS_ALLOWED_OBJECT_ACE ACCESS_ALLOWED_OBJECT_ACE;
alias _SYSTEM_ALARM_ACE * PSYSTEM_ALARM_ACE;
alias _SYSTEM_ALARM_ACE SYSTEM_ALARM_ACE;
alias _SYSTEM_AUDIT_ACE SYSTEM_AUDIT_ACE;
alias _SYSTEM_AUDIT_ACE * PSYSTEM_AUDIT_ACE;
alias _ACCESS_DENIED_ACE * PACCESS_DENIED_ACE;
alias _ACCESS_DENIED_ACE ACCESS_DENIED_ACE;
alias _ACCESS_ALLOWED_ACE * PACCESS_ALLOWED_ACE;
alias _ACCESS_ALLOWED_ACE ACCESS_ALLOWED_ACE;
alias _ACE_HEADER * PACE_HEADER;
alias _GENERIC_MAPPING * PGENERIC_MAPPING;
alias _GENERIC_MAPPING GENERIC_MAPPING;
alias _GUID * LPGUID;
alias _GUID * REFGUID;
alias uint * PACCESS_MASK;
alias ulong * PUINT64;
alias ulong UINT64;
alias ulong * PDWORD64;
alias ulong DWORD64;
alias ulong * PULONG64;
alias ulong ULONG64;
alias long * PINT64;
alias long INT64;
alias long * PLONG64;
alias long LONG64;
alias uint * PDWORD_PTR;
alias uint DWORD_PTR;
alias int * PSSIZE_T;
alias int SSIZE_T;
alias uint * PSIZE_T;
alias uint HANDLE_PTR;
alias short * PHALF_PTR;
alias short HALF_PTR;
alias ushort * PUHALF_PTR;
alias ushort UHALF_PTR;
alias uint * PULONG_PTR;
alias int * PLONG_PTR;
alias uint * PUINT_PTR;
alias int * PINT_PTR;
alias int INT_PTR;
alias uint * PUINT32;
alias uint UINT32;
alias uint * PDWORD32;
alias uint DWORD32;
alias uint * PULONG32;
alias uint ULONG32;
alias int * PINT32;
alias int INT32;
alias int * PLONG32;
alias int LONG32;
alias uint FLONG;
alias ushort FSHORT;
alias char FCHAR;
alias char * PBOOLEAN;
alias long USN;
alias ulong * PULONGLONG;
alias ulong * PDWORDLONG;
alias long * PLONGLONG;
alias ushort LANGID;
alias uint * PDWORD;
alias uint * PLCID;
alias uint LCID;
alias void * * LPHANDLE;
alias void * * PHANDLE;
alias int * PLONG;
alias short * PSHORT;
alias char * LPCTSTR;
alias char * PTCHAR;
alias char * LP;
alias char * LPTSTR;
alias char * PTSTR;
alias char * LPTCH;
alias char * PTBYTE;
alias char * PTCH;
alias char TBYTE;
alias char _TCHAR;
alias char * PCSTR;
alias char * LPCCH;
alias char * NPSTR;
alias char * PCH;
alias char * LPCH;
alias char * PCHAR;
alias wchar * PCWSTR;
alias wchar * PCWCH;
alias wchar * LPCWCH;
alias wchar * PWSTR;
alias wchar * NWPSTR;
alias wchar * PWCH;
alias wchar * LPWCH;
alias wchar * PWCHAR;
alias char * PSZ;
alias uint * PULONG;
alias ushort * PUSHORT;
alias char * PUCHAR;
alias char * PCCHAR;
alias char CCHAR;
alias uint * LPUINT;
alias uint * PUINT;
alias void * LPCVOID;
alias void * PCVOID;
alias uint * LPDWORD;
alias int * LPLONG;
alias ushort * LPWORD;
alias ushort * PWORD;
alias int * LPINT;
alias int * PINT;
alias char * LPBYTE;
alias float * PFLOAT;
alias int * LPBOOL;
alias int * PBOOL;
alias int * LPWINBOOL;
alias int * PWINBOOL;
extern (Windows) int UnlockServiceDatabase(void *);
extern (Windows) int StartServiceW(SC_HANDLE__ *, uint, wchar * *);
extern (Windows) int StartServiceCtrlDispatcherW(_SERVICE_TABLE_ENTRYW *);
extern (Windows) int StartServiceCtrlDispatcherA(_SERVICE_TABLE_ENTRYA *);
extern (Windows) int StartServiceA(SC_HANDLE__ *, uint, char * *);
extern (Windows) int SetServiceStatus(uint, _SERVICE_STATUS *);
extern (Windows) int SetServiceObjectSecurity(SC_HANDLE__ *, uint, _SECURITY_DESCRIPTOR *);
extern (Windows) uint RegisterServiceCtrlHandlerExW(wchar *, _BCD_func__4652, void *);
extern (Windows) uint RegisterServiceCtrlHandlerExA(char *, _BCD_func__4652, void *);
extern (Windows) uint RegisterServiceCtrlHandlerW(wchar *, _BCD_func__4653);
extern (Windows) uint RegisterServiceCtrlHandlerA(char *, _BCD_func__4653);
extern (Windows) int QueryServiceStatusEx(SC_HANDLE__ *, int, char *, uint, uint *);
extern (Windows) int QueryServiceStatus(SC_HANDLE__ *, _SERVICE_STATUS *);
extern (Windows) int QueryServiceObjectSecurity(SC_HANDLE__ *, uint, _SECURITY_DESCRIPTOR *, uint, uint *);
extern (Windows) int QueryServiceLockStatusW(SC_HANDLE__ *, _QUERY_SERVICE_LOCK_STATUSW *, uint, uint *);
extern (Windows) int QueryServiceLockStatusA(SC_HANDLE__ *, _QUERY_SERVICE_LOCK_STATUSA *, uint, uint *);
extern (Windows) int QueryServiceConfig2W(SC_HANDLE__ *, uint, char *, uint, uint *);
extern (Windows) int QueryServiceConfig2A(SC_HANDLE__ *, uint, char *, uint, uint *);
extern (Windows) int QueryServiceConfigW(SC_HANDLE__ *, _QUERY_SERVICE_CONFIGW *, uint, uint *);
extern (Windows) int QueryServiceConfigA(SC_HANDLE__ *, _QUERY_SERVICE_CONFIGA *, uint, uint *);
extern (Windows) SC_HANDLE__ * OpenServiceW(SC_HANDLE__ *, wchar *, uint);
extern (Windows) SC_HANDLE__ * OpenServiceA(SC_HANDLE__ *, char *, uint);
extern (Windows) SC_HANDLE__ * OpenSCManagerW(wchar *, wchar *, uint);
extern (Windows) SC_HANDLE__ * OpenSCManagerA(char *, char *, uint);
extern (Windows) int NotifyBootConfigStatus(int);
extern (Windows) void * LockServiceDatabase(SC_HANDLE__ *);
extern (Windows) int GetServiceKeyNameW(SC_HANDLE__ *, wchar *, wchar *, uint *);
extern (Windows) int GetServiceKeyNameA(SC_HANDLE__ *, char *, char *, uint *);
extern (Windows) int GetServiceDisplayNameW(SC_HANDLE__ *, wchar *, wchar *, uint *);
extern (Windows) int GetServiceDisplayNameA(SC_HANDLE__ *, char *, char *, uint *);
extern (Windows) int EnumServicesStatusExW(SC_HANDLE__ *, int, uint, uint, char *, uint, uint *, uint *, uint *, wchar *);
extern (Windows) int EnumServicesStatusExA(SC_HANDLE__ *, int, uint, uint, char *, uint, uint *, uint *, uint *, char *);
extern (Windows) int EnumServicesStatusW(SC_HANDLE__ *, uint, uint, _ENUM_SERVICE_STATUSW *, uint, uint *, uint *, uint *);
extern (Windows) int EnumServicesStatusA(SC_HANDLE__ *, uint, uint, _ENUM_SERVICE_STATUSA *, uint, uint *, uint *, uint *);
extern (Windows) int EnumDependentServicesW(SC_HANDLE__ *, uint, _ENUM_SERVICE_STATUSW *, uint, uint *, uint *);
extern (Windows) int EnumDependentServicesA(SC_HANDLE__ *, uint, _ENUM_SERVICE_STATUSA *, uint, uint *, uint *);
extern (Windows) int DeleteService(SC_HANDLE__ *);
extern (Windows) SC_HANDLE__ * CreateServiceW(SC_HANDLE__ *, wchar *, wchar *, uint, uint, uint, uint, wchar *, wchar *, uint *, wchar *, wchar *, wchar *);
extern (Windows) SC_HANDLE__ * CreateServiceA(SC_HANDLE__ *, char *, char *, uint, uint, uint, uint, char *, char *, uint *, char *, char *, char *);
extern (Windows) int ControlService(SC_HANDLE__ *, uint, _SERVICE_STATUS *);
extern (Windows) int CloseServiceHandle(SC_HANDLE__ *);
extern (Windows) int ChangeServiceConfig2W(SC_HANDLE__ *, uint, void *);
extern (Windows) int ChangeServiceConfig2A(SC_HANDLE__ *, uint, void *);
extern (Windows) int ChangeServiceConfigW(SC_HANDLE__ *, uint, uint, uint, wchar *, wchar *, uint *, wchar *, wchar *, wchar *, wchar *);
extern (Windows) int ChangeServiceConfigA(SC_HANDLE__ *, uint, uint, uint, char *, char *, uint *, char *, char *, char *, char *);
extern (Windows) int RegUnLoadKeyW(HKEY__ *, wchar *);
extern (Windows) int RegUnLoadKeyA(HKEY__ *, char *);
extern (Windows) int RegSetValueW(HKEY__ *, wchar *, uint, wchar *, uint);
extern (Windows) int RegSetValueExW(HKEY__ *, wchar *, uint, uint, char *, uint);
extern (Windows) int RegSetValueExA(HKEY__ *, char *, uint, uint, char *, uint);
extern (Windows) int RegSetValueA(HKEY__ *, char *, uint, char *, uint);
extern (Windows) int RegSetKeySecurity(HKEY__ *, uint, _SECURITY_DESCRIPTOR *);
extern (Windows) int RegSaveKeyW(HKEY__ *, wchar *, _SECURITY_ATTRIBUTES *);
extern (Windows) int RegSaveKeyA(HKEY__ *, char *, _SECURITY_ATTRIBUTES *);
extern (Windows) int RegRestoreKeyW(HKEY__ *, wchar *, uint);
extern (Windows) int RegRestoreKeyA(HKEY__ *, char *, uint);
extern (Windows) int RegReplaceKeyW(HKEY__ *, wchar *, wchar *, wchar *);
extern (Windows) int RegReplaceKeyA(HKEY__ *, char *, char *, char *);
extern (Windows) int RegQueryValueW(HKEY__ *, wchar *, wchar *, int *);
extern (Windows) int RegQueryValueExW(HKEY__ *, wchar *, uint *, uint *, char *, uint *);
extern (Windows) int RegQueryValueExA(HKEY__ *, char *, uint *, uint *, char *, uint *);
extern (Windows) int RegQueryValueA(HKEY__ *, char *, char *, int *);
extern (Windows) int RegQueryMultipleValuesW(HKEY__ *, value_entW *, uint, wchar *, uint *);
extern (Windows) int RegQueryMultipleValuesA(HKEY__ *, value_entA *, uint, char *, uint *);
extern (Windows) int RegQueryInfoKeyW(HKEY__ *, wchar *, uint *, uint *, uint *, uint *, uint *, uint *, uint *, uint *, uint *, _FILETIME *);
extern (Windows) int RegQueryInfoKeyA(HKEY__ *, char *, uint *, uint *, uint *, uint *, uint *, uint *, uint *, uint *, uint *, _FILETIME *);
extern (Windows) int RegOpenKeyW(HKEY__ *, wchar *, HKEY__ * *);
extern (Windows) int RegOpenKeyExW(HKEY__ *, wchar *, uint, uint, HKEY__ * *);
extern (Windows) int RegOpenKeyExA(HKEY__ *, char *, uint, uint, HKEY__ * *);
extern (Windows) int RegOpenKeyA(HKEY__ *, char *, HKEY__ * *);
extern (Windows) int RegNotifyChangeKeyValue(HKEY__ *, int, uint, void *, int);
extern (Windows) int RegLoadKeyW(HKEY__ *, wchar *, wchar *);
extern (Windows) int RegLoadKeyA(HKEY__ *, char *, char *);
extern (Windows) int RegGetKeySecurity(HKEY__ *, uint, _SECURITY_DESCRIPTOR *, uint *);
extern (Windows) int RegFlushKey(HKEY__ *);
extern (Windows) int RegEnumValueW(HKEY__ *, uint, wchar *, uint *, uint *, uint *, char *, uint *);
extern (Windows) int RegEnumValueA(HKEY__ *, uint, char *, uint *, uint *, uint *, char *, uint *);
extern (Windows) int RegEnumKeyExW(HKEY__ *, uint, wchar *, uint *, uint *, wchar *, uint *, _FILETIME *);
extern (Windows) int RegEnumKeyExA(HKEY__ *, uint, char *, uint *, uint *, char *, uint *, _FILETIME *);
extern (Windows) int RegEnumKeyW(HKEY__ *, uint, wchar *, uint);
extern (Windows) int RegEnumKeyA(HKEY__ *, uint, char *, uint);
extern (Windows) int RegDeleteValueW(HKEY__ *, wchar *);
extern (Windows) int RegDeleteValueA(HKEY__ *, char *);
extern (Windows) int RegDeleteKeyW(HKEY__ *, wchar *);
extern (Windows) int RegDeleteKeyA(HKEY__ *, char *);
extern (Windows) int RegCreateKeyW(HKEY__ *, wchar *, HKEY__ * *);
extern (Windows) int RegCreateKeyExW(HKEY__ *, wchar *, uint, wchar *, uint, uint, _SECURITY_ATTRIBUTES *, HKEY__ * *, uint *);
extern (Windows) int RegCreateKeyExA(HKEY__ *, char *, uint, char *, uint, uint, _SECURITY_ATTRIBUTES *, HKEY__ * *, uint *);
extern (Windows) int RegCreateKeyA(HKEY__ *, char *, HKEY__ * *);
extern (Windows) int RegConnectRegistryW(wchar *, HKEY__ *, HKEY__ * *);
extern (Windows) int RegConnectRegistryA(char *, HKEY__ *, HKEY__ * *);
extern (Windows) int RegCloseKey(HKEY__ *);
extern (Windows) int InitiateSystemShutdownW(wchar *, wchar *, uint, int, int);
extern (Windows) int InitiateSystemShutdownA(char *, char *, uint, int, int);
extern (Windows) int AbortSystemShutdownW(wchar *);
extern (Windows) int AbortSystemShutdownA(char *);
extern (Windows) uint MultinetGetConnectionPerformanceW(_NETRESOURCEW *, _NETCONNECTINFOSTRUCT *);
extern (Windows) uint MultinetGetConnectionPerformanceA(_NETRESOURCEA *, _NETCONNECTINFOSTRUCT *);
extern (Windows) uint WNetGetLastErrorW(uint *, wchar *, uint, wchar *, uint);
extern (Windows) uint WNetGetLastErrorA(uint *, char *, uint, char *, uint);
extern (Windows) uint WNetGetResourceParentW(_NETRESOURCEW *, void *, uint *);
extern (Windows) uint WNetGetResourceParentA(_NETRESOURCEA *, void *, uint *);
extern (Windows) uint WNetGetResourceInformationW(_NETRESOURCEA *, void *, uint *, wchar * *);
extern (Windows) uint WNetGetResourceInformationA(_NETRESOURCEA *, void *, uint *, char * *);
extern (Windows) uint WNetGetNetworkInformationW(wchar *, _NETINFOSTRUCT *);
extern (Windows) uint WNetGetNetworkInformationA(char *, _NETINFOSTRUCT *);
extern (Windows) uint WNetGetProviderNameW(uint, wchar *, uint *);
extern (Windows) uint WNetGetProviderNameA(uint, char *, uint *);
extern (Windows) uint WNetGetUserW(wchar *, wchar *, uint *);
extern (Windows) uint WNetGetUserA(char *, char *, uint *);
extern (Windows) uint WNetGetUniversalNameW(wchar *, uint, void *, uint *);
extern (Windows) uint WNetGetUniversalNameA(char *, uint, void *, uint *);
extern (Windows) uint WNetCloseEnum(void *);
extern (Windows) uint WNetEnumResourceW(void *, uint *, void *, uint *);
extern (Windows) uint WNetEnumResourceA(void *, uint *, void *, uint *);
extern (Windows) uint WNetOpenEnumW(uint, uint, uint, _NETRESOURCEW *, void * *);
extern (Windows) uint WNetOpenEnumA(uint, uint, uint, _NETRESOURCEA *, void * *);
extern (Windows) uint WNetDisconnectDialog1W(_DISCDLGSTRUCTW *);
extern (Windows) uint WNetDisconnectDialog1A(_DISCDLGSTRUCTA *);
extern (Windows) uint WNetConnectionDialog1W(_CONNECTDLGSTRUCTW *);
extern (Windows) uint WNetConnectionDialog1A(_CONNECTDLGSTRUCTA *);
extern (Windows) uint WNetDisconnectDialog(HWND__ *, uint);
extern (Windows) uint WNetConnectionDialog(HWND__ *, uint);
extern (Windows) uint WNetSetConnectionW(wchar *, uint, void *);
extern (Windows) uint WNetSetConnectionA(char *, uint, void *);
extern (Windows) uint WNetUseConnectionW(HWND__ *, _NETRESOURCEW *, wchar *, wchar *, uint, wchar *, uint *, uint *);
extern (Windows) uint WNetUseConnectionA(HWND__ *, _NETRESOURCEA *, char *, char *, uint, char *, uint *, uint *);
extern (Windows) uint WNetGetConnectionW(wchar *, wchar *, uint *);
extern (Windows) uint WNetGetConnectionA(char *, char *, uint *);
extern (Windows) uint WNetCancelConnection2W(wchar *, uint, int);
extern (Windows) uint WNetCancelConnection2A(char *, uint, int);
extern (Windows) uint WNetCancelConnectionW(wchar *, int);
extern (Windows) uint WNetCancelConnectionA(char *, int);
extern (Windows) uint WNetAddConnection3W(HWND__ *, _NETRESOURCEW *, wchar *, wchar *, uint);
extern (Windows) uint WNetAddConnection3A(HWND__ *, _NETRESOURCEA *, char *, char *, uint);
extern (Windows) uint WNetAddConnection2W(_NETRESOURCEW *, wchar *, wchar *, uint);
extern (Windows) uint WNetAddConnection2A(_NETRESOURCEA *, char *, char *, uint);
extern (Windows) uint WNetAddConnectionW(wchar *, wchar *, wchar *);
extern (Windows) uint WNetAddConnectionA(char *, char *, char *);
extern (Windows) int VerQueryValueW(void *, wchar *, void * *, uint *);
extern (Windows) int VerQueryValueA(void *, char *, void * *, uint *);
extern (Windows) uint VerLanguageNameW(uint, wchar *, uint);
extern (Windows) uint VerLanguageNameA(uint, char *, uint);
extern (Windows) int GetFileVersionInfoW(wchar *, uint, uint, void *);
extern (Windows) int GetFileVersionInfoA(char *, uint, uint, void *);
extern (Windows) uint GetFileVersionInfoSizeW(wchar *, uint *);
extern (Windows) uint GetFileVersionInfoSizeA(char *, uint *);
extern (Windows) uint VerInstallFileW(uint, wchar *, wchar *, wchar *, wchar *, wchar *, wchar *, uint *);
extern (Windows) uint VerInstallFileA(uint, char *, char *, char *, char *, char *, char *, uint *);
extern (Windows) uint VerFindFileW(uint, wchar *, wchar *, wchar *, wchar *, uint *, wchar *, uint *);
extern (Windows) uint VerFindFileA(uint, char *, char *, char *, char *, uint *, char *, uint *);
extern (Windows) int WideCharToMultiByte(uint, uint, wchar *, int, char *, int, char *, int *);
extern (Windows) int SetUserGeoID(uint);
extern (Windows) int SetThreadLocale(uint);
extern (Windows) int SetLocaleInfoW(uint, uint, wchar *);
extern (Windows) int SetLocaleInfoA(uint, uint, char *);
extern (Windows) int SetCalendarInfoW(uint, uint, uint, wchar *);
extern (Windows) int SetCalendarInfoA(uint, uint, uint, char *);
extern (Windows) int MultiByteToWideChar(uint, uint, char *, int, wchar *, int);
extern (Windows) int LCMapStringW(uint, uint, wchar *, int, wchar *, int);
extern (Windows) int LCMapStringA(uint, uint, char *, int, char *, int);
extern (Windows) int IsValidLocale(uint, uint);
extern (Windows) int IsValidCodePage(uint);
extern (Windows) int IsNLSDefinedString(int, uint, nlsversioninfo *, wchar *, int);
extern (Windows) int IsDBCSLeadByteEx(uint, char);
extern (Windows) int IsDBCSLeadByte(char);
extern (Windows) uint GetUserGeoID(uint);
extern (Windows) uint GetUserDefaultLCID();
extern (Windows) ushort GetUserDefaultLangID();
extern (Windows) int GetTimeFormatW(uint, uint, _SYSTEMTIME *, wchar *, wchar *, int);
extern (Windows) int GetTimeFormatA(uint, uint, _SYSTEMTIME *, char *, char *, int);
extern (Windows) uint GetThreadLocale();
extern (Windows) uint GetSystemDefaultLCID();
extern (Windows) ushort GetSystemDefaultLangID();
extern (Windows) int GetStringTypeExW(uint, uint, wchar *, int, ushort *);
extern (Windows) int GetStringTypeExA(uint, uint, char *, int, ushort *);
extern (Windows) int GetStringTypeW(uint, wchar *, int, ushort *);
extern (Windows) int GetStringTypeA(uint, uint, char *, int, ushort *);
extern (Windows) uint GetOEMCP();
extern (Windows) int GetNumberFormatW(uint, uint, wchar *, _numberfmtW *, wchar *, int);
extern (Windows) int GetNumberFormatA(uint, uint, char *, _numberfmtA *, char *, int);
extern (Windows) int GetNLSVersion(int, uint, nlsversioninfo *);
extern (Windows) int GetLocaleInfoW(uint, uint, wchar *, int);
extern (Windows) int GetLocaleInfoA(uint, uint, char *, int);
extern (Windows) int GetGeoInfoW(uint, uint, wchar *, int, ushort);
extern (Windows) int GetGeoInfoA(uint, uint, char *, int, ushort);
extern (Windows) int GetDateFormatW(uint, uint, _SYSTEMTIME *, wchar *, wchar *, int);
extern (Windows) int GetDateFormatA(uint, uint, _SYSTEMTIME *, char *, char *, int);
extern (Windows) int GetCurrencyFormatW(uint, uint, wchar *, _currencyfmtW *, wchar *, int);
extern (Windows) int GetCurrencyFormatA(uint, uint, char *, _currencyfmtA *, char *, int);
extern (Windows) int GetCPInfoExW(uint, uint, _cpinfoexW *);
extern (Windows) int GetCPInfoExA(uint, uint, _cpinfoexA *);
extern (Windows) int GetCPInfo(uint, _cpinfo *);
extern (Windows) int GetCalendarInfoW(uint, uint, uint, wchar *, int, uint *);
extern (Windows) int GetCalendarInfoA(uint, uint, uint, char *, int, uint *);
extern (Windows) uint GetACP();
extern (Windows) int FoldStringW(uint, wchar *, int, wchar *, int);
extern (Windows) int FoldStringA(uint, char *, int, char *, int);
extern (Windows) int EnumTimeFormatsW(_BCD_func__4895, uint, uint);
extern (Windows) int EnumTimeFormatsA(_BCD_func__4896, uint, uint);
extern (Windows) int EnumSystemLocalesW(_BCD_func__4895, uint);
extern (Windows) int EnumSystemLocalesA(_BCD_func__4896, uint);
extern (Windows) int EnumSystemGeoID(uint, uint, _BCD_func__4894);
extern (Windows) int EnumSystemCodePagesW(_BCD_func__4895, uint);
extern (Windows) int EnumSystemCodePagesA(_BCD_func__4896, uint);
extern (Windows) int EnumDateFormatsW(_BCD_func__4895, uint, uint);
extern (Windows) int EnumDateFormatsA(_BCD_func__4896, uint, uint);
extern (Windows) int EnumCalendarInfoW(_BCD_func__4895, uint, uint, uint);
extern (Windows) int EnumCalendarInfoA(_BCD_func__4896, uint, uint, uint);
extern (Windows) uint ConvertDefaultLocale(uint);
extern (Windows) int CompareStringW(uint, uint, wchar *, int, wchar *, int);
extern (Windows) int CompareStringA(uint, uint, char *, int, char *, int);
extern (Windows) int wvsprintfW(wchar *, wchar *, char *);
extern (Windows) int wvsprintfA(char *, char *, char *);
extern (Windows) int wsprintfW(wchar *, wchar *, ...);
extern (Windows) int wsprintfA(char *, char *, ...);
extern (Windows) int WinHelpW(HWND__ *, wchar *, uint, uint);
extern (Windows) int WinHelpA(HWND__ *, char *, uint, uint);
extern (Windows) uint WinExec(char *, uint);
extern (Windows) HWND__ * WindowFromPoint(tagPOINT);
extern (Windows) HWND__ * WindowFromDC(HDC__ *);
extern (Windows) int WaitMessage();
extern (Windows) uint WaitForInputIdle(void *, uint);
extern (Windows) short VkKeyScanW(wchar);
extern (Windows) short VkKeyScanExW(wchar, HKL__ *);
extern (Windows) short VkKeyScanExA(char, HKL__ *);
extern (Windows) short VkKeyScanA(char);
extern (Windows) int ValidateRgn(HWND__ *, HRGN__ *);
extern (Windows) int ValidateRect(HWND__ *, tagRECT *);
extern (Windows) int UpdateWindow(HWND__ *);
extern (Windows) int UnregisterHotKey(HWND__ *, int);
extern (Windows) int UnregisterClassW(wchar *, HINSTANCE__ *);
extern (Windows) int UnregisterClassA(char *, HINSTANCE__ *);
extern (Windows) int UnloadKeyboardLayout(HKL__ *);
extern (Windows) int UnionRect(tagRECT *, tagRECT *, tagRECT *);
extern (Windows) int UnhookWindowsHookEx(HHOOK__ *);
extern (Windows) int UnhookWindowsHook(int, _BCD_func__5615);
extern (Windows) int TranslateMessage(tagMSG *);
extern (Windows) int TranslateMDISysAccel(HWND__ *, tagMSG *);
extern (Windows) int TranslateAcceleratorW(HWND__ *, HACCEL__ *, tagMSG *);
extern (Windows) int TranslateAcceleratorA(HWND__ *, HACCEL__ *, tagMSG *);
extern (Windows) int TrackPopupMenuEx(HMENU__ *, uint, int, int, HWND__ *, tagTPMPARAMS *);
extern (Windows) int TrackPopupMenu(HMENU__ *, uint, int, int, int, HWND__ *, tagRECT *);
extern (Windows) int TrackMouseEvent(tagTRACKMOUSEEVENT *);
extern (Windows) int ToUnicodeEx(uint, uint, char *, wchar *, int, uint, HKL__ *);
extern (Windows) int ToUnicode(uint, uint, char *, wchar *, int, uint);
extern (Windows) int ToAsciiEx(uint, uint, char *, ushort *, uint, HKL__ *);
extern (Windows) int ToAscii(uint, uint, char *, ushort *, uint);
extern (Windows) ushort TileWindows(HWND__ *, uint, tagRECT *, uint, HWND__ * *);
extern (Windows) int TabbedTextOutW(HDC__ *, int, int, wchar *, int, int, int *, int);
extern (Windows) int TabbedTextOutA(HDC__ *, int, int, char *, int, int, int *, int);
extern (Windows) int SystemParametersInfoW(uint, uint, void *, uint);
extern (Windows) int SystemParametersInfoA(uint, uint, void *, uint);
extern (Windows) int SwitchDesktop(HDESK__ *);
extern (Windows) int SwapMouseButton(int);
extern (Windows) int SubtractRect(tagRECT *, tagRECT *, tagRECT *);
extern (Windows) int ShowWindowAsync(HWND__ *, int);
extern (Windows) int ShowWindow(HWND__ *, int);
extern (Windows) int ShowScrollBar(HWND__ *, int, int);
extern (Windows) int ShowOwnedPopups(HWND__ *, int);
extern (Windows) int ShowCursor(int);
extern (Windows) int ShowCaret(HWND__ *);
extern (Windows) ushort SetWindowWord(HWND__ *, int, ushort);
extern (Windows) int SetWindowTextW(HWND__ *, wchar *);
extern (Windows) int SetWindowTextA(HWND__ *, char *);
extern (Windows) HHOOK__ * SetWindowsHookExW(int, _BCD_func__5615, HINSTANCE__ *, uint);
extern (Windows) HHOOK__ * SetWindowsHookExA(int, _BCD_func__5615, HINSTANCE__ *, uint);
extern (Windows) HHOOK__ * SetWindowsHookW(int, _BCD_func__5615);
extern (Windows) HHOOK__ * SetWindowsHookA(int, _BCD_func__5615);
extern (Windows) int SetWindowRgn(HWND__ *, HRGN__ *, int);
extern (Windows) int SetWindowPos(HWND__ *, HWND__ *, int, int, int, int, uint);
extern (Windows) int SetWindowPlacement(HWND__ *, _WINDOWPLACEMENT *);
extern (Windows) int SetWindowLongW(HWND__ *, int, int);
extern (Windows) int SetWindowLongA(HWND__ *, int, int);
extern (Windows) int SetWindowContextHelpId(HWND__ *, uint);
extern (Windows) int SetUserObjectSecurity(void *, uint *, _SECURITY_DESCRIPTOR *);
extern (Windows) int SetUserObjectInformationW(void *, int, void *, uint);
extern (Windows) int SetUserObjectInformationA(void *, int, void *, uint);
extern (Windows) uint SetTimer(HWND__ *, uint, uint, _BCD_func__5617);
extern (Windows) int SetThreadDesktop(HDESK__ *);
extern (Windows) int SetSystemCursor(HICON__ *, uint);
extern (Windows) int SetSysColors(int, int *, uint *);
extern (Windows) int SetScrollRange(HWND__ *, int, int, int, int);
extern (Windows) int SetScrollPos(HWND__ *, int, int, int);
extern (Windows) int SetScrollInfo(HWND__ *, int, tagSCROLLINFO *, int);
extern (Windows) int SetRectEmpty(tagRECT *);
extern (Windows) int SetRect(tagRECT *, int, int, int, int);
extern (Windows) int SetPropW(HWND__ *, wchar *, void *);
extern (Windows) int SetPropA(HWND__ *, char *, void *);
extern (Windows) int SetProcessWindowStation(HWINSTA__ *);
extern (Windows) HWND__ * SetParent(HWND__ *, HWND__ *);
extern (Windows) int SetMessageQueue(int);
extern (Windows) int SetMessageExtraInfo(int);
extern (Windows) int SetMenuItemInfoW(HMENU__ *, uint, int, tagMENUITEMINFOW *);
extern (Windows) int SetMenuItemInfoA(HMENU__ *, uint, int, tagMENUITEMINFOA *);
extern (Windows) int SetMenuItemBitmaps(HMENU__ *, uint, uint, HBITMAP__ *, HBITMAP__ *);
extern (Windows) int SetMenuInfo(HMENU__ *, tagMENUINFO *);
extern (Windows) int SetMenuDefaultItem(HMENU__ *, uint, uint);
extern (Windows) int SetMenuContextHelpId(HMENU__ *, uint);
extern (Windows) int SetMenu(HWND__ *, HMENU__ *);
extern (Windows) int SetKeyboardState(char *);
extern (Windows) int SetForegroundWindow(HWND__ *);
extern (Windows) HWND__ * SetFocus(HWND__ *);
extern (Windows) int SetDoubleClickTime(uint);
extern (Windows) int SetDlgItemTextW(HWND__ *, int, wchar *);
extern (Windows) int SetDlgItemTextA(HWND__ *, int, char *);
extern (Windows) int SetDlgItemInt(HWND__ *, int, uint, int);
extern (Windows) void SetDebugErrorLevel(uint);
extern (Windows) int SetCursorPos(int, int);
extern (Windows) HICON__ * SetCursor(HICON__ *);
extern (Windows) HWND__ * SetClipboardViewer(HWND__ *);
extern (Windows) void * SetClipboardData(uint, void *);
extern (Windows) ushort SetClassWord(HWND__ *, int, ushort);
extern (Windows) uint SetClassLongW(HWND__ *, int, int);
extern (Windows) uint SetClassLongA(HWND__ *, int, int);
extern (Windows) int SetCaretPos(int, int);
extern (Windows) int SetCaretBlinkTime(uint);
extern (Windows) HWND__ * SetCapture(HWND__ *);
extern (Windows) HWND__ * SetActiveWindow(HWND__ *);
extern (Windows) int SendNotifyMessageW(HWND__ *, uint, uint, int);
extern (Windows) int SendNotifyMessageA(HWND__ *, uint, uint, int);
extern (Windows) int SendMessageW(HWND__ *, uint, uint, int);
extern (Windows) int SendMessageTimeoutW(HWND__ *, uint, uint, int, uint, uint, uint *);
extern (Windows) int SendMessageTimeoutA(HWND__ *, uint, uint, int, uint, uint, uint *);
extern (Windows) int SendMessageCallbackW(HWND__ *, uint, uint, int, _BCD_func__5604, uint);
extern (Windows) int SendMessageCallbackA(HWND__ *, uint, uint, int, _BCD_func__5604, uint);
extern (Windows) int SendMessageA(HWND__ *, uint, uint, int);
extern (Windows) int SendDlgItemMessageW(HWND__ *, int, uint, uint, int);
extern (Windows) int SendDlgItemMessageA(HWND__ *, int, uint, uint, int);
extern (Windows) int ScrollWindowEx(HWND__ *, int, int, tagRECT *, tagRECT *, HRGN__ *, tagRECT *, uint);
extern (Windows) int ScrollWindow(HWND__ *, int, int, tagRECT *, tagRECT *);
extern (Windows) int ScrollDC(HDC__ *, int, int, tagRECT *, tagRECT *, HRGN__ *, tagRECT *);
extern (Windows) int ScreenToClient(HWND__ *, tagPOINT *);
extern (Windows) int ReplyMessage(int);
extern (Windows) void * RemovePropW(HWND__ *, wchar *);
extern (Windows) void * RemovePropA(HWND__ *, char *);
extern (Windows) int RemoveMenu(HMENU__ *, uint, uint);
extern (Windows) int ReleaseDC(HWND__ *, HDC__ *);
extern (Windows) int ReleaseCapture();
extern (Windows) uint RegisterWindowMessageW(wchar *);
extern (Windows) uint RegisterWindowMessageA(char *);
extern (Windows) int RegisterHotKey(HWND__ *, int, uint, uint);
extern (Windows) uint RegisterClipboardFormatW(wchar *);
extern (Windows) uint RegisterClipboardFormatA(char *);
extern (Windows) ushort RegisterClassExW(_WNDCLASSEXW *);
extern (Windows) ushort RegisterClassExA(_WNDCLASSEXA *);
extern (Windows) ushort RegisterClassW(_WNDCLASSW *);
extern (Windows) ushort RegisterClassA(_WNDCLASSA *);
extern (Windows) int RedrawWindow(HWND__ *, tagRECT *, HRGN__ *, uint);
extern (Windows) uint RealGetWindowClassW(HWND__ *, wchar *, uint);
extern (Windows) uint RealGetWindowClassA(HWND__ *, char *, uint);
extern (Windows) HWND__ * RealChildWindowFromPoint(HWND__ *, tagPOINT);
extern (Windows) int PtInRect(tagRECT *, tagPOINT);
extern (Windows) int PostThreadMessageW(uint, uint, uint, int);
extern (Windows) int PostThreadMessageA(uint, uint, uint, int);
extern (Windows) void PostQuitMessage(int);
extern (Windows) int PostMessageW(HWND__ *, uint, uint, int);
extern (Windows) int PostMessageA(HWND__ *, uint, uint, int);
extern (Windows) int PeekMessageW(tagMSG *, HWND__ *, uint, uint, uint);
extern (Windows) int PeekMessageA(tagMSG *, HWND__ *, uint, uint, uint);
extern (Windows) int PaintDesktop(HDC__ *);
extern (Windows) HWINSTA__ * OpenWindowStationW(wchar *, int, uint);
extern (Windows) HWINSTA__ * OpenWindowStationA(char *, int, uint);
extern (Windows) HDESK__ * OpenInputDesktop(uint, int, uint);
extern (Windows) int OpenIcon(HWND__ *);
extern (Windows) HDESK__ * OpenDesktopW(wchar *, uint, int, uint);
extern (Windows) HDESK__ * OpenDesktopA(char *, uint, int, uint);
extern (Windows) int OpenClipboard(HWND__ *);
extern (Windows) int OffsetRect(tagRECT *, int, int);
extern (Windows) int OemToCharW(char *, wchar *);
extern (Windows) int OemToCharBuffW(char *, wchar *, uint);
extern (Windows) int OemToCharBuffA(char *, char *, uint);
extern (Windows) int OemToCharA(char *, char *);
extern (Windows) uint OemKeyScan(ushort);
extern (Windows) uint MsgWaitForMultipleObjectsEx(uint, void * *, uint, uint, uint);
extern (Windows) uint MsgWaitForMultipleObjects(uint, void * *, int, uint, uint);
extern (Windows) int MoveWindow(HWND__ *, int, int, int, int, int);
extern (Windows) void mouse_event(uint, uint, uint, uint, uint);
extern (Windows) int ModifyMenuW(HMENU__ *, uint, uint, uint, wchar *);
extern (Windows) int ModifyMenuA(HMENU__ *, uint, uint, uint, char *);
extern (Windows) int MessageBoxIndirectW(MSGBOXPARAMSW *);
extern (Windows) int MessageBoxIndirectA(MSGBOXPARAMSA *);
extern (Windows) int MessageBoxExW(HWND__ *, wchar *, wchar *, uint, ushort);
extern (Windows) int MessageBoxExA(HWND__ *, char *, char *, uint, ushort);
extern (Windows) int MessageBoxW(HWND__ *, wchar *, wchar *, uint);
extern (Windows) int MessageBoxA(HWND__ *, char *, char *, uint);
extern (Windows) int MessageBeep(uint);
extern (Windows) int MenuItemFromPoint(HWND__ *, HMENU__ *, tagPOINT);
extern (Windows) int MapWindowPoints(HWND__ *, HWND__ *, tagPOINT *, uint);
extern (Windows) uint MapVirtualKeyW(uint, uint);
extern (Windows) uint MapVirtualKeyExW(uint, uint, HKL__ *);
extern (Windows) uint MapVirtualKeyExA(uint, uint, HKL__ *);
extern (Windows) uint MapVirtualKeyA(uint, uint);
extern (Windows) int MapDialogRect(HWND__ *, tagRECT *);
extern (Windows) int LookupIconIdFromDirectoryEx(char *, int, int, int, uint);
extern (Windows) int LookupIconIdFromDirectory(char *, int);
extern (Windows) int LockWindowUpdate(HWND__ *);
extern (Windows) int LoadStringW(HINSTANCE__ *, uint, wchar *, int);
extern (Windows) int LoadStringA(HINSTANCE__ *, uint, char *, int);
extern (Windows) HMENU__ * LoadMenuW(HINSTANCE__ *, wchar *);
extern (Windows) HMENU__ * LoadMenuIndirectW(void *);
extern (Windows) HMENU__ * LoadMenuIndirectA(void *);
extern (Windows) HMENU__ * LoadMenuA(HINSTANCE__ *, char *);
extern (Windows) HKL__ * LoadKeyboardLayoutW(wchar *, uint);
extern (Windows) HKL__ * LoadKeyboardLayoutA(char *, uint);
extern (Windows) void * LoadImageW(HINSTANCE__ *, wchar *, uint, int, int, uint);
extern (Windows) void * LoadImageA(HINSTANCE__ *, char *, uint, int, int, uint);
extern (Windows) HICON__ * LoadIconW(HINSTANCE__ *, wchar *);
extern (Windows) HICON__ * LoadIconA(HINSTANCE__ *, char *);
extern (Windows) HICON__ * LoadCursorW(HINSTANCE__ *, wchar *);
extern (Windows) HICON__ * LoadCursorFromFileW(wchar *);
extern (Windows) HICON__ * LoadCursorFromFileA(char *);
extern (Windows) HICON__ * LoadCursorA(HINSTANCE__ *, char *);
extern (Windows) HBITMAP__ * LoadBitmapW(HINSTANCE__ *, wchar *);
extern (Windows) HBITMAP__ * LoadBitmapA(HINSTANCE__ *, char *);
extern (Windows) HACCEL__ * LoadAcceleratorsW(HINSTANCE__ *, wchar *);
extern (Windows) HACCEL__ * LoadAcceleratorsA(HINSTANCE__ *, char *);
extern (Windows) int KillTimer(HWND__ *, uint);
extern (Windows) void keybd_event(char, char, uint, uint);
extern (Windows) int IsZoomed(HWND__ *);
extern (Windows) int IsWindowVisible(HWND__ *);
extern (Windows) int IsWindowUnicode(HWND__ *);
extern (Windows) int IsWindowEnabled(HWND__ *);
extern (Windows) int IsWindow(HWND__ *);
extern (Windows) int IsRectEmpty(tagRECT *);
extern (Windows) int IsMenu(HMENU__ *);
extern (Windows) int IsIconic(HWND__ *);
extern (Windows) uint IsDlgButtonChecked(HWND__ *, int);
extern (Windows) int IsDialogMessageW(HWND__ *, tagMSG *);
extern (Windows) int IsDialogMessageA(HWND__ *, tagMSG *);
extern (Windows) int IsClipboardFormatAvailable(uint);
extern (Windows) int IsChild(HWND__ *, HWND__ *);
extern (Windows) int IsCharUpperW(wchar);
extern (Windows) int IsCharUpperA(char);
extern (Windows) int IsCharLowerW(wchar);
extern (Windows) int IsCharLowerA(char);
extern (Windows) int IsCharAlphaW(wchar);
extern (Windows) int IsCharAlphaNumericW(wchar);
extern (Windows) int IsCharAlphaNumericA(char);
extern (Windows) int IsCharAlphaA(char);
extern (Windows) int InvertRect(HDC__ *, tagRECT *);
extern (Windows) int InvalidateRgn(HWND__ *, HRGN__ *, int);
extern (Windows) int InvalidateRect(HWND__ *, tagRECT *, int);
extern (Windows) int IntersectRect(tagRECT *, tagRECT *, tagRECT *);
extern (Windows) int InternalGetWindowText(HWND__ *, wchar *, int);
extern (Windows) int InsertMenuItemW(HMENU__ *, uint, int, tagMENUITEMINFOW *);
extern (Windows) int InsertMenuItemA(HMENU__ *, uint, int, tagMENUITEMINFOA *);
extern (Windows) int InsertMenuW(HMENU__ *, uint, uint, uint, wchar *);
extern (Windows) int InsertMenuA(HMENU__ *, uint, uint, uint, char *);
extern (Windows) int InSendMessage();
extern (Windows) int InflateRect(tagRECT *, int, int);
extern (Windows) int HiliteMenuItem(HWND__ *, HMENU__ *, uint, uint);
extern (Windows) int HideCaret(HWND__ *);
extern (Windows) int GrayStringW(HDC__ *, HBRUSH__ *, _BCD_func__5616, int, int, int, int, int, int);
extern (Windows) int GrayStringA(HDC__ *, HBRUSH__ *, _BCD_func__5616, int, int, int, int, int, int);
extern (Windows) uint GetWindowModuleFileNameW(HWND__ *, wchar *, uint);
extern (Windows) uint GetWindowModuleFileNameA(HWND__ *, char *, uint);
extern (Windows) int GetMonitorInfoW(HMONITOR__ *, tagMONITORINFO *);
extern (Windows) int GetMonitorInfoA(HMONITOR__ *, tagMONITORINFO *);
extern (Windows) int GetWindowInfo(HWND__ *, tagWINDOWINFO *);
extern (Windows) int GetTitleBarInfo(HWND__ *, tagTITLEBARINFO *);
extern (Windows) int GetScrollBarInfo(HWND__ *, int, tagSCROLLBARINFO *);
extern (Windows) int GetMenuInfo(HMENU__ *, tagMENUINFO *);
extern (Windows) int GetMenuBarInfo(HWND__ *, int, int, tagMENUBARINFO *);
extern (Windows) uint GetListBoxInfo(HWND__ *);
extern (Windows) int GetLastInputInfo(tagLASTINPUTINFO *);
extern (Windows) int GetCursorInfo(tagCURSORINFO *);
extern (Windows) int GetComboBoxInfo(HWND__ *, tagCOMBOBOXINFO *);
extern (Windows) int GetAltTabInfoW(HWND__ *, int, tagALTTABINFO *, wchar *, uint);
extern (Windows) int GetAltTabInfoA(HWND__ *, int, tagALTTABINFO *, char *, uint);
extern (Windows) ushort GetWindowWord(HWND__ *, int);
extern (Windows) int GetWindowTextW(HWND__ *, wchar *, int);
extern (Windows) int GetWindowTextLengthW(HWND__ *);
extern (Windows) int GetWindowTextLengthA(HWND__ *);
extern (Windows) int GetWindowTextA(HWND__ *, char *, int);
extern (Windows) int GetWindowRgn(HWND__ *, HRGN__ *);
extern (Windows) int GetWindowRect(HWND__ *, tagRECT *);
extern (Windows) int GetWindowPlacement(HWND__ *, _WINDOWPLACEMENT *);
extern (Windows) HDC__ * GetWindowDC(HWND__ *);
extern (Windows) uint GetWindowContextHelpId(HWND__ *);
extern (Windows) HWND__ * GetWindow(HWND__ *, uint);
extern (Windows) int GetUserObjectSecurity(void *, uint *, _SECURITY_DESCRIPTOR *, uint, uint *);
extern (Windows) int GetUserObjectInformationW(void *, int, void *, uint, uint *);
extern (Windows) int GetUserObjectInformationA(void *, int, void *, uint, uint *);
extern (Windows) int GetUpdateRgn(HWND__ *, HRGN__ *, int);
extern (Windows) int GetUpdateRect(HWND__ *, tagRECT *, int);
extern (Windows) HWND__ * GetTopWindow(HWND__ *);
extern (Windows) HDESK__ * GetThreadDesktop(uint);
extern (Windows) int GetWindowLongW(HWND__ *, int);
extern (Windows) int GetWindowLongA(HWND__ *, int);
extern (Windows) uint GetTabbedTextExtentW(HDC__ *, wchar *, int, int, int *);
extern (Windows) uint GetTabbedTextExtentA(HDC__ *, char *, int, int, int *);
extern (Windows) int GetSystemMetrics(int);
extern (Windows) HMENU__ * GetSystemMenu(HWND__ *, int);
extern (Windows) HBRUSH__ * GetSysColorBrush(int);
extern (Windows) uint GetSysColor(int);
extern (Windows) HMENU__ * GetSubMenu(HMENU__ *, int);
extern (Windows) int GetScrollRange(HWND__ *, int, int *, int *);
extern (Windows) int GetScrollPos(HWND__ *, int);
extern (Windows) int GetScrollInfo(HWND__ *, int, tagSCROLLINFO *);
extern (Windows) uint GetQueueStatus(uint);
extern (Windows) void * GetPropW(HWND__ *, wchar *);
extern (Windows) void * GetPropA(HWND__ *, char *);
extern (Windows) int GetPriorityClipboardFormat(uint *, int);
extern (Windows) HWND__ * GetParent(HWND__ *);
extern (Windows) HWND__ * GetOpenClipboardWindow();
extern (Windows) HWND__ * GetNextDlgTabItem(HWND__ *, HWND__ *, int);
extern (Windows) HWND__ * GetNextDlgGroupItem(HWND__ *, HWND__ *, int);
extern (Windows) int GetMessageTime();
extern (Windows) uint GetMessagePos();
extern (Windows) int GetMessageExtraInfo();
extern (Windows) int GetMessageW(tagMSG *, HWND__ *, uint, uint);
extern (Windows) int GetMessageA(tagMSG *, HWND__ *, uint, uint);
extern (Windows) int GetMenuStringW(HMENU__ *, uint, wchar *, int, uint);
extern (Windows) int GetMenuStringA(HMENU__ *, uint, char *, int, uint);
extern (Windows) uint GetMenuState(HMENU__ *, uint, uint);
extern (Windows) int GetMenuItemRect(HWND__ *, HMENU__ *, uint, tagRECT *);
extern (Windows) int GetMenuItemInfoW(HMENU__ *, uint, int, tagMENUITEMINFOW *);
extern (Windows) int GetMenuItemInfoA(HMENU__ *, uint, int, tagMENUITEMINFOA *);
extern (Windows) uint GetMenuItemID(HMENU__ *, int);
extern (Windows) int GetMenuItemCount(HMENU__ *);
extern (Windows) uint GetMenuDefaultItem(HMENU__ *, uint, uint);
extern (Windows) uint GetMenuContextHelpId(HMENU__ *);
extern (Windows) int GetMenuCheckMarkDimensions();
extern (Windows) HMENU__ * GetMenu(HWND__ *);
extern (Windows) HWND__ * GetLastActivePopup(HWND__ *);
extern (Windows) short GetKeyState(int);
extern (Windows) int GetKeyNameTextW(int, wchar *, int);
extern (Windows) int GetKeyNameTextA(int, char *, int);
extern (Windows) int GetKeyboardType(int);
extern (Windows) int GetKeyboardState(char *);
extern (Windows) int GetKeyboardLayoutNameW(wchar *);
extern (Windows) int GetKeyboardLayoutNameA(char *);
extern (Windows) uint GetKeyboardLayoutList(int, HKL__ * *);
extern (Windows) HKL__ * GetKeyboardLayout(uint);
extern (Windows) uint GetKBCodePage();
extern (Windows) int GetInputState();
extern (Windows) int GetIconInfo(HICON__ *, _ICONINFO *);
extern (Windows) HWND__ * GetForegroundWindow();
extern (Windows) HWND__ * GetFocus();
extern (Windows) uint GetDoubleClickTime();
extern (Windows) uint GetDlgItemTextW(HWND__ *, int, wchar *, int);
extern (Windows) uint GetDlgItemTextA(HWND__ *, int, char *, int);
extern (Windows) uint GetDlgItemInt(HWND__ *, int, int *, int);
extern (Windows) HWND__ * GetDlgItem(HWND__ *, int);
extern (Windows) int GetDlgCtrlID(HWND__ *);
extern (Windows) int GetDialogBaseUnits();
extern (Windows) HWND__ * GetDesktopWindow();
extern (Windows) HDC__ * GetDCEx(HWND__ *, HRGN__ *, uint);
extern (Windows) HDC__ * GetDC(HWND__ *);
extern (Windows) int GetCursorPos(tagPOINT *);
extern (Windows) int GetClipCursor(tagRECT *);
extern (Windows) HWND__ * GetClipboardViewer();
extern (Windows) HWND__ * GetClipboardOwner();
extern (Windows) int GetClipboardFormatNameW(uint, wchar *, int);
extern (Windows) int GetClipboardFormatNameA(uint, char *, int);
extern (Windows) void * GetClipboardData(uint);
extern (Windows) int GetClientRect(HWND__ *, tagRECT *);
extern (Windows) ushort GetClassWord(HWND__ *, int);
extern (Windows) int GetClassNameW(HWND__ *, wchar *, int);
extern (Windows) int GetClassNameA(HWND__ *, char *, int);
extern (Windows) uint GetClassLongW(HWND__ *, int);
extern (Windows) uint GetClassLongA(HWND__ *, int);
extern (Windows) int GetClassInfoExW(HINSTANCE__ *, wchar *, _WNDCLASSEXW *);
extern (Windows) int GetClassInfoW(HINSTANCE__ *, wchar *, _WNDCLASSW *);
extern (Windows) int GetClassInfoExA(HINSTANCE__ *, char *, _WNDCLASSEXA *);
extern (Windows) int GetClassInfoA(HINSTANCE__ *, char *, _WNDCLASSA *);
extern (Windows) int GetCaretPos(tagPOINT *);
extern (Windows) uint GetCaretBlinkTime();
extern (Windows) HWND__ * GetCapture();
extern (Windows) short GetAsyncKeyState(int);
extern (Windows) HWND__ * GetAncestor(HWND__ *, uint);
extern (Windows) HWND__ * GetActiveWindow();
extern (Windows) int FrameRgn(HDC__ *, HRGN__ *, HBRUSH__ *, int, int);
extern (Windows) int FrameRect(HDC__ *, tagRECT *, HBRUSH__ *);
extern (Windows) int FlashWindow(HWND__ *, int);
extern (Windows) HWND__ * FindWindowW(wchar *, wchar *);
extern (Windows) HWND__ * FindWindowExW(HWND__ *, HWND__ *, wchar *, wchar *);
extern (Windows) HWND__ * FindWindowExA(HWND__ *, HWND__ *, char *, char *);
extern (Windows) HWND__ * FindWindowA(char *, char *);
extern (Windows) int ExitWindowsEx(uint, uint);
extern (Windows) int EqualRect(tagRECT *, tagRECT *);
extern (Windows) int EnumWindowStationsW(_BCD_func__4900, int);
extern (Windows) int EnumWindowStationsA(_BCD_func__4899, int);
extern (Windows) int EnumWindows(_BCD_func__5606, int);
extern (Windows) int EnumThreadWindows(uint, _BCD_func__5606, int);
extern (Windows) int EnumPropsExW(HWND__ *, _BCD_func__5611, int);
extern (Windows) int EnumPropsExA(HWND__ *, _BCD_func__5612, int);
extern (Windows) int EnumPropsW(HWND__ *, _BCD_func__5613);
extern (Windows) int EnumPropsA(HWND__ *, _BCD_func__5614);
extern (Windows) int EnumDisplayDevicesW(wchar *, uint, _DISPLAY_DEVICEW *, uint);
extern (Windows) int EnumDisplayDevicesA(char *, uint, _DISPLAY_DEVICEA *, uint);
extern (Windows) int EnumDisplaySettingsW(wchar *, uint, _devicemodeW *);
extern (Windows) int EnumDisplaySettingsA(char *, uint, _devicemodeA *);
extern (Windows) int EnumDisplayMonitors(HDC__ *, tagRECT *, _BCD_func__5605, int);
extern (Windows) int EnumDesktopWindows(HDESK__ *, _BCD_func__5606, int);
extern (Windows) int EnumDesktopsW(HWINSTA__ *, _BCD_func__4900, int);
extern (Windows) int EnumDesktopsA(HWINSTA__ *, _BCD_func__4899, int);
extern (Windows) uint EnumClipboardFormats(uint);
extern (Windows) int EnumChildWindows(HWND__ *, _BCD_func__5606, int);
extern (Windows) int EndPaint(HWND__ *, tagPAINTSTRUCT *);
extern (Windows) int EndMenu();
extern (Windows) int EndDialog(HWND__ *, int);
extern (Windows) int EndDeferWindowPos(HDWP__ *);
extern (Windows) int EnableWindow(HWND__ *, int);
extern (Windows) int EnableScrollBar(HWND__ *, uint, uint);
extern (Windows) int EnableMenuItem(HMENU__ *, uint, uint);
extern (Windows) int EmptyClipboard();
extern (Windows) int DrawTextExW(HDC__ *, wchar *, int, tagRECT *, uint, DRAWTEXTPARAMS *);
extern (Windows) int DrawTextExA(HDC__ *, char *, int, tagRECT *, uint, DRAWTEXTPARAMS *);
extern (Windows) int DrawTextW(HDC__ *, wchar *, int, tagRECT *, uint);
extern (Windows) int DrawTextA(HDC__ *, char *, int, tagRECT *, uint);
extern (Windows) int DrawStateW(HDC__ *, HBRUSH__ *, _BCD_func__5607, int, uint, int, int, int, int, uint);
extern (Windows) int DrawStateA(HDC__ *, HBRUSH__ *, _BCD_func__5607, int, uint, int, int, int, int, uint);
extern (Windows) int DrawMenuBar(HWND__ *);
extern (Windows) int DrawIconEx(HDC__ *, int, int, HICON__ *, int, int, uint, HBRUSH__ *, uint);
extern (Windows) int DrawIcon(HDC__ *, int, int, HICON__ *);
extern (Windows) int DrawFrameControl(HDC__ *, tagRECT *, uint, uint);
extern (Windows) int DrawFocusRect(HDC__ *, tagRECT *);
extern (Windows) int DrawEdge(HDC__ *, tagRECT *, uint, uint);
extern (Windows) int DrawCaption(HWND__ *, HDC__ *, tagRECT *, uint);
extern (Windows) int DrawAnimatedRects(HWND__ *, int, tagRECT *, tagRECT *);
extern (Windows) uint DragObject(HWND__ *, HWND__ *, uint, uint, HICON__ *);
extern (Windows) int DragDetect(HWND__ *, tagPOINT);
extern (Windows) int DlgDirSelectExW(HWND__ *, wchar *, int, int);
extern (Windows) int DlgDirSelectExA(HWND__ *, char *, int, int);
extern (Windows) int DlgDirSelectComboBoxExW(HWND__ *, wchar *, int, int);
extern (Windows) int DlgDirSelectComboBoxExA(HWND__ *, char *, int, int);
extern (Windows) int DlgDirListComboBoxW(HWND__ *, wchar *, int, int, uint);
extern (Windows) int DlgDirListComboBoxA(HWND__ *, char *, int, int, uint);
extern (Windows) int DlgDirListW(HWND__ *, wchar *, int, int, uint);
extern (Windows) int DlgDirListA(HWND__ *, char *, int, int, uint);
extern (Windows) int DispatchMessageW(tagMSG *);
extern (Windows) int DispatchMessageA(tagMSG *);
extern (Windows) int DialogBoxParamW(HINSTANCE__ *, wchar *, HWND__ *, _BCD_func__5618, int);
extern (Windows) int DialogBoxParamA(HINSTANCE__ *, char *, HWND__ *, _BCD_func__5618, int);
extern (Windows) int DialogBoxIndirectParamW(HINSTANCE__ *, DLGTEMPLATE *, HWND__ *, _BCD_func__5618, int);
extern (Windows) int DialogBoxIndirectParamA(HINSTANCE__ *, DLGTEMPLATE *, HWND__ *, _BCD_func__5618, int);
extern (Windows) int DestroyWindow(HWND__ *);
extern (Windows) int DestroyMenu(HMENU__ *);
extern (Windows) int DestroyIcon(HICON__ *);
extern (Windows) int DestroyCursor(HICON__ *);
extern (Windows) int DestroyCaret();
extern (Windows) int DestroyAcceleratorTable(HACCEL__ *);
extern (Windows) int DeregisterShellHookWindow(HWND__ *);
extern (Windows) int DeleteMenu(HMENU__ *, uint, uint);
extern (Windows) int DefWindowProcW(HWND__ *, uint, uint, int);
extern (Windows) int DefWindowProcA(HWND__ *, uint, uint, int);
extern (Windows) int DefMDIChildProcW(HWND__ *, uint, uint, int);
extern (Windows) int DefMDIChildProcA(HWND__ *, uint, uint, int);
extern (Windows) int DefFrameProcW(HWND__ *, HWND__ *, uint, uint, int);
extern (Windows) int DefFrameProcA(HWND__ *, HWND__ *, uint, uint, int);
extern (Windows) HDWP__ * DeferWindowPos(HDWP__ *, HWND__ *, HWND__ *, int, int, int, int, uint);
extern (Windows) int DefDlgProcW(HWND__ *, uint, uint, int);
extern (Windows) int DefDlgProcA(HWND__ *, uint, uint, int);
extern (Windows) HWINSTA__ * CreateWindowStationW(wchar *, uint, uint, _SECURITY_ATTRIBUTES *);
extern (Windows) HWINSTA__ * CreateWindowStationA(char *, uint, uint, _SECURITY_ATTRIBUTES *);
extern (Windows) HWND__ * CreateWindowExW(uint, wchar *, wchar *, uint, int, int, int, int, HWND__ *, HMENU__ *, HINSTANCE__ *, void *);
extern (Windows) HWND__ * CreateWindowExA(uint, char *, char *, uint, int, int, int, int, HWND__ *, HMENU__ *, HINSTANCE__ *, void *);
extern (Windows) HMENU__ * CreatePopupMenu();
extern (Windows) HMENU__ * CreateMenu();
extern (Windows) HWND__ * CreateMDIWindowW(wchar *, wchar *, uint, int, int, int, int, HWND__ *, HINSTANCE__ *, int);
extern (Windows) HWND__ * CreateMDIWindowA(char *, char *, uint, int, int, int, int, HWND__ *, HINSTANCE__ *, int);
extern (Windows) HICON__ * CreateIconIndirect(_ICONINFO *);
extern (Windows) HICON__ * CreateIconFromResourceEx(char *, uint, int, uint, int, int, uint);
extern (Windows) HICON__ * CreateIconFromResource(char *, uint, int, uint);
extern (Windows) HICON__ * CreateIcon(HINSTANCE__ *, int, int, char, char, char *, char *);
extern (Windows) HWND__ * CreateDialogParamW(HINSTANCE__ *, wchar *, HWND__ *, _BCD_func__5618, int);
extern (Windows) HWND__ * CreateDialogParamA(HINSTANCE__ *, char *, HWND__ *, _BCD_func__5618, int);
extern (Windows) HWND__ * CreateDialogIndirectParamW(HINSTANCE__ *, DLGTEMPLATE *, HWND__ *, _BCD_func__5618, int);
extern (Windows) HWND__ * CreateDialogIndirectParamA(HINSTANCE__ *, DLGTEMPLATE *, HWND__ *, _BCD_func__5618, int);
extern (Windows) HDESK__ * CreateDesktopW(wchar *, wchar *, _devicemodeW *, uint, uint, _SECURITY_ATTRIBUTES *);
extern (Windows) HDESK__ * CreateDesktopA(char *, char *, _devicemodeA *, uint, uint, _SECURITY_ATTRIBUTES *);
extern (Windows) HICON__ * CreateCursor(HINSTANCE__ *, int, int, int, int, void *, void *);
extern (Windows) int CreateCaret(HWND__ *, HBITMAP__ *, int, int);
extern (Windows) HACCEL__ * CreateAcceleratorTableW(tagACCEL *, int);
extern (Windows) HACCEL__ * CreateAcceleratorTableA(tagACCEL *, int);
extern (Windows) int CountClipboardFormats();
extern (Windows) int CopyRect(tagRECT *, tagRECT *);
extern (Windows) void * CopyImage(void *, uint, int, int, uint);
extern (Windows) HICON__ * CopyIcon(HICON__ *);
extern (Windows) int CopyAcceleratorTableW(HACCEL__ *, tagACCEL *, int);
extern (Windows) int CopyAcceleratorTableA(HACCEL__ *, tagACCEL *, int);
extern (Windows) int CloseWindowStation(HWINSTA__ *);
extern (Windows) int CloseWindow(HWND__ *);
extern (Windows) int CloseDesktop(HDESK__ *);
extern (Windows) int CloseClipboard();
extern (Windows) int ClipCursor(tagRECT *);
extern (Windows) int ClientToScreen(HWND__ *, tagPOINT *);
extern (Windows) HWND__ * ChildWindowFromPointEx(HWND__ *, tagPOINT, uint);
extern (Windows) HWND__ * ChildWindowFromPoint(HWND__ *, tagPOINT);
extern (Windows) int CheckRadioButton(HWND__ *, int, int, int);
extern (Windows) int CheckMenuRadioItem(HMENU__ *, uint, uint, uint, uint);
extern (Windows) uint CheckMenuItem(HMENU__ *, uint, uint);
extern (Windows) int CheckDlgButton(HWND__ *, int, uint);
extern (Windows) uint CharUpperBuffW(wchar *, uint);
extern (Windows) uint CharUpperBuffA(char *, uint);
extern (Windows) wchar * CharUpperW(wchar *);
extern (Windows) char * CharUpperA(char *);
extern (Windows) int CharToOemBuffW(wchar *, char *, uint);
extern (Windows) int CharToOemBuffA(char *, char *, uint);
extern (Windows) int CharToOemW(wchar *, char *);
extern (Windows) int CharToOemA(char *, char *);
extern (Windows) wchar * CharPrevExW(ushort, wchar *, wchar *, uint);
extern (Windows) char * CharPrevExA(ushort, char *, char *, uint);
extern (Windows) wchar * CharPrevW(wchar *, wchar *);
extern (Windows) char * CharPrevA(char *, char *);
extern (Windows) wchar * CharNextExW(ushort, wchar *, uint);
extern (Windows) char * CharNextExA(ushort, char *, uint);
extern (Windows) wchar * CharNextW(wchar *);
extern (Windows) char * CharNextA(char *);
extern (Windows) uint CharLowerBuffW(wchar *, uint);
extern (Windows) uint CharLowerBuffA(char *, uint);
extern (Windows) wchar * CharLowerW(wchar *);
extern (Windows) char * CharLowerA(char *);
extern (Windows) int ChangeMenuW(HMENU__ *, uint, wchar *, uint, uint);
extern (Windows) int ChangeMenuA(HMENU__ *, uint, char *, uint, uint);
extern (Windows) int ChangeDisplaySettingsExW(wchar *, _devicemodeW *, HWND__ *, uint, void *);
extern (Windows) int ChangeDisplaySettingsExA(char *, _devicemodeA *, HWND__ *, uint, void *);
extern (Windows) int ChangeDisplaySettingsW(_devicemodeW *, uint);
extern (Windows) int ChangeDisplaySettingsA(_devicemodeA *, uint);
extern (Windows) int ChangeClipboardChain(HWND__ *, HWND__ *);
extern (Windows) ushort CascadeWindows(HWND__ *, uint, tagRECT *, uint, HWND__ * *);
extern (Windows) int CallWindowProcW(_BCD_func__5608, HWND__ *, uint, uint, int);
extern (Windows) int CallWindowProcA(_BCD_func__5608, HWND__ *, uint, uint, int);
extern (Windows) int CallNextHookEx(HHOOK__ *, int, uint, int);
extern (Windows) int CallMsgFilterW(tagMSG *, int);
extern (Windows) int CallMsgFilterA(tagMSG *, int);
extern (Windows) int BroadcastSystemMessageW(uint, uint *, uint, uint, int);
extern (Windows) int BroadcastSystemMessageA(uint, uint *, uint, uint, int);
extern (Windows) int BroadcastSystemMessage(uint, uint *, uint, uint, int);
extern (Windows) int BringWindowToTop(HWND__ *);
extern (Windows) HDC__ * BeginPaint(HWND__ *, tagPAINTSTRUCT *);
extern (Windows) HDWP__ * BeginDeferWindowPos(int);
extern (Windows) int AttachThreadInput(uint, uint, int);
extern (Windows) uint ArrangeIconicWindows(HWND__ *);
extern (Windows) int AppendMenuW(HMENU__ *, uint, uint, wchar *);
extern (Windows) int AppendMenuA(HMENU__ *, uint, uint, char *);
extern (Windows) int AnyPopup();
extern (Windows) int AdjustWindowRectEx(tagRECT *, uint, int, uint);
extern (Windows) int AdjustWindowRect(tagRECT *, uint, int);
extern (Windows) HKL__ * ActivateKeyboardLayout(HKL__ *, uint);
extern (Windows) int wglUseFontOutlinesW(HDC__ *, uint, uint, uint, float, float, int, _GLYPHMETRICSFLOAT *);
extern (Windows) int wglUseFontOutlinesA(HDC__ *, uint, uint, uint, float, float, int, _GLYPHMETRICSFLOAT *);
extern (Windows) int wglUseFontBitmapsW(HDC__ *, uint, uint, uint);
extern (Windows) int wglUseFontBitmapsA(HDC__ *, uint, uint, uint);
extern (Windows) int wglSwapLayerBuffers(HDC__ *, uint);
extern (Windows) int wglShareLists(HGLRC__ *, HGLRC__ *);
extern (Windows) int wglSetLayerPaletteEntries(HDC__ *, int, int, int, uint *);
extern (Windows) int wglRealizeLayerPalette(HDC__ *, int, int);
extern (Windows) int wglMakeCurrent(HDC__ *, HGLRC__ *);
extern (Windows) _BCD_func__7321 wglGetProcAddress(char *);
extern (Windows) int wglGetLayerPaletteEntries(HDC__ *, int, int, int, uint *);
extern (Windows) HDC__ * wglGetCurrentDC();
extern (Windows) HGLRC__ * wglGetCurrentContext();
extern (Windows) int wglDescribeLayerPlane(HDC__ *, int, int, uint, tagLAYERPLANEDESCRIPTOR *);
extern (Windows) int wglDeleteContext(HGLRC__ *);
extern (Windows) HGLRC__ * wglCreateLayerContext(HDC__ *, int);
extern (Windows) HGLRC__ * wglCreateContext(HDC__ *);
extern (Windows) int wglCopyContext(HGLRC__ *, HGLRC__ *, uint);
extern (Windows) int WidenPath(HDC__ *);
extern (Windows) int UpdateICMRegKeyW(uint, uint, wchar *, uint);
extern (Windows) int UpdateICMRegKeyA(uint, uint, char *, uint);
extern (Windows) int UpdateColors(HDC__ *);
extern (Windows) int UnrealizeObject(void *);
extern (Windows) int TranslateCharsetInfo(uint *, CHARSETINFO *, uint);
extern (Windows) int TextOutW(HDC__ *, int, int, wchar *, int);
extern (Windows) int TextOutA(HDC__ *, int, int, char *, int);
extern (Windows) int SwapBuffers(HDC__ *);
extern (Windows) int StrokePath(HDC__ *);
extern (Windows) int StrokeAndFillPath(HDC__ *);
extern (Windows) int StretchDIBits(HDC__ *, int, int, int, int, int, int, int, int, void *, tagBITMAPINFO *, uint, uint);
extern (Windows) int StretchBlt(HDC__ *, int, int, int, int, HDC__ *, int, int, int, int, uint);
extern (Windows) int StartPage(HDC__ *);
extern (Windows) int StartDocW(HDC__ *, _DOCINFOW *);
extern (Windows) int StartDocA(HDC__ *, _DOCINFOA *);
extern (Windows) int SetWorldTransform(HDC__ *, _XFORM *);
extern (Windows) HENHMETAFILE__ * SetWinMetaFileBits(uint, char *, HDC__ *, tagMETAFILEPICT *);
extern (Windows) int SetWindowOrgEx(HDC__ *, int, int, tagPOINT *);
extern (Windows) int SetWindowExtEx(HDC__ *, int, int, tagSIZE *);
extern (Windows) int SetViewportOrgEx(HDC__ *, int, int, tagPOINT *);
extern (Windows) int SetViewportExtEx(HDC__ *, int, int, tagSIZE *);
extern (Windows) int SetTextJustification(HDC__ *, int, int);
extern (Windows) uint SetTextColor(HDC__ *, uint);
extern (Windows) int SetTextCharacterExtra(HDC__ *, int);
extern (Windows) uint SetTextAlign(HDC__ *, uint);
extern (Windows) uint SetSystemPaletteUse(HDC__ *, uint);
extern (Windows) int SetStretchBltMode(HDC__ *, int);
extern (Windows) int SetROP2(HDC__ *, int);
extern (Windows) int SetRectRgn(HRGN__ *, int, int, int, int);
extern (Windows) int SetPolyFillMode(HDC__ *, int);
extern (Windows) int SetPixelV(HDC__ *, int, int, uint);
extern (Windows) int SetPixelFormat(HDC__ *, int, tagPIXELFORMATDESCRIPTOR *);
extern (Windows) uint SetPixel(HDC__ *, int, int, uint);
extern (Windows) uint SetPaletteEntries(HPALETTE__ *, uint, uint, tagPALETTEENTRY *);
extern (Windows) int SetMiterLimit(HDC__ *, float, float *);
extern (Windows) int SetMetaRgn(HDC__ *);
extern (Windows) HMETAFILE__ * SetMetaFileBitsEx(uint, char *);
extern (Windows) uint SetMapperFlags(HDC__ *, uint);
extern (Windows) int SetMapMode(HDC__ *, int);
extern (Windows) int SetICMProfileW(HDC__ *, wchar *);
extern (Windows) int SetICMProfileA(HDC__ *, char *);
extern (Windows) int SetICMMode(HDC__ *, int);
extern (Windows) int SetGraphicsMode(HDC__ *, int);
extern (Windows) HENHMETAFILE__ * SetEnhMetaFileBits(uint, char *);
extern (Windows) int SetDIBitsToDevice(HDC__ *, int, int, uint, uint, int, int, uint, uint, void *, tagBITMAPINFO *, uint);
extern (Windows) int SetDIBits(HDC__ *, HBITMAP__ *, uint, uint, void *, tagBITMAPINFO *, uint);
extern (Windows) uint SetDIBColorTable(HDC__ *, uint, uint, tagRGBQUAD *);
extern (Windows) int SetDeviceGammaRamp(HDC__ *, void *);
extern (Windows) int SetColorSpace(HDC__ *, HCOLORSPACE__ *);
extern (Windows) int SetColorAdjustment(HDC__ *, tagCOLORADJUSTMENT *);
extern (Windows) int SetBrushOrgEx(HDC__ *, int, int, tagPOINT *);
extern (Windows) uint SetBoundsRect(HDC__ *, tagRECT *, uint);
extern (Windows) int SetBkMode(HDC__ *, int);
extern (Windows) uint SetBkColor(HDC__ *, uint);
extern (Windows) int SetBitmapDimensionEx(HBITMAP__ *, int, int, tagSIZE *);
extern (Windows) int SetBitmapBits(HBITMAP__ *, uint, void *);
extern (Windows) int SetArcDirection(HDC__ *, int);
extern (Windows) int SetAbortProc(HDC__ *, _BCD_func__5860);
extern (Windows) HPALETTE__ * SelectPalette(HDC__ *, HPALETTE__ *, int);
extern (Windows) void * SelectObject(HDC__ *, void *);
extern (Windows) int SelectClipRgn(HDC__ *, HRGN__ *);
extern (Windows) int SelectClipPath(HDC__ *, int);
extern (Windows) int ScaleWindowExtEx(HDC__ *, int, int, int, int, tagSIZE *);
extern (Windows) int ScaleViewportExtEx(HDC__ *, int, int, int, int, tagSIZE *);
extern (Windows) int SaveDC(HDC__ *);
extern (Windows) int RoundRect(HDC__ *, int, int, int, int, int, int);
extern (Windows) int RestoreDC(HDC__ *, int);
extern (Windows) int ResizePalette(HPALETTE__ *, uint);
extern (Windows) HDC__ * ResetDCW(HDC__ *, _devicemodeW *);
extern (Windows) HDC__ * ResetDCA(HDC__ *, _devicemodeA *);
extern (Windows) int RemoveFontResourceW(wchar *);
extern (Windows) int RemoveFontResourceA(char *);
extern (Windows) int RectVisible(HDC__ *, tagRECT *);
extern (Windows) int RectInRegion(HRGN__ *, tagRECT *);
extern (Windows) int Rectangle(HDC__ *, int, int, int, int);
extern (Windows) uint RealizePalette(HDC__ *);
extern (Windows) int PtVisible(HDC__ *, int, int);
extern (Windows) int PtInRegion(HRGN__ *, int, int);
extern (Windows) int PolyTextOutW(HDC__ *, _POLYTEXTW *, int);
extern (Windows) int PolyTextOutA(HDC__ *, _POLYTEXTA *, int);
extern (Windows) int PolyPolyline(HDC__ *, tagPOINT *, uint *, uint);
extern (Windows) int PolyPolygon(HDC__ *, tagPOINT *, int *, int);
extern (Windows) int PolylineTo(HDC__ *, tagPOINT *, uint);
extern (Windows) int Polyline(HDC__ *, tagPOINT *, int);
extern (Windows) int Polygon(HDC__ *, tagPOINT *, int);
extern (Windows) int PolyDraw(HDC__ *, tagPOINT *, char *, int);
extern (Windows) int PolyBezierTo(HDC__ *, tagPOINT *, uint);
extern (Windows) int PolyBezier(HDC__ *, tagPOINT *, uint);
extern (Windows) int PlgBlt(HDC__ *, tagPOINT *, HDC__ *, int, int, int, int, HBITMAP__ *, int, int);
extern (Windows) int PlayMetaFileRecord(HDC__ *, tagHANDLETABLE *, tagMETARECORD *, uint);
extern (Windows) int PlayMetaFile(HDC__ *, HMETAFILE__ *);
extern (Windows) int PlayEnhMetaFileRecord(HDC__ *, tagHANDLETABLE *, tagENHMETARECORD *, uint);
extern (Windows) int PlayEnhMetaFile(HDC__ *, HENHMETAFILE__ *, tagRECT *);
extern (Windows) int Pie(HDC__ *, int, int, int, int, int, int, int, int);
extern (Windows) HRGN__ * PathToRegion(HDC__ *);
extern (Windows) int PatBlt(HDC__ *, int, int, int, int, uint);
extern (Windows) int PaintRgn(HDC__ *, HRGN__ *);
extern (Windows) int OffsetWindowOrgEx(HDC__ *, int, int, tagPOINT *);
extern (Windows) int OffsetViewportOrgEx(HDC__ *, int, int, tagPOINT *);
extern (Windows) int OffsetRgn(HRGN__ *, int, int);
extern (Windows) int OffsetClipRgn(HDC__ *, int, int);
extern (Windows) int MoveToEx(HDC__ *, int, int, tagPOINT *);
extern (Windows) int ModifyWorldTransform(HDC__ *, _XFORM *, uint);
extern (Windows) int MaskBlt(HDC__ *, int, int, int, int, HDC__ *, int, int, HBITMAP__ *, int, int, uint);
extern (Windows) int LPtoDP(HDC__ *, tagPOINT *, int);
extern (Windows) int LineTo(HDC__ *, int, int);
extern (Windows) int LineDDA(int, int, int, int, _BCD_func__5852, int);
extern (Windows) int InvertRgn(HDC__ *, HRGN__ *);
extern (Windows) int IntersectClipRect(HDC__ *, int, int, int, int);
extern (Windows) int GetWorldTransform(HDC__ *, _XFORM *);
extern (Windows) uint GetWinMetaFileBits(HENHMETAFILE__ *, uint, char *, int, HDC__ *);
extern (Windows) int GetWindowOrgEx(HDC__ *, tagPOINT *);
extern (Windows) int GetWindowExtEx(HDC__ *, tagSIZE *);
extern (Windows) int GetViewportOrgEx(HDC__ *, tagPOINT *);
extern (Windows) int GetViewportExtEx(HDC__ *, tagSIZE *);
extern (Windows) int GetTextMetricsW(HDC__ *, tagTEXTMETRICW *);
extern (Windows) int GetTextMetricsA(HDC__ *, tagTEXTMETRICA *);
extern (Windows) int GetTextFaceW(HDC__ *, int, wchar *);
extern (Windows) int GetTextFaceA(HDC__ *, int, char *);
extern (Windows) int GetTextExtentPoint32W(HDC__ *, wchar *, int, tagSIZE *);
extern (Windows) int GetTextExtentPoint32A(HDC__ *, char *, int, tagSIZE *);
extern (Windows) int GetTextExtentPointW(HDC__ *, wchar *, int, tagSIZE *);
extern (Windows) int GetTextExtentPointA(HDC__ *, char *, int, tagSIZE *);
extern (Windows) int GetTextExtentExPointW(HDC__ *, wchar *, int, int, int *, int *, tagSIZE *);
extern (Windows) int GetTextExtentExPointA(HDC__ *, char *, int, int, int *, int *, tagSIZE *);
extern (Windows) uint GetTextColor(HDC__ *);
extern (Windows) int GetTextCharsetInfo(HDC__ *, tagFONTSIGNATURE *, uint);
extern (Windows) int GetTextCharset(HDC__ *);
extern (Windows) int GetTextCharacterExtra(HDC__ *);
extern (Windows) uint GetTextAlign(HDC__ *);
extern (Windows) uint GetSystemPaletteUse(HDC__ *);
extern (Windows) uint GetSystemPaletteEntries(HDC__ *, uint, uint, tagPALETTEENTRY *);
extern (Windows) int GetStretchBltMode(HDC__ *);
extern (Windows) void * GetStockObject(int);
extern (Windows) int GetROP2(HDC__ *);
extern (Windows) int GetRgnBox(HRGN__ *, tagRECT *);
extern (Windows) uint GetRegionData(HRGN__ *, uint, _RGNDATA *);
extern (Windows) int GetRandomRgn(HDC__ *, HRGN__ *, int);
extern (Windows) int GetRasterizerCaps(_RASTERIZER_STATUS *, uint);
extern (Windows) int GetPolyFillMode(HDC__ *);
extern (Windows) int GetPixelFormat(HDC__ *);
extern (Windows) uint GetPixel(HDC__ *, int, int);
extern (Windows) int GetPath(HDC__ *, tagPOINT *, char *, int);
extern (Windows) uint GetPaletteEntries(HPALETTE__ *, uint, uint, tagPALETTEENTRY *);
extern (Windows) uint GetOutlineTextMetricsW(HDC__ *, uint, _OUTLINETEXTMETRICW *);
extern (Windows) uint GetOutlineTextMetricsA(HDC__ *, uint, _OUTLINETEXTMETRICA *);
extern (Windows) uint GetObjectType(void *);
extern (Windows) int GetObjectW(void *, int, void *);
extern (Windows) int GetObjectA(void *, int, void *);
extern (Windows) uint GetNearestPaletteIndex(HPALETTE__ *, uint);
extern (Windows) uint GetNearestColor(HDC__ *, uint);
extern (Windows) int GetMiterLimit(HDC__ *, float *);
extern (Windows) int GetMetaRgn(HDC__ *, HRGN__ *);
extern (Windows) uint GetMetaFileBitsEx(HMETAFILE__ *, uint, void *);
extern (Windows) HMETAFILE__ * GetMetaFileW(wchar *);
extern (Windows) HMETAFILE__ * GetMetaFileA(char *);
extern (Windows) int GetMapMode(HDC__ *);
extern (Windows) int GetLogColorSpaceW(HCOLORSPACE__ *, tagLOGCOLORSPACEW *, uint);
extern (Windows) int GetLogColorSpaceA(HCOLORSPACE__ *, tagLOGCOLORSPACEA *, uint);
extern (Windows) uint GetKerningPairsW(HDC__ *, uint, tagKERNINGPAIR *);
extern (Windows) uint GetKerningPairsA(HDC__ *, uint, tagKERNINGPAIR *);
extern (Windows) int GetICMProfileW(HDC__ *, uint *, wchar *);
extern (Windows) int GetICMProfileA(HDC__ *, uint *, char *);
extern (Windows) int GetGraphicsMode(HDC__ *);
extern (Windows) uint GetGlyphOutlineW(HDC__ *, uint, uint, _GLYPHMETRICS *, uint, void *, _MAT2 *);
extern (Windows) uint GetGlyphOutlineA(HDC__ *, uint, uint, _GLYPHMETRICS *, uint, void *, _MAT2 *);
extern (Windows) uint GetFontLanguageInfo(HDC__ *);
extern (Windows) uint GetFontData(HDC__ *, uint, uint, void *, uint);
extern (Windows) uint GetEnhMetaFilePixelFormat(HENHMETAFILE__ *, uint, tagPIXELFORMATDESCRIPTOR *);
extern (Windows) uint GetEnhMetaFilePaletteEntries(HENHMETAFILE__ *, uint, tagPALETTEENTRY *);
extern (Windows) uint GetEnhMetaFileHeader(HENHMETAFILE__ *, uint, tagENHMETAHEADER *);
extern (Windows) uint GetEnhMetaFileDescriptionW(HENHMETAFILE__ *, uint, wchar *);
extern (Windows) uint GetEnhMetaFileDescriptionA(HENHMETAFILE__ *, uint, char *);
extern (Windows) uint GetEnhMetaFileBits(HENHMETAFILE__ *, uint, char *);
extern (Windows) HENHMETAFILE__ * GetEnhMetaFileW(wchar *);
extern (Windows) HENHMETAFILE__ * GetEnhMetaFileA(char *);
extern (Windows) int GetDIBits(HDC__ *, HBITMAP__ *, uint, uint, void *, tagBITMAPINFO *, uint);
extern (Windows) uint GetDIBColorTable(HDC__ *, uint, uint, tagRGBQUAD *);
extern (Windows) int GetDeviceGammaRamp(HDC__ *, void *);
extern (Windows) int GetDeviceCaps(HDC__ *, int);
extern (Windows) int GetDCOrgEx(HDC__ *, tagPOINT *);
extern (Windows) HICON__ * GetCursor();
extern (Windows) int GetCurrentPositionEx(HDC__ *, tagPOINT *);
extern (Windows) void * GetCurrentObject(HDC__ *, uint);
extern (Windows) void * GetColorSpace(HDC__ *);
extern (Windows) int GetColorAdjustment(HDC__ *, tagCOLORADJUSTMENT *);
extern (Windows) int GetClipRgn(HDC__ *, HRGN__ *);
extern (Windows) int GetClipBox(HDC__ *, tagRECT *);
extern (Windows) int GetCharWidthFloatW(HDC__ *, uint, uint, float *);
extern (Windows) int GetCharWidthFloatA(HDC__ *, uint, uint, float *);
extern (Windows) int GetCharWidthW(HDC__ *, uint, uint, int *);
extern (Windows) int GetCharWidthA(HDC__ *, uint, uint, int *);
extern (Windows) int GetCharWidth32W(HDC__ *, uint, uint, int *);
extern (Windows) int GetCharWidth32A(HDC__ *, uint, uint, int *);
extern (Windows) uint GetCharacterPlacementW(HDC__ *, wchar *, int, int, tagGCP_RESULTSW *, uint);
extern (Windows) uint GetCharacterPlacementA(HDC__ *, char *, int, int, tagGCP_RESULTSA *, uint);
extern (Windows) int GetCharABCWidthsFloatW(HDC__ *, uint, uint, _ABCFLOAT *);
extern (Windows) int GetCharABCWidthsFloatA(HDC__ *, uint, uint, _ABCFLOAT *);
extern (Windows) int GetCharABCWidthsW(HDC__ *, uint, uint, _ABC *);
extern (Windows) int GetCharABCWidthsA(HDC__ *, uint, uint, _ABC *);
extern (Windows) int GetBrushOrgEx(HDC__ *, tagPOINT *);
extern (Windows) uint GetBoundsRect(HDC__ *, tagRECT *, uint);
extern (Windows) int GetBkMode(HDC__ *);
extern (Windows) uint GetBkColor(HDC__ *);
extern (Windows) int GetBitmapDimensionEx(HBITMAP__ *, tagSIZE *);
extern (Windows) int GetBitmapBits(HBITMAP__ *, int, void *);
extern (Windows) int GetAspectRatioFilterEx(HDC__ *, tagSIZE *);
extern (Windows) int GetArcDirection(HDC__ *);
extern (Windows) uint GdiSetBatchLimit(uint);
extern (Windows) uint GdiGetBatchLimit();
extern (Windows) int GdiFlush();
extern (Windows) int GdiComment(HDC__ *, uint, char *);
extern (Windows) int FloodFill(HDC__ *, int, int, uint);
extern (Windows) int FlattenPath(HDC__ *);
extern (Windows) int FixBrushOrgEx(HDC__ *, int, int, tagPOINT *);
extern (Windows) int FillRgn(HDC__ *, HRGN__ *, HBRUSH__ *);
extern (Windows) int FillRect(HDC__ *, tagRECT *, HBRUSH__ *);
extern (Windows) int FillPath(HDC__ *);
extern (Windows) int ExtTextOutW(HDC__ *, int, int, uint, tagRECT *, wchar *, uint, int *);
extern (Windows) int ExtTextOutA(HDC__ *, int, int, uint, tagRECT *, char *, uint, int *);
extern (Windows) int ExtSelectClipRgn(HDC__ *, HRGN__ *, int);
extern (Windows) int ExtFloodFill(HDC__ *, int, int, uint, uint);
extern (Windows) int ExtEscape(HDC__ *, int, int, char *, int, char *);
extern (Windows) HRGN__ * ExtCreateRegion(_XFORM *, uint, _RGNDATA *);
extern (Windows) HPEN__ * ExtCreatePen(uint, uint, tagLOGBRUSH *, uint, uint *);
extern (Windows) int ExcludeUpdateRgn(HDC__ *, HWND__ *);
extern (Windows) int ExcludeClipRect(HDC__ *, int, int, int, int);
extern (Windows) int Escape(HDC__ *, int, int, char *, void *);
extern (Windows) int EqualRgn(HRGN__ *, HRGN__ *);
extern (Windows) int EnumObjects(HDC__ *, int, _BCD_func__5853, int);
extern (Windows) int EnumMetaFile(HDC__ *, HMETAFILE__ *, _BCD_func__5859, int);
extern (Windows) int EnumICMProfilesW(HDC__ *, _BCD_func__5854, int);
extern (Windows) int EnumICMProfilesA(HDC__ *, _BCD_func__5855, int);
extern (Windows) int EnumFontsW(HDC__ *, wchar *, _BCD_func__5856, int);
extern (Windows) int EnumFontsA(HDC__ *, char *, _BCD_func__5857, int);
extern (Windows) int EnumFontFamiliesExW(HDC__ *, tagLOGFONTW *, _BCD_func__5856, int, uint);
extern (Windows) int EnumFontFamiliesExA(HDC__ *, tagLOGFONTA *, _BCD_func__5857, int, uint);
extern (Windows) int EnumFontFamiliesW(HDC__ *, wchar *, _BCD_func__5856, int);
extern (Windows) int EnumFontFamiliesA(HDC__ *, char *, _BCD_func__5857, int);
extern (Windows) int EnumEnhMetaFile(HDC__ *, HENHMETAFILE__ *, _BCD_func__5858, void *, tagRECT *);
extern (Windows) int EndPath(HDC__ *);
extern (Windows) int EndPage(HDC__ *);
extern (Windows) int EndDoc(HDC__ *);
extern (Windows) int Ellipse(HDC__ *, int, int, int, int);
extern (Windows) int DrawEscape(HDC__ *, int, int, char *);
extern (Windows) int DPtoLP(HDC__ *, tagPOINT *, int);
extern (Windows) uint DeviceCapabilitiesW(wchar *, wchar *, ushort, wchar *, _devicemodeW *);
extern (Windows) uint DeviceCapabilitiesA(char *, char *, ushort, char *, _devicemodeA *);
extern (Windows) int DescribePixelFormat(HDC__ *, int, uint, tagPIXELFORMATDESCRIPTOR *);
extern (Windows) int DeleteObject(void *);
extern (Windows) int DeleteMetaFile(HMETAFILE__ *);
extern (Windows) int DeleteEnhMetaFile(HENHMETAFILE__ *);
extern (Windows) int DeleteDC(HDC__ *);
extern (Windows) int DeleteColorSpace(HCOLORSPACE__ *);
extern (Windows) HBRUSH__ * CreateSolidBrush(uint);
extern (Windows) int CreateScalableFontResourceW(uint, wchar *, wchar *, wchar *);
extern (Windows) int CreateScalableFontResourceA(uint, char *, char *, char *);
extern (Windows) HRGN__ * CreateRoundRectRgn(int, int, int, int, int, int);
extern (Windows) HRGN__ * CreateRectRgnIndirect(tagRECT *);
extern (Windows) HRGN__ * CreateRectRgn(int, int, int, int);
extern (Windows) HRGN__ * CreatePolyPolygonRgn(tagPOINT *, int *, int, int);
extern (Windows) HRGN__ * CreatePolygonRgn(tagPOINT *, int, int);
extern (Windows) HPEN__ * CreatePenIndirect(tagLOGPEN *);
extern (Windows) HPEN__ * CreatePen(int, int, uint);
extern (Windows) HBRUSH__ * CreatePatternBrush(HBITMAP__ *);
extern (Windows) HPALETTE__ * CreatePalette(tagLOGPALETTE *);
extern (Windows) HDC__ * CreateMetaFileW(wchar *);
extern (Windows) HDC__ * CreateMetaFileA(char *);
extern (Windows) HDC__ * CreateICW(wchar *, wchar *, wchar *, _devicemodeW *);
extern (Windows) HDC__ * CreateICA(char *, char *, char *, _devicemodeA *);
extern (Windows) HBRUSH__ * CreateHatchBrush(int, uint);
extern (Windows) HPALETTE__ * CreateHalftonePalette(HDC__ *);
extern (Windows) HFONT__ * CreateFontIndirectW(tagLOGFONTW *);
extern (Windows) HFONT__ * CreateFontIndirectA(tagLOGFONTA *);
extern (Windows) HFONT__ * CreateFontW(int, int, int, int, int, uint, uint, uint, uint, uint, uint, uint, uint, wchar *);
extern (Windows) HFONT__ * CreateFontA(int, int, int, int, int, uint, uint, uint, uint, uint, uint, uint, uint, char *);
extern (Windows) HDC__ * CreateEnhMetaFileW(HDC__ *, wchar *, tagRECT *, wchar *);
extern (Windows) HDC__ * CreateEnhMetaFileA(HDC__ *, char *, tagRECT *, char *);
extern (Windows) HRGN__ * CreateEllipticRgnIndirect(tagRECT *);
extern (Windows) HRGN__ * CreateEllipticRgn(int, int, int, int);
extern (Windows) HBITMAP__ * CreateDiscardableBitmap(HDC__ *, int, int);
extern (Windows) HBITMAP__ * CreateDIBSection(HDC__ *, tagBITMAPINFO *, uint, void * *, void *, uint);
extern (Windows) HBRUSH__ * CreateDIBPatternBrushPt(void *, uint);
extern (Windows) HBRUSH__ * CreateDIBPatternBrush(void *, uint);
extern (Windows) HBITMAP__ * CreateDIBitmap(HDC__ *, tagBITMAPINFOHEADER *, uint, void *, tagBITMAPINFO *, uint);
extern (Windows) HDC__ * CreateDCW(wchar *, wchar *, wchar *, _devicemodeW *);
extern (Windows) HDC__ * CreateDCA(char *, char *, char *, _devicemodeA *);
extern (Windows) HDC__ * CreateCompatibleDC(HDC__ *);
extern (Windows) HBITMAP__ * CreateCompatibleBitmap(HDC__ *, int, int);
extern (Windows) HCOLORSPACE__ * CreateColorSpaceW(tagLOGCOLORSPACEW *);
extern (Windows) HCOLORSPACE__ * CreateColorSpaceA(tagLOGCOLORSPACEA *);
extern (Windows) HBRUSH__ * CreateBrushIndirect(tagLOGBRUSH *);
extern (Windows) HBITMAP__ * CreateBitmapIndirect(tagBITMAP *);
extern (Windows) HBITMAP__ * CreateBitmap(int, int, uint, uint, void *);
extern (Windows) HMETAFILE__ * CopyMetaFileW(HMETAFILE__ *, wchar *);
extern (Windows) HMETAFILE__ * CopyMetaFileA(HMETAFILE__ *, char *);
extern (Windows) HENHMETAFILE__ * CopyEnhMetaFileW(HENHMETAFILE__ *, wchar *);
extern (Windows) HENHMETAFILE__ * CopyEnhMetaFileA(HENHMETAFILE__ *, char *);
extern (Windows) int CombineTransform(_XFORM *, _XFORM *, _XFORM *);
extern (Windows) int CombineRgn(HRGN__ *, HRGN__ *, HRGN__ *, int);
extern (Windows) int ColorMatchToTarget(HDC__ *, HDC__ *, uint);
extern (Windows) HMETAFILE__ * CloseMetaFile(HDC__ *);
extern (Windows) int CloseFigure(HDC__ *);
extern (Windows) HENHMETAFILE__ * CloseEnhMetaFile(HDC__ *);
extern (Windows) int ChoosePixelFormat(HDC__ *, tagPIXELFORMATDESCRIPTOR *);
extern (Windows) int Chord(HDC__ *, int, int, int, int, int, int, int, int);
extern (Windows) int CheckColorsInGamut(HDC__ *, void *, void *, uint);
extern (Windows) int CancelDC(HDC__ *);
extern (Windows) int BitBlt(HDC__ *, int, int, int, int, HDC__ *, int, int, uint);
extern (Windows) int BeginPath(HDC__ *);
extern (Windows) int ArcTo(HDC__ *, int, int, int, int, int, int, int, int);
extern (Windows) int Arc(HDC__ *, int, int, int, int, int, int, int, int);
extern (Windows) int AnimatePalette(HPALETTE__ *, uint, uint, tagPALETTEENTRY *);
extern (Windows) int AngleArc(HDC__ *, int, int, uint, float, float);
extern (Windows) int AddFontResourceW(wchar *);
extern (Windows) int AddFontResourceA(char *);
extern (Windows) int AbortPath(HDC__ *);
extern (Windows) int AbortDoc(HDC__ *);
extern (Windows) uint WriteTapemark(void *, uint, uint, int);
extern (Windows) int WriteProfileStringW(wchar *, wchar *, wchar *);
extern (Windows) int WriteProfileStringA(char *, char *, char *);
extern (Windows) int WriteProfileSectionW(wchar *, wchar *);
extern (Windows) int WriteProfileSectionA(char *, char *);
extern (Windows) int WriteProcessMemory(void *, void *, void *, uint, uint *);
extern (Windows) int WritePrivateProfileStructW(wchar *, wchar *, void *, uint, wchar *);
extern (Windows) int WritePrivateProfileStructA(char *, char *, void *, uint, char *);
extern (Windows) int WritePrivateProfileStringW(wchar *, wchar *, wchar *, wchar *);
extern (Windows) int WritePrivateProfileStringA(char *, char *, char *, char *);
extern (Windows) int WritePrivateProfileSectionW(wchar *, wchar *, wchar *);
extern (Windows) int WritePrivateProfileSectionA(char *, char *, char *);
extern (Windows) int WriteFileGather(void *, _FILE_SEGMENT_ELEMENT *, uint, uint *, _OVERLAPPED *);
extern (Windows) int WriteFileEx(void *, void *, uint, _OVERLAPPED *, _BCD_func__6913);
extern (Windows) int WriteFile(void *, void *, uint, uint *, _OVERLAPPED *);
extern (Windows) int WinLoadTrustProvider(_GUID *);
extern (Windows) int WaitNamedPipeW(wchar *, uint);
extern (Windows) int WaitNamedPipeA(char *, uint);
extern (Windows) uint WaitForSingleObjectEx(void *, uint, int);
extern (Windows) uint WaitForSingleObject(void *, uint);
extern (Windows) uint WaitForMultipleObjectsEx(uint, void * *, int, uint, int);
extern (Windows) uint WaitForMultipleObjects(uint, void * *, int, uint);
extern (Windows) int WaitForDebugEvent(_DEBUG_EVENT *, uint);
extern (Windows) int WaitCommEvent(void *, uint *, _OVERLAPPED *);
extern (Windows) int VirtualUnlock(void *, uint);
extern (Windows) uint VirtualQueryEx(void *, void *, _MEMORY_BASIC_INFORMATION *, uint);
extern (Windows) uint VirtualQuery(void *, _MEMORY_BASIC_INFORMATION *, uint);
extern (Windows) int VirtualProtectEx(void *, void *, uint, uint, uint *);
extern (Windows) int VirtualProtect(void *, uint, uint, uint *);
extern (Windows) int VirtualLock(void *, uint);
extern (Windows) int VirtualFreeEx(void *, void *, uint, uint);
extern (Windows) int VirtualFree(void *, uint, uint);
extern (Windows) void * VirtualAllocEx(void *, void *, uint, uint, uint);
extern (Windows) void * VirtualAlloc(void *, uint, uint, uint);
extern (Windows) int VerifyVersionInfoW(_OSVERSIONINFOEXW *, uint, ulong);
extern (Windows) int VerifyVersionInfoA(_OSVERSIONINFOEXA *, uint, ulong);
extern (Windows) int UpdateResourceW(void *, wchar *, wchar *, ushort, void *, uint);
extern (Windows) int UpdateResourceA(void *, char *, char *, ushort, void *, uint);
extern (Windows) int UnmapViewOfFile(void *);
extern (Windows) int UnlockFileEx(void *, uint, uint, uint, _OVERLAPPED *);
extern (Windows) int UnlockFile(void *, uint, uint, uint, uint);
extern (Windows) int UnhandledExceptionFilter(_EXCEPTION_POINTERS *);
extern (Windows) int TryEnterCriticalSection(_CRITICAL_SECTION *);
extern (Windows) int TransmitCommChar(void *, char);
extern (Windows) int TransactNamedPipe(void *, void *, uint, void *, uint, uint *, _OVERLAPPED *);
extern (Windows) int TlsSetValue(uint, void *);
extern (Windows) void * TlsGetValue(uint);
extern (Windows) int TlsFree(uint);
extern (Windows) uint TlsAlloc();
extern (Windows) int TerminateThread(void *, uint);
extern (Windows) int TerminateProcess(void *, uint);
extern (Windows) int SystemTimeToTzSpecificLocalTime(_TIME_ZONE_INFORMATION *, _SYSTEMTIME *, _SYSTEMTIME *);
extern (Windows) int SystemTimeToFileTime(_SYSTEMTIME *, _FILETIME *);
extern (Windows) int SwitchToThread();
extern (Windows) void SwitchToFiber(void *);
extern (Windows) uint SuspendThread(void *);
extern (Windows) uint SleepEx(uint, int);
extern (Windows) void Sleep(uint);
extern (Windows) uint SizeofResource(HINSTANCE__ *, HRSRC__ *);
extern (Windows) uint SignalObjectAndWait(void *, void *, uint, int);
extern (Windows) int SetWaitableTimer(void *, _LARGE_INTEGER *, int, _BCD_func__6911, void *, int);
extern (Windows) int SetVolumeLabelW(wchar *, wchar *);
extern (Windows) int SetVolumeLabelA(char *, char *);
extern (Windows) int SetupComm(void *, uint, uint);
extern (Windows) _BCD_func__6912 SetUnhandledExceptionFilter(_BCD_func__6912);
extern (Windows) int SetTokenInformation(void *, int, void *, uint);
extern (Windows) int SetTimeZoneInformation(_TIME_ZONE_INFORMATION *);
extern (Windows) int SetThreadToken(void * *, void *);
extern (Windows) int SetThreadPriorityBoost(void *, int);
extern (Windows) int SetThreadPriority(void *, int);
extern (Windows) uint SetThreadIdealProcessor(void *, uint);
extern (Windows) int SetThreadContext(void *, _CONTEXT *);
extern (Windows) uint SetThreadAffinityMask(void *, uint);
extern (Windows) uint SetTapePosition(void *, uint, uint, uint, uint, int);
extern (Windows) uint SetTapeParameters(void *, uint, void *);
extern (Windows) int SetSystemTimeAdjustment(uint, int);
extern (Windows) int SetSystemTime(_SYSTEMTIME *);
extern (Windows) int SetSystemPowerState(int, int);
extern (Windows) int SetStdHandle(uint, void *);
extern (Windows) int SetSecurityDescriptorSacl(_SECURITY_DESCRIPTOR *, int, _ACL *, int);
extern (Windows) int SetSecurityDescriptorOwner(_SECURITY_DESCRIPTOR *, void *, int);
extern (Windows) int SetSecurityDescriptorGroup(_SECURITY_DESCRIPTOR *, void *, int);
extern (Windows) int SetSecurityDescriptorDacl(_SECURITY_DESCRIPTOR *, int, _ACL *, int);
extern (Windows) int SetSecurityDescriptorControl(_SECURITY_DESCRIPTOR *, ushort, ushort);
extern (Windows) int SetProcessWorkingSetSize(void *, uint, uint);
extern (Windows) int SetProcessShutdownParameters(uint, uint);
extern (Windows) int SetProcessPriorityBoost(void *, int);
extern (Windows) int SetProcessAffinityMask(void *, uint);
extern (Windows) int SetPrivateObjectSecurity(uint, _SECURITY_DESCRIPTOR *, _SECURITY_DESCRIPTOR * *, _GENERIC_MAPPING *, void *);
extern (Windows) int SetPriorityClass(void *, uint);
extern (Windows) int SetNamedPipeHandleState(void *, uint *, uint *, uint *);
extern (Windows) int SetMailslotInfo(void *, uint);
extern (Windows) int SetLocalTime(_SYSTEMTIME *);
extern (Windows) void SetLastErrorEx(uint, uint);
extern (Windows) void SetLastError(uint);
extern (Windows) int SetKernelObjectSecurity(void *, uint, _SECURITY_DESCRIPTOR *);
extern (Windows) int SetHandleInformation(void *, uint, uint);
extern (Windows) uint SetHandleCount(uint);
extern (Windows) int SetFileTime(void *, _FILETIME *, _FILETIME *, _FILETIME *);
extern (Windows) int SetFileSecurityW(wchar *, uint, _SECURITY_DESCRIPTOR *);
extern (Windows) int SetFileSecurityA(char *, uint, _SECURITY_DESCRIPTOR *);
extern (Windows) int SetFilePointerEx(void *, _LARGE_INTEGER, _LARGE_INTEGER *, uint);
extern (Windows) uint SetFilePointer(void *, int, int *, uint);
extern (Windows) int SetFileAttributesW(wchar *, uint);
extern (Windows) int SetFileAttributesA(char *, uint);
extern (Windows) void SetFileApisToOEM();
extern (Windows) void SetFileApisToANSI();
extern (Windows) int SetEvent(void *);
extern (Windows) uint SetErrorMode(uint);
extern (Windows) int SetEnvironmentVariableW(wchar *, wchar *);
extern (Windows) int SetEnvironmentVariableA(char *, char *);
extern (Windows) int SetEndOfFile(void *);
extern (Windows) int SetDefaultCommConfigW(wchar *, _COMM_CONFIG *, uint);
extern (Windows) int SetDefaultCommConfigA(char *, _COMM_CONFIG *, uint);
extern (Windows) int SetCurrentDirectoryW(wchar *);
extern (Windows) int SetCurrentDirectoryA(char *);
extern (Windows) int SetComputerNameW(wchar *);
extern (Windows) int SetComputerNameA(char *);
extern (Windows) int SetCommTimeouts(void *, _COMMTIMEOUTS *);
extern (Windows) int SetCommState(void *, _DCB *);
extern (Windows) int SetCommMask(void *, uint);
extern (Windows) int SetCommConfig(void *, _COMM_CONFIG *, uint);
extern (Windows) int SetCommBreak(void *);
extern (Windows) int SetAclInformation(_ACL *, void *, uint, int);
extern (Windows) uint SearchPathW(wchar *, wchar *, wchar *, uint, wchar *, wchar * *);
extern (Windows) uint SearchPathA(char *, char *, char *, uint, char *, char * *);
extern (Windows) int RevertToSelf();
extern (Windows) uint ResumeThread(void *);
extern (Windows) uint ResetWriteWatch(void *, uint);
extern (Windows) int ResetEvent(void *);
extern (Windows) int ReportEventW(void *, ushort, ushort, uint, void *, ushort, uint, wchar * *, void *);
extern (Windows) int ReportEventA(void *, ushort, ushort, uint, void *, ushort, uint, char * *, void *);
extern (Windows) int RemoveDirectoryW(wchar *);
extern (Windows) int RemoveDirectoryA(char *);
extern (Windows) int ReleaseSemaphore(void *, int, int *);
extern (Windows) int ReleaseMutex(void *);
extern (Windows) void * RegisterEventSourceW(wchar *, wchar *);
extern (Windows) void * RegisterEventSourceA(char *, char *);
extern (Windows) int ReadProcessMemory(void *, void *, void *, uint, uint *);
extern (Windows) int ReadFileScatter(void *, _FILE_SEGMENT_ELEMENT *, uint, uint *, _OVERLAPPED *);
extern (Windows) int ReadFileEx(void *, void *, uint, _OVERLAPPED *, _BCD_func__6913);
extern (Windows) int ReadFile(void *, void *, uint, uint *, _OVERLAPPED *);
extern (Windows) int ReadEventLogW(void *, uint, uint, void *, uint, uint *, uint *);
extern (Windows) int ReadEventLogA(void *, uint, uint, void *, uint, uint *, uint *);
extern (Windows) int ReadDirectoryChangesW(void *, void *, uint, int, uint, uint *, _OVERLAPPED *, _BCD_func__6913);
extern (Windows) void RaiseException(uint, uint, uint, uint *);
extern (Windows) uint QueueUserAPC(_BCD_func__4653, void *, uint);
extern (Windows) int QueryPerformanceFrequency(_LARGE_INTEGER *);
extern (Windows) int QueryPerformanceCounter(_LARGE_INTEGER *);
extern (Windows) uint QueryDosDeviceW(wchar *, wchar *, uint);
extern (Windows) uint QueryDosDeviceA(char *, char *, uint);
extern (Windows) int PurgeComm(void *, uint);
extern (Windows) int PulseEvent(void *);
extern (Windows) int PrivilegedServiceAuditAlarmW(wchar *, wchar *, void *, _PRIVILEGE_SET *, int);
extern (Windows) int PrivilegedServiceAuditAlarmA(char *, char *, void *, _PRIVILEGE_SET *, int);
extern (Windows) int PrivilegeCheck(void *, _PRIVILEGE_SET *, int *);
extern (Windows) uint PrepareTape(void *, uint, int);
extern (Windows) int PostQueuedCompletionStatus(void *, uint, uint, _OVERLAPPED *);
extern (Windows) int PeekNamedPipe(void *, void *, uint, uint *, uint *, uint *);
extern (Windows) void OutputDebugStringW(wchar *);
extern (Windows) void OutputDebugStringA(char *);
extern (Windows) void * OpenWaitableTimerW(uint, int, wchar *);
extern (Windows) void * OpenWaitableTimerA(uint, int, char *);
extern (Windows) int OpenThreadToken(void *, uint, int, void * *);
extern (Windows) void * OpenSemaphoreW(uint, int, wchar *);
extern (Windows) void * OpenSemaphoreA(uint, int, char *);
extern (Windows) int OpenProcessToken(void *, uint, void * *);
extern (Windows) void * OpenProcess(uint, int, uint);
extern (Windows) void * OpenMutexW(uint, int, wchar *);
extern (Windows) void * OpenMutexA(uint, int, char *);
extern (Windows) void * OpenFileMappingW(uint, int, wchar *);
extern (Windows) void * OpenFileMappingA(uint, int, char *);
extern (Windows) int OpenFile(char *, _OFSTRUCT *, uint);
extern (Windows) void * OpenEventW(uint, int, wchar *);
extern (Windows) void * OpenEventLogW(wchar *, wchar *);
extern (Windows) void * OpenEventLogA(char *, char *);
extern (Windows) void * OpenEventA(uint, int, char *);
extern (Windows) void * OpenBackupEventLogW(wchar *, wchar *);
extern (Windows) void * OpenBackupEventLogA(char *, char *);
extern (Windows) int ObjectPrivilegeAuditAlarmW(wchar *, void *, void *, uint, _PRIVILEGE_SET *, int);
extern (Windows) int ObjectPrivilegeAuditAlarmA(char *, void *, void *, uint, _PRIVILEGE_SET *, int);
extern (Windows) int ObjectOpenAuditAlarmW(wchar *, void *, wchar *, wchar *, _SECURITY_DESCRIPTOR *, void *, uint, uint, _PRIVILEGE_SET *, int, int, int *);
extern (Windows) int ObjectOpenAuditAlarmA(char *, void *, char *, char *, _SECURITY_DESCRIPTOR *, void *, uint, uint, _PRIVILEGE_SET *, int, int, int *);
extern (Windows) int ObjectDeleteAuditAlarmW(wchar *, void *, int);
extern (Windows) int ObjectDeleteAuditAlarmA(char *, void *, int);
extern (Windows) int ObjectCloseAuditAlarmW(wchar *, void *, int);
extern (Windows) int ObjectCloseAuditAlarmA(char *, void *, int);
extern (Windows) int NotifyChangeEventLog(void *, void *);
extern (Windows) int MulDiv(int, int, int);
extern (Windows) int MoveFileW(wchar *, wchar *);
extern (Windows) int MoveFileExW(wchar *, wchar *, uint);
extern (Windows) int MoveFileExA(char *, char *, uint);
extern (Windows) int MoveFileA(char *, char *);
extern (Windows) void * MapViewOfFileEx(void *, uint, uint, uint, uint, void *);
extern (Windows) void * MapViewOfFile(void *, uint, uint, uint, uint);
extern (Windows) void MapGenericMask(uint *, _GENERIC_MAPPING *);
extern (Windows) int MakeSelfRelativeSD(_SECURITY_DESCRIPTOR *, _SECURITY_DESCRIPTOR *, uint *);
extern (Windows) int MakeAbsoluteSD(_SECURITY_DESCRIPTOR *, _SECURITY_DESCRIPTOR *, uint *, _ACL *, uint *, _ACL *, uint *, void *, uint *, void *, uint *);
extern (Windows) int lstrlenW(wchar *);
extern (Windows) int lstrlenA(char *);
extern (Windows) wchar * lstrcpyW(wchar *, wchar *);
extern (Windows) wchar * lstrcpynW(wchar *, wchar *, int);
extern (Windows) char * lstrcpynA(char *, char *, int);
extern (Windows) char * lstrcpyA(char *, char *);
extern (Windows) int lstrcmpW(wchar *, wchar *);
extern (Windows) int lstrcmpiW(wchar *, wchar *);
extern (Windows) int lstrcmpiA(char *, char *);
extern (Windows) int lstrcmpA(char *, char *);
extern (Windows) wchar * lstrcatW(wchar *, wchar *);
extern (Windows) char * lstrcatA(char *, char *);
extern (Windows) int LookupPrivilegeValueW(wchar *, wchar *, _LUID *);
extern (Windows) int LookupPrivilegeValueA(char *, char *, _LUID *);
extern (Windows) int LookupPrivilegeNameW(wchar *, _LUID *, wchar *, uint *);
extern (Windows) int LookupPrivilegeNameA(char *, _LUID *, char *, uint *);
extern (Windows) int LookupPrivilegeDisplayNameW(wchar *, wchar *, wchar *, uint *, uint *);
extern (Windows) int LookupPrivilegeDisplayNameA(char *, char *, char *, uint *, uint *);
extern (Windows) int LookupAccountSidW(wchar *, void *, wchar *, uint *, wchar *, uint *, int *);
extern (Windows) int LookupAccountSidA(char *, void *, char *, uint *, char *, uint *, int *);
extern (Windows) int LookupAccountNameW(wchar *, wchar *, void *, uint *, wchar *, uint *, int *);
extern (Windows) int LookupAccountNameA(char *, char *, void *, uint *, char *, uint *, int *);
extern (Windows) int LogonUserW(wchar *, wchar *, wchar *, uint, uint, void * *);
extern (Windows) int LogonUserA(char *, char *, char *, uint, uint, void * *);
extern (Windows) void * LockResource(void *);
extern (Windows) int LockFileEx(void *, uint, uint, uint, uint, _OVERLAPPED *);
extern (Windows) int LockFile(void *, uint, uint, uint, uint);
extern (Windows) int LocalUnlock(void *);
extern (Windows) uint LocalSize(void *);
extern (Windows) uint LocalShrink(void *, uint);
extern (Windows) void * LocalReAlloc(void *, uint, uint);
extern (Windows) void * LocalLock(void *);
extern (Windows) void * LocalHandle(void *);
extern (Windows) void * LocalFree(void *);
extern (Windows) uint LocalFlags(void *);
extern (Windows) int LocalFileTimeToFileTime(_FILETIME *, _FILETIME *);
extern (Windows) void * LocalDiscard(void *);
extern (Windows) uint LocalCompact(uint);
extern (Windows) void * LocalAlloc(uint, uint);
extern (Windows) void * LoadResource(HINSTANCE__ *, HRSRC__ *);
extern (Windows) uint LoadModule(char *, void *);
extern (Windows) HINSTANCE__ * LoadLibraryW(wchar *);
extern (Windows) HINSTANCE__ * LoadLibraryExW(wchar *, void *, uint);
extern (Windows) HINSTANCE__ * LoadLibraryExA(char *, void *, uint);
extern (Windows) HINSTANCE__ * LoadLibraryA(char *);
extern (Windows) void LeaveCriticalSection(_CRITICAL_SECTION *);
extern (Windows) int IsValidSid(void *);
extern (Windows) int IsValidSecurityDescriptor(_SECURITY_DESCRIPTOR *);
extern (Windows) int IsValidAcl(_ACL *);
extern (Windows) int IsTextUnicode(void *, int, int *);
extern (Windows) int IsSystemResumeAutomatic();
extern (Windows) int IsProcessorFeaturePresent(uint);
extern (Windows) int IsDebuggerPresent();
extern (Windows) int IsBadWritePtr(void *, uint);
extern (Windows) int IsBadStringPtrW(wchar *, uint);
extern (Windows) int IsBadStringPtrA(char *, uint);
extern (Windows) int IsBadReadPtr(void *, uint);
extern (Windows) int IsBadHugeWritePtr(void *, uint);
extern (Windows) int IsBadHugeReadPtr(void *, uint);
extern (Windows) int IsBadCodePtr(_BCD_func__7321);
extern (Windows) int InterlockedIncrement(int *);
extern (Windows) int InterlockedExchangeAdd(int *, int);
extern (Windows) int InterlockedExchange(int *, int);
extern (Windows) int InterlockedDecrement(int *);
extern (Windows) int InterlockedCompareExchange(int *, int, int);
extern (Windows) int InitializeSid(void *, _SID_IDENTIFIER_AUTHORITY *, char);
extern (Windows) int InitializeSecurityDescriptor(_SECURITY_DESCRIPTOR *, uint);
extern (Windows) uint SetCriticalSectionSpinCount(_CRITICAL_SECTION *, uint);
extern (Windows) int InitializeCriticalSectionAndSpinCount(_CRITICAL_SECTION *, uint);
extern (Windows) void InitializeCriticalSection(_CRITICAL_SECTION *);
extern (Windows) int InitializeAcl(_ACL *, uint, uint);
extern (Windows) int InitAtomTable(uint);
extern (Windows) int ImpersonateSelf(int);
extern (Windows) int ImpersonateNamedPipeClient(void *);
extern (Windows) int ImpersonateLoggedOnUser(void *);
extern (Windows) int HeapWalk(void *, _PROCESS_HEAP_ENTRY *);
extern (Windows) int HeapValidate(void *, uint, void *);
extern (Windows) int HeapUnlock(void *);
extern (Windows) uint HeapSize(void *, uint, void *);
extern (Windows) void * HeapReAlloc(void *, uint, void *, uint);
extern (Windows) int HeapLock(void *);
extern (Windows) int HeapFree(void *, uint, void *);
extern (Windows) int HeapDestroy(void *);
extern (Windows) void * HeapCreate(uint, uint, uint);
extern (Windows) uint HeapCompact(void *, uint);
extern (Windows) void * HeapAlloc(void *, uint, uint);
extern (Windows) void * GlobalWire(void *);
extern (Windows) int GlobalUnWire(void *);
extern (Windows) int GlobalUnlock(void *);
extern (Windows) void GlobalUnfix(void *);
extern (Windows) uint GlobalSize(void *);
extern (Windows) void * GlobalReAlloc(void *, uint, uint);
extern (Windows) void GlobalMemoryStatus(_MEMORYSTATUS *);
extern (Windows) void * GlobalLock(void *);
extern (Windows) void * GlobalHandle(void *);
extern (Windows) uint GlobalGetAtomNameW(ushort, wchar *, int);
extern (Windows) uint GlobalGetAtomNameA(ushort, char *, int);
extern (Windows) void * GlobalFree(void *);
extern (Windows) uint GlobalFlags(void *);
extern (Windows) void GlobalFix(void *);
extern (Windows) ushort GlobalFindAtomW(wchar *);
extern (Windows) ushort GlobalFindAtomA(char *);
extern (Windows) ushort GlobalDeleteAtom(ushort);
extern (Windows) uint GlobalCompact(uint);
extern (Windows) void * GlobalAlloc(uint, uint);
extern (Windows) ushort GlobalAddAtomW(wchar *);
extern (Windows) ushort GlobalAddAtomA(char *);
extern (Windows) uint GetWriteWatch(uint, void *, uint, void * *, uint *, uint *);
extern (Windows) uint GetWindowThreadProcessId(HWND__ *, uint *);
extern (Windows) uint GetWindowsDirectoryW(wchar *, uint);
extern (Windows) uint GetWindowsDirectoryA(char *, uint);
extern (Windows) int GetVolumeInformationW(wchar *, wchar *, uint, uint *, uint *, uint *, wchar *, uint);
extern (Windows) int GetVolumeInformationA(char *, char *, uint, uint *, uint *, uint *, char *, uint);
extern (Windows) int GetVersionExW(_OSVERSIONINFOW *);
extern (Windows) int GetVersionExA(_OSVERSIONINFOA *);
extern (Windows) uint GetVersion();
extern (Windows) int GetUserNameW(wchar *, uint *);
extern (Windows) int GetUserNameA(char *, uint *);
extern (Windows) int GetTokenInformation(void *, int, void *, uint, uint *);
extern (Windows) uint GetTimeZoneInformation(_TIME_ZONE_INFORMATION *);
extern (Windows) uint GetTickCount();
extern (Windows) int GetThreadTimes(void *, _FILETIME *, _FILETIME *, _FILETIME *, _FILETIME *);
extern (Windows) int GetThreadSelectorEntry(void *, uint, _LDT_ENTRY *);
extern (Windows) int GetThreadPriorityBoost(void *, int *);
extern (Windows) int GetThreadPriority(void *);
extern (Windows) int GetThreadContext(void *, _CONTEXT *);
extern (Windows) uint GetTempPathW(uint, wchar *);
extern (Windows) uint GetTempPathA(uint, char *);
extern (Windows) uint GetTempFileNameW(wchar *, wchar *, uint, wchar *);
extern (Windows) uint GetTempFileNameA(char *, char *, uint, char *);
extern (Windows) uint GetTapeStatus(void *);
extern (Windows) uint GetTapePosition(void *, uint, uint *, uint *, uint *);
extern (Windows) uint GetTapeParameters(void *, uint, uint *, void *);
extern (Windows) void GetSystemTimeAsFileTime(_FILETIME *);
extern (Windows) int GetSystemTimeAdjustment(uint *, uint *, int *);
extern (Windows) void GetSystemTime(_SYSTEMTIME *);
extern (Windows) int GetSystemPowerStatus(_SYSTEM_POWER_STATUS *);
extern (Windows) void GetSystemInfo(_SYSTEM_INFO *);
extern (Windows) uint GetSystemDirectoryW(wchar *, uint);
extern (Windows) uint GetSystemDirectoryA(char *, uint);
extern (Windows) void * GetStdHandle(uint);
extern (Windows) void GetStartupInfoW(_STARTUPINFOW *);
extern (Windows) void GetStartupInfoA(_STARTUPINFOA *);
extern (Windows) char * GetSidSubAuthorityCount(void *);
extern (Windows) uint * GetSidSubAuthority(void *, uint);
extern (Windows) uint GetSidLengthRequired(char);
extern (Windows) _SID_IDENTIFIER_AUTHORITY * GetSidIdentifierAuthority(void *);
extern (Windows) uint GetShortPathNameW(wchar *, wchar *, uint);
extern (Windows) uint GetShortPathNameA(char *, char *, uint);
extern (Windows) int GetSecurityDescriptorSacl(_SECURITY_DESCRIPTOR *, int *, _ACL * *, int *);
extern (Windows) int GetSecurityDescriptorOwner(_SECURITY_DESCRIPTOR *, void * *, int *);
extern (Windows) uint GetSecurityDescriptorLength(_SECURITY_DESCRIPTOR *);
extern (Windows) int GetSecurityDescriptorGroup(_SECURITY_DESCRIPTOR *, void * *, int *);
extern (Windows) int GetSecurityDescriptorDacl(_SECURITY_DESCRIPTOR *, int *, _ACL * *, int *);
extern (Windows) int GetSecurityDescriptorControl(_SECURITY_DESCRIPTOR *, ushort *, uint *);
extern (Windows) int GetQueuedCompletionStatus(void *, uint *, uint *, _OVERLAPPED * *, uint);
extern (Windows) uint GetProfileStringW(wchar *, wchar *, wchar *, wchar *, uint);
extern (Windows) uint GetProfileStringA(char *, char *, char *, char *, uint);
extern (Windows) uint GetProfileSectionW(wchar *, wchar *, uint);
extern (Windows) uint GetProfileSectionA(char *, char *, uint);
extern (Windows) uint GetProfileIntW(wchar *, wchar *, int);
extern (Windows) uint GetProfileIntA(char *, char *, int);
extern (Windows) int GetProcessWorkingSetSize(void *, uint *, uint *);
extern (Windows) HWINSTA__ * GetProcessWindowStation();
extern (Windows) uint GetProcessVersion(uint);
extern (Windows) int GetProcessTimes(void *, _FILETIME *, _FILETIME *, _FILETIME *, _FILETIME *);
extern (Windows) int GetProcessShutdownParameters(uint *, uint *);
extern (Windows) int GetProcessPriorityBoost(void *, int *);
extern (Windows) uint GetProcessHeaps(uint, void * *);
extern (Windows) void * GetProcessHeap();
extern (Windows) int GetProcessAffinityMask(void *, uint *, uint *);
extern (Windows) _BCD_func__7321 GetProcAddress(HINSTANCE__ *, char *);
extern (Windows) int GetPrivateProfileStructW(wchar *, wchar *, void *, uint, wchar *);
extern (Windows) int GetPrivateProfileStructA(char *, char *, void *, uint, char *);
extern (Windows) uint GetPrivateProfileStringW(wchar *, wchar *, wchar *, wchar *, uint, wchar *);
extern (Windows) uint GetPrivateProfileStringA(char *, char *, char *, char *, uint, char *);
extern (Windows) uint GetPrivateProfileSectionNamesW(wchar *, uint, wchar *);
extern (Windows) uint GetPrivateProfileSectionNamesA(char *, uint, char *);
extern (Windows) uint GetPrivateProfileSectionW(wchar *, wchar *, uint, wchar *);
extern (Windows) uint GetPrivateProfileSectionA(char *, char *, uint, char *);
extern (Windows) uint GetPrivateProfileIntW(wchar *, wchar *, int, wchar *);
extern (Windows) uint GetPrivateProfileIntA(char *, char *, int, char *);
extern (Windows) int GetPrivateObjectSecurity(_SECURITY_DESCRIPTOR *, uint, _SECURITY_DESCRIPTOR *, uint, uint *);
extern (Windows) uint GetPriorityClass(void *);
extern (Windows) int GetOverlappedResult(void *, _OVERLAPPED *, uint *, int);
extern (Windows) int GetOldestEventLogRecord(void *, uint *);
extern (Windows) int GetNumberOfEventLogRecords(void *, uint *);
extern (Windows) int GetNamedPipeInfo(void *, uint *, uint *, uint *, uint *);
extern (Windows) int GetNamedPipeHandleStateW(void *, uint *, uint *, uint *, uint *, wchar *, uint);
extern (Windows) int GetNamedPipeHandleStateA(void *, uint *, uint *, uint *, uint *, char *, uint);
extern (Windows) HINSTANCE__ * GetModuleHandleW(wchar *);
extern (Windows) HINSTANCE__ * GetModuleHandleA(char *);
extern (Windows) uint GetModuleFileNameW(HINSTANCE__ *, wchar *, uint);
extern (Windows) uint GetModuleFileNameA(HINSTANCE__ *, char *, uint);
extern (Windows) int GetMailslotInfo(void *, uint *, uint *, uint *, uint *);
extern (Windows) uint GetLogicalDriveStringsW(uint, wchar *);
extern (Windows) uint GetLogicalDriveStringsA(uint, char *);
extern (Windows) uint GetLogicalDrives();
extern (Windows) void GetLocalTime(_SYSTEMTIME *);
extern (Windows) uint GetLengthSid(void *);
extern (Windows) uint GetLastError();
extern (Windows) int GetKernelObjectSecurity(void *, uint, _SECURITY_DESCRIPTOR *, uint, uint *);
extern (Windows) int GetHandleInformation(void *, uint *);
extern (Windows) uint GetFullPathNameW(wchar *, uint, wchar *, wchar * *);
extern (Windows) uint GetFullPathNameA(char *, uint, char *, char * *);
extern (Windows) uint GetFileType(void *);
extern (Windows) int GetFileTime(void *, _FILETIME *, _FILETIME *, _FILETIME *);
extern (Windows) uint GetFileSize(void *, uint *);
extern (Windows) int GetFileSecurityW(wchar *, uint, _SECURITY_DESCRIPTOR *, uint, uint *);
extern (Windows) int GetFileSecurityA(char *, uint, _SECURITY_DESCRIPTOR *, uint, uint *);
extern (Windows) int GetFileInformationByHandle(void *, _BY_HANDLE_FILE_INFORMATION *);
extern (Windows) int GetFileAttributesExW(wchar *, int, void *);
extern (Windows) int GetFileAttributesExA(char *, int, void *);
extern (Windows) uint GetFileAttributesW(wchar *);
extern (Windows) uint GetFileAttributesA(char *);
extern (Windows) int GetExitCodeThread(void *, uint *);
extern (Windows) int GetExitCodeProcess(void *, uint *);
extern (Windows) uint GetEnvironmentVariableW(wchar *, wchar *, uint);
extern (Windows) uint GetEnvironmentVariableA(char *, char *, uint);
extern (Windows) wchar * GetEnvironmentStringsW();
extern (Windows) char * GetEnvironmentStringsA();
extern (Windows) char * GetEnvironmentStrings();
extern (Windows) uint GetDriveTypeW(wchar *);
extern (Windows) uint GetDriveTypeA(char *);
extern (Windows) int GetDiskFreeSpaceExW(wchar *, _ULARGE_INTEGER *, _ULARGE_INTEGER *, _ULARGE_INTEGER *);
extern (Windows) int GetDiskFreeSpaceExA(char *, _ULARGE_INTEGER *, _ULARGE_INTEGER *, _ULARGE_INTEGER *);
extern (Windows) int GetDiskFreeSpaceW(wchar *, uint *, uint *, uint *, uint *);
extern (Windows) int GetDiskFreeSpaceA(char *, uint *, uint *, uint *, uint *);
extern (Windows) int GetDevicePowerState(void *, int *);
extern (Windows) int GetDefaultCommConfigW(wchar *, _COMM_CONFIG *, uint *);
extern (Windows) int GetDefaultCommConfigA(char *, _COMM_CONFIG *, uint *);
extern (Windows) uint GetCurrentThreadId();
extern (Windows) void * GetCurrentThread();
extern (Windows) uint GetCurrentProcessId();
extern (Windows) void * GetCurrentProcess();
extern (Windows) int GetCurrentHwProfileW(tagHW_PROFILE_INFOW *);
extern (Windows) int GetCurrentHwProfileA(tagHW_PROFILE_INFOA *);
extern (Windows) uint GetCurrentDirectoryW(uint, wchar *);
extern (Windows) uint GetCurrentDirectoryA(uint, char *);
extern (Windows) int GetComputerNameW(wchar *, uint *);
extern (Windows) int GetComputerNameA(char *, uint *);
extern (Windows) uint GetCompressedFileSizeW(wchar *, uint *);
extern (Windows) uint GetCompressedFileSizeA(char *, uint *);
extern (Windows) int GetCommTimeouts(void *, _COMMTIMEOUTS *);
extern (Windows) int GetCommState(void *, _DCB *);
extern (Windows) int GetCommProperties(void *, _COMMPROP *);
extern (Windows) int GetCommModemStatus(void *, uint *);
extern (Windows) int GetCommMask(void *, uint *);
extern (Windows) int GetCommConfig(void *, _COMM_CONFIG *, uint *);
extern (Windows) wchar * GetCommandLineW();
extern (Windows) char * GetCommandLineA();
extern (Windows) int GetBinaryTypeW(wchar *, uint *);
extern (Windows) int GetBinaryTypeA(char *, uint *);
extern (Windows) uint GetAtomNameW(ushort, wchar *, int);
extern (Windows) uint GetAtomNameA(ushort, char *, int);
extern (Windows) int GetAclInformation(_ACL *, void *, uint, int);
extern (Windows) int GetAce(_ACL *, uint, void * *);
extern (Windows) void * FreeSid(void *);
extern (Windows) int FreeResource(void *);
extern (Windows) void FreeLibraryAndExitThread(HINSTANCE__ *, uint);
extern (Windows) int FreeLibrary(HINSTANCE__ *);
extern (Windows) int FreeEnvironmentStringsW(wchar *);
extern (Windows) int FreeEnvironmentStringsA(char *);
extern (Windows) uint FormatMessageW(uint, void *, uint, uint, wchar *, uint, char * *);
extern (Windows) uint FormatMessageA(uint, void *, uint, uint, char *, uint, char * *);
extern (Windows) int FlushViewOfFile(void *, uint);
extern (Windows) int FlushInstructionCache(void *, void *, uint);
extern (Windows) int FlushFileBuffers(void *);
extern (Windows) HRSRC__ * FindResourceExW(HINSTANCE__ *, wchar *, wchar *, ushort);
extern (Windows) HRSRC__ * FindResourceExA(HINSTANCE__ *, char *, char *, ushort);
extern (Windows) HRSRC__ * FindResourceW(HINSTANCE__ *, wchar *, wchar *);
extern (Windows) HRSRC__ * FindResourceA(HINSTANCE__ *, char *, char *);
extern (Windows) int FindNextFileW(void *, _WIN32_FIND_DATAW *);
extern (Windows) int FindNextFileA(void *, _WIN32_FIND_DATAA *);
extern (Windows) int FindNextChangeNotification(void *);
extern (Windows) int FindFirstFreeAce(_ACL *, void * *);
extern (Windows) void * FindFirstFileExW(wchar *, int, void *, int, void *, uint);
extern (Windows) void * FindFirstFileExA(char *, int, void *, int, void *, uint);
extern (Windows) void * FindFirstFileW(wchar *, _WIN32_FIND_DATAW *);
extern (Windows) void * FindFirstFileA(char *, _WIN32_FIND_DATAA *);
extern (Windows) void * FindFirstChangeNotificationW(wchar *, int, uint);
extern (Windows) void * FindFirstChangeNotificationA(char *, int, uint);
extern (Windows) int FindCloseChangeNotification(void *);
extern (Windows) int FindClose(void *);
extern (Windows) ushort FindAtomW(wchar *);
extern (Windows) ushort FindAtomA(char *);
extern (Windows) int FileTimeToSystemTime(_FILETIME *, _SYSTEMTIME *);
extern (Windows) int FileTimeToLocalFileTime(_FILETIME *, _FILETIME *);
extern (Windows) int FileTimeToDosDateTime(_FILETIME *, ushort *, ushort *);
extern (Windows) int FileEncryptionStatusW(wchar *, uint *);
extern (Windows) int FileEncryptionStatusA(char *, uint *);
extern (Windows) void FatalExit(int);
extern (Windows) void FatalAppExitW(uint, wchar *);
extern (Windows) void FatalAppExitA(uint, char *);
extern (Windows) uint ExpandEnvironmentStringsW(wchar *, wchar *, uint);
extern (Windows) uint ExpandEnvironmentStringsA(char *, char *, uint);
extern (Windows) void ExitThread(uint);
extern (Windows) void ExitProcess(uint);
extern (Windows) int EscapeCommFunction(void *, uint);
extern (Windows) uint EraseTape(void *, uint, int);
extern (Windows) int EqualSid(void *, void *);
extern (Windows) int EqualPrefixSid(void *, void *);
extern (Windows) int EnumResourceTypesW(HINSTANCE__ *, _BCD_func__6914, int);
extern (Windows) int EnumResourceTypesA(HINSTANCE__ *, _BCD_func__6914, int);
extern (Windows) int EnumResourceNamesW(HINSTANCE__ *, wchar *, _BCD_func__6915, int);
extern (Windows) int EnumResourceNamesA(HINSTANCE__ *, char *, _BCD_func__6915, int);
extern (Windows) int EnumResourceLanguagesW(HINSTANCE__ *, wchar *, wchar *, _BCD_func__6916, int);
extern (Windows) int EnumResourceLanguagesA(HINSTANCE__ *, char *, char *, _BCD_func__6916, int);
extern (Windows) void EnterCriticalSection(_CRITICAL_SECTION *);
extern (Windows) int EndUpdateResourceW(void *, int);
extern (Windows) int EndUpdateResourceA(void *, int);
extern (Windows) int EncryptFileW(wchar *);
extern (Windows) int EncryptFileA(char *);
extern (Windows) int DuplicateTokenEx(void *, uint, _SECURITY_ATTRIBUTES *, int, int, void * *);
extern (Windows) int DuplicateToken(void *, int, void * *);
extern (Windows) int DuplicateHandle(void *, void *, void *, void * *, uint, int, uint);
extern (Windows) int DosDateTimeToFileTime(ushort, ushort, _FILETIME *);
extern (Windows) int DisconnectNamedPipe(void *);
extern (Windows) int DisableThreadLibraryCalls(HINSTANCE__ *);
extern (Windows) int DeviceIoControl(void *, uint, void *, uint, void *, uint, uint *, _OVERLAPPED *);
extern (Windows) int DestroyPrivateObjectSecurity(_SECURITY_DESCRIPTOR * *);
extern (Windows) int DeregisterEventSource(void *);
extern (Windows) int DeleteFileW(wchar *);
extern (Windows) int DeleteFileA(char *);
extern (Windows) void DeleteFiber(void *);
extern (Windows) void DeleteCriticalSection(_CRITICAL_SECTION *);
extern (Windows) ushort DeleteAtom(ushort);
extern (Windows) int DeleteAce(_ACL *, uint);
extern (Windows) int DefineDosDeviceW(uint, wchar *, wchar *);
extern (Windows) int DefineDosDeviceA(uint, char *, char *);
extern (Windows) void DebugBreak();
extern (Windows) int DebugActiveProcess(uint);
extern (Windows) void * CreateWaitableTimerW(_SECURITY_ATTRIBUTES *, int, wchar *);
extern (Windows) void * CreateWaitableTimerA(_SECURITY_ATTRIBUTES *, int, char *);
extern (Windows) void * CreateThread(_SECURITY_ATTRIBUTES *, uint, _BCD_func__7134, void *, uint, uint *);
extern (Windows) uint CreateTapePartition(void *, uint, uint, uint);
extern (Windows) void * CreateSemaphoreW(_SECURITY_ATTRIBUTES *, int, int, wchar *);
extern (Windows) void * CreateSemaphoreA(_SECURITY_ATTRIBUTES *, int, int, char *);
extern (Windows) void * CreateRemoteThread(void *, _SECURITY_ATTRIBUTES *, uint, _BCD_func__7134, void *, uint, uint *);
extern (Windows) int CreateProcessAsUserW(void *, wchar *, wchar *, _SECURITY_ATTRIBUTES *, _SECURITY_ATTRIBUTES *, int, uint, void *, wchar *, _STARTUPINFOW *, _PROCESS_INFORMATION *);
extern (Windows) int CreateProcessAsUserA(void *, char *, char *, _SECURITY_ATTRIBUTES *, _SECURITY_ATTRIBUTES *, int, uint, void *, char *, _STARTUPINFOA *, _PROCESS_INFORMATION *);
extern (Windows) int CreateProcessW(wchar *, wchar *, _SECURITY_ATTRIBUTES *, _SECURITY_ATTRIBUTES *, int, uint, void *, wchar *, _STARTUPINFOW *, _PROCESS_INFORMATION *);
extern (Windows) int CreateProcessA(char *, char *, _SECURITY_ATTRIBUTES *, _SECURITY_ATTRIBUTES *, int, uint, void *, char *, _STARTUPINFOA *, _PROCESS_INFORMATION *);
extern (Windows) int CreatePrivateObjectSecurity(_SECURITY_DESCRIPTOR *, _SECURITY_DESCRIPTOR *, _SECURITY_DESCRIPTOR * *, int, void *, _GENERIC_MAPPING *);
extern (Windows) int CreatePipe(void * *, void * *, _SECURITY_ATTRIBUTES *, uint);
extern (Windows) void * CreateNamedPipeW(wchar *, uint, uint, uint, uint, uint, uint, _SECURITY_ATTRIBUTES *);
extern (Windows) void * CreateNamedPipeA(char *, uint, uint, uint, uint, uint, uint, _SECURITY_ATTRIBUTES *);
extern (Windows) void * CreateMutexW(_SECURITY_ATTRIBUTES *, int, wchar *);
extern (Windows) void * CreateMutexA(_SECURITY_ATTRIBUTES *, int, char *);
extern (Windows) void * CreateMailslotW(wchar *, uint, uint, _SECURITY_ATTRIBUTES *);
extern (Windows) void * CreateMailslotA(char *, uint, uint, _SECURITY_ATTRIBUTES *);
extern (Windows) void * CreateIoCompletionPort(void *, void *, uint, uint);
extern (Windows) void * CreateFileMappingW(void *, _SECURITY_ATTRIBUTES *, uint, uint, uint, wchar *);
extern (Windows) void * CreateFileMappingA(void *, _SECURITY_ATTRIBUTES *, uint, uint, uint, char *);
extern (Windows) void * CreateFileW(wchar *, uint, uint, _SECURITY_ATTRIBUTES *, uint, uint, void *);
extern (Windows) void * CreateFileA(char *, uint, uint, _SECURITY_ATTRIBUTES *, uint, uint, void *);
extern (Windows) void * CreateFiberEx(uint, uint, uint, _BCD_func__6917, void *);
extern (Windows) void * CreateFiber(uint, _BCD_func__6917, void *);
extern (Windows) void * CreateEventW(_SECURITY_ATTRIBUTES *, int, int, wchar *);
extern (Windows) void * CreateEventA(_SECURITY_ATTRIBUTES *, int, int, char *);
extern (Windows) int CreateDirectoryExW(wchar *, wchar *, _SECURITY_ATTRIBUTES *);
extern (Windows) int CreateDirectoryExA(char *, char *, _SECURITY_ATTRIBUTES *);
extern (Windows) int CreateDirectoryW(wchar *, _SECURITY_ATTRIBUTES *);
extern (Windows) int CreateDirectoryA(char *, _SECURITY_ATTRIBUTES *);
extern (Windows) int CopySid(uint, void *, void *);
extern (Windows) int CopyFileExW(wchar *, wchar *, _BCD_func__6918, void *, int *, uint);
extern (Windows) int CopyFileExA(char *, char *, _BCD_func__6918, void *, int *, uint);
extern (Windows) int CopyFileW(wchar *, wchar *, int);
extern (Windows) int CopyFileA(char *, char *, int);
extern (Windows) void * ConvertThreadToFiber(void *);
extern (Windows) int ConvertFiberToThread();
extern (Windows) int ContinueDebugEvent(uint, uint, uint);
extern (Windows) int ConnectNamedPipe(void *, _OVERLAPPED *);
extern (Windows) int CompareFileTime(_FILETIME *, _FILETIME *);
extern (Windows) int CommConfigDialogW(wchar *, HWND__ *, _COMM_CONFIG *);
extern (Windows) int CommConfigDialogA(char *, HWND__ *, _COMM_CONFIG *);
extern (Windows) int CloseHandle(void *);
extern (Windows) int CloseEventLog(void *);
extern (Windows) int ClearEventLogW(void *, wchar *);
extern (Windows) int ClearEventLogA(void *, char *);
extern (Windows) int ClearCommError(void *, uint *, _COMSTAT *);
extern (Windows) int ClearCommBreak(void *);
extern (Windows) int CancelWaitableTimer(void *);
extern (Windows) int CancelIo(void *);
extern (Windows) int CancelDeviceWakeupRequest(void *);
extern (Windows) int CallNamedPipeW(wchar *, void *, uint, void *, uint, uint *, uint);
extern (Windows) int CallNamedPipeA(char *, void *, uint, void *, uint, uint *, uint);
extern (Windows) int BuildCommDCBAndTimeoutsW(wchar *, _DCB *, _COMMTIMEOUTS *);
extern (Windows) int BuildCommDCBAndTimeoutsA(char *, _DCB *, _COMMTIMEOUTS *);
extern (Windows) int BuildCommDCBW(wchar *, _DCB *);
extern (Windows) int BuildCommDCBA(char *, _DCB *);
extern (Windows) void * BeginUpdateResourceW(wchar *, int);
extern (Windows) void * BeginUpdateResourceA(char *, int);
extern (Windows) int Beep(uint, uint);
extern (Windows) int BackupWrite(void *, char *, uint, uint *, int, int, void * *);
extern (Windows) int BackupSeek(void *, uint, uint, uint *, uint *, void * *);
extern (Windows) int BackupRead(void *, char *, uint, uint *, int, int, void * *);
extern (Windows) int BackupEventLogW(void *, wchar *);
extern (Windows) int BackupEventLogA(void *, char *);
extern (Windows) int AreFileApisANSI();
extern (Windows) int AreAnyAccessesGranted(uint, uint);
extern (Windows) int AreAllAccessesGranted(uint, uint);
extern (Windows) int AllocateLocallyUniqueId(_LUID *);
extern (Windows) int AllocateAndInitializeSid(_SID_IDENTIFIER_AUTHORITY *, char, uint, uint, uint, uint, uint, uint, uint, uint, void * *);
extern (Windows) int AdjustTokenPrivileges(void *, int, _TOKEN_PRIVILEGES *, uint, _TOKEN_PRIVILEGES *, uint *);
extern (Windows) int AdjustTokenGroups(void *, int, _TOKEN_GROUPS *, uint, _TOKEN_GROUPS *, uint *);
extern (Windows) int AddAuditAccessAce(_ACL *, uint, uint, void *, int, int);
extern (Windows) ushort AddAtomW(wchar *);
extern (Windows) ushort AddAtomA(char *);
extern (Windows) int AddAce(_ACL *, uint, uint, void *, uint);
extern (Windows) int AddAccessDeniedAce(_ACL *, uint, uint, void *);
extern (Windows) int AddAccessAllowedAce(_ACL *, uint, uint, void *);
extern (Windows) int AccessCheckAndAuditAlarmW(wchar *, void *, wchar *, wchar *, _SECURITY_DESCRIPTOR *, uint, _GENERIC_MAPPING *, int, uint *, int *, int *);
extern (Windows) int AccessCheckAndAuditAlarmA(char *, void *, char *, char *, _SECURITY_DESCRIPTOR *, uint, _GENERIC_MAPPING *, int, uint *, int *, int *);
extern (Windows) int AccessCheck(_SECURITY_DESCRIPTOR *, void *, uint, _GENERIC_MAPPING *, _PRIVILEGE_SET *, uint *, uint *, int *);
extern (Windows) uint _lwrite(int, char *, uint);
extern (Windows) uint _lread(int, void *, uint);
extern (Windows) int _lopen(char *, int);
extern (Windows) int _llseek(int, int, int);
extern (Windows) int _lcreat(char *, int);
extern (Windows) int _lclose(int);
extern (Windows) int _hwrite(int, char *, int);
extern (Windows) int _hread(int, void *, int);
extern (Windows) int wWinMain(HINSTANCE__ *, HINSTANCE__ *, wchar *, int);
extern (Windows) int WinMain(HINSTANCE__ *, HINSTANCE__ *, char *, int);
extern (Windows) int WriteConsoleOutputCharacterW(void *, wchar *, uint, _COORD, uint *);
extern (Windows) int WriteConsoleOutputCharacterA(void *, char *, uint, _COORD, uint *);
extern (Windows) int WriteConsoleOutputAttribute(void *, ushort *, uint, _COORD, uint *);
extern (Windows) int WriteConsoleOutputW(void *, _CHAR_INFO *, _COORD, _COORD, _SMALL_RECT *);
extern (Windows) int WriteConsoleOutputA(void *, _CHAR_INFO *, _COORD, _COORD, _SMALL_RECT *);
extern (Windows) int WriteConsoleInputW(void *, _INPUT_RECORD *, uint, uint *);
extern (Windows) int WriteConsoleInputA(void *, _INPUT_RECORD *, uint, uint *);
extern (Windows) int WriteConsoleW(void *, void *, uint, uint *, void *);
extern (Windows) int WriteConsoleA(void *, void *, uint, uint *, void *);
extern (Windows) int SetConsoleWindowInfo(void *, int, _SMALL_RECT *);
extern (Windows) int SetConsoleTitleW(wchar *);
extern (Windows) int SetConsoleTitleA(char *);
extern (Windows) int SetConsoleTextAttribute(void *, ushort);
extern (Windows) int SetConsoleScreenBufferSize(void *, _COORD);
extern (Windows) int SetConsoleOutputCP(uint);
extern (Windows) int SetConsoleMode(void *, uint);
extern (Windows) int SetConsoleCursorPosition(void *, _COORD);
extern (Windows) int SetConsoleCursorInfo(void *, _CONSOLE_CURSOR_INFO *);
extern (Windows) int SetConsoleCtrlHandler(_BCD_func__4894, int);
extern (Windows) int SetConsoleCP(uint);
extern (Windows) int SetConsoleActiveScreenBuffer(void *);
extern (Windows) int ScrollConsoleScreenBufferW(void *, _SMALL_RECT *, _SMALL_RECT *, _COORD, _CHAR_INFO *);
extern (Windows) int ScrollConsoleScreenBufferA(void *, _SMALL_RECT *, _SMALL_RECT *, _COORD, _CHAR_INFO *);
extern (Windows) int ReadConsoleOutputW(void *, _CHAR_INFO *, _COORD, _COORD, _SMALL_RECT *);
extern (Windows) int ReadConsoleOutputA(void *, _CHAR_INFO *, _COORD, _COORD, _SMALL_RECT *);
extern (Windows) int ReadConsoleOutputCharacterW(void *, wchar *, uint, _COORD, uint *);
extern (Windows) int ReadConsoleOutputCharacterA(void *, char *, uint, _COORD, uint *);
extern (Windows) int ReadConsoleOutputAttribute(void *, ushort *, uint, _COORD, uint *);
extern (Windows) int ReadConsoleInputW(void *, _INPUT_RECORD *, uint, uint *);
extern (Windows) int ReadConsoleInputA(void *, _INPUT_RECORD *, uint, uint *);
extern (Windows) int ReadConsoleW(void *, void *, uint, uint *, void *);
extern (Windows) int ReadConsoleA(void *, void *, uint, uint *, void *);
extern (Windows) int PeekConsoleInputW(void *, _INPUT_RECORD *, uint, uint *);
extern (Windows) int PeekConsoleInputA(void *, _INPUT_RECORD *, uint, uint *);
extern (Windows) int GetNumberOfConsoleMouseButtons(uint *);
extern (Windows) int GetNumberOfConsoleInputEvents(void *, uint *);
extern (Windows) _COORD GetLargestConsoleWindowSize(void *);
extern (Windows) uint GetConsoleTitleW(wchar *, uint);
extern (Windows) uint GetConsoleTitleA(char *, uint);
extern (Windows) int GetConsoleScreenBufferInfo(void *, _CONSOLE_SCREEN_BUFFER_INFO *);
extern (Windows) uint GetConsoleOutputCP();
extern (Windows) int GetConsoleMode(void *, uint *);
extern (Windows) int GetConsoleCursorInfo(void *, _CONSOLE_CURSOR_INFO *);
extern (Windows) uint GetConsoleCP();
extern (Windows) int GenerateConsoleCtrlEvent(uint, uint);
extern (Windows) int FreeConsole();
extern (Windows) int FlushConsoleInputBuffer(void *);
extern (Windows) int FillConsoleOutputCharacterW(void *, wchar, uint, _COORD, uint *);
extern (Windows) int FillConsoleOutputCharacterA(void *, char, uint, _COORD, uint *);
extern (Windows) int FillConsoleOutputAttribute(void *, ushort, uint, _COORD, uint *);
extern (Windows) void * CreateConsoleScreenBuffer(uint, uint, _SECURITY_ATTRIBUTES *, uint, void *);
extern (Windows) int AllocConsole();
extern (Windows) void * NtCurrentTeb();
extern (Windows) void * GetFiberData();
extern (Windows) void * GetCurrentFiber();
extern (Windows) wchar * wcsupr(wchar *);
extern (Windows) wchar * wcsset(wchar *, wchar);
extern (Windows) wchar * wcsrev(wchar *);
extern (Windows) wchar * wcsnset(wchar *, wchar, uint);
extern (Windows) int wcsnicmp(wchar *, wchar *, uint);
extern (Windows) wchar * wcslwr(wchar *);
extern (Windows) int wcsicoll(wchar *, wchar *);
extern (Windows) int wcsicmp(wchar *, wchar *);
extern (Windows) wchar * wcsdup(wchar *);
extern (Windows) int wcscmpi(wchar *, wchar *);
extern (Windows) wchar * _wcsupr(wchar *);
extern (Windows) wchar * _wcsset(wchar *, wchar);
extern (Windows) wchar * _wcsrev(wchar *);
extern (Windows) wchar * _wcsnset(wchar *, wchar, uint);
extern (Windows) int _wcsnicmp(wchar *, wchar *, uint);
extern (Windows) wchar * _wcslwr(wchar *);
extern (Windows) int _wcsicoll(wchar *, wchar *);
extern (Windows) int _wcsicmp(wchar *, wchar *);
extern (Windows) wchar * _wcsdup(wchar *);
extern (Windows) uint wcsxfrm(wchar *, wchar *, uint);
extern (Windows) wchar * wcstok(wchar *, wchar *);
extern (Windows) wchar * wcsstr(wchar *, wchar *);
extern (Windows) uint wcsspn(wchar *, wchar *);
extern (Windows) wchar * wcsrchr(wchar *, wchar);
extern (Windows) wchar * wcspbrk(wchar *, wchar *);
extern (Windows) wchar * wcsncpy(wchar *, wchar *, uint);
extern (Windows) int wcsncmp(wchar *, wchar *, uint);
extern (Windows) wchar * wcsncat(wchar *, wchar *, uint);
extern (Windows) uint wcslen(wchar *);
extern (Windows) uint wcscspn(wchar *, wchar *);
extern (Windows) wchar * wcscpy(wchar *, wchar *);
extern (Windows) int wcscoll(wchar *, wchar *);
extern (Windows) int wcscmp(wchar *, wchar *);
extern (Windows) wchar * wcschr(wchar *, wchar);
extern (Windows) wchar * wcscat(wchar *, wchar *);
extern (Windows) void swab(char *, char *, uint);
extern (Windows) char * strupr(char *);
extern (Windows) char * strset(char *, int);
extern (Windows) char * strrev(char *);
extern (Windows) char * strnset(char *, int, uint);
extern (Windows) int strncasecmp(char *, char *, uint);
extern (Windows) int strnicmp(char *, char *, uint);
extern (Windows) char * strlwr(char *);
extern (Windows) int stricoll(char *, char *);
extern (Windows) int strcasecmp(char *, char *);
extern (Windows) int stricmp(char *, char *);
extern (Windows) int strcmpi(char *, char *);
extern (Windows) char * strdup(char *);
extern (Windows) int memicmp(void *, void *, uint);
extern (Windows) void * memccpy(void *, void *, int, uint);
extern (Windows) void _swab(char *, char *, uint);
extern (Windows) char * _strupr(char *);
extern (Windows) char * _strset(char *, int);
extern (Windows) char * _strrev(char *);
extern (Windows) char * _strnset(char *, int, uint);
extern (Windows) int _strnicmp(char *, char *, uint);
extern (Windows) char * _strlwr(char *);
extern (Windows) int _stricoll(char *, char *);
extern (Windows) int _stricmp(char *, char *);
extern (Windows) int _strcmpi(char *, char *);
extern (Windows) char * _strdup(char *);
extern (Windows) int _memicmp(void *, void *, uint);
extern (Windows) void * _memccpy(void *, void *, int, uint);
extern (Windows) char * _strerror(char *);
extern (Windows) uint strxfrm(char *, char *, uint);
extern (Windows) char * strtok(char *, char *);
extern (Windows) char * strerror(int);
extern (Windows) int strcoll(char *, char *);
extern (Windows) void * memmove(void *, void *, uint);
extern (Windows) void * memchr(void *, int, uint);
extern (Windows) char * strrchr(char *, int);
extern (Windows) char * strchr(char *, int);
extern (Windows) uint strcspn(char *, char *);
extern (Windows) uint strspn(char *, char *);
extern (Windows) char * strpbrk(char *, char *);
extern (Windows) char * strstr(char *, char *);
extern (Windows) uint strlen(char *);
extern (Windows) int strncmp(char *, char *, uint);
extern (Windows) int strcmp(char *, char *);
extern (Windows) char * strncpy(char *, char *, uint);
extern (Windows) char * strcpy(char *, char *);
extern (Windows) char * strncat(char *, char *, uint);
extern (Windows) char * strcat(char *, char *);
extern (Windows) void * memset(void *, int, uint);
extern (Windows) int memcmp(void *, void *, uint);
extern (Windows) void * memcpy(void *, void *, uint);
struct _SERVICE_FAILURE_ACTIONSW {
uint dwResetPeriod;
wchar * lpRebootMsg;
wchar * lpCommand;
uint cActions;
_SC_ACTION * lpsaActions;
}
struct _SERVICE_FAILURE_ACTIONSA {
uint dwResetPeriod;
char * lpRebootMsg;
char * lpCommand;
uint cActions;
_SC_ACTION * lpsaActions;
}
struct _SC_ACTION {
int Type;
uint Delay;
}
struct _SERVICE_DESCRIPTIONW {
wchar * lpDescription;
}
struct _SERVICE_DESCRIPTIONA {
char * lpDescription;
}
struct SC_HANDLE__ {
int i;
}
struct _SERVICE_TABLE_ENTRYW {
wchar * lpServiceName;
_BCD_func__4661 lpServiceProc;
}
struct _SERVICE_TABLE_ENTRYA {
char * lpServiceName;
_BCD_func__4605 lpServiceProc;
}
struct _QUERY_SERVICE_LOCK_STATUSW {
uint fIsLocked;
wchar * lpLockOwner;
uint dwLockDuration;
}
struct _QUERY_SERVICE_LOCK_STATUSA {
uint fIsLocked;
char * lpLockOwner;
uint dwLockDuration;
}
struct _QUERY_SERVICE_CONFIGW {
uint dwServiceType;
uint dwStartType;
uint dwErrorControl;
wchar * lpBinaryPathName;
wchar * lpLoadOrderGroup;
uint dwTagId;
wchar * lpDependencies;
wchar * lpServiceStartName;
wchar * lpDisplayName;
}
struct _QUERY_SERVICE_CONFIGA {
uint dwServiceType;
uint dwStartType;
uint dwErrorControl;
char * lpBinaryPathName;
char * lpLoadOrderGroup;
uint dwTagId;
char * lpDependencies;
char * lpServiceStartName;
char * lpDisplayName;
}
struct _ENUM_SERVICE_STATUS_PROCESSW {
wchar * lpServiceName;
wchar * lpDisplayName;
_SERVICE_STATUS_PROCESS ServiceStatusProcess;
}
struct _ENUM_SERVICE_STATUS_PROCESSA {
char * lpServiceName;
char * lpDisplayName;
_SERVICE_STATUS_PROCESS ServiceStatusProcess;
}
struct _ENUM_SERVICE_STATUSW {
wchar * lpServiceName;
wchar * lpDisplayName;
_SERVICE_STATUS ServiceStatus;
}
struct _ENUM_SERVICE_STATUSA {
char * lpServiceName;
char * lpDisplayName;
_SERVICE_STATUS ServiceStatus;
}
struct _SERVICE_STATUS_PROCESS {
uint dwServiceType;
uint dwCurrentState;
uint dwControlsAccepted;
uint dwWin32ExitCode;
uint dwServiceSpecificExitCode;
uint dwCheckPoint;
uint dwWaitHint;
uint dwProcessId;
uint dwServiceFlags;
}
struct _SERVICE_STATUS {
uint dwServiceType;
uint dwCurrentState;
uint dwControlsAccepted;
uint dwWin32ExitCode;
uint dwServiceSpecificExitCode;
uint dwCheckPoint;
uint dwWaitHint;
}
struct value_entW {
wchar * ve_valuename;
uint ve_valuelen;
uint ve_valueptr;
uint ve_type;
}
struct value_entA {
char * ve_valuename;
uint ve_valuelen;
uint ve_valueptr;
uint ve_type;
}
struct _NETCONNECTINFOSTRUCT {
uint cbStructure;
uint dwFlags;
uint dwSpeed;
uint dwDelay;
uint dwOptDataSize;
}
struct _NETINFOSTRUCT {
uint cbStructure;
uint dwProviderVersion;
uint dwStatus;
uint dwCharacteristics;
uint dwHandle;
ushort wNetType;
uint dwPrinters;
uint dwDrives;
}
struct _REMOTE_NAME_INFOW {
wchar * lpUniversalName;
wchar * lpConnectionName;
wchar * lpRemainingPath;
}
struct _REMOTE_NAME_INFOA {
char * lpUniversalName;
char * lpConnectionName;
char * lpRemainingPath;
}
struct _UNIVERSAL_NAME_INFOW {
wchar * lpUniversalName;
}
struct _UNIVERSAL_NAME_INFOA {
char * lpUniversalName;
}
struct _DISCDLGSTRUCTW {
uint cbStructure;
HWND__ * hwndOwner;
wchar * lpLocalName;
wchar * lpRemoteName;
uint dwFlags;
}
struct _DISCDLGSTRUCTA {
uint cbStructure;
HWND__ * hwndOwner;
char * lpLocalName;
char * lpRemoteName;
uint dwFlags;
}
struct _CONNECTDLGSTRUCTW {
uint cbStructure;
HWND__ * hwndOwner;
_NETRESOURCEW * lpConnRes;
uint dwFlags;
uint dwDevNum;
}
struct _CONNECTDLGSTRUCTA {
uint cbStructure;
HWND__ * hwndOwner;
_NETRESOURCEA * lpConnRes;
uint dwFlags;
uint dwDevNum;
}
struct _NETRESOURCEW {
uint dwScope;
uint dwType;
uint dwDisplayType;
uint dwUsage;
wchar * lpLocalName;
wchar * lpRemoteName;
wchar * lpComment;
wchar * lpProvider;
}
struct _NETRESOURCEA {
uint dwScope;
uint dwType;
uint dwDisplayType;
uint dwUsage;
char * lpLocalName;
char * lpRemoteName;
char * lpComment;
char * lpProvider;
}
struct tagVS_FIXEDFILEINFO {
uint dwSignature;
uint dwStrucVersion;
uint dwFileVersionMS;
uint dwFileVersionLS;
uint dwProductVersionMS;
uint dwProductVersionLS;
uint dwFileFlagsMask;
uint dwFileFlags;
uint dwFileOS;
uint dwFileType;
uint dwFileSubtype;
uint dwFileDateMS;
uint dwFileDateLS;
}
struct _numberfmtW {
uint NumDigits;
uint LeadingZero;
uint Grouping;
wchar * lpDecimalSep;
wchar * lpThousandSep;
uint NegativeOrder;
}
struct _numberfmtA {
uint NumDigits;
uint LeadingZero;
uint Grouping;
char * lpDecimalSep;
char * lpThousandSep;
uint NegativeOrder;
}
struct nlsversioninfo {
uint dwNLSVersionInfoSize;
uint dwNLSVersion;
uint dwDefinedVersion;
}
struct _currencyfmtW {
uint NumDigits;
uint LeadingZero;
uint Grouping;
wchar * lpDecimalSep;
wchar * lpThousandSep;
uint NegativeOrder;
uint PositiveOrder;
wchar * lpCurrencySymbol;
}
struct _currencyfmtA {
uint NumDigits;
uint LeadingZero;
uint Grouping;
char * lpDecimalSep;
char * lpThousandSep;
uint NegativeOrder;
uint PositiveOrder;
char * lpCurrencySymbol;
}
struct _cpinfoexW {
uint MaxCharSize;
char * DefaultChar;
char * LeadByte;
wchar UnicodeDefaultChar;
uint CodePage;
wchar * CodePageName;
}
struct _cpinfoexA {
uint MaxCharSize;
char * DefaultChar;
char * LeadByte;
wchar UnicodeDefaultChar;
uint CodePage;
char * CodePageName;
}
struct _cpinfo {
uint MaxCharSize;
char * DefaultChar;
char * LeadByte;
}
struct MSLLHOOKSTRUCT {
tagPOINT pt;
uint mouseData;
uint flags;
uint time;
uint dwExtraInfo;
}
struct tagKBDLLHOOKSTRUCT {
uint vkCode;
uint scanCode;
uint flags;
uint time;
uint dwExtraInfo;
}
struct tagMONITORINFOEXW {
wchar * szDevice;
}
struct tagMONITORINFOEXA {
char * szDevice;
}
struct tagMONITORINFO {
uint cbSize;
tagRECT rcMonitor;
tagRECT rcWork;
uint dwFlags;
}
struct tagLASTINPUTINFO {
uint cbSize;
uint dwTime;
}
struct tagWINDOWINFO {
uint cbSize;
tagRECT rcWindow;
tagRECT rcClient;
uint dwStyle;
uint dwExStyle;
uint dwWindowStatus;
uint cxWindowBorders;
uint cyWindowBorders;
ushort atomWindowType;
ushort wCreatorVersion;
}
struct tagTITLEBARINFO {
uint cbSize;
tagRECT rcTitleBar;
uint * rgstate;
}
struct tagSCROLLBARINFO {
uint cbSize;
tagRECT rcScrollBar;
int dxyLineButton;
int xyThumbTop;
int xyThumbBottom;
int reserved;
uint * rgstate;
}
struct tagMENUINFO {
uint cbSize;
uint fMask;
uint dwStyle;
uint cyMax;
HBRUSH__ * hbrBack;
uint dwContextHelpID;
uint dwMenuData;
}
struct tagMENUBARINFO {
uint cbSize;
tagRECT rcBar;
HMENU__ * hMenu;
HWND__ * hwndMenu;
int fBarFocused;
int fFocused;
}
struct tagCURSORINFO {
uint cbSize;
uint flags;
HICON__ * hCursor;
tagPOINT ptScreenPos;
}
struct tagCOMBOBOXINFO {
uint cbSize;
tagRECT rcItem;
tagRECT rcButton;
uint stateButton;
HWND__ * hwndCombo;
HWND__ * hwndItem;
HWND__ * hwndList;
}
struct tagALTTABINFO {
uint cbSize;
int cItems;
int cColumns;
int cRows;
int iColFocus;
int iRowFocus;
int cxItem;
int cyItem;
tagPOINT ptStart;
}
struct tagSTYLESTRUCT {
uint styleOld;
uint styleNew;
}
struct tagHELPWININFOW {
int wStructSize;
int x;
int y;
int dx;
int dy;
int wMax;
wchar * rgchMember;
}
struct tagHELPWININFOA {
int wStructSize;
int x;
int y;
int dx;
int dy;
int wMax;
char * rgchMember;
}
struct tagMULTIKEYHELPW {
uint mkSize;
wchar mkKeylist;
wchar * szKeyphrase;
}
struct tagMULTIKEYHELPA {
uint mkSize;
char mkKeylist;
char * szKeyphrase;
}
struct tagDROPSTRUCT {
HWND__ * hwndSource;
HWND__ * hwndSink;
uint wFmt;
uint dwData;
tagPOINT ptDrop;
uint dwControlData;
}
struct tagMEASUREITEMSTRUCT {
uint CtlType;
uint CtlID;
uint itemID;
uint itemWidth;
uint itemHeight;
uint itemData;
}
struct tagMDINEXTMENU {
HMENU__ * hmenuIn;
HMENU__ * hmenuNext;
HWND__ * hwndNext;
}
struct tagMINMAXINFO {
tagPOINT ptReserved;
tagPOINT ptMaxSize;
tagPOINT ptMaxPosition;
tagPOINT ptMinTrackSize;
tagPOINT ptMaxTrackSize;
}
struct tagMDICREATESTRUCTW {
wchar * szClass;
wchar * szTitle;
void * hOwner;
int x;
int y;
int cx;
int cy;
uint style;
int lParam;
}
struct tagMDICREATESTRUCTA {
char * szClass;
char * szTitle;
void * hOwner;
int x;
int y;
int cx;
int cy;
uint style;
int lParam;
}
struct tagNCCALCSIZE_PARAMS {
tagRECT * rgrc;
_WINDOWPOS * lppos;
}
struct _WINDOWPOS {
HWND__ * hwnd;
HWND__ * hwndInsertAfter;
int x;
int y;
int cx;
int cy;
uint flags;
}
struct tagEVENTMSG {
uint message;
uint paramL;
uint paramH;
uint time;
HWND__ * hwnd;
}
struct tagTPMPARAMS {
uint cbSize;
tagRECT rcExclude;
}
struct tagTRACKMOUSEEVENT {
uint cbSize;
uint dwFlags;
HWND__ * hwndTrack;
uint dwHoverTime;
}
struct tagMOUSEHOOKSTRUCT {
tagPOINT pt;
HWND__ * hwnd;
uint wHitTestCode;
uint dwExtraInfo;
}
struct tagTOGGLEKEYS {
uint cbSize;
uint dwFlags;
}
struct tagSTICKYKEYS {
uint cbSize;
uint dwFlags;
}
struct tagSOUNDSENTRYW {
uint cbSize;
uint dwFlags;
uint iFSTextEffect;
uint iFSTextEffectMSec;
uint iFSTextEffectColorBits;
uint iFSGrafEffect;
uint iFSGrafEffectMSec;
uint iFSGrafEffectColor;
uint iWindowsEffect;
uint iWindowsEffectMSec;
wchar * lpszWindowsEffectDLL;
uint iWindowsEffectOrdinal;
}
struct tagSOUNDSENTRYA {
uint cbSize;
uint dwFlags;
uint iFSTextEffect;
uint iFSTextEffectMSec;
uint iFSTextEffectColorBits;
uint iFSGrafEffect;
uint iFSGrafEffectMSec;
uint iFSGrafEffectColor;
uint iWindowsEffect;
uint iWindowsEffectMSec;
char * lpszWindowsEffectDLL;
uint iWindowsEffectOrdinal;
}
struct tagSERIALKEYSW {
uint cbSize;
uint dwFlags;
wchar * lpszActivePort;
wchar * lpszPort;
uint iBaudRate;
uint iPortState;
uint iActive;
}
struct tagSERIALKEYSA {
uint cbSize;
uint dwFlags;
char * lpszActivePort;
char * lpszPort;
uint iBaudRate;
uint iPortState;
uint iActive;
}
struct tagNONCLIENTMETRICSW {
uint cbSize;
int iBorderWidth;
int iScrollWidth;
int iScrollHeight;
int iCaptionWidth;
int iCaptionHeight;
tagLOGFONTW lfCaptionFont;
int iSmCaptionWidth;
int iSmCaptionHeight;
tagLOGFONTW lfSmCaptionFont;
int iMenuWidth;
int iMenuHeight;
tagLOGFONTW lfMenuFont;
tagLOGFONTW lfStatusFont;
tagLOGFONTW lfMessageFont;
}
struct tagNONCLIENTMETRICSA {
uint cbSize;
int iBorderWidth;
int iScrollWidth;
int iScrollHeight;
int iCaptionWidth;
int iCaptionHeight;
tagLOGFONTA lfCaptionFont;
int iSmCaptionWidth;
int iSmCaptionHeight;
tagLOGFONTA lfSmCaptionFont;
int iMenuWidth;
int iMenuHeight;
tagLOGFONTA lfMenuFont;
tagLOGFONTA lfStatusFont;
tagLOGFONTA lfMessageFont;
}
struct tagMOUSEKEYS {
uint cbSize;
uint dwFlags;
uint iMaxSpeed;
uint iTimeToMaxSpeed;
uint iCtrlSpeed;
uint dwReserved1;
uint dwReserved2;
}
struct tagMINIMIZEDMETRICS {
uint cbSize;
int iWidth;
int iHorzGap;
int iVertGap;
int iArrange;
}
struct tagICONMETRICSW {
uint cbSize;
int iHorzSpacing;
int iVertSpacing;
int iTitleWrap;
tagLOGFONTW lfFont;
}
struct tagICONMETRICSA {
uint cbSize;
int iHorzSpacing;
int iVertSpacing;
int iTitleWrap;
tagLOGFONTA lfFont;
}
struct tagHIGHCONTRASTW {
uint cbSize;
uint dwFlags;
wchar * lpszDefaultScheme;
}
struct tagHIGHCONTRASTA {
uint cbSize;
uint dwFlags;
char * lpszDefaultScheme;
}
struct tagFILTERKEYS {
uint cbSize;
uint dwFlags;
uint iWaitMSec;
uint iDelayMSec;
uint iRepeatMSec;
uint iBounceMSec;
}
struct tagUSEROBJECTFLAGS {
int fInherit;
int fReserved;
uint dwFlags;
}
struct MSGBOXPARAMSW {
uint cbSize;
HWND__ * hwndOwner;
HINSTANCE__ * hInstance;
wchar * lpszText;
wchar * lpszCaption;
uint dwStyle;
wchar * lpszIcon;
uint dwContextHelpId;
_BCD_func__5363 lpfnMsgBoxCallback;
uint dwLanguageId;
}
struct MSGBOXPARAMSA {
uint cbSize;
HWND__ * hwndOwner;
HINSTANCE__ * hInstance;
char * lpszText;
char * lpszCaption;
uint dwStyle;
char * lpszIcon;
uint dwContextHelpId;
_BCD_func__5363 lpfnMsgBoxCallback;
uint dwLanguageId;
}
struct tagHELPINFO {
uint cbSize;
int iContextType;
int iCtrlId;
void * hItemHandle;
uint dwContextId;
tagPOINT MousePos;
}
struct MENUITEMTEMPLATE {
ushort mtOption;
ushort mtID;
wchar * mtString;
}
struct MENUITEMTEMPLATEHEADER {
ushort versionNumber;
ushort offset;
}
struct _WINDOWPLACEMENT {
uint length;
uint flags;
uint showCmd;
tagPOINT ptMinPosition;
tagPOINT ptMaxPosition;
tagRECT rcNormalPosition;
}
struct tagSCROLLINFO {
uint cbSize;
uint fMask;
int nMin;
int nMax;
uint nPage;
int nPos;
int nTrackPos;
}
struct tagMENUITEMINFOW {
uint cbSize;
uint fMask;
uint fType;
uint fState;
uint wID;
HMENU__ * hSubMenu;
HBITMAP__ * hbmpChecked;
HBITMAP__ * hbmpUnchecked;
uint dwItemData;
wchar * dwTypeData;
uint cch;
}
struct tagMENUITEMINFOA {
uint cbSize;
uint fMask;
uint fType;
uint fState;
uint wID;
HMENU__ * hSubMenu;
HBITMAP__ * hbmpChecked;
HBITMAP__ * hbmpUnchecked;
uint dwItemData;
char * dwTypeData;
uint cch;
}
struct _WNDCLASSEXW {
uint cbSize;
uint style;
_BCD_func__5608 lpfnWndProc;
int cbClsExtra;
int cbWndExtra;
HINSTANCE__ * hInstance;
HICON__ * hIcon;
HICON__ * hCursor;
HBRUSH__ * hbrBackground;
wchar * lpszMenuName;
wchar * lpszClassName;
HICON__ * hIconSm;
}
struct _WNDCLASSEXA {
uint cbSize;
uint style;
_BCD_func__5608 lpfnWndProc;
int cbClsExtra;
int cbWndExtra;
HINSTANCE__ * hInstance;
HICON__ * hIcon;
HICON__ * hCursor;
HBRUSH__ * hbrBackground;
char * lpszMenuName;
char * lpszClassName;
HICON__ * hIconSm;
}
struct _WNDCLASSW {
uint style;
_BCD_func__5608 lpfnWndProc;
int cbClsExtra;
int cbWndExtra;
HINSTANCE__ * hInstance;
HICON__ * hIcon;
HICON__ * hCursor;
HBRUSH__ * hbrBackground;
wchar * lpszMenuName;
wchar * lpszClassName;
}
struct _WNDCLASSA {
uint style;
_BCD_func__5608 lpfnWndProc;
int cbClsExtra;
int cbWndExtra;
HINSTANCE__ * hInstance;
HICON__ * hIcon;
HICON__ * hCursor;
HBRUSH__ * hbrBackground;
char * lpszMenuName;
char * lpszClassName;
}
struct tagNMHDR {
HWND__ * hwndFrom;
uint idFrom;
uint code;
}
struct _ICONINFO {
int fIcon;
uint xHotspot;
uint yHotspot;
HBITMAP__ * hbmMask;
HBITMAP__ * hbmColor;
}
struct tagMSG {
HWND__ * hwnd;
uint message;
uint wParam;
int lParam;
uint time;
tagPOINT pt;
}
struct tagPAINTSTRUCT {
HDC__ * hdc;
int fErase;
tagRECT rcPaint;
int fRestore;
int fIncUpdate;
char * rgbReserved;
}
struct DRAWTEXTPARAMS {
uint cbSize;
int iTabLength;
int iLeftMargin;
int iRightMargin;
uint uiLengthDrawn;
}
struct tagDRAWITEMSTRUCT {
uint CtlType;
uint CtlID;
uint itemID;
uint itemAction;
uint itemState;
HWND__ * hwndItem;
HDC__ * hDC;
tagRECT rcItem;
uint itemData;
}
struct DLGTEMPLATE {
uint style;
uint dwExtendedStyle;
ushort cdit;
short x;
short y;
short cx;
short cy;
}
struct DLGITEMTEMPLATE {
uint style;
uint dwExtendedStyle;
short x;
short y;
short cx;
short cy;
ushort id;
}
struct tagDELETEITEMSTRUCT {
uint CtlType;
uint CtlID;
uint itemID;
HWND__ * hwndItem;
uint itemData;
}
struct tagDEBUGHOOKINFO {
uint idThread;
uint idThreadInstaller;
int lParam;
uint wParam;
int code;
}
struct tagCWPSTRUCT {
int lParam;
uint wParam;
uint message;
HWND__ * hwnd;
}
struct tagCWPRETSTRUCT {
int lResult;
int lParam;
uint wParam;
uint message;
HWND__ * hwnd;
}
struct tagCURSORSHAPE {
int xHotSpot;
int yHotSpot;
int cx;
int cy;
int cbWidth;
char Planes;
char BitsPixel;
}
struct tagCOPYDATASTRUCT {
uint dwData;
uint cbData;
void * lpData;
}
struct tagCOMPAREITEMSTRUCT {
uint CtlType;
uint CtlID;
HWND__ * hwndItem;
uint itemID1;
uint itemData1;
uint itemID2;
uint itemData2;
uint dwLocaleId;
}
struct tagCLIENTCREATESTRUCT {
void * hWindowMenu;
uint idFirstChild;
}
struct tagCBTACTIVATESTRUCT {
int fMouse;
HWND__ * hWndActive;
}
struct tagCBT_CREATEWNDW {
tagCREATESTRUCTW * lpcs;
HWND__ * hwndInsertAfter;
}
struct tagCBT_CREATEWNDA {
tagCREATESTRUCTA * lpcs;
HWND__ * hwndInsertAfter;
}
struct tagCREATESTRUCTW {
void * lpCreateParams;
HINSTANCE__ * hInstance;
HMENU__ * hMenu;
HWND__ * hwndParent;
int cy;
int cx;
int y;
int x;
int style;
wchar * lpszName;
wchar * lpszClass;
uint dwExStyle;
}
struct tagCREATESTRUCTA {
void * lpCreateParams;
HINSTANCE__ * hInstance;
HMENU__ * hMenu;
HWND__ * hwndParent;
int cy;
int cx;
int y;
int x;
int style;
char * lpszName;
char * lpszClass;
uint dwExStyle;
}
struct tagANIMATIONINFO {
uint cbSize;
int iMinAnimate;
}
struct tagACCESSTIMEOUT {
uint cbSize;
uint dwFlags;
uint iTimeOutMSec;
}
struct tagACCEL {
char fVirt;
ushort key;
ushort cmd;
}
struct HDEVNOTIFY__ {
int i;
}
struct HDWP__ {
int i;
}
struct HHOOK__ {
int i;
}
struct _DISPLAY_DEVICEW {
uint cb;
wchar * DeviceName;
wchar * DeviceString;
uint StateFlags;
wchar * DeviceID;
wchar * DeviceKey;
}
struct _DISPLAY_DEVICEA {
uint cb;
char * DeviceName;
char * DeviceString;
uint StateFlags;
char * DeviceID;
char * DeviceKey;
}
struct _GRADIENT_RECT {
uint UpperLeft;
uint LowerRight;
}
struct _GRADIENT_TRIANGLE {
uint Vertex1;
uint Vertex2;
uint Vertex3;
}
struct _TRIVERTEX {
int x;
int y;
ushort Red;
ushort Green;
ushort Blue;
ushort Alpha;
}
struct _DESIGNVECTOR {
uint dvReserved;
uint dvNumAxes;
int * dvValues;
}
struct _BLENDFUNCTION {
char BlendOp;
char BlendFlags;
char SourceConstantAlpha;
char AlphaFormat;
}
struct tagLAYERPLANEDESCRIPTOR {
ushort nSize;
ushort nVersion;
uint dwFlags;
char iPixelType;
char cColorBits;
char cRedBits;
char cRedShift;
char cGreenBits;
char cGreenShift;
char cBlueBits;
char cBlueShift;
char cAlphaBits;
char cAlphaShift;
char cAccumBits;
char cAccumRedBits;
char cAccumGreenBits;
char cAccumBlueBits;
char cAccumAlphaBits;
char cDepthBits;
char cStencilBits;
char cAuxBuffers;
char iLayerPlane;
char bReserved;
uint crTransparent;
}
struct _GLYPHMETRICSFLOAT {
float gmfBlackBoxX;
float gmfBlackBoxY;
_POINTFLOAT gmfptGlyphOrigin;
float gmfCellIncX;
float gmfCellIncY;
}
struct _POINTFLOAT {
float x;
float y;
}
struct tagTTPOLYGONHEADER {
uint cb;
uint dwType;
tagPOINTFX pfxStart;
}
struct tagTTPOLYCURVE {
ushort wType;
ushort cpfx;
tagPOINTFX * apfx;
}
struct tagPOINTFX {
_FIXED x;
_FIXED y;
}
struct tagENUMLOGFONTEXW {
tagLOGFONTW elfLogFont;
wchar * elfFullName;
wchar * elfStyle;
wchar * elfScript;
}
struct tagENUMLOGFONTEXA {
tagLOGFONTA elfLogFont;
char * elfFullName;
char * elfStyle;
char * elfScript;
}
struct tagENUMLOGFONTW {
tagLOGFONTW elfLogFont;
wchar * elfFullName;
wchar * elfStyle;
}
struct tagENUMLOGFONTA {
tagLOGFONTA elfLogFont;
char * elfFullName;
char * elfStyle;
}
struct tagPELARRAY {
int paXCount;
int paYCount;
int paXExt;
int paYExt;
char paRGBs;
}
struct tagNEWTEXTMETRICEXW {
tagNEWTEXTMETRICW ntmTm;
tagFONTSIGNATURE ntmFontSig;
}
struct tagNEWTEXTMETRICEXA {
tagNEWTEXTMETRICA ntmTm;
tagFONTSIGNATURE ntmFontSig;
}
struct tagNEWTEXTMETRICW {
int tmHeight;
int tmAscent;
int tmDescent;
int tmInternalLeading;
int tmExternalLeading;
int tmAveCharWidth;
int tmMaxCharWidth;
int tmWeight;
int tmOverhang;
int tmDigitizedAspectX;
int tmDigitizedAspectY;
wchar tmFirstChar;
wchar tmLastChar;
wchar tmDefaultChar;
wchar tmBreakChar;
char tmItalic;
char tmUnderlined;
char tmStruckOut;
char tmPitchAndFamily;
char tmCharSet;
uint ntmFlags;
uint ntmSizeEM;
uint ntmCellHeight;
uint ntmAvgWidth;
}
struct tagNEWTEXTMETRICA {
int tmHeight;
int tmAscent;
int tmDescent;
int tmInternalLeading;
int tmExternalLeading;
int tmAveCharWidth;
int tmMaxCharWidth;
int tmWeight;
int tmOverhang;
int tmDigitizedAspectX;
int tmDigitizedAspectY;
char tmFirstChar;
char tmLastChar;
char tmDefaultChar;
char tmBreakChar;
char tmItalic;
char tmUnderlined;
char tmStruckOut;
char tmPitchAndFamily;
char tmCharSet;
uint ntmFlags;
uint ntmSizeEM;
uint ntmCellHeight;
uint ntmAvgWidth;
}
struct tagLOCALESIGNATURE {
uint * lsUsb;
uint * lsCsbDefault;
uint * lsCsbSupported;
}
struct tagMETAFILEPICT {
int mm;
int xExt;
int yExt;
HMETAFILE__ * hMF;
}
struct tagPIXELFORMATDESCRIPTOR {
ushort nSize;
ushort nVersion;
uint dwFlags;
char iPixelType;
char cColorBits;
char cRedBits;
char cRedShift;
char cGreenBits;
char cGreenShift;
char cBlueBits;
char cBlueShift;
char cAlphaBits;
char cAlphaShift;
char cAccumBits;
char cAccumRedBits;
char cAccumGreenBits;
char cAccumBlueBits;
char cAccumAlphaBits;
char cDepthBits;
char cStencilBits;
char cAuxBuffers;
char iLayerType;
char bReserved;
uint dwLayerMask;
uint dwVisibleMask;
uint dwDamageMask;
}
struct _POLYTEXTW {
int x;
int y;
uint n;
wchar * lpstr;
uint uiFlags;
tagRECT rcl;
int * pdx;
}
struct _POLYTEXTA {
int x;
int y;
uint n;
char * lpstr;
uint uiFlags;
tagRECT rcl;
int * pdx;
}
struct _RASTERIZER_STATUS {
short nSize;
short wFlags;
short nLanguageID;
}
struct _OUTLINETEXTMETRICW {
uint otmSize;
tagTEXTMETRICW otmTextMetrics;
char otmFiller;
tagPANOSE otmPanoseNumber;
uint otmfsSelection;
uint otmfsType;
int otmsCharSlopeRise;
int otmsCharSlopeRun;
int otmItalicAngle;
uint otmEMSquare;
int otmAscent;
int otmDescent;
uint otmLineGap;
uint otmsCapEmHeight;
uint otmsXHeight;
tagRECT otmrcFontBox;
int otmMacAscent;
int otmMacDescent;
uint otmMacLineGap;
uint otmusMinimumPPEM;
tagPOINT otmptSubscriptSize;
tagPOINT otmptSubscriptOffset;
tagPOINT otmptSuperscriptSize;
tagPOINT otmptSuperscriptOffset;
uint otmsStrikeoutSize;
int otmsStrikeoutPosition;
int otmsUnderscoreSize;
int otmsUnderscorePosition;
char * otmpFamilyName;
char * otmpFaceName;
char * otmpStyleName;
char * otmpFullName;
}
struct _OUTLINETEXTMETRICA {
uint otmSize;
tagTEXTMETRICA otmTextMetrics;
char otmFiller;
tagPANOSE otmPanoseNumber;
uint otmfsSelection;
uint otmfsType;
int otmsCharSlopeRise;
int otmsCharSlopeRun;
int otmItalicAngle;
uint otmEMSquare;
int otmAscent;
int otmDescent;
uint otmLineGap;
uint otmsCapEmHeight;
uint otmsXHeight;
tagRECT otmrcFontBox;
int otmMacAscent;
int otmMacDescent;
uint otmMacLineGap;
uint otmusMinimumPPEM;
tagPOINT otmptSubscriptSize;
tagPOINT otmptSubscriptOffset;
tagPOINT otmptSuperscriptSize;
tagPOINT otmptSuperscriptOffset;
uint otmsStrikeoutSize;
int otmsStrikeoutPosition;
int otmsUnderscoreSize;
int otmsUnderscorePosition;
char * otmpFamilyName;
char * otmpFaceName;
char * otmpStyleName;
char * otmpFullName;
}
struct _MAT2 {
_FIXED eM11;
_FIXED eM12;
_FIXED eM21;
_FIXED eM22;
}
struct _FIXED {
ushort fract;
short value;
}
struct tagKERNINGPAIR {
ushort wFirst;
ushort wSecond;
int iKernAmount;
}
struct _GLYPHMETRICS {
uint gmBlackBoxX;
uint gmBlackBoxY;
tagPOINT gmptGlyphOrigin;
short gmCellIncX;
short gmCellIncY;
}
struct tagGCP_RESULTSW {
uint lStructSize;
wchar * lpOutString;
uint * lpOrder;
int * lpDx;
int * lpCaretPos;
wchar * lpClass;
wchar * lpGlyphs;
uint nGlyphs;
uint nMaxFit;
}
struct tagGCP_RESULTSA {
uint lStructSize;
char * lpOutString;
uint * lpOrder;
int * lpDx;
int * lpCaretPos;
char * lpClass;
wchar * lpGlyphs;
uint nGlyphs;
uint nMaxFit;
}
struct _RGNDATA {
_RGNDATAHEADER rdh;
char * Buffer;
}
struct _RGNDATAHEADER {
uint dwSize;
uint iType;
uint nCount;
uint nRgnSize;
tagRECT rcBound;
}
struct tagTEXTMETRICW {
int tmHeight;
int tmAscent;
int tmDescent;
int tmInternalLeading;
int tmExternalLeading;
int tmAveCharWidth;
int tmMaxCharWidth;
int tmWeight;
int tmOverhang;
int tmDigitizedAspectX;
int tmDigitizedAspectY;
wchar tmFirstChar;
wchar tmLastChar;
wchar tmDefaultChar;
wchar tmBreakChar;
char tmItalic;
char tmUnderlined;
char tmStruckOut;
char tmPitchAndFamily;
char tmCharSet;
}
struct tagTEXTMETRICA {
int tmHeight;
int tmAscent;
int tmDescent;
int tmInternalLeading;
int tmExternalLeading;
int tmAveCharWidth;
int tmMaxCharWidth;
int tmWeight;
int tmOverhang;
int tmDigitizedAspectX;
int tmDigitizedAspectY;
char tmFirstChar;
char tmLastChar;
char tmDefaultChar;
char tmBreakChar;
char tmItalic;
char tmUnderlined;
char tmStruckOut;
char tmPitchAndFamily;
char tmCharSet;
}
struct tagHANDLETABLE {
void * * objectHandle;
}
struct tagENHMETARECORD {
uint iType;
uint nSize;
uint * dParm;
}
struct tagMETARECORD {
uint rdSize;
ushort rdFunction;
ushort * rdParm;
}
struct tagENHMETAHEADER {
uint iType;
uint nSize;
tagRECTL rclBounds;
tagRECTL rclFrame;
uint dSignature;
uint nVersion;
uint nBytes;
uint nRecords;
ushort nHandles;
ushort sReserved;
uint nDescription;
uint offDescription;
uint nPalEntries;
tagSIZE szlDevice;
tagSIZE szlMillimeters;
uint cbPixelFormat;
uint offPixelFormat;
uint bOpenGL;
}
struct tagMETAHEADER {
ushort mtType;
ushort mtHeaderSize;
ushort mtVersion;
uint mtSize;
ushort mtNoObjects;
uint mtMaxRecord;
ushort mtNoParameters;
}
struct tagEMRSELECTCLIPPATH {
tagEMR emr;
uint iMode;
}
struct tagABORTPATH {
tagEMR emr;
}
struct tagEMRSTRETCHDIBITS {
tagEMR emr;
tagRECTL rclBounds;
int xDest;
int yDest;
int xSrc;
int ySrc;
int cxSrc;
int cySrc;
uint offBmiSrc;
uint cbBmiSrc;
uint offBitsSrc;
uint cbBitsSrc;
uint iUsageSrc;
uint dwRop;
int cxDest;
int cyDest;
}
struct tagEMRSTRETCHBLT {
tagEMR emr;
tagRECTL rclBounds;
int xDest;
int yDest;
int cxDest;
int cyDest;
uint dwRop;
int xSrc;
int ySrc;
_XFORM xformSrc;
uint crBkColorSrc;
uint iUsageSrc;
uint offBmiSrc;
uint cbBmiSrc;
uint offBitsSrc;
uint cbBitsSrc;
int cxSrc;
int cySrc;
}
struct tagEMRSETWORLDTRANSFORM {
tagEMR emr;
_XFORM xform;
}
struct tagEMRSETVIEWPORTORGEX {
tagEMR emr;
tagPOINT ptlOrigin;
}
struct tagEMRSETVIEWPORTEXTEX {
tagEMR emr;
tagSIZE szlExtent;
}
struct tagEMRSETPIXELV {
tagEMR emr;
tagPOINT ptlPixel;
uint crColor;
}
struct tagEMRSETPALETTEENTRIES {
tagEMR emr;
uint ihPal;
uint iStart;
uint cEntries;
tagPALETTEENTRY * aPalEntries;
}
struct tagEMRSETMITERLIMIT {
tagEMR emr;
float eMiterLimit;
}
struct tagEMRSETMAPPERFLAGS {
tagEMR emr;
uint dwFlags;
}
struct tagEMRSETDIBITSTODEVICE {
tagEMR emr;
tagRECTL rclBounds;
int xDest;
int yDest;
int xSrc;
int ySrc;
int cxSrc;
int cySrc;
uint offBmiSrc;
uint cbBmiSrc;
uint offBitsSrc;
uint cbBitsSrc;
uint iUsageSrc;
uint iStartScan;
uint cScans;
}
struct tagEMRSETCOLORADJUSTMENT {
tagEMR emr;
tagCOLORADJUSTMENT ColorAdjustment;
}
struct tagEMRSETTEXTCOLOR {
tagEMR emr;
uint crColor;
}
struct tagEMRSETARCDIRECTION {
tagEMR emr;
uint iArcDirection;
}
struct tagEMRSELECTPALETTE {
tagEMR emr;
uint ihPal;
}
struct tagEMRSELECTOBJECT {
tagEMR emr;
uint ihObject;
}
struct tagEMRSELECTCOLORSPACE {
tagEMR emr;
uint ihCS;
}
struct tagEMRSCALEVIEWPORTEXTEX {
tagEMR emr;
int xNum;
int xDenom;
int yNum;
int yDenom;
}
struct tagEMRROUNDRECT {
tagEMR emr;
tagRECTL rclBox;
tagSIZE szlCorner;
}
struct tagEMRRESTOREDC {
tagEMR emr;
int iRelative;
}
struct tagEMRRESIZEPALETTE {
tagEMR emr;
uint ihPal;
uint cEntries;
}
struct tagEMRPOLYTEXTOUTA {
tagEMR emr;
tagRECTL rclBounds;
uint iGraphicsMode;
float exScale;
float eyScale;
int cStrings;
tagEMRTEXT * aemrtext;
}
struct tagEMRPOLYPOLYLINE16 {
tagEMR emr;
tagRECTL rclBounds;
uint nPolys;
uint cpts;
uint * aPolyCounts;
tagPOINTS * apts;
}
struct tagEMRPOLYPOLYLINE {
tagEMR emr;
tagRECTL rclBounds;
uint nPolys;
uint cptl;
uint * aPolyCounts;
tagPOINT * aptl;
}
struct tagEMRPOLYLINE16 {
tagEMR emr;
tagRECTL rclBounds;
uint cpts;
tagPOINT * apts;
}
struct tagEMRPOLYLINE {
tagEMR emr;
tagRECTL rclBounds;
uint cptl;
tagPOINT * aptl;
}
struct tagEMRPOLYDRAW16 {
tagEMR emr;
tagRECTL rclBounds;
uint cpts;
tagPOINTS * apts;
char * abTypes;
}
struct tagEMRPOLYDRAW {
tagEMR emr;
tagRECTL rclBounds;
uint cptl;
tagPOINT * aptl;
char * abTypes;
}
struct tagEMRPLGBLT {
tagEMR emr;
tagRECTL rclBounds;
tagPOINT * aptlDest;
int xSrc;
int ySrc;
int cxSrc;
int cySrc;
_XFORM xformSrc;
uint crBkColorSrc;
uint iUsageSrc;
uint offBmiSrc;
uint cbBmiSrc;
uint offBitsSrc;
uint cbBitsSrc;
int xMask;
int yMask;
uint iUsageMask;
uint offBmiMask;
uint cbBmiMask;
uint offBitsMask;
uint cbBitsMask;
}
struct tagEMROFFSETCLIPRGN {
tagEMR emr;
tagPOINT ptlOffset;
}
struct tagEMRMODIFYWORLDTRANSFORM {
tagEMR emr;
_XFORM xform;
uint iMode;
}
struct tagEMRMASKBLT {
tagEMR emr;
tagRECTL rclBounds;
int xDest;
int yDest;
int cxDest;
int cyDest;
uint dwRop;
int xSrc;
int ySrc;
_XFORM xformSrc;
uint crBkColorSrc;
uint iUsageSrc;
uint offBmiSrc;
uint cbBmiSrc;
uint offBitsSrc;
uint cbBitsSrc;
int xMask;
int yMask;
uint iUsageMask;
uint offBmiMask;
uint cbBmiMask;
uint offBitsMask;
uint cbBitsMask;
}
struct tagEMRLINETO {
tagEMR emr;
tagPOINT ptl;
}
struct tagEMRINVERTRGN {
tagEMR emr;
tagRECTL rclBounds;
uint cbRgnData;
char * RgnData;
}
struct tagEMRGDICOMMENT {
tagEMR emr;
uint cbData;
char * Data;
}
struct tagEMRFRAMERGN {
tagEMR emr;
tagRECTL rclBounds;
uint cbRgnData;
uint ihBrush;
tagSIZE szlStroke;
char * RgnData;
}
struct tagEMRFORMAT {
uint dSignature;
uint nVersion;
uint cbData;
uint offData;
}
struct tagEMRFILLRGN {
tagEMR emr;
tagRECTL rclBounds;
uint cbRgnData;
uint ihBrush;
char * RgnData;
}
struct tagEMRFILLPATH {
tagEMR emr;
tagRECTL rclBounds;
}
struct tagEMREXTTEXTOUTA {
tagEMR emr;
tagRECTL rclBounds;
uint iGraphicsMode;
float exScale;
float eyScale;
tagEMRTEXT emrtext;
}
struct tagEMRTEXT {
tagPOINT ptlReference;
uint nChars;
uint offString;
uint fOptions;
tagRECTL rcl;
uint offDx;
}
struct tagEMREXTSELECTCLIPRGN {
tagEMR emr;
uint cbRgnData;
uint iMode;
char * RgnData;
}
struct tagEMREXTFLOODFILL {
tagEMR emr;
tagPOINT ptlStart;
uint crColor;
uint iMode;
}
struct tagEMREXTCREATEPEN {
tagEMR emr;
uint ihPen;
uint offBmi;
uint cbBmi;
uint offBits;
uint cbBits;
tagEXTLOGPEN elp;
}
struct tagEXTLOGPEN {
uint elpPenStyle;
uint elpWidth;
uint elpBrushStyle;
uint elpColor;
int elpHatch;
uint elpNumEntries;
uint * elpStyleEntry;
}
struct tagEMREXTCREATEFONTINDIRECTW {
tagEMR emr;
uint ihFont;
tagEXTLOGFONTW elfw;
}
struct tagEXTLOGFONTW {
tagLOGFONTW elfLogFont;
wchar * elfFullName;
wchar * elfStyle;
uint elfVersion;
uint elfStyleSize;
uint elfMatch;
uint elfReserved;
char * elfVendorId;
uint elfCulture;
tagPANOSE elfPanose;
}
struct tagEXTLOGFONTA {
tagLOGFONTA elfLogFont;
char * elfFullName;
char * elfStyle;
uint elfVersion;
uint elfStyleSize;
uint elfMatch;
uint elfReserved;
char * elfVendorId;
uint elfCulture;
tagPANOSE elfPanose;
}
struct tagLOGFONTW {
int lfHeight;
int lfWidth;
int lfEscapement;
int lfOrientation;
int lfWeight;
char lfItalic;
char lfUnderline;
char lfStrikeOut;
char lfCharSet;
char lfOutPrecision;
char lfClipPrecision;
char lfQuality;
char lfPitchAndFamily;
wchar * lfFaceName;
}
struct tagLOGFONTA {
int lfHeight;
int lfWidth;
int lfEscapement;
int lfOrientation;
int lfWeight;
char lfItalic;
char lfUnderline;
char lfStrikeOut;
char lfCharSet;
char lfOutPrecision;
char lfClipPrecision;
char lfQuality;
char lfPitchAndFamily;
char * lfFaceName;
}
struct tagPANOSE {
char bFamilyType;
char bSerifStyle;
char bWeight;
char bProportion;
char bContrast;
char bStrokeVariation;
char bArmStyle;
char bLetterform;
char bMidline;
char bXHeight;
}
struct tagEMREXCLUDECLIPRECT {
tagEMR emr;
tagRECTL rclClip;
}
struct tagEMREOF {
tagEMR emr;
uint nPalEntries;
uint offPalEntries;
uint nSizeLast;
}
struct tagEMRELLIPSE {
tagEMR emr;
tagRECTL rclBox;
}
struct tagEMRCREATEPEN {
tagEMR emr;
uint ihPen;
tagLOGPEN lopn;
}
struct tagLOGPEN {
uint lopnStyle;
tagPOINT lopnWidth;
uint lopnColor;
}
struct tagEMRCREATEPALETTE {
tagEMR emr;
uint ihPal;
tagLOGPALETTE lgpl;
}
struct tagLOGPALETTE {
ushort palVersion;
ushort palNumEntries;
tagPALETTEENTRY * palPalEntry;
}
struct tagPALETTEENTRY {
char peRed;
char peGreen;
char peBlue;
char peFlags;
}
struct tagEMRCREATEMONOBRUSH {
tagEMR emr;
uint ihBrush;
uint iUsage;
uint offBmi;
uint cbBmi;
uint offBits;
uint cbBits;
}
struct tagEMRCREATEDIBPATTERNBRUSHPT {
tagEMR emr;
uint ihBrush;
uint iUsage;
uint offBmi;
uint cbBmi;
uint offBits;
uint cbBits;
}
struct tagEMRCREATECOLORSPACE {
tagEMR emr;
uint ihCS;
tagLOGCOLORSPACEW lcs;
}
struct tagLOGCOLORSPACEW {
uint lcsSignature;
uint lcsVersion;
uint lcsSize;
int lcsCSType;
int lcsIntent;
tagCIEXYZTRIPLE lcsEndpoints;
uint lcsGammaRed;
uint lcsGammaGreen;
uint lcsGammaBlue;
wchar * lcsFilename;
}
struct tagLOGCOLORSPACEA {
uint lcsSignature;
uint lcsVersion;
uint lcsSize;
int lcsCSType;
int lcsIntent;
tagCIEXYZTRIPLE lcsEndpoints;
uint lcsGammaRed;
uint lcsGammaGreen;
uint lcsGammaBlue;
char * lcsFilename;
}
struct tagEMRCREATEBRUSHINDIRECT {
tagEMR emr;
uint ihBrush;
tagLOGBRUSH lb;
}
struct tagLOGBRUSH {
uint lbStyle;
uint lbColor;
int lbHatch;
}
struct tagEMRBITBLT {
tagEMR emr;
tagRECTL rclBounds;
int xDest;
int yDest;
int cxDest;
int cyDest;
uint dwRop;
int xSrc;
int ySrc;
_XFORM xformSrc;
uint crBkColorSrc;
uint iUsageSrc;
uint offBmiSrc;
uint offBitsSrc;
uint cbBitsSrc;
}
struct _XFORM {
float eM11;
float eM12;
float eM21;
float eM22;
float eDx;
float eDy;
}
struct tagEMRARC {
tagEMR emr;
tagRECTL rclBox;
tagPOINT ptlStart;
tagPOINT ptlEnd;
}
struct tagEMRANGLEARC {
tagEMR emr;
tagPOINT ptlCenter;
uint nRadius;
float eStartAngle;
float eSweepAngle;
}
struct tagEMR {
uint iType;
uint nSize;
}
struct _DOCINFOW {
int cbSize;
wchar * lpszDocName;
wchar * lpszOutput;
wchar * lpszDatatype;
uint fwType;
}
struct _DOCINFOA {
int cbSize;
char * lpszDocName;
char * lpszOutput;
char * lpszDatatype;
uint fwType;
}
struct tagDIBSECTION {
tagBITMAP dsBm;
tagBITMAPINFOHEADER dsBmih;
uint * dsBitfields;
void * dshSection;
uint dsOffset;
}
struct N12_devicemodeW4__504__51E {
short dmOrientation;
short dmPaperSize;
short dmPaperLength;
short dmPaperWidth;
short dmScale;
short dmCopies;
short dmDefaultSource;
short dmPrintQuality;
}
union N12_devicemodeW4__50E {
N12_devicemodeW4__504__51E _BCD__8801;
tagPOINT dmPosition;
uint dmDisplayOrientation;
uint dmDisplayFixedOutput;
}
union N12_devicemodeW4__52E {
uint dmDisplayFlags;
uint dmNup;
}
struct _devicemodeW {
wchar * dmDeviceName;
ushort dmSpecVersion;
ushort dmDriverVersion;
ushort dmSize;
ushort dmDriverExtra;
uint dmFields;
N12_devicemodeW4__50E _BCD__6716;
short dmColor;
short dmDuplex;
short dmYResolution;
short dmTTOption;
short dmCollate;
wchar * dmFormName;
ushort dmLogPixels;
uint dmBitsPerPel;
uint dmPelsWidth;
uint dmPelsHeight;
N12_devicemodeW4__52E _BCD__6727;
uint dmDisplayFrequency;
uint dmICMMethod;
uint dmICMIntent;
uint dmMediaType;
uint dmDitherType;
uint dmReserved1;
uint dmReserved2;
uint dmPanningWidth;
uint dmPanningHeight;
}
struct N12_devicemodeA4__474__48E {
short dmOrientation;
short dmPaperSize;
short dmPaperLength;
short dmPaperWidth;
short dmScale;
short dmCopies;
short dmDefaultSource;
short dmPrintQuality;
}
union N12_devicemodeA4__47E {
N12_devicemodeA4__474__48E _BCD__8641;
tagPOINT dmPosition;
uint dmDisplayOrientation;
uint dmDisplayFixedOutput;
}
union N12_devicemodeA4__49E {
uint dmDisplayFlags;
uint dmNup;
}
struct _devicemodeA {
char * dmDeviceName;
ushort dmSpecVersion;
ushort dmDriverVersion;
ushort dmSize;
ushort dmDriverExtra;
uint dmFields;
N12_devicemodeA4__47E _BCD__5752;
short dmColor;
short dmDuplex;
short dmYResolution;
short dmTTOption;
short dmCollate;
char * dmFormName;
ushort dmLogPixels;
uint dmBitsPerPel;
uint dmPelsWidth;
uint dmPelsHeight;
N12_devicemodeA4__49E _BCD__5763;
uint dmDisplayFrequency;
uint dmICMMethod;
uint dmICMIntent;
uint dmMediaType;
uint dmDitherType;
uint dmReserved1;
uint dmReserved2;
uint dmPanningWidth;
uint dmPanningHeight;
}
struct tagCOLORADJUSTMENT {
ushort caSize;
ushort caFlags;
ushort caIlluminantIndex;
ushort caRedGamma;
ushort caGreenGamma;
ushort caBlueGamma;
ushort caReferenceBlack;
ushort caReferenceWhite;
short caContrast;
short caBrightness;
short caColorfulness;
short caRedGreenTint;
}
struct CHARSETINFO {
uint ciCharset;
uint ciACP;
tagFONTSIGNATURE fs;
}
struct tagFONTSIGNATURE {
uint * fsUsb;
uint * fsCsb;
}
struct BITMAPV4HEADER {
uint bV4Size;
int bV4Width;
int bV4Height;
ushort bV4Planes;
ushort bV4BitCount;
uint bV4V4Compression;
uint bV4SizeImage;
int bV4XPelsPerMeter;
int bV4YPelsPerMeter;
uint bV4ClrUsed;
uint bV4ClrImportant;
uint bV4RedMask;
uint bV4GreenMask;
uint bV4BlueMask;
uint bV4AlphaMask;
uint bV4CSType;
tagCIEXYZTRIPLE bV4Endpoints;
uint bV4GammaRed;
uint bV4GammaGreen;
uint bV4GammaBlue;
}
struct tagCIEXYZTRIPLE {
tagCIEXYZ ciexyzRed;
tagCIEXYZ ciexyzGreen;
tagCIEXYZ ciexyzBlue;
}
struct tagCIEXYZ {
int ciexyzX;
int ciexyzY;
int ciexyzZ;
}
struct tagBITMAPINFO {
tagBITMAPINFOHEADER bmiHeader;
tagRGBQUAD * bmiColors;
}
struct tagRGBQUAD {
char rgbBlue;
char rgbGreen;
char rgbRed;
char rgbReserved;
}
struct tagBITMAPINFOHEADER {
uint biSize;
int biWidth;
int biHeight;
ushort biPlanes;
ushort biBitCount;
uint biCompression;
uint biSizeImage;
int biXPelsPerMeter;
int biYPelsPerMeter;
uint biClrUsed;
uint biClrImportant;
}
struct _BITMAPCOREINFO {
tagBITMAPCOREHEADER bmciHeader;
tagRGBTRIPLE * bmciColors;
}
struct tagBITMAPFILEHEADER {
ushort bfType;
uint bfSize;
ushort bfReserved1;
ushort bfReserved2;
uint bfOffBits;
}
struct tagRGBTRIPLE {
char rgbtBlue;
char rgbtGreen;
char rgbtRed;
}
struct tagBITMAPCOREHEADER {
uint bcSize;
ushort bcWidth;
ushort bcHeight;
ushort bcPlanes;
ushort bcBitCount;
}
struct tagBITMAP {
int bmType;
int bmWidth;
int bmHeight;
int bmWidthBytes;
ushort bmPlanes;
ushort bmBitsPixel;
void * bmBits;
}
struct _ABCFLOAT {
float abcfA;
float abcfB;
float abcfC;
}
struct _ABC {
int abcA;
uint abcB;
int abcC;
}
struct _WIN_CERTIFICATE {
uint dwLength;
ushort wRevision;
ushort wCertificateType;
char * bCertificate;
}
struct _OFSTRUCT {
char cBytes;
char fFixedDisk;
ushort nErrCode;
ushort Reserved1;
ushort Reserved2;
char * szPathName;
}
struct N19_PROCESS_HEAP_ENTRY4__424__43E {
void * hMem;
uint * dwReserved;
}
struct N19_PROCESS_HEAP_ENTRY4__424__44E {
uint dwCommittedSize;
uint dwUnCommittedSize;
void * lpFirstBlock;
void * lpLastBlock;
}
union N19_PROCESS_HEAP_ENTRY4__42E {
N19_PROCESS_HEAP_ENTRY4__424__43E Block;
N19_PROCESS_HEAP_ENTRY4__424__44E Region;
}
struct _PROCESS_HEAP_ENTRY {
void * lpData;
uint cbData;
char cbOverhead;
char iRegionIndex;
ushort wFlags;
N19_PROCESS_HEAP_ENTRY4__42E _BCD__6938;
}
struct N10_LDT_ENTRY4__394__40E {
char BaseMid;
char Flags1;
char Flags2;
char BaseHi;
}
struct N10_LDT_ENTRY4__394__41E {
uint BaseMid;
uint Type;
uint Dpl;
uint Pres;
uint LimitHi;
uint Sys;
uint Reserved_0;
uint Default_Big;
uint Granularity;
uint BaseHi;
}
union N10_LDT_ENTRY4__39E {
N10_LDT_ENTRY4__394__40E Bytes;
N10_LDT_ENTRY4__394__41E Bits;
}
struct _LDT_ENTRY {
ushort LimitLow;
ushort BaseLow;
N10_LDT_ENTRY4__39E HighWord;
}
struct _MEMORYSTATUS {
uint dwLength;
uint dwMemoryLoad;
uint dwTotalPhys;
uint dwAvailPhys;
uint dwTotalPageFile;
uint dwAvailPageFile;
uint dwTotalVirtual;
uint dwAvailVirtual;
}
struct _TIME_ZONE_INFORMATION {
int Bias;
wchar * StandardName;
_SYSTEMTIME StandardDate;
int StandardBias;
wchar * DaylightName;
_SYSTEMTIME DaylightDate;
int DaylightBias;
}
struct _SYSTEM_POWER_STATUS {
char ACLineStatus;
char BatteryFlag;
char BatteryLifePercent;
char Reserved1;
uint BatteryLifeTime;
uint BatteryFullLifeTime;
}
struct N12_SYSTEM_INFO4__374__38E {
ushort wProcessorArchitecture;
ushort wReserved;
}
union N12_SYSTEM_INFO4__37E {
uint dwOemId;
N12_SYSTEM_INFO4__374__38E _BCD__8855;
}
struct _SYSTEM_INFO {
N12_SYSTEM_INFO4__37E _BCD__6975;
uint dwPageSize;
void * lpMinimumApplicationAddress;
void * lpMaximumApplicationAddress;
uint dwActiveProcessorMask;
uint dwNumberOfProcessors;
uint dwProcessorType;
uint dwAllocationGranularity;
ushort wProcessorLevel;
ushort wProcessorRevision;
}
struct tagHW_PROFILE_INFOW {
uint dwDockInfo;
wchar * szHwProfileGuid;
wchar * szHwProfileName;
}
struct tagHW_PROFILE_INFOA {
uint dwDockInfo;
char * szHwProfileGuid;
char * szHwProfileName;
}
struct _WIN32_STREAM_ID {
uint dwStreamId;
uint dwStreamAttributes;
_LARGE_INTEGER Size;
uint dwStreamNameSize;
wchar * cStreamName;
}
struct _WIN32_FIND_DATAW {
uint dwFileAttributes;
_FILETIME ftCreationTime;
_FILETIME ftLastAccessTime;
_FILETIME ftLastWriteTime;
uint nFileSizeHigh;
uint nFileSizeLow;
uint dwReserved0;
uint dwReserved1;
wchar * cFileName;
wchar * cAlternateFileName;
}
struct _WIN32_FIND_DATAA {
uint dwFileAttributes;
_FILETIME ftCreationTime;
_FILETIME ftLastAccessTime;
_FILETIME ftLastWriteTime;
uint nFileSizeHigh;
uint nFileSizeLow;
uint dwReserved0;
uint dwReserved1;
char * cFileName;
char * cAlternateFileName;
}
struct _WIN32_FILE_ATTRIBUTE_DATA {
uint dwFileAttributes;
_FILETIME ftCreationTime;
_FILETIME ftLastAccessTime;
_FILETIME ftLastWriteTime;
uint nFileSizeHigh;
uint nFileSizeLow;
}
struct _SYSTEMTIME {
ushort wYear;
ushort wMonth;
ushort wDayOfWeek;
ushort wDay;
ushort wHour;
ushort wMinute;
ushort wSecond;
ushort wMilliseconds;
}
struct _CRITICAL_SECTION {
_CRITICAL_SECTION_DEBUG * DebugInfo;
int LockCount;
int RecursionCount;
void * OwningThread;
void * LockSemaphore;
uint SpinCount;
}
struct _CRITICAL_SECTION_DEBUG {
ushort Type;
ushort CreatorBackTraceIndex;
_CRITICAL_SECTION * CriticalSection;
_LIST_ENTRY ProcessLocksList;
uint EntryCount;
uint ContentionCount;
uint * Spare;
}
struct _PROCESS_INFORMATION {
void * hProcess;
void * hThread;
uint dwProcessId;
uint dwThreadId;
}
struct _STARTUPINFOW {
uint cb;
wchar * lpReserved;
wchar * lpDesktop;
wchar * lpTitle;
uint dwX;
uint dwY;
uint dwXSize;
uint dwYSize;
uint dwXCountChars;
uint dwYCountChars;
uint dwFillAttribute;
uint dwFlags;
ushort wShowWindow;
ushort cbReserved2;
char * lpReserved2;
void * hStdInput;
void * hStdOutput;
void * hStdError;
}
struct _STARTUPINFOA {
uint cb;
char * lpReserved;
char * lpDesktop;
char * lpTitle;
uint dwX;
uint dwY;
uint dwXSize;
uint dwYSize;
uint dwXCountChars;
uint dwYCountChars;
uint dwFillAttribute;
uint dwFlags;
ushort wShowWindow;
ushort cbReserved2;
char * lpReserved2;
void * hStdInput;
void * hStdOutput;
void * hStdError;
}
struct _OVERLAPPED {
uint Internal;
uint InternalHigh;
uint Offset;
uint OffsetHigh;
void * hEvent;
}
union N12_DEBUG_EVENT4__36E {
_EXCEPTION_DEBUG_INFO Exception;
_CREATE_THREAD_DEBUG_INFO CreateThread;
_CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
_EXIT_THREAD_DEBUG_INFO ExitThread;
_EXIT_PROCESS_DEBUG_INFO ExitProcess;
_LOAD_DLL_DEBUG_INFO LoadDll;
_UNLOAD_DLL_DEBUG_INFO UnloadDll;
_OUTPUT_DEBUG_STRING_INFO DebugString;
_RIP_INFO RipInfo;
}
struct _DEBUG_EVENT {
uint dwDebugEventCode;
uint dwProcessId;
uint dwThreadId;
N12_DEBUG_EVENT4__36E u;
}
struct _RIP_INFO {
uint dwError;
uint dwType;
}
struct _OUTPUT_DEBUG_STRING_INFO {
char * lpDebugStringData;
ushort fUnicode;
ushort nDebugStringLength;
}
struct _UNLOAD_DLL_DEBUG_INFO {
void * lpBaseOfDll;
}
struct _LOAD_DLL_DEBUG_INFO {
void * hFile;
void * lpBaseOfDll;
uint dwDebugInfoFileOffset;
uint nDebugInfoSize;
void * lpImageName;
ushort fUnicode;
}
struct _EXIT_PROCESS_DEBUG_INFO {
uint dwExitCode;
}
struct _EXIT_THREAD_DEBUG_INFO {
uint dwExitCode;
}
struct _EXCEPTION_DEBUG_INFO {
_EXCEPTION_RECORD ExceptionRecord;
uint dwFirstChance;
}
struct _CREATE_THREAD_DEBUG_INFO {
void * hThread;
void * lpThreadLocalBase;
_BCD_func__7134 lpStartAddress;
}
struct _CREATE_PROCESS_DEBUG_INFO {
void * hFile;
void * hProcess;
void * hThread;
void * lpBaseOfImage;
uint dwDebugInfoFileOffset;
uint nDebugInfoSize;
void * lpThreadLocalBase;
_BCD_func__7134 lpStartAddress;
void * lpImageName;
ushort fUnicode;
}
struct _COMSTAT {
uint fCtsHold;
uint fDsrHold;
uint fRlsdHold;
uint fXoffHold;
uint fXoffSent;
uint fEof;
uint fTxim;
uint fReserved;
uint cbInQue;
uint cbOutQue;
}
struct _COMMTIMEOUTS {
uint ReadIntervalTimeout;
uint ReadTotalTimeoutMultiplier;
uint ReadTotalTimeoutConstant;
uint WriteTotalTimeoutMultiplier;
uint WriteTotalTimeoutConstant;
}
struct _COMMPROP {
ushort wPacketLength;
ushort wPacketVersion;
uint dwServiceMask;
uint dwReserved1;
uint dwMaxTxQueue;
uint dwMaxRxQueue;
uint dwMaxBaud;
uint dwProvSubType;
uint dwProvCapabilities;
uint dwSettableParams;
uint dwSettableBaud;
ushort wSettableData;
ushort wSettableStopParity;
uint dwCurrentTxQueue;
uint dwCurrentRxQueue;
uint dwProvSpec1;
uint dwProvSpec2;
wchar * wcProvChar;
}
struct _COMM_CONFIG {
uint dwSize;
ushort wVersion;
ushort wReserved;
_DCB dcb;
uint dwProviderSubType;
uint dwProviderOffset;
uint dwProviderSize;
wchar * wcProviderData;
}
struct _DCB {
uint DCBlength;
uint BaudRate;
uint fBinary;
uint fParity;
uint fOutxCtsFlow;
uint fOutxDsrFlow;
uint fDtrControl;
uint fDsrSensitivity;
uint fTXContinueOnXoff;
uint fOutX;
uint fInX;
uint fErrorChar;
uint fNull;
uint fRtsControl;
uint fAbortOnError;
uint fDummy2;
ushort wReserved;
ushort XonLim;
ushort XoffLim;
char ByteSize;
char Parity;
char StopBits;
char XonChar;
char XoffChar;
char ErrorChar;
char EofChar;
char EvtChar;
ushort wReserved1;
}
struct _BY_HANDLE_FILE_INFORMATION {
uint dwFileAttributes;
_FILETIME ftCreationTime;
_FILETIME ftLastAccessTime;
_FILETIME ftLastWriteTime;
uint dwVolumeSerialNumber;
uint nFileSizeHigh;
uint nFileSizeLow;
uint nNumberOfLinks;
uint nFileIndexHigh;
uint nFileIndexLow;
}
struct _FILETIME {
uint dwLowDateTime;
uint dwHighDateTime;
}
union N13_INPUT_RECORD4__35E {
_KEY_EVENT_RECORD KeyEvent;
_MOUSE_EVENT_RECORD MouseEvent;
_WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
_MENU_EVENT_RECORD MenuEvent;
_FOCUS_EVENT_RECORD FocusEvent;
}
struct _INPUT_RECORD {
ushort EventType;
N13_INPUT_RECORD4__35E Event;
}
struct _FOCUS_EVENT_RECORD {
int bSetFocus;
}
struct _MENU_EVENT_RECORD {
uint dwCommandId;
}
struct _WINDOW_BUFFER_SIZE_RECORD {
_COORD dwSize;
}
struct _MOUSE_EVENT_RECORD {
_COORD dwMousePosition;
uint dwButtonState;
uint dwControlKeyState;
uint dwEventFlags;
}
union N17_KEY_EVENT_RECORD4__34E {
wchar UnicodeChar;
char AsciiChar;
}
struct _KEY_EVENT_RECORD {
int bKeyDown;
ushort wRepeatCount;
ushort wVirtualKeyCode;
ushort wVirtualScanCode;
N17_KEY_EVENT_RECORD4__34E uChar;
uint dwControlKeyState;
}
struct _CONSOLE_SCREEN_BUFFER_INFO {
_COORD dwSize;
_COORD dwCursorPosition;
ushort wAttributes;
_SMALL_RECT srWindow;
_COORD dwMaximumWindowSize;
}
struct _CONSOLE_FONT_INFO {
uint nFont;
_COORD dwFontSize;
}
struct _COORD {
short X;
short Y;
}
struct _CONSOLE_CURSOR_INFO {
uint dwSize;
int bVisible;
}
struct _SMALL_RECT {
short Left;
short Top;
short Right;
short Bottom;
}
union N10_CHAR_INFO4__33E {
wchar UnicodeChar;
char AsciiChar;
}
struct _CHAR_INFO {
N10_CHAR_INFO4__33E Char;
ushort Attributes;
}
struct tagPOINTS {
short x;
short y;
}
struct tagSIZE {
int cx;
int cy;
}
struct tagPOINT {
int x;
int y;
}
struct tagRECTL {
int left;
int top;
int right;
int bottom;
}
struct tagRECT {
int left;
int top;
int right;
int bottom;
}
struct HKL__ {
int i;
}
struct HWINSTA__ {
int i;
}
struct HWND__ {
int i;
}
struct HTASK__ {
int i;
}
struct HSTR__ {
int i;
}
struct HRSRC__ {
int i;
}
struct HRGN__ {
int i;
}
struct HPEN__ {
int i;
}
struct HPALETTE__ {
int i;
}
struct HINSTANCE__ {
int i;
}
struct HMETAFILE__ {
int i;
}
struct HMENU__ {
int i;
}
struct HWINEVENTHOOK__ {
int i;
}
struct HTERMINAL__ {
int i;
}
struct HMONITOR__ {
int i;
}
struct HKEY__ {
int i;
}
struct HICON__ {
int i;
}
struct HFONT__ {
int i;
}
struct HENHMETAFILE__ {
int i;
}
struct HDESK__ {
int i;
}
struct HGLRC__ {
int i;
}
struct HDC__ {
int i;
}
struct HCOLORSPACE__ {
int i;
}
struct HBRUSH__ {
int i;
}
struct HBITMAP__ {
int i;
}
struct HACCEL__ {
int i;
}
struct _ADMINISTRATOR_POWER_POLICY {
int MinSleep;
int MaxSleep;
uint MinVideoTimeout;
uint MaxVideoTimeout;
uint MinSpindownTimeout;
uint MaxSpindownTimeout;
}
struct _PROCESSOR_POWER_POLICY {
uint Revision;
char DynamicThrottle;
char * Spare;
uint Reserved;
uint PolicyCount;
_PROCESSOR_POWER_POLICY_INFO * Policy;
}
struct _PROCESSOR_POWER_POLICY_INFO {
uint TimeCheck;
uint DemoteLimit;
uint PromoteLimit;
char DemotePercent;
char PromotePercent;
char * Spare;
uint AllowDemotion;
uint AllowPromotion;
uint Reserved;
}
struct _SYSTEM_POWER_INFORMATION {
uint MaxIdlenessAllowed;
uint Idleness;
uint TimeRemaining;
char CoolingMode;
}
struct _SYSTEM_BATTERY_STATE {
char AcOnLine;
char BatteryPresent;
char Charging;
char Discharging;
char * Spare1;
uint MaxCapacity;
uint RemainingCapacity;
uint Rate;
uint EstimatedTime;
uint DefaultAlert1;
uint DefaultAlert2;
}
struct _SYSTEM_POWER_CAPABILITIES {
char PowerButtonPresent;
char SleepButtonPresent;
char LidPresent;
char SystemS1;
char SystemS2;
char SystemS3;
char SystemS4;
char SystemS5;
char HiberFilePresent;
char FullWake;
char VideoDimPresent;
char ApmPresent;
char UpsPresent;
char ThermalControl;
char ProcessorThrottle;
char ProcessorMinThrottle;
char ProcessorMaxThrottle;
char * spare2;
char DiskSpinDown;
char * spare3;
char SystemBatteriesPresent;
char BatteriesAreShortTerm;
BATTERY_REPORTING_SCALE * BatteryScale;
int AcOnLineWake;
int SoftLidWake;
int RtcWake;
int MinDeviceWakeState;
int DefaultLowLatencyWake;
}
struct _SYSTEM_POWER_POLICY {
uint Revision;
_POWER_ACTION_POLICY PowerButton;
_POWER_ACTION_POLICY SleepButton;
_POWER_ACTION_POLICY LidClose;
int LidOpenWake;
uint Reserved;
_POWER_ACTION_POLICY Idle;
uint IdleTimeout;
char IdleSensitivity;
char DynamicThrottle;
char * Spare2;
int MinSleep;
int MaxSleep;
int ReducedLatencySleep;
uint WinLogonFlags;
uint Spare3;
uint DozeS4Timeout;
uint BroadcastCapacityResolution;
_SYSTEM_POWER_LEVEL * DischargePolicy;
uint VideoTimeout;
char VideoDimDisplay;
uint * VideoReserved;
uint SpindownTimeout;
char OptimizeForPower;
char FanThrottleTolerance;
char ForcedThrottle;
char MinThrottle;
_POWER_ACTION_POLICY OverThrottled;
}
struct _SYSTEM_POWER_LEVEL {
char Enable;
char * Spare;
uint BatteryLevel;
_POWER_ACTION_POLICY PowerPolicy;
int MinSystemState;
}
struct _POWER_ACTION_POLICY {
int Action;
uint Flags;
uint EventCode;
}
struct BATTERY_REPORTING_SCALE {
uint Granularity;
uint Capacity;
}
struct _JOBOBJECT_JOBSET_INFORMATION {
uint MemberLevel;
}
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
_JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
_IO_COUNTERS IoInfo;
uint ProcessMemoryLimit;
uint JobMemoryLimit;
uint PeakProcessMemoryUsed;
uint PeakJobMemoryUsed;
}
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
_JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
_IO_COUNTERS IoInfo;
}
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
void * CompletionKey;
void * CompletionPort;
}
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
uint EndOfJobTimeAction;
}
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
uint SecurityLimitFlags;
void * JobToken;
_TOKEN_GROUPS * SidsToDisable;
_TOKEN_PRIVILEGES * PrivilegesToDelete;
_TOKEN_GROUPS * RestrictedSids;
}
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
uint UIRestrictionsClass;
}
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
uint NumberOfAssignedProcesses;
uint NumberOfProcessIdsInList;
uint * ProcessIdList;
}
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
_LARGE_INTEGER PerProcessUserTimeLimit;
_LARGE_INTEGER PerJobUserTimeLimit;
uint LimitFlags;
uint MinimumWorkingSetSize;
uint MaximumWorkingSetSize;
uint ActiveProcessLimit;
uint Affinity;
uint PriorityClass;
uint SchedulingClass;
}
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
_LARGE_INTEGER TotalUserTime;
_LARGE_INTEGER TotalKernelTime;
_LARGE_INTEGER ThisPeriodTotalUserTime;
_LARGE_INTEGER ThisPeriodTotalKernelTime;
uint TotalPageFaultCount;
uint TotalProcesses;
uint ActiveProcesses;
uint TotalTerminatedProcesses;
}
union _FILE_SEGMENT_ELEMENT {
void * Buffer;
ulong Alignment;
}
struct _REPARSE_POINT_INFORMATION {
ushort ReparseDataLength;
ushort UnparsedNameLength;
}
struct N25_REPARSE_GUID_DATA_BUFFER4__30E {
char * DataBuffer;
}
struct _REPARSE_GUID_DATA_BUFFER {
uint ReparseTag;
ushort ReparseDataLength;
ushort Reserved;
_GUID ReparseGuid;
N25_REPARSE_GUID_DATA_BUFFER4__30E GenericReparseBuffer;
}
struct N20_REPARSE_DATA_BUFFER4__264__27E {
ushort SubstituteNameOffset;
ushort SubstituteNameLength;
ushort PrintNameOffset;
ushort PrintNameLength;
wchar * PathBuffer;
}
struct N20_REPARSE_DATA_BUFFER4__264__28E {
ushort SubstituteNameOffset;
ushort SubstituteNameLength;
ushort PrintNameOffset;
ushort PrintNameLength;
wchar * PathBuffer;
}
struct N20_REPARSE_DATA_BUFFER4__264__29E {
char * DataBuffer;
}
union N20_REPARSE_DATA_BUFFER4__26E {
N20_REPARSE_DATA_BUFFER4__264__27E SymbolicLinkReparseBuffer;
N20_REPARSE_DATA_BUFFER4__264__28E MountPointReparseBuffer;
N20_REPARSE_DATA_BUFFER4__264__29E GenericReparseBuffer;
}
struct _REPARSE_DATA_BUFFER {
uint ReparseTag;
ushort ReparseDataLength;
ushort Reserved;
N20_REPARSE_DATA_BUFFER4__26E _BCD__7621;
}
union N7_NT_TIB4__25E {
void * FiberData;
uint Version;
}
struct _NT_TIB {
void * ExceptionList;
void * StackBase;
void * StackLimit;
void * SubSystemTib;
N7_NT_TIB4__25E _BCD__7629;
void * ArbitraryUserPointer;
_NT_TIB * Self;
}
struct _IMAGE_SEPARATE_DEBUG_HEADER {
ushort Signature;
ushort Flags;
ushort Machine;
ushort Characteristics;
uint TimeDateStamp;
uint CheckSum;
uint ImageBase;
uint SizeOfImage;
uint NumberOfSections;
uint ExportedNamesSize;
uint DebugDirectorySize;
uint SectionAlignment;
uint * Reserved;
}
struct _IMAGE_FUNCTION_ENTRY {
uint StartingAddress;
uint EndingAddress;
uint EndOfPrologue;
}
struct _IMAGE_DEBUG_MISC {
uint DataType;
uint Length;
char Unicode;
char * Reserved;
char * Data;
}
struct _FPO_DATA {
uint ulOffStart;
uint cbProcSize;
uint cdwLocals;
ushort cdwParams;
ushort cbProlog;
ushort cbRegs;
ushort fHasSEH;
ushort fUseBP;
ushort reserved;
ushort cbFrame;
}
struct _IMAGE_DEBUG_DIRECTORY {
uint Characteristics;
uint TimeDateStamp;
ushort MajorVersion;
ushort MinorVersion;
uint Type;
uint SizeOfData;
uint AddressOfRawData;
uint PointerToRawData;
}
struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
uint BeginAddress;
uint EndAddress;
void * ExceptionHandler;
void * HandlerData;
uint PrologEndAddress;
}
struct _IMAGE_LOAD_CONFIG_DIRECTORY {
uint Characteristics;
uint TimeDateStamp;
ushort MajorVersion;
ushort MinorVersion;
uint GlobalFlagsClear;
uint GlobalFlagsSet;
uint CriticalSectionDefaultTimeout;
uint DeCommitFreeBlockThreshold;
uint DeCommitTotalFreeThreshold;
void * LockPrefixTable;
uint MaximumAllocationSize;
uint VirtualMemoryThreshold;
uint ProcessHeapFlags;
uint * Reserved;
}
struct _IMAGE_RESOURCE_DATA_ENTRY {
uint OffsetToData;
uint Size;
uint CodePage;
uint Reserved;
}
struct _IMAGE_RESOURCE_DIR_STRING_U {
ushort Length;
wchar * NameString;
}
struct _IMAGE_RESOURCE_DIRECTORY_STRING {
ushort Length;
char * NameString;
}
struct N31_IMAGE_RESOURCE_DIRECTORY_ENTRY4__214__22E {
uint NameOffset;
uint NameIsString;
}
union N31_IMAGE_RESOURCE_DIRECTORY_ENTRY4__21E {
N31_IMAGE_RESOURCE_DIRECTORY_ENTRY4__214__22E _BCD__9023;
uint Name;
ushort Id;
}
struct N31_IMAGE_RESOURCE_DIRECTORY_ENTRY4__234__24E {
uint OffsetToDirectory;
uint DataIsDirectory;
}
union N31_IMAGE_RESOURCE_DIRECTORY_ENTRY4__23E {
uint OffsetToData;
N31_IMAGE_RESOURCE_DIRECTORY_ENTRY4__234__24E _BCD__9028;
}
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
N31_IMAGE_RESOURCE_DIRECTORY_ENTRY4__21E _BCD__7721;
N31_IMAGE_RESOURCE_DIRECTORY_ENTRY4__23E _BCD__7722;
}
struct _IMAGE_RESOURCE_DIRECTORY {
uint Characteristics;
uint TimeDateStamp;
ushort MajorVersion;
ushort MinorVersion;
ushort NumberOfNamedEntries;
ushort NumberOfIdEntries;
}
struct _IMAGE_TLS_DIRECTORY64 {
ulong StartAddressOfRawData;
ulong EndAddressOfRawData;
ulong AddressOfIndex;
ulong AddressOfCallBacks;
uint SizeOfZeroFill;
uint Characteristics;
}
struct _IMAGE_TLS_DIRECTORY32 {
uint StartAddressOfRawData;
uint EndAddressOfRawData;
uint AddressOfIndex;
uint AddressOfCallBacks;
uint SizeOfZeroFill;
uint Characteristics;
}
struct _IMAGE_BOUND_FORWARDER_REF {
uint TimeDateStamp;
ushort OffsetModuleName;
ushort Reserved;
}
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
uint TimeDateStamp;
ushort OffsetModuleName;
ushort NumberOfModuleForwarderRefs;
}
union N24_IMAGE_IMPORT_DESCRIPTOR4__20E {
uint Characteristics;
uint OriginalFirstThunk;
}
struct _IMAGE_IMPORT_DESCRIPTOR {
N24_IMAGE_IMPORT_DESCRIPTOR4__20E _BCD__7762;
uint TimeDateStamp;
uint ForwarderChain;
uint Name;
uint FirstThunk;
}
union N19_IMAGE_THUNK_DATA644__19E {
ulong ForwarderString;
ulong Function;
ulong Ordinal;
ulong AddressOfData;
}
struct _IMAGE_THUNK_DATA64 {
N19_IMAGE_THUNK_DATA644__19E u1;
}
union N19_IMAGE_THUNK_DATA324__18E {
uint ForwarderString;
uint Function;
uint Ordinal;
uint AddressOfData;
}
struct _IMAGE_THUNK_DATA32 {
N19_IMAGE_THUNK_DATA324__18E u1;
}
struct _IMAGE_IMPORT_BY_NAME {
ushort Hint;
char * Name;
}
struct _IMAGE_EXPORT_DIRECTORY {
uint Characteristics;
uint TimeDateStamp;
ushort MajorVersion;
ushort MinorVersion;
uint Name;
uint Base;
uint NumberOfFunctions;
uint NumberOfNames;
uint AddressOfFunctions;
uint AddressOfNames;
uint AddressOfNameOrdinals;
}
struct _IMAGE_ARCHIVE_MEMBER_HEADER {
char * Name;
char * Date;
char * UserID;
char * GroupID;
char * Mode;
char * Size;
char * EndHeader;
}
union N17_IMAGE_LINENUMBER4__17E {
uint SymbolTableIndex;
uint VirtualAddress;
}
struct _IMAGE_LINENUMBER {
N17_IMAGE_LINENUMBER4__17E Type;
ushort Linenumber;
}
struct _IMAGE_BASE_RELOCATION {
uint VirtualAddress;
uint SizeOfBlock;
}
union N17_IMAGE_RELOCATION4__16E {
uint VirtualAddress;
uint RelocCount;
}
struct _IMAGE_RELOCATION {
N17_IMAGE_RELOCATION4__16E _BCD__7813;
uint SymbolTableIndex;
ushort Type;
}
struct _IMAGE_COFF_SYMBOLS_HEADER {
uint NumberOfSymbols;
uint LvaToFirstSymbol;
uint NumberOfLinenumbers;
uint LvaToFirstLinenumber;
uint RvaToFirstByteOfCode;
uint RvaToLastByteOfCode;
uint RvaToFirstByteOfData;
uint RvaToLastByteOfData;
}
struct N17_IMAGE_AUX_SYMBOL3__83__94__10E {
ushort Linenumber;
ushort Size;
}
union N17_IMAGE_AUX_SYMBOL3__83__9E {
N17_IMAGE_AUX_SYMBOL3__83__94__10E LnSz;
uint TotalSize;
}
struct N17_IMAGE_AUX_SYMBOL3__84__114__12E {
uint PointerToLinenumber;
uint PointerToNextFunction;
}
struct N17_IMAGE_AUX_SYMBOL3__84__114__13E {
ushort * Dimension;
}
union N17_IMAGE_AUX_SYMBOL3__84__11E {
N17_IMAGE_AUX_SYMBOL3__84__114__12E Function;
N17_IMAGE_AUX_SYMBOL3__84__114__13E Array;
}
struct N17_IMAGE_AUX_SYMBOL3__8E {
uint TagIndex;
N17_IMAGE_AUX_SYMBOL3__83__9E Misc;
N17_IMAGE_AUX_SYMBOL3__84__11E FcnAry;
ushort TvIndex;
}
struct N17_IMAGE_AUX_SYMBOL4__14E {
char * Name;
}
struct N17_IMAGE_AUX_SYMBOL4__15E {
uint Length;
ushort NumberOfRelocations;
ushort NumberOfLinenumbers;
uint CheckSum;
short Number;
char Selection;
}
union _IMAGE_AUX_SYMBOL {
N17_IMAGE_AUX_SYMBOL3__8E Sym;
N17_IMAGE_AUX_SYMBOL4__14E File;
N17_IMAGE_AUX_SYMBOL4__15E Section;
}
struct N13_IMAGE_SYMBOL3__63__7E {
uint Short;
uint Long;
}
union N13_IMAGE_SYMBOL3__6E {
char * ShortName;
N13_IMAGE_SYMBOL3__63__7E Name;
char * * LongName;
}
struct _IMAGE_SYMBOL {
N13_IMAGE_SYMBOL3__6E N;
uint Value;
short SectionNumber;
ushort Type;
char StorageClass;
char NumberOfAuxSymbols;
}
union N21_IMAGE_SECTION_HEADER3__5E {
uint PhysicalAddress;
uint VirtualSize;
}
struct _IMAGE_SECTION_HEADER {
char * Name;
N21_IMAGE_SECTION_HEADER3__5E Misc;
uint VirtualAddress;
uint SizeOfRawData;
uint PointerToRawData;
uint PointerToRelocations;
uint PointerToLinenumbers;
ushort NumberOfRelocations;
ushort NumberOfLinenumbers;
uint Characteristics;
}
struct _IMAGE_ROM_HEADERS {
_IMAGE_FILE_HEADER FileHeader;
_IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
}
struct _IMAGE_NT_HEADERS {
uint Signature;
_IMAGE_FILE_HEADER FileHeader;
_IMAGE_OPTIONAL_HEADER OptionalHeader;
}
struct _IMAGE_OS2_HEADER {
ushort ne_magic;
char ne_ver;
char ne_rev;
ushort ne_enttab;
ushort ne_cbenttab;
int ne_crc;
ushort ne_flags;
ushort ne_autodata;
ushort ne_heap;
ushort ne_stack;
int ne_csip;
int ne_sssp;
ushort ne_cseg;
ushort ne_cmod;
ushort ne_cbnrestab;
ushort ne_segtab;
ushort ne_rsrctab;
ushort ne_restab;
ushort ne_modtab;
ushort ne_imptab;
int ne_nrestab;
ushort ne_cmovent;
ushort ne_align;
ushort ne_cres;
char ne_exetyp;
char ne_flagsothers;
ushort ne_pretthunks;
ushort ne_psegrefbytes;
ushort ne_swaparea;
ushort ne_expver;
}
struct _IMAGE_DOS_HEADER {
ushort e_magic;
ushort e_cblp;
ushort e_cp;
ushort e_crlc;
ushort e_cparhdr;
ushort e_minalloc;
ushort e_maxalloc;
ushort e_ss;
ushort e_sp;
ushort e_csum;
ushort e_ip;
ushort e_cs;
ushort e_lfarlc;
ushort e_ovno;
ushort * e_res;
ushort e_oemid;
ushort e_oeminfo;
ushort * e_res2;
int e_lfanew;
}
struct _IMAGE_ROM_OPTIONAL_HEADER {
ushort Magic;
char MajorLinkerVersion;
char MinorLinkerVersion;
uint SizeOfCode;
uint SizeOfInitializedData;
uint SizeOfUninitializedData;
uint AddressOfEntryPoint;
uint BaseOfCode;
uint BaseOfData;
uint BaseOfBss;
uint GprMask;
uint * CprMask;
uint GpValue;
}
struct _IMAGE_OPTIONAL_HEADER {
ushort Magic;
char MajorLinkerVersion;
char MinorLinkerVersion;
uint SizeOfCode;
uint SizeOfInitializedData;
uint SizeOfUninitializedData;
uint AddressOfEntryPoint;
uint BaseOfCode;
uint BaseOfData;
uint ImageBase;
uint SectionAlignment;
uint FileAlignment;
ushort MajorOperatingSystemVersion;
ushort MinorOperatingSystemVersion;
ushort MajorImageVersion;
ushort MinorImageVersion;
ushort MajorSubsystemVersion;
ushort MinorSubsystemVersion;
uint Reserved1;
uint SizeOfImage;
uint SizeOfHeaders;
uint CheckSum;
ushort Subsystem;
ushort DllCharacteristics;
uint SizeOfStackReserve;
uint SizeOfStackCommit;
uint SizeOfHeapReserve;
uint SizeOfHeapCommit;
uint LoaderFlags;
uint NumberOfRvaAndSizes;
_IMAGE_DATA_DIRECTORY * DataDirectory;
}
struct _IMAGE_DATA_DIRECTORY {
uint VirtualAddress;
uint Size;
}
struct _IMAGE_FILE_HEADER {
ushort Machine;
ushort NumberOfSections;
uint TimeDateStamp;
uint PointerToSymbolTable;
uint NumberOfSymbols;
ushort SizeOfOptionalHeader;
ushort Characteristics;
}
struct _IMAGE_VXD_HEADER {
ushort e32_magic;
char e32_border;
char e32_worder;
uint e32_level;
ushort e32_cpu;
ushort e32_os;
uint e32_ver;
uint e32_mflags;
uint e32_mpages;
uint e32_startobj;
uint e32_eip;
uint e32_stackobj;
uint e32_esp;
uint e32_pagesize;
uint e32_lastpagesize;
uint e32_fixupsize;
uint e32_fixupsum;
uint e32_ldrsize;
uint e32_ldrsum;
uint e32_objtab;
uint e32_objcnt;
uint e32_objmap;
uint e32_itermap;
uint e32_rsrctab;
uint e32_rsrccnt;
uint e32_restab;
uint e32_enttab;
uint e32_dirtab;
uint e32_dircnt;
uint e32_fpagetab;
uint e32_frectab;
uint e32_impmod;
uint e32_impmodcnt;
uint e32_impproc;
uint e32_pagesum;
uint e32_datapage;
uint e32_preload;
uint e32_nrestab;
uint e32_cbnrestab;
uint e32_nressum;
uint e32_autodata;
uint e32_debuginfo;
uint e32_debuglen;
uint e32_instpreload;
uint e32_instdemand;
uint e32_heapsize;
char * e32_res3;
uint e32_winresoff;
uint e32_winreslen;
ushort e32_devid;
ushort e32_ddkver;
}
struct _OSVERSIONINFOEXW {
uint dwOSVersionInfoSize;
uint dwMajorVersion;
uint dwMinorVersion;
uint dwBuildNumber;
uint dwPlatformId;
wchar * szCSDVersion;
ushort wServicePackMajor;
ushort wServicePackMinor;
ushort wSuiteMask;
char wProductType;
char wReserved;
}
struct _OSVERSIONINFOEXA {
uint dwOSVersionInfoSize;
uint dwMajorVersion;
uint dwMinorVersion;
uint dwBuildNumber;
uint dwPlatformId;
char * szCSDVersion;
ushort wServicePackMajor;
ushort wServicePackMinor;
ushort wSuiteMask;
char wProductType;
char wReserved;
}
struct _OSVERSIONINFOW {
uint dwOSVersionInfoSize;
uint dwMajorVersion;
uint dwMinorVersion;
uint dwBuildNumber;
uint dwPlatformId;
wchar * szCSDVersion;
}
struct _OSVERSIONINFOA {
uint dwOSVersionInfoSize;
uint dwMajorVersion;
uint dwMinorVersion;
uint dwBuildNumber;
uint dwPlatformId;
char * szCSDVersion;
}
struct _EVENTLOGRECORD {
uint Length;
uint Reserved;
uint RecordNumber;
uint TimeGenerated;
uint TimeWritten;
uint EventID;
ushort EventType;
ushort NumStrings;
ushort EventCategory;
ushort ReservedFlags;
uint ClosingRecordNumber;
uint StringOffset;
uint UserSidLength;
uint UserSidOffset;
uint DataLength;
uint DataOffset;
}
struct _RTL_CRITICAL_SECTION {
_RTL_CRITICAL_SECTION_DEBUG * DebugInfo;
int LockCount;
int RecursionCount;
void * OwningThread;
void * LockSemaphore;
uint Reserved;
}
struct _RTL_CRITICAL_SECTION_DEBUG {
ushort Type;
ushort CreatorBackTraceIndex;
_RTL_CRITICAL_SECTION * CriticalSection;
_LIST_ENTRY ProcessLocksList;
uint EntryCount;
uint ContentionCount;
uint * Spare;
}
struct N13_SLIST_HEADER3__4E {
_SINGLE_LIST_ENTRY Next;
ushort Depth;
ushort Sequence;
}
union _SLIST_HEADER {
ulong Alignment;
N13_SLIST_HEADER3__4E _BCD__8092;
}
struct _SINGLE_LIST_ENTRY {
_SINGLE_LIST_ENTRY * Next;
}
struct _LIST_ENTRY {
_LIST_ENTRY * Flink;
_LIST_ENTRY * Blink;
}
struct _MESSAGE_RESOURCE_DATA {
uint NumberOfBlocks;
_MESSAGE_RESOURCE_BLOCK * Blocks;
}
struct _MESSAGE_RESOURCE_BLOCK {
uint LowId;
uint HighId;
uint OffsetToEntries;
}
struct _MESSAGE_RESOURCE_ENTRY {
ushort Length;
ushort Flags;
char * Text;
}
struct _MEMORY_BASIC_INFORMATION {
void * BaseAddress;
void * AllocationBase;
uint AllocationProtect;
uint RegionSize;
uint State;
uint Protect;
uint Type;
}
struct _TAPE_CREATE_PARTITION {
uint Method;
uint Count;
uint Size;
}
struct _TAPE_WRITE_MARKS {
uint Type;
uint Count;
char Immediate;
}
struct _TAPE_SET_POSITION {
uint Method;
uint Partition;
_LARGE_INTEGER Offset;
char Immediate;
}
struct _TAPE_SET_MEDIA_PARAMETERS {
uint BlockSize;
}
struct _TAPE_SET_DRIVE_PARAMETERS {
char ECC;
char Compression;
char DataPadding;
char ReportSetmarks;
uint EOTWarningZoneSize;
}
struct _TAPE_PREPARE {
uint Operation;
char Immediate;
}
struct _TAPE_GET_POSITION {
uint Type;
uint Partition;
uint OffsetLow;
uint OffsetHigh;
}
struct _TAPE_GET_MEDIA_PARAMETERS {
_LARGE_INTEGER Capacity;
_LARGE_INTEGER Remaining;
uint BlockSize;
uint PartitionCount;
char WriteProtected;
}
struct _TAPE_GET_DRIVE_PARAMETERS {
char ECC;
char Compression;
char DataPadding;
char ReportSetmarks;
uint DefaultBlockSize;
uint MaximumBlockSize;
uint MinimumBlockSize;
uint MaximumPartitionCount;
uint FeaturesLow;
uint FeaturesHigh;
uint EOTWarningZoneSize;
}
struct _TAPE_ERASE {
uint Type;
char Immediate;
}
struct _FILE_NOTIFY_INFORMATION {
uint NextEntryOffset;
uint Action;
uint FileNameLength;
wchar * FileName;
}
struct _IO_COUNTERS {
ulong ReadOperationCount;
ulong WriteOperationCount;
ulong OtherOperationCount;
ulong ReadTransferCount;
ulong WriteTransferCount;
ulong OtherTransferCount;
}
struct _QUOTA_LIMITS {
uint PagedPoolLimit;
uint NonPagedPoolLimit;
uint MinimumWorkingSetSize;
uint MaximumWorkingSetSize;
uint PagefileLimit;
_LARGE_INTEGER TimeLimit;
}
struct _SECURITY_DESCRIPTOR {
char Revision;
char Sbz1;
ushort Control;
void * Owner;
void * Group;
_ACL * Sacl;
_ACL * Dacl;
}
struct _TOKEN_USER {
_SID_AND_ATTRIBUTES User;
}
struct _TOKEN_STATISTICS {
_LUID TokenId;
_LUID AuthenticationId;
_LARGE_INTEGER ExpirationTime;
int TokenType;
int ImpersonationLevel;
uint DynamicCharged;
uint DynamicAvailable;
uint GroupCount;
uint PrivilegeCount;
_LUID ModifiedId;
}
struct _TOKEN_PRIVILEGES {
uint PrivilegeCount;
_LUID_AND_ATTRIBUTES * Privileges;
}
struct _TOKEN_PRIMARY_GROUP {
void * PrimaryGroup;
}
struct _TOKEN_OWNER {
void * Owner;
}
struct _TOKEN_GROUPS {
uint GroupCount;
_SID_AND_ATTRIBUTES * Groups;
}
struct _TOKEN_DEFAULT_DACL {
_ACL * DefaultDacl;
}
struct _TOKEN_CONTROL {
_LUID TokenId;
_LUID AuthenticationId;
_LUID ModifiedId;
_TOKEN_SOURCE TokenSource;
}
struct _TOKEN_SOURCE {
char * SourceName;
_LUID SourceIdentifier;
}
struct _SID_AND_ATTRIBUTES {
void * Sid;
uint Attributes;
}
struct _SID {
char Revision;
char SubAuthorityCount;
_SID_IDENTIFIER_AUTHORITY IdentifierAuthority;
uint * SubAuthority;
}
struct _SID_IDENTIFIER_AUTHORITY {
char * Value;
}
struct _SE_IMPERSONATION_STATE {
void * Token;
char CopyOnOpen;
char EffectiveOnly;
int Level;
}
struct _SECURITY_QUALITY_OF_SERVICE {
uint Length;
int ImpersonationLevel;
char ContextTrackingMode;
char EffectiveOnly;
}
struct _SECURITY_ATTRIBUTES {
uint nLength;
void * lpSecurityDescriptor;
int bInheritHandle;
}
struct _PRIVILEGE_SET {
uint PrivilegeCount;
uint Control;
_LUID_AND_ATTRIBUTES * Privilege;
}
struct _LUID_AND_ATTRIBUTES {
_LUID Luid;
uint Attributes;
}
struct _LUID {
uint LowPart;
int HighPart;
}
struct N15_ULARGE_INTEGER3__2E {
uint LowPart;
uint HighPart;
}
struct N15_ULARGE_INTEGER3__3E {
uint LowPart;
uint HighPart;
}
union _ULARGE_INTEGER {
N15_ULARGE_INTEGER3__2E u;
N15_ULARGE_INTEGER3__3E _BCD__8303;
ulong QuadPart;
}
struct N14_LARGE_INTEGER3__0E {
uint LowPart;
int HighPart;
}
struct N14_LARGE_INTEGER3__1E {
uint LowPart;
int HighPart;
}
union _LARGE_INTEGER {
N14_LARGE_INTEGER3__0E u;
N14_LARGE_INTEGER3__1E _BCD__8310;
long QuadPart;
}
struct _EXCEPTION_POINTERS {
_EXCEPTION_RECORD * ExceptionRecord;
_CONTEXT * ContextRecord;
}
struct _EXCEPTION_RECORD {
uint ExceptionCode;
uint ExceptionFlags;
_EXCEPTION_RECORD * ExceptionRecord;
void * ExceptionAddress;
uint NumberParameters;
uint * ExceptionInformation;
}
struct _CONTEXT {
uint ContextFlags;
uint Dr0;
uint Dr1;
uint Dr2;
uint Dr3;
uint Dr6;
uint Dr7;
_FLOATING_SAVE_AREA FloatSave;
uint SegGs;
uint SegFs;
uint SegEs;
uint SegDs;
uint Edi;
uint Esi;
uint Ebx;
uint Edx;
uint Ecx;
uint Eax;
uint Ebp;
uint Eip;
uint SegCs;
uint EFlags;
uint Esp;
uint SegSs;
char * ExtendedRegisters;
}
struct _FLOATING_SAVE_AREA {
uint ControlWord;
uint StatusWord;
uint TagWord;
uint ErrorOffset;
uint ErrorSelector;
uint DataOffset;
uint DataSelector;
char * RegisterArea;
uint Cr0NpxState;
}
struct _ACL_SIZE_INFORMATION {
uint AceCount;
uint AclBytesInUse;
uint AclBytesFree;
}
struct _ACL_REVISION_INFORMATION {
uint AclRevision;
}
struct _ACL {
char AclRevision;
char Sbz1;
ushort AclSize;
ushort AceCount;
ushort Sbz2;
}
struct _SYSTEM_ALARM_OBJECT_ACE {
_ACE_HEADER Header;
uint Mask;
uint Flags;
_GUID ObjectType;
_GUID InheritedObjectType;
uint SidStart;
}
struct _SYSTEM_AUDIT_OBJECT_ACE {
_ACE_HEADER Header;
uint Mask;
uint Flags;
_GUID ObjectType;
_GUID InheritedObjectType;
uint SidStart;
}
struct _ACCESS_DENIED_OBJECT_ACE {
_ACE_HEADER Header;
uint Mask;
uint Flags;
_GUID ObjectType;
_GUID InheritedObjectType;
uint SidStart;
}
struct _ACCESS_ALLOWED_OBJECT_ACE {
_ACE_HEADER Header;
uint Mask;
uint Flags;
_GUID ObjectType;
_GUID InheritedObjectType;
uint SidStart;
}
struct _SYSTEM_ALARM_ACE {
_ACE_HEADER Header;
uint Mask;
uint SidStart;
}
struct _SYSTEM_AUDIT_ACE {
_ACE_HEADER Header;
uint Mask;
uint SidStart;
}
struct _ACCESS_DENIED_ACE {
_ACE_HEADER Header;
uint Mask;
uint SidStart;
}
struct _ACCESS_ALLOWED_ACE {
_ACE_HEADER Header;
uint Mask;
uint SidStart;
}
struct _ACE_HEADER {
char AceType;
char AceFlags;
ushort AceSize;
}
struct _GENERIC_MAPPING {
uint GenericRead;
uint GenericWrite;
uint GenericExecute;
uint GenericAll;
}
struct _GUID {
uint Data1;
ushort Data2;
ushort Data3;
char * Data4;
}
