/* THIS FILE GENERATED BY bcd.gen */
module bcd.fltk2.GlWindow;
align(4):
public import bcd.bind;
public import bcd.fltk2.Window;
public import bcd.fltk2.Group;
public import bcd.fltk2.Widget;
public import bcd.fltk2.Style;
public import bcd.fltk2.FL_API;
public import bcd.fltk2.Rectangle;
public import bcd.fltk2.Color;
public import bcd.fltk2.Flags;
extern (C) void _BCD_delete_N4fltk8GlWindowE(void *);
extern (C) void _BCD__ZN4fltk8GlWindow6createEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow5flushEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow7destroyEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow6layoutEv(void *This);
extern (C) char _BCD__ZNK4fltk8GlWindow5validEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow5validEc(void *This, char);
extern (C) void _BCD__ZN4fltk8GlWindow10invalidateEv(void *This);
extern (C) int _BCD__ZNK4fltk8GlWindow4modeEv(void *This);
extern (C) bool _BCD__ZN4fltk8GlWindow4modeEi(void *This, int);
extern (C) bool _BCD__ZN4fltk8GlWindow6can_doEi(int);
extern (C) bool _BCD__ZNK4fltk8GlWindow6can_doEv(void *This);
alias void * GLContext;
extern (C) void * _BCD__ZNK4fltk8GlWindow7contextEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow7contextEPvb(void *This, void *, bool);
extern (C) void _BCD__ZN4fltk8GlWindow12make_currentEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow12swap_buffersEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow5orthoEv(void *This);
extern (C) bool _BCD__ZN4fltk8GlWindow14can_do_overlayEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow14redraw_overlayEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow12hide_overlayEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow20make_overlay_currentEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow4drawEv(void *This);
extern (C) void _BCD__ZN4fltk8GlWindow12draw_overlayEv(void *This);
extern (C) int _BCD__ZN4fltk8GlWindow6handleEi(void *This, int);
const int NO_AUTO_SWAP = 1024;
const int NO_ERASE_OVERLAY = 2048;
alias void function(Widget *, int) _BCD_func__162;
alias void function(Widget *) _BCD_func__164;
alias void function(Widget *, void *) _BCD_func__168;
alias bool function() _BCD_func__429;
class GlWindow : Window {
this(ifloat ignore) {
super(ignore);
}
this(ifloat ignore, void *x) {
super(ignore);
__C_data = x;
__C_data_owned = false;
}
~this() {
if (__C_data && __C_data_owned) _BCD_delete_N4fltk8GlWindowE(__C_data);
__C_data = null;
}
void create() {
_BCD__ZN4fltk8GlWindow6createEv(__C_data);
}
void flush() {
_BCD__ZN4fltk8GlWindow5flushEv(__C_data);
}
void destroy() {
_BCD__ZN4fltk8GlWindow7destroyEv(__C_data);
}
void layout() {
_BCD__ZN4fltk8GlWindow6layoutEv(__C_data);
}
char valid() {
return _BCD__ZNK4fltk8GlWindow5validEv(__C_data);
}
void valid(char i) {
_BCD__ZN4fltk8GlWindow5validEc(__C_data, i);
}
void invalidate() {
_BCD__ZN4fltk8GlWindow10invalidateEv(__C_data);
}
int mode() {
return _BCD__ZNK4fltk8GlWindow4modeEv(__C_data);
}
bool mode(int a) {
return _BCD__ZN4fltk8GlWindow4modeEi(__C_data, a);
}
static bool can_do(int _0) {
return _BCD__ZN4fltk8GlWindow6can_doEi(_0);
}
bool can_do() {
return _BCD__ZNK4fltk8GlWindow6can_doEv(__C_data);
}
void * context() {
return _BCD__ZNK4fltk8GlWindow7contextEv(__C_data);
}
void context(void * v, bool destroy_flag = false) {
_BCD__ZN4fltk8GlWindow7contextEPvb(__C_data, v, destroy_flag);
}
void make_current() {
_BCD__ZN4fltk8GlWindow12make_currentEv(__C_data);
}
void swap_buffers() {
_BCD__ZN4fltk8GlWindow12swap_buffersEv(__C_data);
}
void ortho() {
_BCD__ZN4fltk8GlWindow5orthoEv(__C_data);
}
bool can_do_overlay() {
return _BCD__ZN4fltk8GlWindow14can_do_overlayEv(__C_data);
}
void redraw_overlay() {
_BCD__ZN4fltk8GlWindow14redraw_overlayEv(__C_data);
}
void hide_overlay() {
_BCD__ZN4fltk8GlWindow12hide_overlayEv(__C_data);
}
void make_overlay_current() {
_BCD__ZN4fltk8GlWindow20make_overlay_currentEv(__C_data);
}
void draw() {
_BCD__ZN4fltk8GlWindow4drawEv(__C_data);
}
void draw_overlay() {
_BCD__ZN4fltk8GlWindow12draw_overlayEv(__C_data);
}
int handle(int event) {
return _BCD__ZN4fltk8GlWindow6handleEi(__C_data, event);
}
}
