/* THIS FILE GENERATED BY bcd.gen */
#include <stdlib.h>
#include <string.h>
#include "../bind.h"
#include "fltk/Divider.h"
extern "C" {
typedef unsigned char _BCD__7_uchar;
void _BCD_delete_N4fltk7DividerE(fltk::Divider *This) {
delete This;
}
void _BCD__ZN4fltk7Divider4drawEv(fltk::Divider *This) {
(This->draw());
}
void _BCD__ZN4fltk7Divider6layoutEv(fltk::Divider *This) {
(This->layout());
}
int _BCD__ZN4fltk7Divider6handleEi(fltk::Divider *This, int _0) {
return (This->handle(_0));
}
fltk::Divider *_BCD_new__ZN4fltk7DividerC1Ev() {
return new fltk::Divider();
}
int _BCD_R__ZN4fltk7Divider4drawEv__Divider_R_CHECK(void *);
void _BCD_R__ZN4fltk7Divider4drawEv__Divider_R(void *);
int _BCD_R__ZN4fltk7Divider6layoutEv__Divider_R_CHECK(void *);
void _BCD_R__ZN4fltk7Divider6layoutEv__Divider_R(void *);
int _BCD_R__ZN4fltk7Divider6handleEi__Divider_R_CHECK(void *);
int _BCD_R__ZN4fltk7Divider6handleEi__Divider_R(void *, int _0);
}
class Divider_R : fltk::Divider {
public:
void *__D_data;
void draw() {
if (_BCD_R__ZN4fltk7Divider4drawEv__Divider_R_CHECK(__D_data))
_BCD_R__ZN4fltk7Divider4drawEv__Divider_R(__D_data);
else
fltk::Divider::draw();
}
void layout() {
if (_BCD_R__ZN4fltk7Divider6layoutEv__Divider_R_CHECK(__D_data))
_BCD_R__ZN4fltk7Divider6layoutEv__Divider_R(__D_data);
else
fltk::Divider::layout();
}
int handle(int _0) {
if (_BCD_R__ZN4fltk7Divider6handleEi__Divider_R_CHECK(__D_data))
return _BCD_R__ZN4fltk7Divider6handleEi__Divider_R(__D_data, _0);
else
return fltk::Divider::handle(_0);
}
Divider_R() : fltk::Divider() {}
};
extern "C" {
Divider_R *_BCD_new__ZN4fltk7DividerC1Ev_R() {
return new Divider_R();
}
void _BCD_delete_N4fltk7DividerE__Divider_R(Divider_R *This) {
delete This;
}
void _BCD_RI_N4fltk7DividerE(Divider_R *cd, void *dd) {
cd->__D_data = dd;
}
typedef void (*_BCD_func__152)(fltk::Widget *, long int);
typedef _BCD_func__152 _BCD__153_Callback1;
typedef void (*_BCD_func__154)(fltk::Widget *);
typedef _BCD_func__154 _BCD__155_Callback0;
typedef void (*_BCD_func__158)(fltk::Widget *, void *);
typedef _BCD_func__158 _BCD__159_Callback;
typedef _BCD__159_Callback _BCD__157_Callback_p;
typedef bool (*_BCD_func__258)();
typedef _BCD_func__258 _BCD__170_Theme;
typedef fltk::Symbol * _BCD__223_Box;
typedef unsigned int _BCD__240_Color;
typedef int _BCD__243_Flags;
typedef _BCD__243_Flags _BCD__242_Align;
}
