/* THIS FILE GENERATED BY bcd.gen */
#include <stdlib.h>
#include <string.h>
#include "../bind.h"
#include "fltk/ColorChooser.h"
extern "C" {
typedef unsigned char _BCD__11_uchar;
void _BCD_delete_N4fltk12ColorChooserE(fltk::ColorChooser *This) {
delete This;
}
float _BCD__ZNK4fltk12ColorChooser1sEv(fltk::ColorChooser *This) {
return (This->s());
}
float _BCD__ZNK4fltk12ColorChooser1vEv(fltk::ColorChooser *This) {
return (This->v());
}
float _BCD__ZNK4fltk12ColorChooser1gEv(fltk::ColorChooser *This) {
return (This->g());
}
float _BCD__ZNK4fltk12ColorChooser1aEv(fltk::ColorChooser *This) {
return (This->a());
}
bool _BCD__ZNK4fltk12ColorChooser8no_valueEv(fltk::ColorChooser *This) {
return (This->no_value());
}
bool _BCD__ZN4fltk12ColorChooser8no_valueEb(fltk::ColorChooser *This, bool _0) {
return (This->no_value(_0));
}
typedef unsigned int _BCD__253_Color;
_BCD__253_Color _BCD__ZNK4fltk12ColorChooser5valueEv(fltk::ColorChooser *This) {
return (This->value());
}
bool _BCD__ZN4fltk12ColorChooser5valueEj(fltk::ColorChooser *This, _BCD__253_Color _0) {
return (This->value(_0));
}
bool _BCD__ZN4fltk12ColorChooser3hsvEfff(fltk::ColorChooser *This, float _0, float _1, float _2) {
return (This->hsv(_0, _1, _2));
}
bool _BCD__ZN4fltk12ColorChooser3rgbEfff(fltk::ColorChooser *This, float _0, float _1, float _2) {
return (This->rgb(_0, _1, _2));
}
bool _BCD__ZN4fltk12ColorChooser1aEf(fltk::ColorChooser *This, float _0) {
return (This->a(_0));
}
void _BCD__ZN4fltk12ColorChooser6hide_aEv(fltk::ColorChooser *This) {
(This->hide_a());
}
void _BCD__ZN4fltk12ColorChooser13hide_no_valueEv(fltk::ColorChooser *This) {
(This->hide_no_value());
}
void _BCD__ZN4fltk12ColorChooser7hsv2rgbEfffRfS1_S1_(float _0, float _1, float _2, float & _3, float & _4, float & _5) {
(fltk::ColorChooser::hsv2rgb(_0, _1, _2, _3, _4, _5));
}
void _BCD__ZN4fltk12ColorChooser7rgb2hsvEfffRfS1_S1_(float _0, float _1, float _2, float & _3, float & _4, float & _5) {
(fltk::ColorChooser::rgb2hsv(_0, _1, _2, _3, _4, _5));
}
fltk::ColorChooser *_BCD_new__ZN4fltk12ColorChooserC1EiiiiPKc(int _0, int _1, int _2, int _3, char const * _4) {
return new fltk::ColorChooser(_0, _1, _2, _3, _4);
}
void _BCD__ZN4fltk12ColorChooser6layoutEv(fltk::ColorChooser *This) {
(This->layout());
}
float _BCD__ZN4fltk12ColorChooser7setcellEiffff(fltk::ColorChooser *This, int _0, float _1, float _2, float _3, float _4) {
return (This->setcell(_0, _1, _2, _3, _4));
}
float _BCD__ZN4fltk12ColorChooser7getcellEiffff(fltk::ColorChooser *This, int _0, float _1, float _2, float _3, float _4) {
return (This->getcell(_0, _1, _2, _3, _4));
}
int _BCD_R__ZN4fltk12ColorChooser6layoutEv__ColorChooser_R_CHECK(void *);
void _BCD_R__ZN4fltk12ColorChooser6layoutEv__ColorChooser_R(void *);
}
class ColorChooser_R : fltk::ColorChooser {
public:
void *__D_data;
ColorChooser_R(int _0, int _1, int _2, int _3, char const * _4) : fltk::ColorChooser(_0, _1, _2, _3, _4) {}
void layout() {
if (_BCD_R__ZN4fltk12ColorChooser6layoutEv__ColorChooser_R_CHECK(__D_data))
_BCD_R__ZN4fltk12ColorChooser6layoutEv__ColorChooser_R(__D_data);
else
fltk::ColorChooser::layout();
}
};
extern "C" {
ColorChooser_R *_BCD_new__ZN4fltk12ColorChooserC1EiiiiPKc_R(int _0, int _1, int _2, int _3, char const * _4) {
return new ColorChooser_R(_0, _1, _2, _3, _4);
}
void _BCD_delete_N4fltk12ColorChooserE__ColorChooser_R(ColorChooser_R *This) {
delete This;
}
void _BCD_RI_N4fltk12ColorChooserE(ColorChooser_R *cd, void *dd) {
cd->__D_data = dd;
}
void _BCD_delete_N4fltk9ccCellBoxE(fltk::ccCellBox *This) {
delete This;
}
fltk::ccCellBox *_BCD_new__ZN4fltk9ccCellBoxC1Eiiii(int X, int Y, int W, int H) {
return new fltk::ccCellBox(X, Y, W, H);
}
void _BCD__ZN4fltk9ccCellBox4drawEv(fltk::ccCellBox *This) {
(This->draw());
}
int _BCD__ZN4fltk9ccCellBox6handleEi(fltk::ccCellBox *This, int _0) {
return (This->handle(_0));
}
int _BCD_R__ZN4fltk9ccCellBox4drawEv__ccCellBox_R_CHECK(void *);
void _BCD_R__ZN4fltk9ccCellBox4drawEv__ccCellBox_R(void *);
int _BCD_R__ZN4fltk9ccCellBox6handleEi__ccCellBox_R_CHECK(void *);
int _BCD_R__ZN4fltk9ccCellBox6handleEi__ccCellBox_R(void *, int _0);
}
class ccCellBox_R : fltk::ccCellBox {
public:
void *__D_data;
ccCellBox_R(int X, int Y, int W, int H) : fltk::ccCellBox(X, Y, W, H) {}
void draw() {
if (_BCD_R__ZN4fltk9ccCellBox4drawEv__ccCellBox_R_CHECK(__D_data))
_BCD_R__ZN4fltk9ccCellBox4drawEv__ccCellBox_R(__D_data);
else
fltk::ccCellBox::draw();
}
int handle(int _0) {
if (_BCD_R__ZN4fltk9ccCellBox6handleEi__ccCellBox_R_CHECK(__D_data))
return _BCD_R__ZN4fltk9ccCellBox6handleEi__ccCellBox_R(__D_data, _0);
else
return fltk::ccCellBox::handle(_0);
}
};
extern "C" {
ccCellBox_R *_BCD_new__ZN4fltk9ccCellBoxC1Eiiii_R(int X, int Y, int W, int H) {
return new ccCellBox_R(X, Y, W, H);
}
void _BCD_delete_N4fltk9ccCellBoxE__ccCellBox_R(ccCellBox_R *This) {
delete This;
}
void _BCD_RI_N4fltk9ccCellBoxE(ccCellBox_R *cd, void *dd) {
cd->__D_data = dd;
}
void _BCD_delete_N4fltk10ccValueBoxE(fltk::ccValueBox *This) {
delete This;
}
int _BCD__ZN4fltk10ccValueBox6handleEi(fltk::ccValueBox *This, int _0) {
return (This->handle(_0));
}
fltk::ccValueBox *_BCD_new__ZN4fltk10ccValueBoxC1Eiiii(int X, int Y, int W, int H) {
return new fltk::ccValueBox(X, Y, W, H);
}
int _BCD_R__ZN4fltk10ccValueBox6handleEi__ccValueBox_R_CHECK(void *);
int _BCD_R__ZN4fltk10ccValueBox6handleEi__ccValueBox_R(void *, int _0);
}
class ccValueBox_R : fltk::ccValueBox {
public:
void *__D_data;
int handle(int _0) {
if (_BCD_R__ZN4fltk10ccValueBox6handleEi__ccValueBox_R_CHECK(__D_data))
return _BCD_R__ZN4fltk10ccValueBox6handleEi__ccValueBox_R(__D_data, _0);
else
return fltk::ccValueBox::handle(_0);
}
ccValueBox_R(int X, int Y, int W, int H) : fltk::ccValueBox(X, Y, W, H) {}
};
extern "C" {
ccValueBox_R *_BCD_new__ZN4fltk10ccValueBoxC1Eiiii_R(int X, int Y, int W, int H) {
return new ccValueBox_R(X, Y, W, H);
}
void _BCD_delete_N4fltk10ccValueBoxE__ccValueBox_R(ccValueBox_R *This) {
delete This;
}
void _BCD_RI_N4fltk10ccValueBoxE(ccValueBox_R *cd, void *dd) {
cd->__D_data = dd;
}
void _BCD_delete_N4fltk8ccHueBoxE(fltk::ccHueBox *This) {
delete This;
}
int _BCD__ZN4fltk8ccHueBox6handleEi(fltk::ccHueBox *This, int _0) {
return (This->handle(_0));
}
fltk::ccHueBox *_BCD_new__ZN4fltk8ccHueBoxC1Eiiii(int X, int Y, int W, int H) {
return new fltk::ccHueBox(X, Y, W, H);
}
int _BCD_R__ZN4fltk8ccHueBox6handleEi__ccHueBox_R_CHECK(void *);
int _BCD_R__ZN4fltk8ccHueBox6handleEi__ccHueBox_R(void *, int _0);
}
class ccHueBox_R : fltk::ccHueBox {
public:
void *__D_data;
int handle(int _0) {
if (_BCD_R__ZN4fltk8ccHueBox6handleEi__ccHueBox_R_CHECK(__D_data))
return _BCD_R__ZN4fltk8ccHueBox6handleEi__ccHueBox_R(__D_data, _0);
else
return fltk::ccHueBox::handle(_0);
}
ccHueBox_R(int X, int Y, int W, int H) : fltk::ccHueBox(X, Y, W, H) {}
};
extern "C" {
ccHueBox_R *_BCD_new__ZN4fltk8ccHueBoxC1Eiiii_R(int X, int Y, int W, int H) {
return new ccHueBox_R(X, Y, W, H);
}
void _BCD_delete_N4fltk8ccHueBoxE__ccHueBox_R(ccHueBox_R *This) {
delete This;
}
void _BCD_RI_N4fltk8ccHueBoxE(ccHueBox_R *cd, void *dd) {
cd->__D_data = dd;
}
bool _BCD__ZN4fltk13color_chooserEPKcRj(char const * name, _BCD__253_Color & c) {
return (fltk::color_chooser(name, c));
}
bool _BCD__ZN4fltk13color_chooserEPKcRhS2_S2_S2_(char const * name, _BCD__11_uchar & r, _BCD__11_uchar & g, _BCD__11_uchar & b, _BCD__11_uchar & a) {
return (fltk::color_chooser(name, r, g, b, a));
}
bool _BCD__ZN4fltk13color_chooserEPKcRhS2_S2_(char const * name, _BCD__11_uchar & r, _BCD__11_uchar & g, _BCD__11_uchar & b) {
return (fltk::color_chooser(name, r, g, b));
}
bool _BCD__ZN4fltk13color_chooserEPKcRfS2_S2_S2_(char const * name, float & r, float & g, float & b, float & a) {
return (fltk::color_chooser(name, r, g, b, a));
}
bool _BCD__ZN4fltk13color_chooserEPKcRfS2_S2_(char const * name, float & r, float & g, float & b) {
return (fltk::color_chooser(name, r, g, b));
}
typedef void (*_BCD_func__165)(fltk::Widget *, long int);
typedef _BCD_func__165 _BCD__166_Callback1;
typedef void (*_BCD_func__167)(fltk::Widget *);
typedef _BCD_func__167 _BCD__168_Callback0;
typedef void (*_BCD_func__171)(fltk::Widget *, void *);
typedef _BCD_func__171 _BCD__172_Callback;
typedef _BCD__172_Callback _BCD__170_Callback_p;
typedef bool (*_BCD_func__376)();
typedef _BCD_func__376 _BCD__183_Theme;
typedef fltk::Symbol * _BCD__236_Box;
typedef int _BCD__256_Flags;
typedef _BCD__256_Flags _BCD__255_Align;
}
