/* THIS FILE GENERATED BY bcd.gen */
module bcd.sdl.SDL;
version (Tango) {
    import tango.stdc.stdio;
} else {
    import std.c.stdio;
}
align(4):
const int __LINUX__ = 1;
const int SDL_HAS_64BIT_TYPE = 1;
const int SDL_BYTEORDER = 1234;
const int HAVE_LIBC = 1;
const int HAVE_ALLOCA_H = 1;
const int HAVE_SYS_TYPES_H = 1;
const int HAVE_STDIO_H = 1;
const int STDC_HEADERS = 1;
const int HAVE_STDLIB_H = 1;
const int HAVE_STDARG_H = 1;
const int HAVE_MALLOC_H = 1;
const int HAVE_MEMORY_H = 1;
const int HAVE_STRING_H = 1;
const int HAVE_STRINGS_H = 1;
const int HAVE_INTTYPES_H = 1;
const int HAVE_STDINT_H = 1;
const int HAVE_CTYPE_H = 1;
const int HAVE_MATH_H = 1;
const int HAVE_ICONV_H = 1;
const int HAVE_SIGNAL_H = 1;
const int HAVE_MALLOC = 1;
const int HAVE_CALLOC = 1;
const int HAVE_REALLOC = 1;
const int HAVE_FREE = 1;
const int HAVE_ALLOCA = 1;
const int HAVE_GETENV = 1;
const int HAVE_PUTENV = 1;
const int HAVE_UNSETENV = 1;
const int HAVE_QSORT = 1;
const int HAVE_ABS = 1;
const int HAVE_BCOPY = 1;
const int HAVE_MEMSET = 1;
const int HAVE_MEMCPY = 1;
const int HAVE_MEMMOVE = 1;
const int HAVE_MEMCMP = 1;
const int HAVE_STRLEN = 1;
const int HAVE_STRDUP = 1;
const int HAVE_STRCHR = 1;
const int HAVE_STRRCHR = 1;
const int HAVE_STRSTR = 1;
const int HAVE_STRTOL = 1;
const int HAVE_STRTOUL = 1;
const int HAVE_STRTOLL = 1;
const int HAVE_STRTOULL = 1;
const int HAVE_STRTOD = 1;
const int HAVE_ATOI = 1;
const int HAVE_ATOF = 1;
const int HAVE_STRCMP = 1;
const int HAVE_STRNCMP = 1;
const int HAVE_STRCASECMP = 1;
const int HAVE_STRNCASECMP = 1;
const int HAVE_SSCANF = 1;
const int HAVE_SNPRINTF = 1;
const int HAVE_VSNPRINTF = 1;
const int HAVE_ICONV = 1;
const int HAVE_SIGACTION = 1;
const int HAVE_SETJMP = 1;
const int HAVE_NANOSLEEP = 1;
const int HAVE_DLVSYM = 1;
const int HAVE_GETPAGESIZE = 1;
const int SDL_AUDIO_DRIVER_ALSA = 1;
const char[] SDL_AUDIO_DRIVER_ALSA_DYNAMIC = "libasound.so.2";
const int SDL_AUDIO_DRIVER_ARTS = 1;
const char[] SDL_AUDIO_DRIVER_ARTS_DYNAMIC = "libartsc.so.0";
const int SDL_AUDIO_DRIVER_DISK = 1;
const int SDL_AUDIO_DRIVER_DUMMY = 1;
const int SDL_AUDIO_DRIVER_ESD = 1;
const int SDL_AUDIO_DRIVER_NAS = 1;
const int SDL_AUDIO_DRIVER_OSS = 1;
const int SDL_CDROM_LINUX = 1;
const int SDL_JOYSTICK_LINUX = 1;
const int SDL_LOADSO_DLOPEN = 1;
const int SDL_THREAD_PTHREAD = 1;
const int SDL_THREAD_PTHREAD_RECURSIVE_MUTEX = 1;
const int SDL_TIMER_UNIX = 1;
const int SDL_VIDEO_DRIVER_AALIB = 1;
const int SDL_VIDEO_DRIVER_DGA = 1;
const int SDL_VIDEO_DRIVER_DIRECTFB = 1;
const int SDL_VIDEO_DRIVER_DUMMY = 1;
const int SDL_VIDEO_DRIVER_FBCON = 1;
const int SDL_VIDEO_DRIVER_GGI = 1;
const int SDL_VIDEO_DRIVER_X11 = 1;
const int SDL_VIDEO_DRIVER_X11_DGAMOUSE = 1;
const int SDL_VIDEO_DRIVER_X11_DPMS = 1;
const char[] SDL_VIDEO_DRIVER_X11_DYNAMIC = "libX11.so.6";
const char[] SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT = "libXext.so.6";
const char[] SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR = "libXrandr.so.2";
const char[] SDL_VIDEO_DRIVER_X11_DYNAMIC_XRENDER = "libXrender.so.1";
const int SDL_VIDEO_DRIVER_X11_VIDMODE = 1;
const int SDL_VIDEO_DRIVER_X11_XINERAMA = 1;
const int SDL_VIDEO_DRIVER_X11_XME = 1;
const int SDL_VIDEO_DRIVER_X11_XRANDR = 1;
const int SDL_VIDEO_DRIVER_X11_XV = 1;
const int SDL_VIDEO_OPENGL = 1;
const int SDL_VIDEO_OPENGL_GLX = 1;
const int SDL_ASSEMBLY_ROUTINES = 1;
const int SDL_HERMES_BLITTERS = 1;
const int SDL_LIL_ENDIAN = 1234;
const int SDL_BIG_ENDIAN = 4321;
const int SDL_MUTEX_TIMEDOUT = 1;
const int RW_SEEK_SET = 0;
const int RW_SEEK_CUR = 1;
const int RW_SEEK_END = 2;
const int AUDIO_U8 = 0x0008;
const int AUDIO_S8 = 0x8008;
const int AUDIO_U16LSB = 0x0010;
const int AUDIO_S16LSB = 0x8010;
const int AUDIO_U16MSB = 0x1010;
const int AUDIO_S16MSB = 0x9010;
alias AUDIO_U16LSB AUDIO_U16;
alias AUDIO_S16LSB AUDIO_S16;
alias AUDIO_U16LSB AUDIO_U16SYS;
alias AUDIO_S16LSB AUDIO_S16SYS;
const int SDL_MIX_MAXVOLUME = 128;
const int SDL_MAX_TRACKS = 99;
const int SDL_AUDIO_TRACK = 0x00;
const int SDL_DATA_TRACK = 0x04;
const int CD_FPS = 75;
const int SDL_APPMOUSEFOCUS = 0x01;
const int SDL_APPINPUTFOCUS = 0x02;
const int SDL_APPACTIVE = 0x04;
const int SDL_ALL_HOTKEYS = 0xFFFFFFFF;
const int SDL_DEFAULT_REPEAT_DELAY = 500;
const int SDL_DEFAULT_REPEAT_INTERVAL = 30;
const int SDL_ALPHA_OPAQUE = 255;
const int SDL_ALPHA_TRANSPARENT = 0;
const int SDL_SWSURFACE = 0x00000000;
const int SDL_HWSURFACE = 0x00000001;
const int SDL_ASYNCBLIT = 0x00000004;
const int SDL_ANYFORMAT = 0x10000000;
const int SDL_HWPALETTE = 0x20000000;
const int SDL_DOUBLEBUF = 0x40000000;
const int SDL_FULLSCREEN = 0x80000000;
const int SDL_OPENGL = 0x00000002;
const int SDL_OPENGLBLIT = 0x0000000A;
const int SDL_RESIZABLE = 0x00000010;
const int SDL_NOFRAME = 0x00000020;
const int SDL_HWACCEL = 0x00000100;
const int SDL_SRCCOLORKEY = 0x00001000;
const int SDL_RLEACCELOK = 0x00002000;
const int SDL_RLEACCEL = 0x00004000;
const int SDL_SRCALPHA = 0x00010000;
const int SDL_PREALLOC = 0x01000000;
const int SDL_YV12_OVERLAY = 0x32315659;
const int SDL_IYUV_OVERLAY = 0x56555949;
const int SDL_YUY2_OVERLAY = 0x32595559;
const int SDL_UYVY_OVERLAY = 0x59565955;
const int SDL_YVYU_OVERLAY = 0x55595659;
const int SDL_LOGPAL = 0x01;
const int SDL_PHYSPAL = 0x02;
const int SDL_BUTTON_LEFT = 1;
const int SDL_BUTTON_MIDDLE = 2;
const int SDL_BUTTON_RIGHT = 3;
const int SDL_BUTTON_WHEELUP = 4;
const int SDL_BUTTON_WHEELDOWN = 5;
const int SDL_HAT_CENTERED = 0x00;
const int SDL_HAT_UP = 0x01;
const int SDL_HAT_RIGHT = 0x02;
const int SDL_HAT_DOWN = 0x04;
const int SDL_HAT_LEFT = 0x08;
const int SDL_RELEASED = 0;
const int SDL_PRESSED = 1;
const int SDL_ALLEVENTS = 0xFFFFFFFF;
const int SDL_QUERY = -1;
const int SDL_IGNORE = 0;
const int SDL_DISABLE = 0;
const int SDL_ENABLE = 1;
const int SDL_TIMESLICE = 10;
const int TIMER_RESOLUTION = 10;
const int SDL_MAJOR_VERSION = 1;
const int SDL_MINOR_VERSION = 2;
const int SDL_PATCHLEVEL = 12;
const int SDL_INIT_TIMER = 0x00000001;
const int SDL_INIT_AUDIO = 0x00000010;
const int SDL_INIT_VIDEO = 0x00000020;
const int SDL_INIT_CDROM = 0x00000100;
const int SDL_INIT_JOYSTICK = 0x00000200;
const int SDL_INIT_NOPARACHUTE = 0x00100000;
const int SDL_INIT_EVENTTHREAD = 0x01000000;
const int SDL_INIT_EVERYTHING = 0x0000FFFF;
alias char Uint8;
alias void * SDL_TimerID;
alias uint Uint32;
alias uint function(uint, void *) _BCD_func__1055;
alias _BCD_func__1055 SDL_NewTimerCallback;
alias uint function(uint) _BCD_func__1056;
alias _BCD_func__1056 SDL_TimerCallback;
alias int function(SDL_Event *) _BCD_func__1058;
alias _BCD_func__1058 SDL_EventFilter;
enum SDL_eventaction {
SDL_ADDEVENT=0,
SDL_PEEKEVENT=1,
SDL_GETEVENT=2,
}
alias SDL_eventaction.SDL_ADDEVENT SDL_ADDEVENT;
alias SDL_eventaction.SDL_PEEKEVENT SDL_PEEKEVENT;
alias SDL_eventaction.SDL_GETEVENT SDL_GETEVENT;
alias void SDL_SysWMmsg;
alias short Sint16;
alias ushort Uint16;
enum SDL_EventMasks {
SDL_ACTIVEEVENTMASK=2,
SDL_KEYDOWNMASK=4,
SDL_KEYUPMASK=8,
SDL_KEYEVENTMASK=12,
SDL_MOUSEMOTIONMASK=16,
SDL_MOUSEBUTTONDOWNMASK=32,
SDL_MOUSEBUTTONUPMASK=64,
SDL_MOUSEEVENTMASK=112,
SDL_JOYAXISMOTIONMASK=128,
SDL_JOYBALLMOTIONMASK=256,
SDL_JOYHATMOTIONMASK=512,
SDL_JOYBUTTONDOWNMASK=1024,
SDL_JOYBUTTONUPMASK=2048,
SDL_JOYEVENTMASK=3968,
SDL_VIDEORESIZEMASK=65536,
SDL_VIDEOEXPOSEMASK=131072,
SDL_QUITMASK=4096,
SDL_SYSWMEVENTMASK=8192,
}
alias SDL_EventMasks.SDL_ACTIVEEVENTMASK SDL_ACTIVEEVENTMASK;
alias SDL_EventMasks.SDL_KEYDOWNMASK SDL_KEYDOWNMASK;
alias SDL_EventMasks.SDL_KEYUPMASK SDL_KEYUPMASK;
alias SDL_EventMasks.SDL_KEYEVENTMASK SDL_KEYEVENTMASK;
alias SDL_EventMasks.SDL_MOUSEMOTIONMASK SDL_MOUSEMOTIONMASK;
alias SDL_EventMasks.SDL_MOUSEBUTTONDOWNMASK SDL_MOUSEBUTTONDOWNMASK;
alias SDL_EventMasks.SDL_MOUSEBUTTONUPMASK SDL_MOUSEBUTTONUPMASK;
alias SDL_EventMasks.SDL_MOUSEEVENTMASK SDL_MOUSEEVENTMASK;
alias SDL_EventMasks.SDL_JOYAXISMOTIONMASK SDL_JOYAXISMOTIONMASK;
alias SDL_EventMasks.SDL_JOYBALLMOTIONMASK SDL_JOYBALLMOTIONMASK;
alias SDL_EventMasks.SDL_JOYHATMOTIONMASK SDL_JOYHATMOTIONMASK;
alias SDL_EventMasks.SDL_JOYBUTTONDOWNMASK SDL_JOYBUTTONDOWNMASK;
alias SDL_EventMasks.SDL_JOYBUTTONUPMASK SDL_JOYBUTTONUPMASK;
alias SDL_EventMasks.SDL_JOYEVENTMASK SDL_JOYEVENTMASK;
alias SDL_EventMasks.SDL_VIDEORESIZEMASK SDL_VIDEORESIZEMASK;
alias SDL_EventMasks.SDL_VIDEOEXPOSEMASK SDL_VIDEOEXPOSEMASK;
alias SDL_EventMasks.SDL_QUITMASK SDL_QUITMASK;
alias SDL_EventMasks.SDL_SYSWMEVENTMASK SDL_SYSWMEVENTMASK;
enum SDL_Events {
SDL_NOEVENT=0,
SDL_ACTIVEEVENT=1,
SDL_KEYDOWN=2,
SDL_KEYUP=3,
SDL_MOUSEMOTION=4,
SDL_MOUSEBUTTONDOWN=5,
SDL_MOUSEBUTTONUP=6,
SDL_JOYAXISMOTION=7,
SDL_JOYBALLMOTION=8,
SDL_JOYHATMOTION=9,
SDL_JOYBUTTONDOWN=10,
SDL_JOYBUTTONUP=11,
SDL_QUIT=12,
SDL_SYSWMEVENT=13,
SDL_EVENT_RESERVEDA=14,
SDL_EVENT_RESERVEDB=15,
SDL_VIDEORESIZE=16,
SDL_VIDEOEXPOSE=17,
SDL_EVENT_RESERVED2=18,
SDL_EVENT_RESERVED3=19,
SDL_EVENT_RESERVED4=20,
SDL_EVENT_RESERVED5=21,
SDL_EVENT_RESERVED6=22,
SDL_EVENT_RESERVED7=23,
SDL_USEREVENT=24,
SDL_NUMEVENTS=32,
}
alias SDL_Events.SDL_NOEVENT SDL_NOEVENT;
alias SDL_Events.SDL_ACTIVEEVENT SDL_ACTIVEEVENT;
alias SDL_Events.SDL_KEYDOWN SDL_KEYDOWN;
alias SDL_Events.SDL_KEYUP SDL_KEYUP;
alias SDL_Events.SDL_MOUSEMOTION SDL_MOUSEMOTION;
alias SDL_Events.SDL_MOUSEBUTTONDOWN SDL_MOUSEBUTTONDOWN;
alias SDL_Events.SDL_MOUSEBUTTONUP SDL_MOUSEBUTTONUP;
alias SDL_Events.SDL_JOYAXISMOTION SDL_JOYAXISMOTION;
alias SDL_Events.SDL_JOYBALLMOTION SDL_JOYBALLMOTION;
alias SDL_Events.SDL_JOYHATMOTION SDL_JOYHATMOTION;
alias SDL_Events.SDL_JOYBUTTONDOWN SDL_JOYBUTTONDOWN;
alias SDL_Events.SDL_JOYBUTTONUP SDL_JOYBUTTONUP;
alias SDL_Events.SDL_QUIT SDL_QUIT;
alias SDL_Events.SDL_SYSWMEVENT SDL_SYSWMEVENT;
alias SDL_Events.SDL_EVENT_RESERVEDA SDL_EVENT_RESERVEDA;
alias SDL_Events.SDL_EVENT_RESERVEDB SDL_EVENT_RESERVEDB;
alias SDL_Events.SDL_VIDEORESIZE SDL_VIDEORESIZE;
alias SDL_Events.SDL_VIDEOEXPOSE SDL_VIDEOEXPOSE;
alias SDL_Events.SDL_EVENT_RESERVED2 SDL_EVENT_RESERVED2;
alias SDL_Events.SDL_EVENT_RESERVED3 SDL_EVENT_RESERVED3;
alias SDL_Events.SDL_EVENT_RESERVED4 SDL_EVENT_RESERVED4;
alias SDL_Events.SDL_EVENT_RESERVED5 SDL_EVENT_RESERVED5;
alias SDL_Events.SDL_EVENT_RESERVED6 SDL_EVENT_RESERVED6;
alias SDL_Events.SDL_EVENT_RESERVED7 SDL_EVENT_RESERVED7;
alias SDL_Events.SDL_USEREVENT SDL_USEREVENT;
alias SDL_Events.SDL_NUMEVENTS SDL_NUMEVENTS;
alias int SDL_EventType;
alias void SDL_Joystick;
alias void WMcursor;
enum SDL_GrabMode {
SDL_GRAB_QUERY=-1,
SDL_GRAB_OFF=0,
SDL_GRAB_ON=1,
SDL_GRAB_FULLSCREEN=2,
}
alias SDL_GrabMode.SDL_GRAB_QUERY SDL_GRAB_QUERY;
alias SDL_GrabMode.SDL_GRAB_OFF SDL_GRAB_OFF;
alias SDL_GrabMode.SDL_GRAB_ON SDL_GRAB_ON;
alias SDL_GrabMode.SDL_GRAB_FULLSCREEN SDL_GRAB_FULLSCREEN;
enum SDL_GLattr {
SDL_GL_RED_SIZE=0,
SDL_GL_GREEN_SIZE=1,
SDL_GL_BLUE_SIZE=2,
SDL_GL_ALPHA_SIZE=3,
SDL_GL_BUFFER_SIZE=4,
SDL_GL_DOUBLEBUFFER=5,
SDL_GL_DEPTH_SIZE=6,
SDL_GL_STENCIL_SIZE=7,
SDL_GL_ACCUM_RED_SIZE=8,
SDL_GL_ACCUM_GREEN_SIZE=9,
SDL_GL_ACCUM_BLUE_SIZE=10,
SDL_GL_ACCUM_ALPHA_SIZE=11,
SDL_GL_STEREO=12,
SDL_GL_MULTISAMPLEBUFFERS=13,
SDL_GL_MULTISAMPLESAMPLES=14,
SDL_GL_ACCELERATED_VISUAL=15,
SDL_GL_SWAP_CONTROL=16,
}
alias SDL_GLattr.SDL_GL_RED_SIZE SDL_GL_RED_SIZE;
alias SDL_GLattr.SDL_GL_GREEN_SIZE SDL_GL_GREEN_SIZE;
alias SDL_GLattr.SDL_GL_BLUE_SIZE SDL_GL_BLUE_SIZE;
alias SDL_GLattr.SDL_GL_ALPHA_SIZE SDL_GL_ALPHA_SIZE;
alias SDL_GLattr.SDL_GL_BUFFER_SIZE SDL_GL_BUFFER_SIZE;
alias SDL_GLattr.SDL_GL_DOUBLEBUFFER SDL_GL_DOUBLEBUFFER;
alias SDL_GLattr.SDL_GL_DEPTH_SIZE SDL_GL_DEPTH_SIZE;
alias SDL_GLattr.SDL_GL_STENCIL_SIZE SDL_GL_STENCIL_SIZE;
alias SDL_GLattr.SDL_GL_ACCUM_RED_SIZE SDL_GL_ACCUM_RED_SIZE;
alias SDL_GLattr.SDL_GL_ACCUM_GREEN_SIZE SDL_GL_ACCUM_GREEN_SIZE;
alias SDL_GLattr.SDL_GL_ACCUM_BLUE_SIZE SDL_GL_ACCUM_BLUE_SIZE;
alias SDL_GLattr.SDL_GL_ACCUM_ALPHA_SIZE SDL_GL_ACCUM_ALPHA_SIZE;
alias SDL_GLattr.SDL_GL_STEREO SDL_GL_STEREO;
alias SDL_GLattr.SDL_GL_MULTISAMPLEBUFFERS SDL_GL_MULTISAMPLEBUFFERS;
alias SDL_GLattr.SDL_GL_MULTISAMPLESAMPLES SDL_GL_MULTISAMPLESAMPLES;
alias SDL_GLattr.SDL_GL_ACCELERATED_VISUAL SDL_GL_ACCELERATED_VISUAL;
alias SDL_GLattr.SDL_GL_SWAP_CONTROL SDL_GL_SWAP_CONTROL;
alias int function(SDL_Surface *, SDL_Rect *, SDL_Surface *, SDL_Rect *) _BCD_func__1209;
alias _BCD_func__1209 SDL_blit;
enum SDLKey {
SDLK_UNKNOWN=0,
SDLK_FIRST=0,
SDLK_BACKSPACE=8,
SDLK_TAB=9,
SDLK_CLEAR=12,
SDLK_RETURN=13,
SDLK_PAUSE=19,
SDLK_ESCAPE=27,
SDLK_SPACE=32,
SDLK_EXCLAIM=33,
SDLK_QUOTEDBL=34,
SDLK_HASH=35,
SDLK_DOLLAR=36,
SDLK_AMPERSAND=38,
SDLK_QUOTE=39,
SDLK_LEFTPAREN=40,
SDLK_RIGHTPAREN=41,
SDLK_ASTERISK=42,
SDLK_PLUS=43,
SDLK_COMMA=44,
SDLK_MINUS=45,
SDLK_PERIOD=46,
SDLK_SLASH=47,
SDLK_0=48,
SDLK_1=49,
SDLK_2=50,
SDLK_3=51,
SDLK_4=52,
SDLK_5=53,
SDLK_6=54,
SDLK_7=55,
SDLK_8=56,
SDLK_9=57,
SDLK_COLON=58,
SDLK_SEMICOLON=59,
SDLK_LESS=60,
SDLK_EQUALS=61,
SDLK_GREATER=62,
SDLK_QUESTION=63,
SDLK_AT=64,
SDLK_LEFTBRACKET=91,
SDLK_BACKSLASH=92,
SDLK_RIGHTBRACKET=93,
SDLK_CARET=94,
SDLK_UNDERSCORE=95,
SDLK_BACKQUOTE=96,
SDLK_a=97,
SDLK_b=98,
SDLK_c=99,
SDLK_d=100,
SDLK_e=101,
SDLK_f=102,
SDLK_g=103,
SDLK_h=104,
SDLK_i=105,
SDLK_j=106,
SDLK_k=107,
SDLK_l=108,
SDLK_m=109,
SDLK_n=110,
SDLK_o=111,
SDLK_p=112,
SDLK_q=113,
SDLK_r=114,
SDLK_s=115,
SDLK_t=116,
SDLK_u=117,
SDLK_v=118,
SDLK_w=119,
SDLK_x=120,
SDLK_y=121,
SDLK_z=122,
SDLK_DELETE=127,
SDLK_WORLD_0=160,
SDLK_WORLD_1=161,
SDLK_WORLD_2=162,
SDLK_WORLD_3=163,
SDLK_WORLD_4=164,
SDLK_WORLD_5=165,
SDLK_WORLD_6=166,
SDLK_WORLD_7=167,
SDLK_WORLD_8=168,
SDLK_WORLD_9=169,
SDLK_WORLD_10=170,
SDLK_WORLD_11=171,
SDLK_WORLD_12=172,
SDLK_WORLD_13=173,
SDLK_WORLD_14=174,
SDLK_WORLD_15=175,
SDLK_WORLD_16=176,
SDLK_WORLD_17=177,
SDLK_WORLD_18=178,
SDLK_WORLD_19=179,
SDLK_WORLD_20=180,
SDLK_WORLD_21=181,
SDLK_WORLD_22=182,
SDLK_WORLD_23=183,
SDLK_WORLD_24=184,
SDLK_WORLD_25=185,
SDLK_WORLD_26=186,
SDLK_WORLD_27=187,
SDLK_WORLD_28=188,
SDLK_WORLD_29=189,
SDLK_WORLD_30=190,
SDLK_WORLD_31=191,
SDLK_WORLD_32=192,
SDLK_WORLD_33=193,
SDLK_WORLD_34=194,
SDLK_WORLD_35=195,
SDLK_WORLD_36=196,
SDLK_WORLD_37=197,
SDLK_WORLD_38=198,
SDLK_WORLD_39=199,
SDLK_WORLD_40=200,
SDLK_WORLD_41=201,
SDLK_WORLD_42=202,
SDLK_WORLD_43=203,
SDLK_WORLD_44=204,
SDLK_WORLD_45=205,
SDLK_WORLD_46=206,
SDLK_WORLD_47=207,
SDLK_WORLD_48=208,
SDLK_WORLD_49=209,
SDLK_WORLD_50=210,
SDLK_WORLD_51=211,
SDLK_WORLD_52=212,
SDLK_WORLD_53=213,
SDLK_WORLD_54=214,
SDLK_WORLD_55=215,
SDLK_WORLD_56=216,
SDLK_WORLD_57=217,
SDLK_WORLD_58=218,
SDLK_WORLD_59=219,
SDLK_WORLD_60=220,
SDLK_WORLD_61=221,
SDLK_WORLD_62=222,
SDLK_WORLD_63=223,
SDLK_WORLD_64=224,
SDLK_WORLD_65=225,
SDLK_WORLD_66=226,
SDLK_WORLD_67=227,
SDLK_WORLD_68=228,
SDLK_WORLD_69=229,
SDLK_WORLD_70=230,
SDLK_WORLD_71=231,
SDLK_WORLD_72=232,
SDLK_WORLD_73=233,
SDLK_WORLD_74=234,
SDLK_WORLD_75=235,
SDLK_WORLD_76=236,
SDLK_WORLD_77=237,
SDLK_WORLD_78=238,
SDLK_WORLD_79=239,
SDLK_WORLD_80=240,
SDLK_WORLD_81=241,
SDLK_WORLD_82=242,
SDLK_WORLD_83=243,
SDLK_WORLD_84=244,
SDLK_WORLD_85=245,
SDLK_WORLD_86=246,
SDLK_WORLD_87=247,
SDLK_WORLD_88=248,
SDLK_WORLD_89=249,
SDLK_WORLD_90=250,
SDLK_WORLD_91=251,
SDLK_WORLD_92=252,
SDLK_WORLD_93=253,
SDLK_WORLD_94=254,
SDLK_WORLD_95=255,
SDLK_KP0=256,
SDLK_KP1=257,
SDLK_KP2=258,
SDLK_KP3=259,
SDLK_KP4=260,
SDLK_KP5=261,
SDLK_KP6=262,
SDLK_KP7=263,
SDLK_KP8=264,
SDLK_KP9=265,
SDLK_KP_PERIOD=266,
SDLK_KP_DIVIDE=267,
SDLK_KP_MULTIPLY=268,
SDLK_KP_MINUS=269,
SDLK_KP_PLUS=270,
SDLK_KP_ENTER=271,
SDLK_KP_EQUALS=272,
SDLK_UP=273,
SDLK_DOWN=274,
SDLK_RIGHT=275,
SDLK_LEFT=276,
SDLK_INSERT=277,
SDLK_HOME=278,
SDLK_END=279,
SDLK_PAGEUP=280,
SDLK_PAGEDOWN=281,
SDLK_F1=282,
SDLK_F2=283,
SDLK_F3=284,
SDLK_F4=285,
SDLK_F5=286,
SDLK_F6=287,
SDLK_F7=288,
SDLK_F8=289,
SDLK_F9=290,
SDLK_F10=291,
SDLK_F11=292,
SDLK_F12=293,
SDLK_F13=294,
SDLK_F14=295,
SDLK_F15=296,
SDLK_NUMLOCK=300,
SDLK_CAPSLOCK=301,
SDLK_SCROLLOCK=302,
SDLK_RSHIFT=303,
SDLK_LSHIFT=304,
SDLK_RCTRL=305,
SDLK_LCTRL=306,
SDLK_RALT=307,
SDLK_LALT=308,
SDLK_RMETA=309,
SDLK_LMETA=310,
SDLK_LSUPER=311,
SDLK_RSUPER=312,
SDLK_MODE=313,
SDLK_COMPOSE=314,
SDLK_HELP=315,
SDLK_PRINT=316,
SDLK_SYSREQ=317,
SDLK_BREAK=318,
SDLK_MENU=319,
SDLK_POWER=320,
SDLK_EURO=321,
SDLK_UNDO=322,
SDLK_LAST=323,
}
alias SDLKey.SDLK_UNKNOWN SDLK_UNKNOWN;
alias SDLKey.SDLK_FIRST SDLK_FIRST;
alias SDLKey.SDLK_BACKSPACE SDLK_BACKSPACE;
alias SDLKey.SDLK_TAB SDLK_TAB;
alias SDLKey.SDLK_CLEAR SDLK_CLEAR;
alias SDLKey.SDLK_RETURN SDLK_RETURN;
alias SDLKey.SDLK_PAUSE SDLK_PAUSE;
alias SDLKey.SDLK_ESCAPE SDLK_ESCAPE;
alias SDLKey.SDLK_SPACE SDLK_SPACE;
alias SDLKey.SDLK_EXCLAIM SDLK_EXCLAIM;
alias SDLKey.SDLK_QUOTEDBL SDLK_QUOTEDBL;
alias SDLKey.SDLK_HASH SDLK_HASH;
alias SDLKey.SDLK_DOLLAR SDLK_DOLLAR;
alias SDLKey.SDLK_AMPERSAND SDLK_AMPERSAND;
alias SDLKey.SDLK_QUOTE SDLK_QUOTE;
alias SDLKey.SDLK_LEFTPAREN SDLK_LEFTPAREN;
alias SDLKey.SDLK_RIGHTPAREN SDLK_RIGHTPAREN;
alias SDLKey.SDLK_ASTERISK SDLK_ASTERISK;
alias SDLKey.SDLK_PLUS SDLK_PLUS;
alias SDLKey.SDLK_COMMA SDLK_COMMA;
alias SDLKey.SDLK_MINUS SDLK_MINUS;
alias SDLKey.SDLK_PERIOD SDLK_PERIOD;
alias SDLKey.SDLK_SLASH SDLK_SLASH;
alias SDLKey.SDLK_0 SDLK_0;
alias SDLKey.SDLK_1 SDLK_1;
alias SDLKey.SDLK_2 SDLK_2;
alias SDLKey.SDLK_3 SDLK_3;
alias SDLKey.SDLK_4 SDLK_4;
alias SDLKey.SDLK_5 SDLK_5;
alias SDLKey.SDLK_6 SDLK_6;
alias SDLKey.SDLK_7 SDLK_7;
alias SDLKey.SDLK_8 SDLK_8;
alias SDLKey.SDLK_9 SDLK_9;
alias SDLKey.SDLK_COLON SDLK_COLON;
alias SDLKey.SDLK_SEMICOLON SDLK_SEMICOLON;
alias SDLKey.SDLK_LESS SDLK_LESS;
alias SDLKey.SDLK_EQUALS SDLK_EQUALS;
alias SDLKey.SDLK_GREATER SDLK_GREATER;
alias SDLKey.SDLK_QUESTION SDLK_QUESTION;
alias SDLKey.SDLK_AT SDLK_AT;
alias SDLKey.SDLK_LEFTBRACKET SDLK_LEFTBRACKET;
alias SDLKey.SDLK_BACKSLASH SDLK_BACKSLASH;
alias SDLKey.SDLK_RIGHTBRACKET SDLK_RIGHTBRACKET;
alias SDLKey.SDLK_CARET SDLK_CARET;
alias SDLKey.SDLK_UNDERSCORE SDLK_UNDERSCORE;
alias SDLKey.SDLK_BACKQUOTE SDLK_BACKQUOTE;
alias SDLKey.SDLK_a SDLK_a;
alias SDLKey.SDLK_b SDLK_b;
alias SDLKey.SDLK_c SDLK_c;
alias SDLKey.SDLK_d SDLK_d;
alias SDLKey.SDLK_e SDLK_e;
alias SDLKey.SDLK_f SDLK_f;
alias SDLKey.SDLK_g SDLK_g;
alias SDLKey.SDLK_h SDLK_h;
alias SDLKey.SDLK_i SDLK_i;
alias SDLKey.SDLK_j SDLK_j;
alias SDLKey.SDLK_k SDLK_k;
alias SDLKey.SDLK_l SDLK_l;
alias SDLKey.SDLK_m SDLK_m;
alias SDLKey.SDLK_n SDLK_n;
alias SDLKey.SDLK_o SDLK_o;
alias SDLKey.SDLK_p SDLK_p;
alias SDLKey.SDLK_q SDLK_q;
alias SDLKey.SDLK_r SDLK_r;
alias SDLKey.SDLK_s SDLK_s;
alias SDLKey.SDLK_t SDLK_t;
alias SDLKey.SDLK_u SDLK_u;
alias SDLKey.SDLK_v SDLK_v;
alias SDLKey.SDLK_w SDLK_w;
alias SDLKey.SDLK_x SDLK_x;
alias SDLKey.SDLK_y SDLK_y;
alias SDLKey.SDLK_z SDLK_z;
alias SDLKey.SDLK_DELETE SDLK_DELETE;
alias SDLKey.SDLK_WORLD_0 SDLK_WORLD_0;
alias SDLKey.SDLK_WORLD_1 SDLK_WORLD_1;
alias SDLKey.SDLK_WORLD_2 SDLK_WORLD_2;
alias SDLKey.SDLK_WORLD_3 SDLK_WORLD_3;
alias SDLKey.SDLK_WORLD_4 SDLK_WORLD_4;
alias SDLKey.SDLK_WORLD_5 SDLK_WORLD_5;
alias SDLKey.SDLK_WORLD_6 SDLK_WORLD_6;
alias SDLKey.SDLK_WORLD_7 SDLK_WORLD_7;
alias SDLKey.SDLK_WORLD_8 SDLK_WORLD_8;
alias SDLKey.SDLK_WORLD_9 SDLK_WORLD_9;
alias SDLKey.SDLK_WORLD_10 SDLK_WORLD_10;
alias SDLKey.SDLK_WORLD_11 SDLK_WORLD_11;
alias SDLKey.SDLK_WORLD_12 SDLK_WORLD_12;
alias SDLKey.SDLK_WORLD_13 SDLK_WORLD_13;
alias SDLKey.SDLK_WORLD_14 SDLK_WORLD_14;
alias SDLKey.SDLK_WORLD_15 SDLK_WORLD_15;
alias SDLKey.SDLK_WORLD_16 SDLK_WORLD_16;
alias SDLKey.SDLK_WORLD_17 SDLK_WORLD_17;
alias SDLKey.SDLK_WORLD_18 SDLK_WORLD_18;
alias SDLKey.SDLK_WORLD_19 SDLK_WORLD_19;
alias SDLKey.SDLK_WORLD_20 SDLK_WORLD_20;
alias SDLKey.SDLK_WORLD_21 SDLK_WORLD_21;
alias SDLKey.SDLK_WORLD_22 SDLK_WORLD_22;
alias SDLKey.SDLK_WORLD_23 SDLK_WORLD_23;
alias SDLKey.SDLK_WORLD_24 SDLK_WORLD_24;
alias SDLKey.SDLK_WORLD_25 SDLK_WORLD_25;
alias SDLKey.SDLK_WORLD_26 SDLK_WORLD_26;
alias SDLKey.SDLK_WORLD_27 SDLK_WORLD_27;
alias SDLKey.SDLK_WORLD_28 SDLK_WORLD_28;
alias SDLKey.SDLK_WORLD_29 SDLK_WORLD_29;
alias SDLKey.SDLK_WORLD_30 SDLK_WORLD_30;
alias SDLKey.SDLK_WORLD_31 SDLK_WORLD_31;
alias SDLKey.SDLK_WORLD_32 SDLK_WORLD_32;
alias SDLKey.SDLK_WORLD_33 SDLK_WORLD_33;
alias SDLKey.SDLK_WORLD_34 SDLK_WORLD_34;
alias SDLKey.SDLK_WORLD_35 SDLK_WORLD_35;
alias SDLKey.SDLK_WORLD_36 SDLK_WORLD_36;
alias SDLKey.SDLK_WORLD_37 SDLK_WORLD_37;
alias SDLKey.SDLK_WORLD_38 SDLK_WORLD_38;
alias SDLKey.SDLK_WORLD_39 SDLK_WORLD_39;
alias SDLKey.SDLK_WORLD_40 SDLK_WORLD_40;
alias SDLKey.SDLK_WORLD_41 SDLK_WORLD_41;
alias SDLKey.SDLK_WORLD_42 SDLK_WORLD_42;
alias SDLKey.SDLK_WORLD_43 SDLK_WORLD_43;
alias SDLKey.SDLK_WORLD_44 SDLK_WORLD_44;
alias SDLKey.SDLK_WORLD_45 SDLK_WORLD_45;
alias SDLKey.SDLK_WORLD_46 SDLK_WORLD_46;
alias SDLKey.SDLK_WORLD_47 SDLK_WORLD_47;
alias SDLKey.SDLK_WORLD_48 SDLK_WORLD_48;
alias SDLKey.SDLK_WORLD_49 SDLK_WORLD_49;
alias SDLKey.SDLK_WORLD_50 SDLK_WORLD_50;
alias SDLKey.SDLK_WORLD_51 SDLK_WORLD_51;
alias SDLKey.SDLK_WORLD_52 SDLK_WORLD_52;
alias SDLKey.SDLK_WORLD_53 SDLK_WORLD_53;
alias SDLKey.SDLK_WORLD_54 SDLK_WORLD_54;
alias SDLKey.SDLK_WORLD_55 SDLK_WORLD_55;
alias SDLKey.SDLK_WORLD_56 SDLK_WORLD_56;
alias SDLKey.SDLK_WORLD_57 SDLK_WORLD_57;
alias SDLKey.SDLK_WORLD_58 SDLK_WORLD_58;
alias SDLKey.SDLK_WORLD_59 SDLK_WORLD_59;
alias SDLKey.SDLK_WORLD_60 SDLK_WORLD_60;
alias SDLKey.SDLK_WORLD_61 SDLK_WORLD_61;
alias SDLKey.SDLK_WORLD_62 SDLK_WORLD_62;
alias SDLKey.SDLK_WORLD_63 SDLK_WORLD_63;
alias SDLKey.SDLK_WORLD_64 SDLK_WORLD_64;
alias SDLKey.SDLK_WORLD_65 SDLK_WORLD_65;
alias SDLKey.SDLK_WORLD_66 SDLK_WORLD_66;
alias SDLKey.SDLK_WORLD_67 SDLK_WORLD_67;
alias SDLKey.SDLK_WORLD_68 SDLK_WORLD_68;
alias SDLKey.SDLK_WORLD_69 SDLK_WORLD_69;
alias SDLKey.SDLK_WORLD_70 SDLK_WORLD_70;
alias SDLKey.SDLK_WORLD_71 SDLK_WORLD_71;
alias SDLKey.SDLK_WORLD_72 SDLK_WORLD_72;
alias SDLKey.SDLK_WORLD_73 SDLK_WORLD_73;
alias SDLKey.SDLK_WORLD_74 SDLK_WORLD_74;
alias SDLKey.SDLK_WORLD_75 SDLK_WORLD_75;
alias SDLKey.SDLK_WORLD_76 SDLK_WORLD_76;
alias SDLKey.SDLK_WORLD_77 SDLK_WORLD_77;
alias SDLKey.SDLK_WORLD_78 SDLK_WORLD_78;
alias SDLKey.SDLK_WORLD_79 SDLK_WORLD_79;
alias SDLKey.SDLK_WORLD_80 SDLK_WORLD_80;
alias SDLKey.SDLK_WORLD_81 SDLK_WORLD_81;
alias SDLKey.SDLK_WORLD_82 SDLK_WORLD_82;
alias SDLKey.SDLK_WORLD_83 SDLK_WORLD_83;
alias SDLKey.SDLK_WORLD_84 SDLK_WORLD_84;
alias SDLKey.SDLK_WORLD_85 SDLK_WORLD_85;
alias SDLKey.SDLK_WORLD_86 SDLK_WORLD_86;
alias SDLKey.SDLK_WORLD_87 SDLK_WORLD_87;
alias SDLKey.SDLK_WORLD_88 SDLK_WORLD_88;
alias SDLKey.SDLK_WORLD_89 SDLK_WORLD_89;
alias SDLKey.SDLK_WORLD_90 SDLK_WORLD_90;
alias SDLKey.SDLK_WORLD_91 SDLK_WORLD_91;
alias SDLKey.SDLK_WORLD_92 SDLK_WORLD_92;
alias SDLKey.SDLK_WORLD_93 SDLK_WORLD_93;
alias SDLKey.SDLK_WORLD_94 SDLK_WORLD_94;
alias SDLKey.SDLK_WORLD_95 SDLK_WORLD_95;
alias SDLKey.SDLK_KP0 SDLK_KP0;
alias SDLKey.SDLK_KP1 SDLK_KP1;
alias SDLKey.SDLK_KP2 SDLK_KP2;
alias SDLKey.SDLK_KP3 SDLK_KP3;
alias SDLKey.SDLK_KP4 SDLK_KP4;
alias SDLKey.SDLK_KP5 SDLK_KP5;
alias SDLKey.SDLK_KP6 SDLK_KP6;
alias SDLKey.SDLK_KP7 SDLK_KP7;
alias SDLKey.SDLK_KP8 SDLK_KP8;
alias SDLKey.SDLK_KP9 SDLK_KP9;
alias SDLKey.SDLK_KP_PERIOD SDLK_KP_PERIOD;
alias SDLKey.SDLK_KP_DIVIDE SDLK_KP_DIVIDE;
alias SDLKey.SDLK_KP_MULTIPLY SDLK_KP_MULTIPLY;
alias SDLKey.SDLK_KP_MINUS SDLK_KP_MINUS;
alias SDLKey.SDLK_KP_PLUS SDLK_KP_PLUS;
alias SDLKey.SDLK_KP_ENTER SDLK_KP_ENTER;
alias SDLKey.SDLK_KP_EQUALS SDLK_KP_EQUALS;
alias SDLKey.SDLK_UP SDLK_UP;
alias SDLKey.SDLK_DOWN SDLK_DOWN;
alias SDLKey.SDLK_RIGHT SDLK_RIGHT;
alias SDLKey.SDLK_LEFT SDLK_LEFT;
alias SDLKey.SDLK_INSERT SDLK_INSERT;
alias SDLKey.SDLK_HOME SDLK_HOME;
alias SDLKey.SDLK_END SDLK_END;
alias SDLKey.SDLK_PAGEUP SDLK_PAGEUP;
alias SDLKey.SDLK_PAGEDOWN SDLK_PAGEDOWN;
alias SDLKey.SDLK_F1 SDLK_F1;
alias SDLKey.SDLK_F2 SDLK_F2;
alias SDLKey.SDLK_F3 SDLK_F3;
alias SDLKey.SDLK_F4 SDLK_F4;
alias SDLKey.SDLK_F5 SDLK_F5;
alias SDLKey.SDLK_F6 SDLK_F6;
alias SDLKey.SDLK_F7 SDLK_F7;
alias SDLKey.SDLK_F8 SDLK_F8;
alias SDLKey.SDLK_F9 SDLK_F9;
alias SDLKey.SDLK_F10 SDLK_F10;
alias SDLKey.SDLK_F11 SDLK_F11;
alias SDLKey.SDLK_F12 SDLK_F12;
alias SDLKey.SDLK_F13 SDLK_F13;
alias SDLKey.SDLK_F14 SDLK_F14;
alias SDLKey.SDLK_F15 SDLK_F15;
alias SDLKey.SDLK_NUMLOCK SDLK_NUMLOCK;
alias SDLKey.SDLK_CAPSLOCK SDLK_CAPSLOCK;
alias SDLKey.SDLK_SCROLLOCK SDLK_SCROLLOCK;
alias SDLKey.SDLK_RSHIFT SDLK_RSHIFT;
alias SDLKey.SDLK_LSHIFT SDLK_LSHIFT;
alias SDLKey.SDLK_RCTRL SDLK_RCTRL;
alias SDLKey.SDLK_LCTRL SDLK_LCTRL;
alias SDLKey.SDLK_RALT SDLK_RALT;
alias SDLKey.SDLK_LALT SDLK_LALT;
alias SDLKey.SDLK_RMETA SDLK_RMETA;
alias SDLKey.SDLK_LMETA SDLK_LMETA;
alias SDLKey.SDLK_LSUPER SDLK_LSUPER;
alias SDLKey.SDLK_RSUPER SDLK_RSUPER;
alias SDLKey.SDLK_MODE SDLK_MODE;
alias SDLKey.SDLK_COMPOSE SDLK_COMPOSE;
alias SDLKey.SDLK_HELP SDLK_HELP;
alias SDLKey.SDLK_PRINT SDLK_PRINT;
alias SDLKey.SDLK_SYSREQ SDLK_SYSREQ;
alias SDLKey.SDLK_BREAK SDLK_BREAK;
alias SDLKey.SDLK_MENU SDLK_MENU;
alias SDLKey.SDLK_POWER SDLK_POWER;
alias SDLKey.SDLK_EURO SDLK_EURO;
alias SDLKey.SDLK_UNDO SDLK_UNDO;
alias SDLKey.SDLK_LAST SDLK_LAST;
enum SDLMod {
KMOD_NONE=0,
KMOD_LSHIFT=1,
KMOD_RSHIFT=2,
KMOD_LCTRL=64,
KMOD_RCTRL=128,
KMOD_LALT=256,
KMOD_RALT=512,
KMOD_LMETA=1024,
KMOD_RMETA=2048,
KMOD_NUM=4096,
KMOD_CAPS=8192,
KMOD_MODE=16384,
KMOD_RESERVED=32768,
}
alias SDLMod.KMOD_NONE KMOD_NONE;
alias SDLMod.KMOD_LSHIFT KMOD_LSHIFT;
alias SDLMod.KMOD_RSHIFT KMOD_RSHIFT;
alias SDLMod.KMOD_LCTRL KMOD_LCTRL;
alias SDLMod.KMOD_RCTRL KMOD_RCTRL;
alias SDLMod.KMOD_LALT KMOD_LALT;
alias SDLMod.KMOD_RALT KMOD_RALT;
alias SDLMod.KMOD_LMETA KMOD_LMETA;
alias SDLMod.KMOD_RMETA KMOD_RMETA;
alias SDLMod.KMOD_NUM KMOD_NUM;
alias SDLMod.KMOD_CAPS KMOD_CAPS;
alias SDLMod.KMOD_MODE KMOD_MODE;
alias SDLMod.KMOD_RESERVED KMOD_RESERVED;
enum CDstatus {
CD_TRAYEMPTY=0,
CD_STOPPED=1,
CD_PLAYING=2,
CD_PAUSED=3,
CD_ERROR=-1,
}
alias CDstatus.CD_TRAYEMPTY CD_TRAYEMPTY;
alias CDstatus.CD_STOPPED CD_STOPPED;
alias CDstatus.CD_PLAYING CD_PLAYING;
alias CDstatus.CD_PAUSED CD_PAUSED;
alias CDstatus.CD_ERROR CD_ERROR;
enum SDL_audiostatus {
SDL_AUDIO_STOPPED=0,
SDL_AUDIO_PLAYING=1,
SDL_AUDIO_PAUSED=2,
}
alias SDL_audiostatus.SDL_AUDIO_STOPPED SDL_AUDIO_STOPPED;
alias SDL_audiostatus.SDL_AUDIO_PLAYING SDL_AUDIO_PLAYING;
alias SDL_audiostatus.SDL_AUDIO_PAUSED SDL_AUDIO_PAUSED;
alias void function(SDL_AudioCVT *, ushort) _BCD_func__1887;
alias void function(void *, char *, int) _BCD_func__1823;
alias int function(SDL_RWops *, int, int) _BCD_func__1825;
alias int function(SDL_RWops *, void *, int, int) _BCD_func__1826;
alias int function(SDL_RWops *, void *, int, int) _BCD_func__1827;
alias int function(SDL_RWops *) _BCD_func__1828;
alias void SDL_Thread;
alias void SDL_cond;
alias void SDL_sem;
alias void SDL_mutex;
enum SDL_errorcode {
SDL_ENOMEM=0,
SDL_EFREAD=1,
SDL_EFWRITE=2,
SDL_EFSEEK=3,
SDL_UNSUPPORTED=4,
SDL_LASTERROR=5,
}
alias SDL_errorcode.SDL_ENOMEM SDL_ENOMEM;
alias SDL_errorcode.SDL_EFREAD SDL_EFREAD;
alias SDL_errorcode.SDL_EFWRITE SDL_EFWRITE;
alias SDL_errorcode.SDL_EFSEEK SDL_EFSEEK;
alias SDL_errorcode.SDL_UNSUPPORTED SDL_UNSUPPORTED;
alias SDL_errorcode.SDL_LASTERROR SDL_LASTERROR;
alias int [1] SDL_dummy_enum;
enum SDL_DUMMY_ENUM {
DUMMY_ENUM_VALUE=0,
}
alias SDL_DUMMY_ENUM.DUMMY_ENUM_VALUE DUMMY_ENUM_VALUE;
alias int [1] SDL_dummy_sint64;
alias int [1] SDL_dummy_uint64;
alias int [1] SDL_dummy_sint32;
alias int [1] SDL_dummy_uint32;
alias int [1] SDL_dummy_sint16;
alias int [1] SDL_dummy_uint16;
alias int [1] SDL_dummy_sint8;
alias int [1] SDL_dummy_uint8;
alias ulong Uint64;
alias long Sint64;
alias int Sint32;
alias char Sint8;
enum SDL_bool {
SDL_FALSE=0,
SDL_TRUE=1,
}
alias SDL_bool.SDL_FALSE SDL_FALSE;
alias SDL_bool.SDL_TRUE SDL_TRUE;
extern (C) void SDL_Quit();
extern (C) uint SDL_WasInit(uint);
extern (C) void SDL_QuitSubSystem(uint);
extern (C) int SDL_InitSubSystem(uint);
extern (C) int SDL_Init(uint);
extern (C) SDL_version * SDL_Linked_Version();
extern (C) int SDL_RemoveTimer(void *);
extern (C) void * SDL_AddTimer(uint, _BCD_func__1055, void *);
extern (C) int SDL_SetTimer(uint, _BCD_func__1056);
extern (C) void SDL_Delay(uint);
extern (C) uint SDL_GetTicks();
extern (C) void SDL_UnloadObject(void *);
extern (C) void * SDL_LoadFunction(void *, char *);
extern (C) void * SDL_LoadObject(char *);
extern (C) char SDL_EventState(char, int);
extern (C) _BCD_func__1058 SDL_GetEventFilter();
extern (C) void SDL_SetEventFilter(_BCD_func__1058);
extern (C) int SDL_PushEvent(SDL_Event *);
extern (C) int SDL_WaitEvent(SDL_Event *);
extern (C) int SDL_PollEvent(SDL_Event *);
extern (C) int SDL_PeepEvents(SDL_Event *, int, int, uint);
extern (C) void SDL_PumpEvents();
extern (C) void SDL_JoystickClose(void *);
extern (C) char SDL_JoystickGetButton(void *, int);
extern (C) int SDL_JoystickGetBall(void *, int, int *, int *);
extern (C) char SDL_JoystickGetHat(void *, int);
extern (C) short SDL_JoystickGetAxis(void *, int);
extern (C) int SDL_JoystickEventState(int);
extern (C) void SDL_JoystickUpdate();
extern (C) int SDL_JoystickNumButtons(void *);
extern (C) int SDL_JoystickNumHats(void *);
extern (C) int SDL_JoystickNumBalls(void *);
extern (C) int SDL_JoystickNumAxes(void *);
extern (C) int SDL_JoystickIndex(void *);
extern (C) int SDL_JoystickOpened(int);
extern (C) void * SDL_JoystickOpen(int);
extern (C) char * SDL_JoystickName(int);
extern (C) int SDL_NumJoysticks();
extern (C) int SDL_ShowCursor(int);
extern (C) void SDL_FreeCursor(SDL_Cursor *);
extern (C) SDL_Cursor * SDL_GetCursor();
extern (C) void SDL_SetCursor(SDL_Cursor *);
extern (C) SDL_Cursor * SDL_CreateCursor(char *, char *, int, int, int, int);
extern (C) void SDL_WarpMouse(ushort, ushort);
extern (C) char SDL_GetRelativeMouseState(int *, int *);
extern (C) char SDL_GetMouseState(int *, int *);
extern (C) int SDL_SoftStretch(SDL_Surface *, SDL_Rect *, SDL_Surface *, SDL_Rect *);
extern (C) int SDL_WM_GrabInput(int);
extern (C) int SDL_WM_ToggleFullScreen(SDL_Surface *);
extern (C) int SDL_WM_IconifyWindow();
extern (C) void SDL_WM_SetIcon(SDL_Surface *, char *);
extern (C) void SDL_WM_GetCaption(char * *, char * *);
extern (C) void SDL_WM_SetCaption(char *, char *);
extern (C) void SDL_GL_Unlock();
extern (C) void SDL_GL_Lock();
extern (C) void SDL_GL_UpdateRects(int, SDL_Rect *);
extern (C) void SDL_GL_SwapBuffers();
extern (C) int SDL_GL_GetAttribute(int, int *);
extern (C) int SDL_GL_SetAttribute(int, int);
extern (C) void * SDL_GL_GetProcAddress(char *);
extern (C) int SDL_GL_LoadLibrary(char *);
extern (C) void SDL_FreeYUVOverlay(SDL_Overlay *);
extern (C) int SDL_DisplayYUVOverlay(SDL_Overlay *, SDL_Rect *);
extern (C) void SDL_UnlockYUVOverlay(SDL_Overlay *);
extern (C) int SDL_LockYUVOverlay(SDL_Overlay *);
extern (C) SDL_Overlay * SDL_CreateYUVOverlay(int, int, uint, SDL_Surface *);
extern (C) SDL_Surface * SDL_DisplayFormatAlpha(SDL_Surface *);
extern (C) SDL_Surface * SDL_DisplayFormat(SDL_Surface *);
extern (C) int SDL_FillRect(SDL_Surface *, SDL_Rect *, uint);
extern (C) int SDL_LowerBlit(SDL_Surface *, SDL_Rect *, SDL_Surface *, SDL_Rect *);
extern (C) int SDL_UpperBlit(SDL_Surface *, SDL_Rect *, SDL_Surface *, SDL_Rect *);
extern (C) SDL_Surface * SDL_ConvertSurface(SDL_Surface *, SDL_PixelFormat *, uint);
extern (C) void SDL_GetClipRect(SDL_Surface *, SDL_Rect *);
extern (C) int SDL_SetClipRect(SDL_Surface *, SDL_Rect *);
extern (C) int SDL_SetAlpha(SDL_Surface *, uint, char);
extern (C) int SDL_SetColorKey(SDL_Surface *, uint, uint);
extern (C) int SDL_SaveBMP_RW(SDL_Surface *, SDL_RWops *, int);
extern (C) SDL_Surface * SDL_LoadBMP_RW(SDL_RWops *, int);
extern (C) void SDL_UnlockSurface(SDL_Surface *);
extern (C) int SDL_LockSurface(SDL_Surface *);
extern (C) void SDL_FreeSurface(SDL_Surface *);
extern (C) SDL_Surface * SDL_CreateRGBSurfaceFrom(void *, int, int, int, int, uint, uint, uint, uint);
extern (C) SDL_Surface * SDL_CreateRGBSurface(uint, int, int, int, uint, uint, uint, uint);
extern (C) void SDL_GetRGBA(uint, SDL_PixelFormat *, char *, char *, char *, char *);
extern (C) void SDL_GetRGB(uint, SDL_PixelFormat *, char *, char *, char *);
extern (C) uint SDL_MapRGBA(SDL_PixelFormat *, char, char, char, char);
extern (C) uint SDL_MapRGB(SDL_PixelFormat *, char, char, char);
extern (C) int SDL_SetPalette(SDL_Surface *, int, SDL_Color *, int, int);
extern (C) int SDL_SetColors(SDL_Surface *, SDL_Color *, int, int);
extern (C) int SDL_GetGammaRamp(ushort *, ushort *, ushort *);
extern (C) int SDL_SetGammaRamp(ushort *, ushort *, ushort *);
extern (C) int SDL_SetGamma(float, float, float);
extern (C) int SDL_Flip(SDL_Surface *);
extern (C) void SDL_UpdateRect(SDL_Surface *, int, int, uint, uint);
extern (C) void SDL_UpdateRects(SDL_Surface *, int, SDL_Rect *);
extern (C) SDL_Surface * SDL_SetVideoMode(int, int, int, uint);
extern (C) SDL_Rect * * SDL_ListModes(SDL_PixelFormat *, uint);
extern (C) int SDL_VideoModeOK(int, int, int, uint);
extern (C) SDL_VideoInfo * SDL_GetVideoInfo();
extern (C) SDL_Surface * SDL_GetVideoSurface();
extern (C) char * SDL_VideoDriverName(char *, int);
extern (C) void SDL_VideoQuit();
extern (C) int SDL_VideoInit(char *, uint);
extern (C) char * SDL_GetKeyName(int);
extern (C) void SDL_SetModState(int);
extern (C) int SDL_GetModState();
extern (C) char * SDL_GetKeyState(int *);
extern (C) void SDL_GetKeyRepeat(int *, int *);
extern (C) int SDL_EnableKeyRepeat(int, int);
extern (C) int SDL_EnableUNICODE(int);
extern (C) char SDL_GetAppState();
extern (C) int SDL_HasAltiVec();
extern (C) int SDL_HasSSE2();
extern (C) int SDL_HasSSE();
extern (C) int SDL_Has3DNowExt();
extern (C) int SDL_Has3DNow();
extern (C) int SDL_HasMMXExt();
extern (C) int SDL_HasMMX();
extern (C) int SDL_HasRDTSC();
extern (C) void SDL_CDClose(SDL_CD *);
extern (C) int SDL_CDEject(SDL_CD *);
extern (C) int SDL_CDStop(SDL_CD *);
extern (C) int SDL_CDResume(SDL_CD *);
extern (C) int SDL_CDPause(SDL_CD *);
extern (C) int SDL_CDPlay(SDL_CD *, int, int);
extern (C) int SDL_CDPlayTracks(SDL_CD *, int, int, int, int);
extern (C) int SDL_CDStatus(SDL_CD *);
extern (C) SDL_CD * SDL_CDOpen(int);
extern (C) char * SDL_CDName(int);
extern (C) int SDL_CDNumDrives();
extern (C) void SDL_CloseAudio();
extern (C) void SDL_UnlockAudio();
extern (C) void SDL_LockAudio();
extern (C) void SDL_MixAudio(char *, char *, uint, int);
extern (C) int SDL_ConvertAudio(SDL_AudioCVT *);
extern (C) int SDL_BuildAudioCVT(SDL_AudioCVT *, ushort, char, int, ushort, char, int);
extern (C) void SDL_FreeWAV(char *);
extern (C) SDL_AudioSpec * SDL_LoadWAV_RW(SDL_RWops *, int, SDL_AudioSpec *, char * *, uint *);
extern (C) void SDL_PauseAudio(int);
extern (C) int SDL_GetAudioStatus();
extern (C) int SDL_OpenAudio(SDL_AudioSpec *, SDL_AudioSpec *);
extern (C) char * SDL_AudioDriverName(char *, int);
extern (C) void SDL_AudioQuit();
extern (C) int SDL_AudioInit(char *);
extern (C) int SDL_WriteBE64(SDL_RWops *, ulong);
extern (C) int SDL_WriteLE64(SDL_RWops *, ulong);
extern (C) int SDL_WriteBE32(SDL_RWops *, uint);
extern (C) int SDL_WriteLE32(SDL_RWops *, uint);
extern (C) int SDL_WriteBE16(SDL_RWops *, ushort);
extern (C) int SDL_WriteLE16(SDL_RWops *, ushort);
extern (C) ulong SDL_ReadBE64(SDL_RWops *);
extern (C) ulong SDL_ReadLE64(SDL_RWops *);
extern (C) uint SDL_ReadBE32(SDL_RWops *);
extern (C) uint SDL_ReadLE32(SDL_RWops *);
extern (C) ushort SDL_ReadBE16(SDL_RWops *);
extern (C) ushort SDL_ReadLE16(SDL_RWops *);
extern (C) void SDL_FreeRW(SDL_RWops *);
extern (C) SDL_RWops * SDL_AllocRW();
extern (C) SDL_RWops * SDL_RWFromConstMem(void *, int);
extern (C) SDL_RWops * SDL_RWFromMem(void *, int);
extern (C) SDL_RWops * SDL_RWFromFP(FILE *, int);
extern (C) SDL_RWops * SDL_RWFromFile(char *, char *);
extern (C) void SDL_KillThread(void *);
extern (C) void SDL_WaitThread(void *, int *);
extern (C) uint SDL_GetThreadID(void *);
extern (C) uint SDL_ThreadID();
alias int function(void *) _BCD_func__697;
extern (C) void * SDL_CreateThread(_BCD_func__697, void *);
extern (C) int SDL_CondWaitTimeout(void *, void *, uint);
extern (C) int SDL_CondWait(void *, void *);
extern (C) int SDL_CondBroadcast(void *);
extern (C) int SDL_CondSignal(void *);
extern (C) void SDL_DestroyCond(void *);
extern (C) void * SDL_CreateCond();
extern (C) uint SDL_SemValue(void *);
extern (C) int SDL_SemPost(void *);
extern (C) int SDL_SemWaitTimeout(void *, uint);
extern (C) int SDL_SemTryWait(void *);
extern (C) int SDL_SemWait(void *);
extern (C) void SDL_DestroySemaphore(void *);
extern (C) void * SDL_CreateSemaphore(uint);
extern (C) void SDL_DestroyMutex(void *);
extern (C) int SDL_mutexV(void *);
extern (C) int SDL_mutexP(void *);
extern (C) void * SDL_CreateMutex();
extern (C) ulong SDL_Swap64(ulong);
extern (C) uint SDL_Swap32(uint);
extern (C) ushort SDL_Swap16(ushort);
extern (C) void SDL_Error(int);
extern (C) void SDL_ClearError();
extern (C) char * SDL_GetError();
extern (C) void SDL_SetError(char *, ...);
extern (C) char * SDL_iconv_string(char *, char *, char *, uint);
extern (C) uint SDL_iconv(void *, char * *, uint *, char * *, uint *);
extern (C) char * SDL_ulltoa(ulong, char *, int);
extern (C) char * SDL_lltoa(long, char *, int);
extern (C) char * SDL_ultoa(uint, char *, int);
extern (C) char * SDL_ltoa(int, char *, int);
extern (C) char * SDL_strlwr(char *);
extern (C) char * SDL_strupr(char *);
extern (C) char * SDL_strrev(char *);
extern (C) uint SDL_strlcat(char *, char *, uint);
extern (C) uint SDL_strlcpy(char *, char *, uint);
alias int function(void *, void *) _BCD_func__1355;
alias int function(void *, long *, int) _BCD_func__699;
alias int function(void *, char *, uint) _BCD_func__701;
alias int function(void *, char *, uint) _BCD_func__703;
alias void function(void *) _BCD_func__1460;
alias int function(void * *, char *) _BCD_func__1461;
alias int function(char *, char * * *, uint *) _BCD_func__1462;
alias int function(void *, char *, char *, char *, char *) _BCD_func__1463;
struct SDL_version {
char major;
char minor;
char patch;
}
union SDL_Event {
char type;
SDL_ActiveEvent active;
SDL_KeyboardEvent key;
SDL_MouseMotionEvent motion;
SDL_MouseButtonEvent button;
SDL_JoyAxisEvent jaxis;
SDL_JoyBallEvent jball;
SDL_JoyHatEvent jhat;
SDL_JoyButtonEvent jbutton;
SDL_ResizeEvent resize;
SDL_ExposeEvent expose;
SDL_QuitEvent quit;
SDL_UserEvent user;
SDL_SysWMEvent syswm;
}
struct SDL_SysWMEvent {
char type;
void * msg;
}
struct SDL_UserEvent {
char type;
int code;
void * data1;
void * data2;
}
struct SDL_QuitEvent {
char type;
}
struct SDL_ExposeEvent {
char type;
}
struct SDL_ResizeEvent {
char type;
int w;
int h;
}
struct SDL_JoyButtonEvent {
char type;
char which;
char button;
char state;
}
struct SDL_JoyHatEvent {
char type;
char which;
char hat;
char value;
}
struct SDL_JoyBallEvent {
char type;
char which;
char ball;
short xrel;
short yrel;
}
struct SDL_JoyAxisEvent {
char type;
char which;
char axis;
short value;
}
struct SDL_MouseButtonEvent {
char type;
char which;
char button;
char state;
ushort x;
ushort y;
}
struct SDL_MouseMotionEvent {
char type;
char which;
char state;
ushort x;
ushort y;
short xrel;
short yrel;
}
struct SDL_KeyboardEvent {
char type;
char which;
char state;
SDL_keysym keysym;
}
struct SDL_ActiveEvent {
char type;
char gain;
char state;
}
struct SDL_Cursor {
SDL_Rect area;
short hot_x;
short hot_y;
char * data;
char * mask;
char * [2] save;
void * wm_cursor;
}
struct SDL_Overlay {
uint format;
int w;
int h;
int planes;
ushort * pitches;
char * * pixels;
void * hwfuncs;
void * hwdata;
uint hw_overlay;
uint UnusedBits;
}
struct SDL_VideoInfo {
uint hw_available;
uint wm_available;
uint UnusedBits1;
uint UnusedBits2;
uint blit_hw;
uint blit_hw_CC;
uint blit_hw_A;
uint blit_sw;
uint blit_sw_CC;
uint blit_sw_A;
uint blit_fill;
uint UnusedBits3;
uint video_mem;
SDL_PixelFormat * vfmt;
int current_w;
int current_h;
}
struct SDL_Surface {
uint flags;
SDL_PixelFormat * format;
int w;
int h;
ushort pitch;
void * pixels;
int offset;
void * hwdata;
SDL_Rect clip_rect;
uint unused1;
uint locked;
void * map;
uint format_version;
int refcount;
}
struct SDL_PixelFormat {
SDL_Palette * palette;
char BitsPerPixel;
char BytesPerPixel;
char Rloss;
char Gloss;
char Bloss;
char Aloss;
char Rshift;
char Gshift;
char Bshift;
char Ashift;
uint Rmask;
uint Gmask;
uint Bmask;
uint Amask;
uint colorkey;
char alpha;
}
struct SDL_Palette {
int ncolors;
SDL_Color * colors;
}
struct SDL_Color {
char r;
char g;
char b;
char unused;
}
struct SDL_Rect {
short x;
short y;
ushort w;
ushort h;
}
struct SDL_keysym {
char scancode;
int sym;
int mod;
ushort unicode;
}
struct SDL_CDtrack {
char id;
char type;
ushort unused;
uint length;
uint offset;
}
struct SDL_CD {
int id;
int status;
int numtracks;
int cur_track;
int cur_frame;
SDL_CDtrack [100] track;
}
struct SDL_AudioCVT {
int needed;
ushort src_format;
ushort dst_format;
double rate_incr;
char * buf;
int len;
int len_cvt;
int len_mult;
double len_ratio;
_BCD_func__1887 [10] filters;
int filter_index;
}
struct SDL_AudioSpec {
int freq;
ushort format;
char channels;
char silence;
ushort samples;
ushort padding;
uint size;
_BCD_func__1823 callback;
void * userdata;
}
struct N9SDL_RWops4__354__36E {
int autoclose;
FILE * fp;
}
struct N9SDL_RWops4__354__37E {
char * base;
char * here;
char * stop;
}
struct N9SDL_RWops4__354__38E {
void * data1;
}
union N9SDL_RWops4__35E {
N9SDL_RWops4__354__36E stdio;
N9SDL_RWops4__354__37E mem;
N9SDL_RWops4__354__38E unknown;
}
struct SDL_RWops {
_BCD_func__1825 seek;
_BCD_func__1826 read;
_BCD_func__1827 write;
_BCD_func__1828 close;
uint type;
N9SDL_RWops4__35E hidden;
}
