/* THIS FILE GENERATED BY bcd.gen */
#include <stdlib.h>
#include <string.h>
#include "../bind.h"
#include "fltk/WizardGroup.h"
extern "C" {
typedef unsigned char _BCD__8_uchar;
void _BCD_delete_N4fltk11WizardGroupE(fltk::WizardGroup *This) {
delete This;
}
fltk::WizardGroup *_BCD_new__ZN4fltk11WizardGroupC1EiiiiPKcb(int x, int y, int w, int h, char const * l, bool begin) {
return new fltk::WizardGroup(x, y, w, h, l, begin);
}
void _BCD__ZN4fltk11WizardGroup4drawEv(fltk::WizardGroup *This) {
(This->draw());
}
void _BCD__ZN4fltk11WizardGroup4nextEv(fltk::WizardGroup *This) {
(This->next());
}
void _BCD__ZN4fltk11WizardGroup4prevEv(fltk::WizardGroup *This) {
(This->prev());
}
void _BCD__ZN4fltk11WizardGroup5valueEPNS_6WidgetE(fltk::WizardGroup *This, fltk::Widget * _0) {
(This->value(_0));
}
fltk::Widget * _BCD__ZNK4fltk11WizardGroup5valueEv(fltk::WizardGroup *This) {
return (This->value());
}
int _BCD_R__ZN4fltk11WizardGroup4drawEv__WizardGroup_R_CHECK(void *);
void _BCD_R__ZN4fltk11WizardGroup4drawEv__WizardGroup_R(void *);
}
class WizardGroup_R : fltk::WizardGroup {
public:
void *__D_data;
WizardGroup_R(int x, int y, int w, int h, char const * l, bool begin) : fltk::WizardGroup(x, y, w, h, l, begin) {}
void draw() {
if (_BCD_R__ZN4fltk11WizardGroup4drawEv__WizardGroup_R_CHECK(__D_data))
_BCD_R__ZN4fltk11WizardGroup4drawEv__WizardGroup_R(__D_data);
else
fltk::WizardGroup::draw();
}
};
extern "C" {
WizardGroup_R *_BCD_new__ZN4fltk11WizardGroupC1EiiiiPKcb_R(int x, int y, int w, int h, char const * l, bool begin) {
return new WizardGroup_R(x, y, w, h, l, begin);
}
void _BCD_delete_N4fltk11WizardGroupE__WizardGroup_R(WizardGroup_R *This) {
delete This;
}
void _BCD_RI_N4fltk11WizardGroupE(WizardGroup_R *cd, void *dd) {
cd->__D_data = dd;
}
typedef void (*_BCD_func__154)(fltk::Widget *, long int);
typedef _BCD_func__154 _BCD__155_Callback1;
typedef void (*_BCD_func__156)(fltk::Widget *);
typedef _BCD_func__156 _BCD__157_Callback0;
typedef void (*_BCD_func__160)(fltk::Widget *, void *);
typedef _BCD_func__160 _BCD__161_Callback;
typedef _BCD__161_Callback _BCD__159_Callback_p;
typedef bool (*_BCD_func__315)();
typedef _BCD_func__315 _BCD__172_Theme;
typedef fltk::Symbol * _BCD__225_Box;
typedef unsigned int _BCD__242_Color;
typedef int _BCD__245_Flags;
typedef _BCD__245_Flags _BCD__244_Align;
}
