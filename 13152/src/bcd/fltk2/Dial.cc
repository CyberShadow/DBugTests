/* THIS FILE GENERATED BY bcd.gen */
#include <stdlib.h>
#include <string.h>
#include "../bind.h"
#include "fltk/Dial.h"
extern "C" {
typedef unsigned char _BCD__8_uchar;
void _BCD_delete_N4fltk4DialE(fltk::Dial *This) {
delete This;
}
void _BCD_set__ZN4fltk4Dial13default_styleE(fltk::Dial *This, fltk::NamedStyle * x) {
This->default_style = x;
}
fltk::NamedStyle * _BCD_get__ZN4fltk4Dial13default_styleE(fltk::Dial *This) {
return This->default_style;
}
int _BCD__ZN4fltk4Dial6handleEi(fltk::Dial *This, int _0) {
return (This->handle(_0));
}
fltk::Dial *_BCD_new__ZN4fltk4DialC1EiiiiPKc(int x, int y, int w, int h, char const * l) {
return new fltk::Dial(x, y, w, h, l);
}
short int _BCD__ZNK4fltk4Dial6angle1Ev(fltk::Dial *This) {
return (This->angle1());
}
void _BCD__ZN4fltk4Dial6angle1Es(fltk::Dial *This, short int a) {
(This->angle1(a));
}
short int _BCD__ZNK4fltk4Dial6angle2Ev(fltk::Dial *This) {
return (This->angle2());
}
void _BCD__ZN4fltk4Dial6angle2Es(fltk::Dial *This, short int a) {
(This->angle2(a));
}
void _BCD__ZN4fltk4Dial6anglesEss(fltk::Dial *This, short int a, short int b) {
(This->angles(a, b));
}
int _BCD_R__ZN4fltk4Dial6handleEi__Dial_R_CHECK(void *);
int _BCD_R__ZN4fltk4Dial6handleEi__Dial_R(void *, int _0);
}
class Dial_R : fltk::Dial {
public:
void *__D_data;
int handle(int _0) {
if (_BCD_R__ZN4fltk4Dial6handleEi__Dial_R_CHECK(__D_data))
return _BCD_R__ZN4fltk4Dial6handleEi__Dial_R(__D_data, _0);
else
return fltk::Dial::handle(_0);
}
Dial_R(int x, int y, int w, int h, char const * l) : fltk::Dial(x, y, w, h, l) {}
};
extern "C" {
Dial_R *_BCD_new__ZN4fltk4DialC1EiiiiPKc_R(int x, int y, int w, int h, char const * l) {
return new Dial_R(x, y, w, h, l);
}
void _BCD_delete_N4fltk4DialE__Dial_R(Dial_R *This) {
delete This;
}
void _BCD_RI_N4fltk4DialE(Dial_R *cd, void *dd) {
cd->__D_data = dd;
}
typedef void (*_BCD_func__154)(fltk::Widget *, long int);
typedef _BCD_func__154 _BCD__155_Callback1;
typedef void (*_BCD_func__156)(fltk::Widget *);
typedef _BCD_func__156 _BCD__157_Callback0;
typedef void (*_BCD_func__160)(fltk::Widget *, void *);
typedef _BCD_func__160 _BCD__161_Callback;
typedef _BCD__161_Callback _BCD__159_Callback_p;
typedef bool (*_BCD_func__297)();
typedef _BCD_func__297 _BCD__172_Theme;
typedef fltk::Symbol * _BCD__225_Box;
typedef unsigned int _BCD__242_Color;
typedef int _BCD__245_Flags;
typedef _BCD__245_Flags _BCD__244_Align;
}
