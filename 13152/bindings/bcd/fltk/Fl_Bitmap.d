/* THIS FILE GENERATED BY bcd.gen */
module bcd.fltk.Fl_Bitmap;
public import bcd.bind;
public import bcd.fltk.Fl_Image;
public import bcd.fltk.Enumerations;
extern (C) void _BCD_delete_9Fl_Bitmap(void *);
extern (C) void _BCD_set__ZN9Fl_Bitmap5arrayE(void *, char *);
extern (C) char * _BCD_get__ZN9Fl_Bitmap5arrayE(void *);
extern (C) void _BCD_set__ZN9Fl_Bitmap11alloc_arrayE(void *, int);
extern (C) int _BCD_get__ZN9Fl_Bitmap11alloc_arrayE(void *);
extern (C) void _BCD_set__ZN9Fl_Bitmap2idE(void *, uint);
extern (C) uint _BCD_get__ZN9Fl_Bitmap2idE(void *);
extern (C) void *_BCD_new__ZN9Fl_BitmapC1EPKhii(char *, int, int);
extern (C) Fl_Image * _BCD__ZN9Fl_Bitmap4copyEii(void *This, int, int);
extern (C) Fl_Image * _BCD__ZN9Fl_Bitmap4copyEv(void *This);
extern (C) void _BCD__ZN9Fl_Bitmap4drawEiiiiii(void *This, int, int, int, int, int, int);
extern (C) void _BCD__ZN9Fl_Bitmap4drawEii(void *This, int, int);
extern (C) void _BCD__ZN9Fl_Bitmap5labelEP9Fl_Widget(void *This, void *);
extern (C) void _BCD__ZN9Fl_Bitmap7uncacheEv(void *This);
extern (C) void _BCD_RI_9Fl_Bitmap(void *cd, void *dd);
extern (C) void _BCD_delete_9Fl_Bitmap__Fl_Bitmap_R(void *This);
extern (C) void *_BCD_new__ZN9Fl_BitmapC1EPKhii_R(char *, int, int);
extern (C) int _BCD_R__ZN9Fl_Bitmap4copyEii__Fl_Bitmap_R_CHECK(Fl_Bitmap_R x) {
union dp {
Fl_Image * delegate(int, int) d;
struct { void *o; void *f; }
}
dp d; d.d = &x.copy;
return cast(int) (d.f != &Fl_Bitmap.copy);
}
extern (C) Fl_Image * _BCD_R__ZN9Fl_Bitmap4copyEii__Fl_Bitmap_R(Fl_Bitmap_R __D_class, int W, int H) {
return __D_class.copy(W, H);
}
extern (C) int _BCD_R__ZN9Fl_Bitmap4drawEiiiiii__Fl_Bitmap_R_CHECK(Fl_Bitmap_R x) {
union dp {
void delegate(int, int, int, int, int, int) d;
struct { void *o; void *f; }
}
dp d; d.d = &x.draw;
return cast(int) (d.f != &Fl_Bitmap.draw);
}
extern (C) void _BCD_R__ZN9Fl_Bitmap4drawEiiiiii__Fl_Bitmap_R(Fl_Bitmap_R __D_class, int X, int Y, int W, int H, int cx, int cy) {
__D_class.draw(X, Y, W, H, cx, cy);
}
extern (C) int _BCD_R__ZN9Fl_Bitmap5labelEP9Fl_Widget__Fl_Bitmap_R_CHECK(Fl_Bitmap_R x) {
union dp {
void delegate(bcd.bind.BoundClass *) d;
struct { void *o; void *f; }
}
dp d; d.d = &x.label;
return cast(int) (d.f != &Fl_Bitmap.label);
}
extern (C) void _BCD_R__ZN9Fl_Bitmap5labelEP9Fl_Widget__Fl_Bitmap_R(Fl_Bitmap_R __D_class, void *w) {
__D_class.label(cast(bcd.bind.BoundClass *) new bcd.bind.BoundClass(cast(ifloat) 0, w));
}
extern (C) int _BCD_R__ZN9Fl_Bitmap7uncacheEv__Fl_Bitmap_R_CHECK(Fl_Bitmap_R x) {
union dp {
void delegate() d;
struct { void *o; void *f; }
}
dp d; d.d = &x.uncache;
return cast(int) (d.f != &Fl_Bitmap.uncache);
}
extern (C) void _BCD_R__ZN9Fl_Bitmap7uncacheEv__Fl_Bitmap_R(Fl_Bitmap_R __D_class, ) {
__D_class.uncache();
}
class Fl_Bitmap : Fl_Image {
this(ifloat ignore) {
super(ignore);
}
this(ifloat ignore, void *x) {
super(ignore);
__C_data = x;
__C_data_owned = false;
}
~this() {
if (__C_data && __C_data_owned) _BCD_delete_9Fl_Bitmap(__C_data);
__C_data = null;
}
void set_array(char * x) {
_BCD_set__ZN9Fl_Bitmap5arrayE(__C_data, x);
}
char * get_array() {
return _BCD_get__ZN9Fl_Bitmap5arrayE(__C_data);
}
void set_alloc_array(int x) {
_BCD_set__ZN9Fl_Bitmap11alloc_arrayE(__C_data, x);
}
int get_alloc_array() {
return _BCD_get__ZN9Fl_Bitmap11alloc_arrayE(__C_data);
}
void set_id(uint x) {
_BCD_set__ZN9Fl_Bitmap2idE(__C_data, x);
}
uint get_id() {
return _BCD_get__ZN9Fl_Bitmap2idE(__C_data);
}
this(char * bits, int W, int H) {
super(cast(ifloat) 0);
__C_data = _BCD_new__ZN9Fl_BitmapC1EPKhii(bits, W, H);
__C_data_owned = true;
}
Fl_Image * copy(int W, int H) {
return _BCD__ZN9Fl_Bitmap4copyEii(__C_data, W, H);
}
Fl_Image * copy() {
return _BCD__ZN9Fl_Bitmap4copyEv(__C_data);
}
void draw(int X, int Y, int W, int H, int cx, int cy) {
_BCD__ZN9Fl_Bitmap4drawEiiiiii(__C_data, X, Y, W, H, cx, cy);
}
void draw(int X, int Y) {
_BCD__ZN9Fl_Bitmap4drawEii(__C_data, X, Y);
}
void label(bcd.bind.BoundClass * w) {
_BCD__ZN9Fl_Bitmap5labelEP9Fl_Widget(__C_data, w.__C_data);
}
void uncache() {
_BCD__ZN9Fl_Bitmap7uncacheEv(__C_data);
}
}
class Fl_Bitmap_R : Fl_Bitmap {
~this() {
if (__C_data && __C_data_owned) _BCD_delete_9Fl_Bitmap__Fl_Bitmap_R(__C_data);
__C_data = null;
}
this(char * bits, int W, int H) {
super(cast(ifloat) 0);
__C_data = _BCD_new__ZN9Fl_BitmapC1EPKhii_R(bits, W, H);
__C_data_owned = true;
_BCD_RI_9Fl_Bitmap(__C_data, cast(void *) this);
}
}
