/* THIS FILE GENERATED BY bcd.gen */
#include <stdlib.h>
#include <string.h>
#include "../bind.h"
#include "FL/fl_draw.H"
extern "C" {
typedef void (*_BCD_func__286)(enum Fl_Color);
int _BCD__Z13fl_add_symbolPKcPFv8Fl_ColorEi(char const * name, _BCD_func__286 drawit, int scalable) {
return (fl_add_symbol(name, drawit, scalable));
}
int _BCD__Z14fl_draw_symbolPKciiii8Fl_Color(char const * label, int x, int y, int w, int h, enum Fl_Color _5) {
return (fl_draw_symbol(label, x, y, w, h, _5));
}
void _BCD__Z9fl_cursor9Fl_Cursor8Fl_ColorS0_(enum Fl_Cursor _0, enum Fl_Color _1, enum Fl_Color _2) {
(fl_cursor(_0, _1, _2));
}
void _BCD__Z16fl_overlay_clearv() {
(fl_overlay_clear());
}
void _BCD__Z15fl_overlay_rectiiii(int _0, int _1, int _2, int _3) {
(fl_overlay_rect(_0, _1, _2, _3));
}
char const * _BCD__Z17fl_shortcut_labeli(int _0) {
return (fl_shortcut_label(_0));
}
typedef void (*_BCD_func__287)(void *, int, int, int, int);
void _BCD__Z9fl_scrolliiiiiiPFvPviiiiES_(int X, int Y, int W, int H, int dx, int dy, _BCD_func__287 draw_area, void * data) {
(fl_scroll(X, Y, W, H, dx, dy, draw_area, data));
}
int _BCD__Z17fl_measure_pixmapPKPKcRiS3_(char const * const * data, int & w, int & h) {
return (fl_measure_pixmap(data, w, h));
}
int _BCD__Z14fl_draw_pixmapPKPKcii8Fl_Color(char const * const * data, int x, int y, enum Fl_Color _3) {
return (fl_draw_pixmap(data, x, y, _3));
}
typedef unsigned char _BCD__139_uchar;
_BCD__139_uchar * _BCD__Z13fl_read_imagePhiiiii(_BCD__139_uchar * p, int x, int y, int w, int h, int alpha) {
return (fl_read_image(p, x, y, w, h, alpha));
}
void _BCD__Z8fl_rectfiiiihhh(int x, int y, int w, int h, _BCD__139_uchar r, _BCD__139_uchar g, _BCD__139_uchar b) {
(fl_rectf(x, y, w, h, r, g, b));
}
typedef void (*_BCD_func__266)(void *, int, int, int, _BCD__139_uchar *);
typedef _BCD_func__266 _BCD__19_Fl_Draw_Image_Cb;
void _BCD__Z18fl_draw_image_monoPFvPviiiPhES_iiiii(_BCD__19_Fl_Draw_Image_Cb _0, void * _1, int _2, int _3, int _4, int _5, int delta) {
(fl_draw_image_mono(_0, _1, _2, _3, _4, _5, delta));
}
void _BCD__Z13fl_draw_imagePFvPviiiPhES_iiiii(_BCD__19_Fl_Draw_Image_Cb _0, void * _1, int _2, int _3, int _4, int _5, int delta) {
(fl_draw_image(_0, _1, _2, _3, _4, _5, delta));
}
void _BCD__Z18fl_draw_image_monoPKhiiiiii(_BCD__139_uchar const * _0, int _1, int _2, int _3, int _4, int delta, int ld) {
(fl_draw_image_mono(_0, _1, _2, _3, _4, delta, ld));
}
void _BCD__Z13fl_draw_imagePKhiiiiii(_BCD__139_uchar const * _0, int _1, int _2, int _3, int _4, int delta, int ldelta) {
(fl_draw_image(_0, _1, _2, _3, _4, delta, ldelta));
}
void _BCD__Z11fl_draw_box10Fl_Boxtypeiiii8Fl_Color(enum Fl_Boxtype _0, int x, int y, int w, int h, enum Fl_Color _5) {
(fl_draw_box(_0, x, y, w, h, _5));
}
void _BCD__Z9fl_frame2PKciiii(char const * s, int x, int y, int w, int h) {
(fl_frame2(s, x, y, w, h));
}
void _BCD__Z8fl_framePKciiii(char const * s, int x, int y, int w, int h) {
(fl_frame(s, x, y, w, h));
}
typedef void (*_BCD_func__291)(char const *, int, int, int);
void _BCD__Z7fl_drawPKciiii8Fl_AlignPFvS0_iiiEP8Fl_Imagei(char const * _0, int _1, int _2, int _3, int _4, enum Fl_Align _5, _BCD_func__291 callthis, Fl_Image * img, int draw_symbols) {
(fl_draw(_0, _1, _2, _3, _4, _5, callthis, img, draw_symbols));
}
void _BCD__Z7fl_drawPKciiii8Fl_AlignP8Fl_Imagei(char const * _0, int _1, int _2, int _3, int _4, enum Fl_Align _5, Fl_Image * img, int draw_symbols) {
(fl_draw(_0, _1, _2, _3, _4, _5, img, draw_symbols));
}
void _BCD__Z10fl_measurePKcRiS1_i(char const * _0, int & x, int & y, int draw_symbols) {
(fl_measure(_0, x, y, draw_symbols));
}
void _BCD__Z7fl_drawPKciii(char const * _0, int n, int x, int y) {
(fl_draw(_0, n, x, y));
}
void _BCD__Z7fl_drawPKcii(char const * _0, int x, int y) {
(fl_draw(_0, x, y));
}
double _BCD__Z8fl_widthh(_BCD__139_uchar _0) {
return (fl_width(_0));
}
double _BCD__Z8fl_widthPKci(char const * _0, int n) {
return (fl_width(_0, n));
}
double _BCD__Z8fl_widthPKc(char const * _0) {
return (fl_width(_0));
}
int _BCD__Z10fl_descentv() {
return (fl_descent());
}
int _BCD__Z9fl_heightii(int _0, int size) {
return (fl_height(_0, size));
}
int _BCD__Z9fl_heightv() {
return (fl_height());
}
int _BCD__Z7fl_sizev() {
return (fl_size());
}
int _BCD__Z7fl_fontv() {
return (fl_font());
}
void _BCD__Z7fl_fontii(int face, int size) {
(fl_font(face, size));
}
void _BCD__Z21fl_transformed_vertexdd(double x, double y) {
(fl_transformed_vertex(x, y));
}
double _BCD__Z15fl_transform_dydd(double x, double y) {
return (fl_transform_dy(x, y));
}
double _BCD__Z15fl_transform_dxdd(double x, double y) {
return (fl_transform_dx(x, y));
}
double _BCD__Z14fl_transform_ydd(double x, double y) {
return (fl_transform_y(x, y));
}
double _BCD__Z14fl_transform_xdd(double x, double y) {
return (fl_transform_x(x, y));
}
void _BCD__Z22fl_end_complex_polygonv() {
(fl_end_complex_polygon());
}
void _BCD__Z6fl_gapv() {
(fl_gap());
}
void _BCD__Z24fl_begin_complex_polygonv() {
(fl_begin_complex_polygon());
}
void _BCD__Z14fl_end_polygonv() {
(fl_end_polygon());
}
void _BCD__Z11fl_end_loopv() {
(fl_end_loop());
}
void _BCD__Z11fl_end_linev() {
(fl_end_line());
}
void _BCD__Z13fl_end_pointsv() {
(fl_end_points());
}
void _BCD__Z9fl_circleddd(double x, double y, double r) {
(fl_circle(x, y, r));
}
void _BCD__Z6fl_arcddddd(double x, double y, double r, double start, double a) {
(fl_arc(x, y, r, start, a));
}
void _BCD__Z8fl_curvedddddddd(double _0, double _1, double _2, double _3, double _4, double _5, double _6, double _7) {
(fl_curve(_0, _1, _2, _3, _4, _5, _6, _7));
}
void _BCD__Z9fl_vertexdd(double x, double y) {
(fl_vertex(x, y));
}
void _BCD__Z16fl_begin_polygonv() {
(fl_begin_polygon());
}
void _BCD__Z13fl_begin_loopv() {
(fl_begin_loop());
}
void _BCD__Z13fl_begin_linev() {
(fl_begin_line());
}
void _BCD__Z15fl_begin_pointsv() {
(fl_begin_points());
}
void _BCD__Z14fl_mult_matrixdddddd(double a, double b, double c, double d, double x, double y) {
(fl_mult_matrix(a, b, c, d, x, y));
}
void _BCD__Z9fl_rotated(double d) {
(fl_rotate(d));
}
void _BCD__Z12fl_translatedd(double x, double y) {
(fl_translate(x, y));
}
void _BCD__Z8fl_scaled(double x) {
(fl_scale(x));
}
void _BCD__Z8fl_scaledd(double x, double y) {
(fl_scale(x, y));
}
void _BCD__Z13fl_pop_matrixv() {
(fl_pop_matrix());
}
void _BCD__Z14fl_push_matrixv() {
(fl_push_matrix());
}
void _BCD__Z8fl_chordiiiidd(int x, int y, int w, int h, double a1, double a2) {
(fl_chord(x, y, w, h, a1, a2));
}
void _BCD__Z6fl_pieiiiidd(int x, int y, int w, int h, double a1, double a2) {
(fl_pie(x, y, w, h, a1, a2));
}
void _BCD__Z6fl_arciiiidd(int x, int y, int w, int h, double a1, double a2) {
(fl_arc(x, y, w, h, a1, a2));
}
void _BCD__Z9fl_yxlineiiiii(int x, int y, int y1, int x2, int y3) {
(fl_yxline(x, y, y1, x2, y3));
}
void _BCD__Z9fl_yxlineiiii(int x, int y, int y1, int x2) {
(fl_yxline(x, y, y1, x2));
}
void _BCD__Z9fl_yxlineiii(int x, int y, int y1) {
(fl_yxline(x, y, y1));
}
void _BCD__Z9fl_xylineiiiii(int x, int y, int x1, int y2, int x3) {
(fl_xyline(x, y, x1, y2, x3));
}
void _BCD__Z9fl_xylineiiii(int x, int y, int x1, int y2) {
(fl_xyline(x, y, x1, y2));
}
void _BCD__Z9fl_xylineiii(int x, int y, int x1) {
(fl_xyline(x, y, x1));
}
void _BCD__Z10fl_polygoniiiiiiii(int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7) {
(fl_polygon(_0, _1, _2, _3, _4, _5, _6, _7));
}
void _BCD__Z10fl_polygoniiiiii(int _0, int _1, int _2, int _3, int _4, int _5) {
(fl_polygon(_0, _1, _2, _3, _4, _5));
}
void _BCD__Z7fl_loopiiiiiiii(int _0, int _1, int _2, int _3, int _4, int _5, int _6, int _7) {
(fl_loop(_0, _1, _2, _3, _4, _5, _6, _7));
}
void _BCD__Z7fl_loopiiiiii(int _0, int _1, int _2, int _3, int _4, int _5) {
(fl_loop(_0, _1, _2, _3, _4, _5));
}
void _BCD__Z7fl_lineiiiiii(int _0, int _1, int _2, int _3, int _4, int _5) {
(fl_line(_0, _1, _2, _3, _4, _5));
}
void _BCD__Z7fl_lineiiii(int _0, int _1, int _2, int _3) {
(fl_line(_0, _1, _2, _3));
}
void _BCD__Z8fl_rectfiiii8Fl_Color(int x, int y, int w, int h, enum Fl_Color c) {
(fl_rectf(x, y, w, h, c));
}
void _BCD__Z8fl_rectfiiii(int x, int y, int w, int h) {
(fl_rectf(x, y, w, h));
}
void _BCD__Z7fl_rectiiii8Fl_Color(int x, int y, int w, int h, enum Fl_Color c) {
(fl_rect(x, y, w, h, c));
}
void _BCD__Z7fl_rectiiii(int x, int y, int w, int h) {
(fl_rect(x, y, w, h));
}
void _BCD__Z13fl_line_styleiiPc(int style, int width, char * dashes) {
(fl_line_style(style, width, dashes));
}
void _BCD__Z8fl_pointii(int x, int y) {
(fl_point(x, y));
}
int _BCD__Z11fl_clip_boxiiiiRiS_S_S_(int _0, int _1, int _2, int _3, int & x, int & y, int & w, int & h) {
return (fl_clip_box(_0, _1, _2, _3, x, y, w, h));
}
int _BCD__Z14fl_not_clippediiii(int x, int y, int w, int h) {
return (fl_not_clipped(x, y, w, h));
}
void _BCD__Z11fl_pop_clipv() {
(fl_pop_clip());
}
void _BCD__Z15fl_push_no_clipv() {
(fl_push_no_clip());
}
void _BCD__Z12fl_push_clipiiii(int x, int y, int w, int h) {
(fl_push_clip(x, y, w, h));
}
enum Fl_Color _BCD__Z8fl_colorv() {
return (fl_color());
}
void _BCD__Z8fl_colorhhh(_BCD__139_uchar _0, _BCD__139_uchar _1, _BCD__139_uchar _2) {
(fl_color(_0, _1, _2));
}
void _BCD__Z8fl_colori(int c) {
(fl_color(c));
}
typedef long unsigned int _BCD__137_ulong;
}
