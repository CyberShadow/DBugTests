/* THIS FILE GENERATED BY bcd.gen */
#include <stdlib.h>
#include <string.h>
#include "../bind.h"
#include "fltk/Valuator.h"
extern "C" {
typedef unsigned char _BCD__7_uchar;
void _BCD_delete_N4fltk8ValuatorE(fltk::Valuator *This) {
delete This;
}
double _BCD__ZNK4fltk8Valuator5valueEv(fltk::Valuator *This) {
return (This->value());
}
bool _BCD__ZN4fltk8Valuator5valueEd(fltk::Valuator *This, double _0) {
return (This->value(_0));
}
double _BCD__ZNK4fltk8Valuator7minimumEv(fltk::Valuator *This) {
return (This->minimum());
}
void _BCD__ZN4fltk8Valuator7minimumEd(fltk::Valuator *This, double a) {
(This->minimum(a));
}
double _BCD__ZNK4fltk8Valuator7maximumEv(fltk::Valuator *This) {
return (This->maximum());
}
void _BCD__ZN4fltk8Valuator7maximumEd(fltk::Valuator *This, double a) {
(This->maximum(a));
}
void _BCD__ZN4fltk8Valuator5rangeEdd(fltk::Valuator *This, double a, double b) {
(This->range(a, b));
}
double _BCD__ZNK4fltk8Valuator4stepEv(fltk::Valuator *This) {
return (This->step());
}
void _BCD__ZN4fltk8Valuator4stepEd(fltk::Valuator *This, double a) {
(This->step(a));
}
double _BCD__ZNK4fltk8Valuator8linesizeEv(fltk::Valuator *This) {
return (This->linesize());
}
void _BCD__ZN4fltk8Valuator8linesizeEd(fltk::Valuator *This, double a) {
(This->linesize(a));
}
double _BCD__ZNK4fltk8Valuator16linesize_settingEv(fltk::Valuator *This) {
return (This->linesize_setting());
}
int _BCD__ZN4fltk8Valuator6formatEPc(fltk::Valuator *This, char * _0) {
return (This->format(_0));
}
int _BCD__ZN4fltk8Valuator6handleEi(fltk::Valuator *This, int _0) {
return (This->handle(_0));
}
fltk::Valuator *_BCD_new__ZN4fltk8ValuatorC1EiiiiPKc(int X, int Y, int W, int H, char const * L) {
return new fltk::Valuator(X, Y, W, H, L);
}
double _BCD__ZNK4fltk8Valuator14previous_valueEv(fltk::Valuator *This) {
return (This->previous_value());
}
void _BCD__ZN4fltk8Valuator11handle_pushEv(fltk::Valuator *This) {
(This->handle_push());
}
void _BCD__ZN4fltk8Valuator11handle_dragEd(fltk::Valuator *This, double newvalue) {
(This->handle_drag(newvalue));
}
void _BCD__ZN4fltk8Valuator14handle_releaseEv(fltk::Valuator *This) {
(This->handle_release());
}
void _BCD__ZN4fltk8Valuator12value_damageEv(fltk::Valuator *This) {
(This->value_damage());
}
void _BCD__ZN4fltk8Valuator9set_valueEd(fltk::Valuator *This, double v) {
(This->set_value(v));
}
int _BCD_R__ZN4fltk8Valuator6formatEPc__Valuator_R_CHECK(void *);
int _BCD_R__ZN4fltk8Valuator6formatEPc__Valuator_R(void *, char * _0);
int _BCD_R__ZN4fltk8Valuator6handleEi__Valuator_R_CHECK(void *);
int _BCD_R__ZN4fltk8Valuator6handleEi__Valuator_R(void *, int _0);
int _BCD_R__ZN4fltk8Valuator12value_damageEv__Valuator_R_CHECK(void *);
void _BCD_R__ZN4fltk8Valuator12value_damageEv__Valuator_R(void *);
}
class Valuator_R : fltk::Valuator {
public:
void *__D_data;
int format(char * _0) {
if (_BCD_R__ZN4fltk8Valuator6formatEPc__Valuator_R_CHECK(__D_data))
return _BCD_R__ZN4fltk8Valuator6formatEPc__Valuator_R(__D_data, _0);
else
return fltk::Valuator::format(_0);
}
int handle(int _0) {
if (_BCD_R__ZN4fltk8Valuator6handleEi__Valuator_R_CHECK(__D_data))
return _BCD_R__ZN4fltk8Valuator6handleEi__Valuator_R(__D_data, _0);
else
return fltk::Valuator::handle(_0);
}
Valuator_R(int X, int Y, int W, int H, char const * L) : fltk::Valuator(X, Y, W, H, L) {}
void value_damage() {
if (_BCD_R__ZN4fltk8Valuator12value_damageEv__Valuator_R_CHECK(__D_data))
_BCD_R__ZN4fltk8Valuator12value_damageEv__Valuator_R(__D_data);
else
fltk::Valuator::value_damage();
}
};
extern "C" {
Valuator_R *_BCD_new__ZN4fltk8ValuatorC1EiiiiPKc_R(int X, int Y, int W, int H, char const * L) {
return new Valuator_R(X, Y, W, H, L);
}
void _BCD_delete_N4fltk8ValuatorE__Valuator_R(Valuator_R *This) {
delete This;
}
void _BCD_RI_N4fltk8ValuatorE(Valuator_R *cd, void *dd) {
cd->__D_data = dd;
}
typedef void (*_BCD_func__152)(fltk::Widget *, long int);
typedef _BCD_func__152 _BCD__153_Callback1;
typedef void (*_BCD_func__154)(fltk::Widget *);
typedef _BCD_func__154 _BCD__155_Callback0;
typedef void (*_BCD_func__158)(fltk::Widget *, void *);
typedef _BCD_func__158 _BCD__159_Callback;
typedef _BCD__159_Callback _BCD__157_Callback_p;
typedef bool (*_BCD_func__281)();
typedef _BCD_func__281 _BCD__170_Theme;
typedef fltk::Symbol * _BCD__223_Box;
typedef unsigned int _BCD__240_Color;
typedef int _BCD__243_Flags;
typedef _BCD__243_Flags _BCD__242_Align;
}
