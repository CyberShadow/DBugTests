/* THIS FILE GENERATED BY bcd.gen */
#include <stdlib.h>
#include <string.h>
#include "../bind.h"
#include "fltk/Input.h"
extern "C" {
typedef unsigned char _BCD__7_uchar;
void _BCD_delete_N4fltk5InputE(fltk::Input *This) {
delete This;
}
void _BCD_set__ZN4fltk5Input13default_styleE(fltk::Input *This, fltk::NamedStyle * x) {
This->default_style = x;
}
fltk::NamedStyle * _BCD_get__ZN4fltk5Input13default_styleE(fltk::Input *This) {
return This->default_style;
}
fltk::Input *_BCD_new__ZN4fltk5InputC1EiiiiPKc(int _0, int _1, int _2, int _3, char const * _4) {
return new fltk::Input(_0, _1, _2, _3, _4);
}
void _BCD__ZN4fltk5Input4drawEv(fltk::Input *This) {
(This->draw());
}
void _BCD__ZN4fltk5Input4drawERKNS_9RectangleE(fltk::Input *This, fltk::Rectangle   const & _0) {
(This->draw(_0));
}
int _BCD__ZN4fltk5Input6handleEi(fltk::Input *This, int _0) {
return (This->handle(_0));
}
int _BCD__ZN4fltk5Input6handleEiRKNS_9RectangleE(fltk::Input *This, int event, fltk::Rectangle   const & _1) {
return (This->handle(event, _1));
}
bool _BCD__ZN4fltk5Input10handle_keyEv(fltk::Input *This) {
return (This->handle_key());
}
bool _BCD__ZN4fltk5Input4textEPKc(fltk::Input *This, char const * _0) {
return (This->text(_0));
}
bool _BCD__ZN4fltk5Input4textEPKci(fltk::Input *This, char const * _0, int _1) {
return (This->text(_0, _1));
}
bool _BCD__ZN4fltk5Input11static_textEPKc(fltk::Input *This, char const * _0) {
return (This->static_text(_0));
}
bool _BCD__ZN4fltk5Input11static_textEPKci(fltk::Input *This, char const * _0, int _1) {
return (This->static_text(_0, _1));
}
char const * _BCD__ZNK4fltk5Input4textEv(fltk::Input *This) {
return (This->text());
}
char _BCD__ZNK4fltk5Input2atEi(fltk::Input *This, int i) {
return (This->at(i));
}
bool _BCD__ZN4fltk5Input5valueEPKc(fltk::Input *This, char const * v) {
return (This->value(v));
}
bool _BCD__ZN4fltk5Input5valueEPKci(fltk::Input *This, char const * v, int n) {
return (This->value(v, n));
}
bool _BCD__ZN4fltk5Input12static_valueEPKc(fltk::Input *This, char const * v) {
return (This->static_value(v));
}
char const * _BCD__ZNK4fltk5Input5valueEv(fltk::Input *This) {
return (This->value());
}
int _BCD__ZNK4fltk5Input4sizeEv(fltk::Input *This) {
return (This->size());
}
void _BCD__ZN4fltk5Input7reserveEi(fltk::Input *This, int newsize) {
(This->reserve(newsize));
}
int _BCD__ZNK4fltk5Input8positionEv(fltk::Input *This) {
return (This->position());
}
int _BCD__ZNK4fltk5Input4markEv(fltk::Input *This) {
return (This->mark());
}
void _BCD__ZN4fltk5Input8positionEi(fltk::Input *This, int p) {
(This->position(p));
}
void _BCD__ZN4fltk5Input16up_down_positionEib(fltk::Input *This, int position, bool extend) {
(This->up_down_position(position, extend));
}
void _BCD__ZN4fltk5Input4markEi(fltk::Input *This, int m) {
(This->mark(m));
}
bool _BCD__ZN4fltk5Input7replaceEiiPKci(fltk::Input *This, int _0, int _1, char const * _2, int _3) {
return (This->replace(_0, _1, _2, _3));
}
bool _BCD__ZN4fltk5Input3cutEv(fltk::Input *This) {
return (This->cut());
}
bool _BCD__ZN4fltk5Input3cutEi(fltk::Input *This, int n) {
return (This->cut(n));
}
bool _BCD__ZN4fltk5Input3cutEii(fltk::Input *This, int a, int b) {
return (This->cut(a, b));
}
bool _BCD__ZN4fltk5Input6insertEPKc(fltk::Input *This, char const * t) {
return (This->insert(t));
}
bool _BCD__ZN4fltk5Input6insertEPKci(fltk::Input *This, char const * t, int l) {
return (This->insert(t, l));
}
bool _BCD__ZN4fltk5Input7replaceEiic(fltk::Input *This, int a, int b, char c) {
return (This->replace(a, b, c));
}
bool _BCD__ZN4fltk5Input4copyEb(fltk::Input *This, bool clipboard) {
return (This->copy(clipboard));
}
bool _BCD__ZN4fltk5Input4undoEv(fltk::Input *This) {
return (This->undo());
}
void _BCD__ZN4fltk5Input17maybe_do_callbackEv(fltk::Input *This) {
(This->maybe_do_callback());
}
int _BCD__ZNK4fltk5Input10word_startEi(fltk::Input *This, int i) {
return (This->word_start(i));
}
int _BCD__ZNK4fltk5Input8word_endEi(fltk::Input *This, int i) {
return (This->word_end(i));
}
int _BCD__ZNK4fltk5Input10line_startEi(fltk::Input *This, int i) {
return (This->line_start(i));
}
int _BCD__ZNK4fltk5Input8line_endEi(fltk::Input *This, int i) {
return (This->line_end(i));
}
int _BCD__ZNK4fltk5Input14mouse_positionERKNS_9RectangleE(fltk::Input *This, fltk::Rectangle   const & _0) {
return (This->mouse_position(_0));
}
int _BCD__ZNK4fltk5Input7xscrollEv(fltk::Input *This) {
return (This->xscroll());
}
int _BCD__ZNK4fltk5Input7yscrollEv(fltk::Input *This) {
return (This->yscroll());
}
int _BCD_R__ZN4fltk5Input4drawEv__Input_R_CHECK(void *);
void _BCD_R__ZN4fltk5Input4drawEv__Input_R(void *);
int _BCD_R__ZN4fltk5Input6handleEi__Input_R_CHECK(void *);
int _BCD_R__ZN4fltk5Input6handleEi__Input_R(void *, int _0);
int _BCD_R__ZN4fltk5Input7replaceEiiPKci__Input_R_CHECK(void *);
bool _BCD_R__ZN4fltk5Input7replaceEiiPKci__Input_R(void *, int _0, int _1, char const * _2, int _3);
}
class Input_R : fltk::Input {
public:
void *__D_data;
Input_R(int _0, int _1, int _2, int _3, char const * _4) : fltk::Input(_0, _1, _2, _3, _4) {}
void draw() {
if (_BCD_R__ZN4fltk5Input4drawEv__Input_R_CHECK(__D_data))
_BCD_R__ZN4fltk5Input4drawEv__Input_R(__D_data);
else
fltk::Input::draw();
}
int handle(int _0) {
if (_BCD_R__ZN4fltk5Input6handleEi__Input_R_CHECK(__D_data))
return _BCD_R__ZN4fltk5Input6handleEi__Input_R(__D_data, _0);
else
return fltk::Input::handle(_0);
}
bool replace(int _0, int _1, char const * _2, int _3) {
if (_BCD_R__ZN4fltk5Input7replaceEiiPKci__Input_R_CHECK(__D_data))
return _BCD_R__ZN4fltk5Input7replaceEiiPKci__Input_R(__D_data, _0, _1, _2, _3);
else
return fltk::Input::replace(_0, _1, _2, _3);
}
};
extern "C" {
Input_R *_BCD_new__ZN4fltk5InputC1EiiiiPKc_R(int _0, int _1, int _2, int _3, char const * _4) {
return new Input_R(_0, _1, _2, _3, _4);
}
void _BCD_delete_N4fltk5InputE__Input_R(Input_R *This) {
delete This;
}
void _BCD_RI_N4fltk5InputE(Input_R *cd, void *dd) {
cd->__D_data = dd;
}
typedef void (*_BCD_func__152)(fltk::Widget *, long int);
typedef _BCD_func__152 _BCD__153_Callback1;
typedef void (*_BCD_func__154)(fltk::Widget *);
typedef _BCD_func__154 _BCD__155_Callback0;
typedef void (*_BCD_func__158)(fltk::Widget *, void *);
typedef _BCD_func__158 _BCD__159_Callback;
typedef _BCD__159_Callback _BCD__157_Callback_p;
typedef bool (*_BCD_func__315)();
typedef _BCD_func__315 _BCD__170_Theme;
typedef fltk::Symbol * _BCD__223_Box;
typedef unsigned int _BCD__240_Color;
typedef int _BCD__243_Flags;
typedef _BCD__243_Flags _BCD__242_Align;
}
