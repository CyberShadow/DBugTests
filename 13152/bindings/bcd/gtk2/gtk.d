/* THIS FILE GENERATED BY bcd.gen */
module bcd.gtk2.gtk;
align(4):
public import bcd.atk.atk;
public import bcd.cairo.cairo;
public import bcd.pango.pango;
public import bcd.gdk.gdk;
public import bcd.glib2.glib;
const int GTK_PATH_PRIO_MASK = 0x0f;
const int GTK_BUTTONBOX_DEFAULT = -1;
const int GTK_MAX_COMPOSE_LEN = 7;
const int GTK_INPUT_ERROR = -1;
const char[] GTK_STOCK_DIALOG_AUTHENTICATION = "gtk-dialog-authentication";
const char[] GTK_STOCK_DIALOG_INFO = "gtk-dialog-info";
const char[] GTK_STOCK_DIALOG_WARNING = "gtk-dialog-warning";
const char[] GTK_STOCK_DIALOG_ERROR = "gtk-dialog-error";
const char[] GTK_STOCK_DIALOG_QUESTION = "gtk-dialog-question";
const char[] GTK_STOCK_DND = "gtk-dnd";
const char[] GTK_STOCK_DND_MULTIPLE = "gtk-dnd-multiple";
const char[] GTK_STOCK_ABOUT = "gtk-about";
const char[] GTK_STOCK_ADD = "gtk-add";
const char[] GTK_STOCK_APPLY = "gtk-apply";
const char[] GTK_STOCK_BOLD = "gtk-bold";
const char[] GTK_STOCK_CANCEL = "gtk-cancel";
const char[] GTK_STOCK_CDROM = "gtk-cdrom";
const char[] GTK_STOCK_CLEAR = "gtk-clear";
const char[] GTK_STOCK_CLOSE = "gtk-close";
const char[] GTK_STOCK_COLOR_PICKER = "gtk-color-picker";
const char[] GTK_STOCK_CONVERT = "gtk-convert";
const char[] GTK_STOCK_CONNECT = "gtk-connect";
const char[] GTK_STOCK_COPY = "gtk-copy";
const char[] GTK_STOCK_CUT = "gtk-cut";
const char[] GTK_STOCK_DELETE = "gtk-delete";
const char[] GTK_STOCK_DIRECTORY = "gtk-directory";
const char[] GTK_STOCK_DISCONNECT = "gtk-disconnect";
const char[] GTK_STOCK_EDIT = "gtk-edit";
const char[] GTK_STOCK_EXECUTE = "gtk-execute";
const char[] GTK_STOCK_FILE = "gtk-file";
const char[] GTK_STOCK_FIND = "gtk-find";
const char[] GTK_STOCK_FIND_AND_REPLACE = "gtk-find-and-replace";
const char[] GTK_STOCK_FLOPPY = "gtk-floppy";
const char[] GTK_STOCK_FULLSCREEN = "gtk-fullscreen";
const char[] GTK_STOCK_GOTO_BOTTOM = "gtk-goto-bottom";
const char[] GTK_STOCK_GOTO_FIRST = "gtk-goto-first";
const char[] GTK_STOCK_GOTO_LAST = "gtk-goto-last";
const char[] GTK_STOCK_GOTO_TOP = "gtk-goto-top";
const char[] GTK_STOCK_GO_BACK = "gtk-go-back";
const char[] GTK_STOCK_GO_DOWN = "gtk-go-down";
const char[] GTK_STOCK_GO_FORWARD = "gtk-go-forward";
const char[] GTK_STOCK_GO_UP = "gtk-go-up";
const char[] GTK_STOCK_HARDDISK = "gtk-harddisk";
const char[] GTK_STOCK_HELP = "gtk-help";
const char[] GTK_STOCK_HOME = "gtk-home";
const char[] GTK_STOCK_INDEX = "gtk-index";
const char[] GTK_STOCK_INDENT = "gtk-indent";
const char[] GTK_STOCK_INFO = "gtk-info";
const char[] GTK_STOCK_UNINDENT = "gtk-unindent";
const char[] GTK_STOCK_ITALIC = "gtk-italic";
const char[] GTK_STOCK_JUMP_TO = "gtk-jump-to";
const char[] GTK_STOCK_JUSTIFY_CENTER = "gtk-justify-center";
const char[] GTK_STOCK_JUSTIFY_FILL = "gtk-justify-fill";
const char[] GTK_STOCK_JUSTIFY_LEFT = "gtk-justify-left";
const char[] GTK_STOCK_JUSTIFY_RIGHT = "gtk-justify-right";
const char[] GTK_STOCK_LEAVE_FULLSCREEN = "gtk-leave-fullscreen";
const char[] GTK_STOCK_MISSING_IMAGE = "gtk-missing-image";
const char[] GTK_STOCK_MEDIA_FORWARD = "gtk-media-forward";
const char[] GTK_STOCK_MEDIA_NEXT = "gtk-media-next";
const char[] GTK_STOCK_MEDIA_PAUSE = "gtk-media-pause";
const char[] GTK_STOCK_MEDIA_PLAY = "gtk-media-play";
const char[] GTK_STOCK_MEDIA_PREVIOUS = "gtk-media-previous";
const char[] GTK_STOCK_MEDIA_RECORD = "gtk-media-record";
const char[] GTK_STOCK_MEDIA_REWIND = "gtk-media-rewind";
const char[] GTK_STOCK_MEDIA_STOP = "gtk-media-stop";
const char[] GTK_STOCK_NETWORK = "gtk-network";
const char[] GTK_STOCK_NEW = "gtk-new";
const char[] GTK_STOCK_NO = "gtk-no";
const char[] GTK_STOCK_OK = "gtk-ok";
const char[] GTK_STOCK_OPEN = "gtk-open";
const char[] GTK_STOCK_PASTE = "gtk-paste";
const char[] GTK_STOCK_PREFERENCES = "gtk-preferences";
const char[] GTK_STOCK_PRINT = "gtk-print";
const char[] GTK_STOCK_PRINT_PREVIEW = "gtk-print-preview";
const char[] GTK_STOCK_PROPERTIES = "gtk-properties";
const char[] GTK_STOCK_QUIT = "gtk-quit";
const char[] GTK_STOCK_REDO = "gtk-redo";
const char[] GTK_STOCK_REFRESH = "gtk-refresh";
const char[] GTK_STOCK_REMOVE = "gtk-remove";
const char[] GTK_STOCK_REVERT_TO_SAVED = "gtk-revert-to-saved";
const char[] GTK_STOCK_SAVE = "gtk-save";
const char[] GTK_STOCK_SAVE_AS = "gtk-save-as";
const char[] GTK_STOCK_SELECT_COLOR = "gtk-select-color";
const char[] GTK_STOCK_SELECT_FONT = "gtk-select-font";
const char[] GTK_STOCK_SORT_ASCENDING = "gtk-sort-ascending";
const char[] GTK_STOCK_SORT_DESCENDING = "gtk-sort-descending";
const char[] GTK_STOCK_SPELL_CHECK = "gtk-spell-check";
const char[] GTK_STOCK_STOP = "gtk-stop";
const char[] GTK_STOCK_STRIKETHROUGH = "gtk-strikethrough";
const char[] GTK_STOCK_UNDELETE = "gtk-undelete";
const char[] GTK_STOCK_UNDERLINE = "gtk-underline";
const char[] GTK_STOCK_UNDO = "gtk-undo";
const char[] GTK_STOCK_YES = "gtk-yes";
const char[] GTK_STOCK_ZOOM_100 = "gtk-zoom-100";
const char[] GTK_STOCK_ZOOM_FIT = "gtk-zoom-fit";
const char[] GTK_STOCK_ZOOM_IN = "gtk-zoom-in";
const char[] GTK_STOCK_ZOOM_OUT = "gtk-zoom-out";
alias _GtkVSeparatorClass GtkVSeparatorClass;
alias _GtkSeparatorClass GtkSeparatorClass;
alias _GtkVSeparator GtkVSeparator;
alias _GtkSeparator GtkSeparator;
alias _GtkVScaleClass GtkVScaleClass;
alias _GtkScaleClass GtkScaleClass;
alias _GtkVScale GtkVScale;
alias _GtkScale GtkScale;
alias _GtkVRulerClass GtkVRulerClass;
alias _GtkRulerClass GtkRulerClass;
alias _GtkVRuler GtkVRuler;
alias _GtkRuler GtkRuler;
alias _GtkVPanedClass GtkVPanedClass;
alias _GtkPanedClass GtkPanedClass;
alias _GtkVPaned GtkVPaned;
alias _GtkPaned GtkPaned;
alias _GtkVButtonBoxClass GtkVButtonBoxClass;
alias _GtkButtonBoxClass GtkButtonBoxClass;
alias _GtkVButtonBox GtkVButtonBox;
alias _GtkButtonBox GtkButtonBox;
enum GtkUIManagerItemType {
GTK_UI_MANAGER_AUTO=0,
GTK_UI_MANAGER_MENUBAR=1,
GTK_UI_MANAGER_MENU=2,
GTK_UI_MANAGER_TOOLBAR=4,
GTK_UI_MANAGER_PLACEHOLDER=8,
GTK_UI_MANAGER_POPUP=16,
GTK_UI_MANAGER_MENUITEM=32,
GTK_UI_MANAGER_TOOLITEM=64,
GTK_UI_MANAGER_SEPARATOR=128,
GTK_UI_MANAGER_ACCELERATOR=256,
}
alias void GtkUIManagerPrivate;
alias _GtkUIManagerClass GtkUIManagerClass;
alias _GtkUIManager GtkUIManager;
alias _GtkWidget GtkWidget;
alias void function(_GtkUIManager *, _GtkWidget *) _BCD_func__14844;
alias void function(_GtkUIManager *) _BCD_func__14845;
alias _GtkAction GtkAction;
alias void function(_GtkUIManager *, _GtkAction *, _GtkWidget *) _BCD_func__14846;
alias void function(_GtkUIManager *, _GtkAction *) _BCD_func__14847;
alias _GtkWidget * function(_GtkUIManager *, char *) _BCD_func__14848;
alias _GtkAction * function(_GtkUIManager *, char *) _BCD_func__14849;
alias void function() _BCD_func__10655;
alias _GtkTreeStoreClass GtkTreeStoreClass;
alias _GtkTreeStore GtkTreeStore;
enum GtkSortType {
GTK_SORT_ASCENDING=0,
GTK_SORT_DESCENDING=1,
}
alias void GtkTreeModel;
alias _GtkTreeIter GtkTreeIter;
alias int function(void *, _GtkTreeIter *, _GtkTreeIter *, void *) _BCD_func__10274;
alias _BCD_func__10274 GtkTreeIterCompareFunc;
alias void function(void *) _BCD_func__11672;
alias _BCD_func__11672 GtkDestroyNotify;
alias void GtkTreePath;
alias void function(void *, void *, _GtkTreeIter *, void *) _BCD_func__7923;
alias _BCD_func__7923 GtkTreeSelectionForeachFunc;
alias _GtkTreeSelection GtkTreeSelection;
alias int function(_GtkTreeSelection *, void *, void *, int, void *) _BCD_func__7924;
alias _BCD_func__7924 GtkTreeSelectionFunc;
alias _GtkTreeModelSortClass GtkTreeModelSortClass;
alias _GtkTreeModelSort GtkTreeModelSort;
alias _GtkTreeDragDestIface GtkTreeDragDestIface;
alias void GtkTreeDragDest;
alias _GtkSelectionData GtkSelectionData;
alias int function(void *, void *, _GtkSelectionData *) _BCD_func__14856;
alias _GtkTreeDragSourceIface GtkTreeDragSourceIface;
alias void GtkTreeDragSource;
alias int function(void *, void *) _BCD_func__14858;
alias int function(void *, void *, _GtkSelectionData *) _BCD_func__14859;
alias void GtkToolbarPrivate;
alias _GtkToolbarClass GtkToolbarClass;
alias _GtkContainerClass GtkContainerClass;
alias _GtkToolbar GtkToolbar;
enum GtkOrientation {
GTK_ORIENTATION_HORIZONTAL=0,
GTK_ORIENTATION_VERTICAL=1,
}
alias void function(_GtkToolbar *, int) _BCD_func__14861;
enum GtkToolbarStyle {
GTK_TOOLBAR_ICONS=0,
GTK_TOOLBAR_TEXT=1,
GTK_TOOLBAR_BOTH=2,
GTK_TOOLBAR_BOTH_HORIZ=3,
}
alias void function(_GtkToolbar *, int) _BCD_func__14862;
alias int function(_GtkToolbar *, int, int, int) _BCD_func__14863;
alias _GtkContainer GtkContainer;
enum GtkIconSize {
GTK_ICON_SIZE_INVALID=0,
GTK_ICON_SIZE_MENU=1,
GTK_ICON_SIZE_SMALL_TOOLBAR=2,
GTK_ICON_SIZE_LARGE_TOOLBAR=3,
GTK_ICON_SIZE_BUTTON=4,
GTK_ICON_SIZE_DND=5,
GTK_ICON_SIZE_DIALOG=6,
}
alias _GtkTooltips GtkTooltips;
enum GtkToolbarSpaceStyle {
GTK_TOOLBAR_SPACE_EMPTY=0,
GTK_TOOLBAR_SPACE_LINE=1,
}
alias _GtkToolbarChild GtkToolbarChild;
enum GtkToolbarChildType {
GTK_TOOLBAR_CHILD_SPACE=0,
GTK_TOOLBAR_CHILD_BUTTON=1,
GTK_TOOLBAR_CHILD_TOGGLEBUTTON=2,
GTK_TOOLBAR_CHILD_RADIOBUTTON=3,
GTK_TOOLBAR_CHILD_WIDGET=4,
}
alias _GtkTipsQueryClass GtkTipsQueryClass;
alias _GtkLabelClass GtkLabelClass;
alias _GtkTipsQuery GtkTipsQuery;
alias void function(_GtkTipsQuery *) _BCD_func__14867;
alias void function(_GtkTipsQuery *, _GtkWidget *, char *, char *) _BCD_func__14868;
alias int function(_GtkTipsQuery *, _GtkWidget *, char *, char *, _GdkEventButton *) _BCD_func__14869;
alias _GtkLabel GtkLabel;
alias void GtkTextPendingScroll;
alias void GtkTextWindow;
alias _GtkTextViewClass GtkTextViewClass;
alias _GtkTextView GtkTextView;
alias _GtkAdjustment GtkAdjustment;
alias void function(_GtkTextView *, _GtkAdjustment *, _GtkAdjustment *) _BCD_func__14872;
alias _GtkMenu GtkMenu;
alias void function(_GtkTextView *, _GtkMenu *) _BCD_func__14873;
enum GtkMovementStep {
GTK_MOVEMENT_LOGICAL_POSITIONS=0,
GTK_MOVEMENT_VISUAL_POSITIONS=1,
GTK_MOVEMENT_WORDS=2,
GTK_MOVEMENT_DISPLAY_LINES=3,
GTK_MOVEMENT_DISPLAY_LINE_ENDS=4,
GTK_MOVEMENT_PARAGRAPHS=5,
GTK_MOVEMENT_PARAGRAPH_ENDS=6,
GTK_MOVEMENT_PAGES=7,
GTK_MOVEMENT_BUFFER_ENDS=8,
GTK_MOVEMENT_HORIZONTAL_PAGES=9,
}
alias void function(_GtkTextView *, int, int, int) _BCD_func__14874;
alias void function(_GtkTextView *, int, int) _BCD_func__14875;
alias void function(_GtkTextView *) _BCD_func__14876;
alias void function(_GtkTextView *, char *) _BCD_func__14877;
enum GtkDeleteType {
GTK_DELETE_CHARS=0,
GTK_DELETE_WORD_ENDS=1,
GTK_DELETE_WORDS=2,
GTK_DELETE_DISPLAY_LINES=3,
GTK_DELETE_DISPLAY_LINE_ENDS=4,
GTK_DELETE_PARAGRAPH_ENDS=5,
GTK_DELETE_PARAGRAPHS=6,
GTK_DELETE_WHITESPACE=7,
}
alias void function(_GtkTextView *, int, int) _BCD_func__14878;
enum GtkDirectionType {
GTK_DIR_TAB_FORWARD=0,
GTK_DIR_TAB_BACKWARD=1,
GTK_DIR_UP=2,
GTK_DIR_DOWN=3,
GTK_DIR_LEFT=4,
GTK_DIR_RIGHT=5,
}
alias void function(_GtkTextView *, int) _BCD_func__14879;
alias _GtkTextBuffer GtkTextBuffer;
enum GtkWrapMode {
GTK_WRAP_NONE=0,
GTK_WRAP_CHAR=1,
GTK_WRAP_WORD=2,
GTK_WRAP_WORD_CHAR=3,
}
enum GtkJustification {
GTK_JUSTIFY_LEFT=0,
GTK_JUSTIFY_RIGHT=1,
GTK_JUSTIFY_CENTER=2,
GTK_JUSTIFY_FILL=3,
}
alias _GtkTextMark GtkTextMark;
alias _GtkIMContext GtkIMContext;
enum GtkTextWindowType {
GTK_TEXT_WINDOW_PRIVATE=0,
GTK_TEXT_WINDOW_WIDGET=1,
GTK_TEXT_WINDOW_TEXT=2,
GTK_TEXT_WINDOW_LEFT=3,
GTK_TEXT_WINDOW_RIGHT=4,
GTK_TEXT_WINDOW_TOP=5,
GTK_TEXT_WINDOW_BOTTOM=6,
}
alias _GtkTextBufferClass GtkTextBufferClass;
alias _GtkTextIter GtkTextIter;
alias void function(_GtkTextBuffer *, _GtkTextIter *, char *, int) _BCD_func__14882;
alias void function(_GtkTextBuffer *, _GtkTextIter *, void *) _BCD_func__14883;
alias _GtkTextChildAnchor GtkTextChildAnchor;
alias void function(_GtkTextBuffer *, _GtkTextIter *, _GtkTextChildAnchor *) _BCD_func__14884;
alias void function(_GtkTextBuffer *, _GtkTextIter *, _GtkTextIter *) _BCD_func__14885;
alias void function(_GtkTextBuffer *) _BCD_func__14886;
alias void function(_GtkTextBuffer *, _GtkTextIter *, _GtkTextMark *) _BCD_func__14887;
alias void function(_GtkTextBuffer *, _GtkTextMark *) _BCD_func__14888;
alias _GtkTextTag GtkTextTag;
alias void function(_GtkTextBuffer *, _GtkTextTag *, _GtkTextIter *, _GtkTextIter *) _BCD_func__14889;
alias void GtkTextLogAttrCache;
alias void GtkTextBTree;
alias _GtkTextMarkClass GtkTextMarkClass;
alias int function(uint, void *) _BCD_func__8145;
alias _BCD_func__8145 GtkTextCharPredicate;
alias _GtkTextTagTable GtkTextTagTable;
enum GtkTextSearchFlags {
GTK_TEXT_SEARCH_VISIBLE_ONLY=1,
GTK_TEXT_SEARCH_TEXT_ONLY=2,
}
alias _GtkTextChildAnchorClass GtkTextChildAnchorClass;
alias _GtkTextTagTableClass GtkTextTagTableClass;
alias void function(_GtkTextTagTable *, _GtkTextTag *, int) _BCD_func__14896;
alias void function(_GtkTextTagTable *, _GtkTextTag *) _BCD_func__14897;
alias void function(_GtkTextTag *, void *) _BCD_func__8178;
alias _BCD_func__8178 GtkTextTagTableForeach;
alias _GtkTextAppearance GtkTextAppearance;
alias _GtkTextTagClass GtkTextTagClass;
alias int function(_GtkTextTag *, _GObject *, _GdkEvent *, _GtkTextIter *) _BCD_func__14900;
alias _GtkTextAttributes GtkTextAttributes;
enum GtkTextDirection {
GTK_TEXT_DIR_NONE=0,
GTK_TEXT_DIR_LTR=1,
GTK_TEXT_DIR_RTL=2,
}
alias _GtkTearoffMenuItemClass GtkTearoffMenuItemClass;
alias _GtkMenuItemClass GtkMenuItemClass;
alias _GtkTearoffMenuItem GtkTearoffMenuItem;
alias _GtkMenuItem GtkMenuItem;
alias _GtkTableRowCol GtkTableRowCol;
alias _GtkTableChild GtkTableChild;
alias _GtkTableClass GtkTableClass;
alias _GtkTable GtkTable;
alias _GtkStockItem GtkStockItem;
alias _GtkStatusbarClass GtkStatusbarClass;
alias _GtkHBoxClass GtkHBoxClass;
alias _GtkStatusbar GtkStatusbar;
alias void function(_GtkStatusbar *, uint, char *) _BCD_func__14913;
alias _GtkHBox GtkHBox;
alias _GtkSpinButtonClass GtkSpinButtonClass;
alias _GtkEntryClass GtkEntryClass;
alias _GtkSpinButton GtkSpinButton;
alias int function(_GtkSpinButton *, double *) _BCD_func__14916;
alias int function(_GtkSpinButton *) _BCD_func__14917;
alias void function(_GtkSpinButton *) _BCD_func__14918;
enum GtkScrollType {
GTK_SCROLL_NONE=0,
GTK_SCROLL_JUMP=1,
GTK_SCROLL_STEP_BACKWARD=2,
GTK_SCROLL_STEP_FORWARD=3,
GTK_SCROLL_PAGE_BACKWARD=4,
GTK_SCROLL_PAGE_FORWARD=5,
GTK_SCROLL_STEP_UP=6,
GTK_SCROLL_STEP_DOWN=7,
GTK_SCROLL_PAGE_UP=8,
GTK_SCROLL_PAGE_DOWN=9,
GTK_SCROLL_STEP_LEFT=10,
GTK_SCROLL_STEP_RIGHT=11,
GTK_SCROLL_PAGE_LEFT=12,
GTK_SCROLL_PAGE_RIGHT=13,
GTK_SCROLL_START=14,
GTK_SCROLL_END=15,
}
alias void function(_GtkSpinButton *, int) _BCD_func__14919;
alias _GtkEntry GtkEntry;
enum GtkSpinButtonUpdatePolicy {
GTK_UPDATE_ALWAYS=0,
GTK_UPDATE_IF_VALID=1,
}
enum GtkSpinType {
GTK_SPIN_STEP_FORWARD=0,
GTK_SPIN_STEP_BACKWARD=1,
GTK_SPIN_PAGE_FORWARD=2,
GTK_SPIN_PAGE_BACKWARD=3,
GTK_SPIN_HOME=4,
GTK_SPIN_END=5,
GTK_SPIN_USER_DEFINED=6,
}
enum GtkSizeGroupMode {
GTK_SIZE_GROUP_NONE=0,
GTK_SIZE_GROUP_HORIZONTAL=1,
GTK_SIZE_GROUP_VERTICAL=2,
GTK_SIZE_GROUP_BOTH=3,
}
alias _GtkSizeGroupClass GtkSizeGroupClass;
alias _GtkSizeGroup GtkSizeGroup;
alias _GtkRequisition GtkRequisition;
alias void GtkSeparatorToolItemPrivate;
alias _GtkSeparatorToolItemClass GtkSeparatorToolItemClass;
alias _GtkToolItemClass GtkToolItemClass;
alias _GtkSeparatorToolItem GtkSeparatorToolItem;
alias _GtkToolItem GtkToolItem;
alias _GtkSeparatorMenuItemClass GtkSeparatorMenuItemClass;
alias _GtkSeparatorMenuItem GtkSeparatorMenuItem;
alias _GtkScrolledWindowClass GtkScrolledWindowClass;
alias _GtkBinClass GtkBinClass;
alias _GtkScrolledWindow GtkScrolledWindow;
alias void function(_GtkScrolledWindow *, int, int) _BCD_func__14928;
alias void function(_GtkScrolledWindow *, int) _BCD_func__14929;
alias _GtkBin GtkBin;
alias _GtkViewportClass GtkViewportClass;
alias _GtkViewport GtkViewport;
alias void function(_GtkViewport *, _GtkAdjustment *, _GtkAdjustment *) _BCD_func__14932;
enum GtkShadowType {
GTK_SHADOW_NONE=0,
GTK_SHADOW_IN=1,
GTK_SHADOW_OUT=2,
GTK_SHADOW_ETCHED_IN=3,
GTK_SHADOW_ETCHED_OUT=4,
}
alias _GtkRadioToolButtonClass GtkRadioToolButtonClass;
alias _GtkToggleToolButtonClass GtkToggleToolButtonClass;
alias _GtkRadioToolButton GtkRadioToolButton;
alias _GtkToggleToolButton GtkToggleToolButton;
alias void GtkToggleToolButtonPrivate;
alias _GtkToolButtonClass GtkToolButtonClass;
alias void function(_GtkToggleToolButton *) _BCD_func__14937;
alias _GtkToolButton GtkToolButton;
alias _GtkRadioMenuItemClass GtkRadioMenuItemClass;
alias _GtkCheckMenuItemClass GtkCheckMenuItemClass;
alias _GtkRadioMenuItem GtkRadioMenuItem;
alias void function(_GtkRadioMenuItem *) _BCD_func__14940;
alias _GtkCheckMenuItem GtkCheckMenuItem;
alias _GtkRadioButtonClass GtkRadioButtonClass;
alias _GtkCheckButtonClass GtkCheckButtonClass;
alias _GtkRadioButton GtkRadioButton;
alias void function(_GtkRadioButton *) _BCD_func__14943;
alias _GtkCheckButton GtkCheckButton;
alias _GtkRadioActionClass GtkRadioActionClass;
alias _GtkToggleActionClass GtkToggleActionClass;
alias _GtkRadioAction GtkRadioAction;
alias void function(_GtkRadioAction *, _GtkRadioAction *) _BCD_func__14946;
alias void GtkRadioActionPrivate;
alias _GtkToggleAction GtkToggleAction;
alias _GtkActionClass GtkActionClass;
alias void function(_GtkToggleAction *) _BCD_func__14949;
alias void GtkToggleActionPrivate;
enum GtkProgressBarOrientation {
GTK_PROGRESS_LEFT_TO_RIGHT=0,
GTK_PROGRESS_RIGHT_TO_LEFT=1,
GTK_PROGRESS_BOTTOM_TO_TOP=2,
GTK_PROGRESS_TOP_TO_BOTTOM=3,
}
enum GtkProgressBarStyle {
GTK_PROGRESS_CONTINUOUS=0,
GTK_PROGRESS_DISCRETE=1,
}
alias _GtkProgressBarClass GtkProgressBarClass;
alias _GtkProgressClass GtkProgressClass;
alias _GtkProgressBar GtkProgressBar;
alias _GtkProgress GtkProgress;
alias _GtkWidgetClass GtkWidgetClass;
alias void function(_GtkProgress *) _BCD_func__14954;
alias _GtkPreviewClass GtkPreviewClass;
alias _GtkPreviewInfo GtkPreviewInfo;
alias _GtkDitherInfo GtkDitherInfo;
alias _GtkPreview GtkPreview;
alias _GtkPlugClass GtkPlugClass;
alias _GtkWindowClass GtkWindowClass;
alias _GtkPlug GtkPlug;
alias void function(_GtkPlug *) _BCD_func__14961;
alias _GtkWindow GtkWindow;
alias _GtkWindowGroup GtkWindowGroup;
alias _GtkSocketClass GtkSocketClass;
alias _GtkSocket GtkSocket;
alias void function(_GtkSocket *) _BCD_func__14964;
alias int function(_GtkSocket *) _BCD_func__14965;
alias _GtkAccelGroup GtkAccelGroup;
alias _GtkPixmapClass GtkPixmapClass;
alias _GtkMiscClass GtkMiscClass;
alias _GtkPixmap GtkPixmap;
alias _GtkMisc GtkMisc;
alias _GtkOptionMenuClass GtkOptionMenuClass;
alias _GtkButtonClass GtkButtonClass;
alias _GtkOptionMenu GtkOptionMenu;
alias void function(_GtkOptionMenu *) _BCD_func__14970;
alias _GtkButton GtkButton;
alias _GtkOldEditable GtkOldEditable;
alias void function(_GtkOldEditable *, uint) _BCD_func__8696;
alias _BCD_func__8696 GtkTextFunction;
alias _GtkOldEditableClass GtkOldEditableClass;
alias void function(_GtkOldEditable *) _BCD_func__14973;
alias void function(_GtkOldEditable *, int) _BCD_func__14974;
alias void function(_GtkOldEditable *, int, int) _BCD_func__14975;
alias char * function(_GtkOldEditable *, int, int) _BCD_func__14976;
alias void GtkNotebookPage;
alias _GtkNotebookClass GtkNotebookClass;
alias _GtkNotebook GtkNotebook;
alias void function(_GtkNotebook *, void *, uint) _BCD_func__14979;
alias int function(_GtkNotebook *, int) _BCD_func__14980;
enum GtkNotebookTab {
GTK_NOTEBOOK_TAB_FIRST=0,
GTK_NOTEBOOK_TAB_LAST=1,
}
alias int function(_GtkNotebook *, int) _BCD_func__14981;
alias void function(_GtkNotebook *, int) _BCD_func__14982;
alias void function(_GtkNotebook *, int) _BCD_func__14983;
alias void function(_GdkDisplay *) _BCD_func__8770;
alias _BCD_func__8770 GtkModuleDisplayInitFunc;
alias void function(int *, char * * *) _BCD_func__8771;
alias _BCD_func__8771 GtkModuleInitFunc;
alias _GtkMessageDialogClass GtkMessageDialogClass;
alias _GtkDialogClass GtkDialogClass;
alias _GtkMessageDialog GtkMessageDialog;
alias _GtkDialog GtkDialog;
enum GtkButtonsType {
GTK_BUTTONS_NONE=0,
GTK_BUTTONS_OK=1,
GTK_BUTTONS_CLOSE=2,
GTK_BUTTONS_CANCEL=3,
GTK_BUTTONS_YES_NO=4,
GTK_BUTTONS_OK_CANCEL=5,
}
enum GtkMessageType {
GTK_MESSAGE_INFO=0,
GTK_MESSAGE_WARNING=1,
GTK_MESSAGE_QUESTION=2,
GTK_MESSAGE_ERROR=3,
}
alias void GtkMenuToolButtonPrivate;
alias _GtkMenuToolButton GtkMenuToolButton;
alias _GtkMenuToolButtonClass GtkMenuToolButtonClass;
alias void function(_GtkMenuToolButton *) _BCD_func__14989;
alias void GtkToolButtonPrivate;
alias void function(_GtkToolButton *) _BCD_func__14991;
alias void GtkToolItemPrivate;
alias int function(_GtkToolItem *) _BCD_func__14994;
alias void function(_GtkToolItem *) _BCD_func__14995;
alias int function(_GtkToolItem *, _GtkTooltips *, char *, char *) _BCD_func__14996;
alias _GtkTooltipsData GtkTooltipsData;
alias _GtkTooltipsClass GtkTooltipsClass;
alias _GtkObjectClass GtkObjectClass;
alias _GtkObject GtkObject;
alias _GtkMenuBarClass GtkMenuBarClass;
alias _GtkMenuShellClass GtkMenuShellClass;
alias _GtkMenuBar GtkMenuBar;
alias _GtkMenuShell GtkMenuShell;
alias int function(_GtkWidget *, _GdkEventKey *, void *) _BCD_func__8879;
alias _BCD_func__8879 GtkKeySnoopFunc;
alias _GtkListClass GtkListClass;
alias _GtkList GtkList;
alias void function(_GtkList *) _BCD_func__15004;
alias void function(_GtkList *, _GtkWidget *) _BCD_func__15005;
enum GtkStateType {
GTK_STATE_NORMAL=0,
GTK_STATE_ACTIVE=1,
GTK_STATE_PRELIGHT=2,
GTK_STATE_SELECTED=3,
GTK_STATE_INSENSITIVE=4,
}
alias _GtkListItemClass GtkListItemClass;
alias _GtkItemClass GtkItemClass;
alias _GtkListItem GtkListItem;
alias void function(_GtkListItem *) _BCD_func__15008;
alias void function(_GtkListItem *, int, float, int) _BCD_func__15009;
alias void function(_GtkListItem *, int, float) _BCD_func__15010;
alias _GtkItem GtkItem;
alias _GtkLayoutClass GtkLayoutClass;
alias _GtkLayout GtkLayout;
alias void function(_GtkLayout *, _GtkAdjustment *, _GtkAdjustment *) _BCD_func__15013;
alias _GtkInvisibleClass GtkInvisibleClass;
alias _GtkInvisible GtkInvisible;
alias _GtkInputDialogClass GtkInputDialogClass;
alias _GtkInputDialog GtkInputDialog;
alias void function(_GtkInputDialog *, _GdkDevice *) _BCD_func__15018;
alias void GtkIMMulticontextPrivate;
alias _GtkIMMulticontextClass GtkIMMulticontextClass;
alias _GtkIMContextClass GtkIMContextClass;
alias _GtkIMMulticontext GtkIMMulticontext;
alias _GtkIMContextSimpleClass GtkIMContextSimpleClass;
alias _GtkIMContextSimple GtkIMContextSimple;
alias _GtkImageMenuItemClass GtkImageMenuItemClass;
alias _GtkImageMenuItem GtkImageMenuItem;
enum GtkIconViewDropPosition {
GTK_ICON_VIEW_NO_DROP=0,
GTK_ICON_VIEW_DROP_INTO=1,
GTK_ICON_VIEW_DROP_LEFT=2,
GTK_ICON_VIEW_DROP_RIGHT=3,
GTK_ICON_VIEW_DROP_ABOVE=4,
GTK_ICON_VIEW_DROP_BELOW=5,
}
alias _GtkIconView GtkIconView;
alias void function(_GtkIconView *, void *, void *) _BCD_func__9021;
alias _BCD_func__9021 GtkIconViewForeachFunc;
alias void GtkIconViewPrivate;
alias _GtkIconViewClass GtkIconViewClass;
alias void function(_GtkIconView *, _GtkAdjustment *, _GtkAdjustment *) _BCD_func__15027;
alias void function(_GtkIconView *, void *) _BCD_func__15028;
alias void function(_GtkIconView *) _BCD_func__15029;
alias int function(_GtkIconView *, int, int) _BCD_func__15030;
alias int function(_GtkIconView *) _BCD_func__15031;
enum GtkIconThemeError {
GTK_ICON_THEME_NOT_FOUND=0,
GTK_ICON_THEME_FAILED=1,
}
enum GtkIconLookupFlags {
GTK_ICON_LOOKUP_NO_SVG=1,
GTK_ICON_LOOKUP_FORCE_SVG=2,
GTK_ICON_LOOKUP_USE_BUILTIN=4,
}
alias void GtkIconThemePrivate;
alias _GtkIconThemeClass GtkIconThemeClass;
alias _GtkIconTheme GtkIconTheme;
alias void function(_GtkIconTheme *) _BCD_func__15034;
alias void GtkIconInfo;
alias _GtkIconFactoryClass GtkIconFactoryClass;
alias _GtkHSeparatorClass GtkHSeparatorClass;
alias _GtkHSeparator GtkHSeparator;
alias _GtkHScaleClass GtkHScaleClass;
alias _GtkHScale GtkHScale;
alias _GtkRangeClass GtkRangeClass;
alias char * function(_GtkScale *, double) _BCD_func__15044;
alias void function(_GtkScale *) _BCD_func__15045;
alias void function(_GtkScale *, int *, int *) _BCD_func__15046;
alias _GtkRange GtkRange;
alias _GtkHRulerClass GtkHRulerClass;
alias _GtkHRuler GtkHRuler;
alias _GtkRulerMetric GtkRulerMetric;
alias void function(_GtkRuler *) _BCD_func__15052;
alias _GtkHPanedClass GtkHPanedClass;
alias _GtkHPaned GtkHPaned;
alias void GtkPanedPrivate;
alias int function(_GtkPaned *, int) _BCD_func__15057;
alias int function(_GtkPaned *) _BCD_func__15058;
alias int function(_GtkPaned *, int) _BCD_func__15059;
alias _GtkHButtonBoxClass GtkHButtonBoxClass;
alias _GtkHButtonBox GtkHButtonBox;
alias _GtkHandleBoxClass GtkHandleBoxClass;
alias _GtkHandleBox GtkHandleBox;
alias void function(_GtkHandleBox *, _GtkWidget *) _BCD_func__15064;
alias _GdkRectangle GtkAllocation;
alias _GtkGammaCurveClass GtkGammaCurveClass;
alias _GtkVBoxClass GtkVBoxClass;
alias _GtkGammaCurve GtkGammaCurve;
alias _GtkVBox GtkVBox;
alias _GtkFontSelectionDialogClass GtkFontSelectionDialogClass;
alias _GtkFontSelectionDialog GtkFontSelectionDialog;
alias _GtkFontSelectionClass GtkFontSelectionClass;
alias _GtkFontSelection GtkFontSelection;
alias void GtkFontButtonPrivate;
alias _GtkFontButtonClass GtkFontButtonClass;
alias _GtkFontButton GtkFontButton;
alias void function(_GtkFontButton *) _BCD_func__15073;
alias void GtkFileChooserWidgetPrivate;
alias _GtkFileChooserWidgetClass GtkFileChooserWidgetClass;
alias _GtkFileChooserWidget GtkFileChooserWidget;
alias void GtkFileChooserDialogPrivate;
alias _GtkFileChooserDialogClass GtkFileChooserDialogClass;
alias _GtkFileChooserDialog GtkFileChooserDialog;
alias _GtkFileChooserButtonClass GtkFileChooserButtonClass;
alias void GtkFileChooserButtonPrivate;
alias _GtkFileChooserButton GtkFileChooserButton;
enum GtkFileChooserError {
GTK_FILE_CHOOSER_ERROR_NONEXISTENT=0,
GTK_FILE_CHOOSER_ERROR_BAD_FILENAME=1,
}
enum GtkFileChooserConfirmation {
GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM=0,
GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME=1,
GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN=2,
}
enum GtkFileChooserAction {
GTK_FILE_CHOOSER_ACTION_OPEN=0,
GTK_FILE_CHOOSER_ACTION_SAVE=1,
GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER=2,
GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER=3,
}
alias void GtkFileChooser;
alias _GtkFileFilterInfo GtkFileFilterInfo;
alias int function(_GtkFileFilterInfo *, void *) _BCD_func__9321;
alias _BCD_func__9321 GtkFileFilterFunc;
enum GtkFileFilterFlags {
GTK_FILE_FILTER_FILENAME=1,
GTK_FILE_FILTER_URI=2,
GTK_FILE_FILTER_DISPLAY_NAME=4,
GTK_FILE_FILTER_MIME_TYPE=8,
}
alias void GtkFileFilter;
alias _GtkFixedChild GtkFixedChild;
alias _GtkFixedClass GtkFixedClass;
alias _GtkFixed GtkFixed;
alias _GtkFileSelectionClass GtkFileSelectionClass;
alias _GtkFileSelection GtkFileSelection;
alias void GtkExpanderPrivate;
alias _GtkExpanderClass GtkExpanderClass;
alias _GtkExpander GtkExpander;
alias void function(_GtkExpander *) _BCD_func__15088;
alias _GtkEventBoxClass GtkEventBoxClass;
alias _GtkEventBox GtkEventBox;
alias void function(_GtkEntry *, _GtkMenu *) _BCD_func__15093;
alias void function(_GtkEntry *) _BCD_func__15094;
alias void function(_GtkEntry *, int, int, int) _BCD_func__15095;
alias void function(_GtkEntry *, char *) _BCD_func__15096;
alias void function(_GtkEntry *, int, int) _BCD_func__15097;
alias _GtkEntryCompletion GtkEntryCompletion;
alias int function(_GtkEntryCompletion *, char *, _GtkTreeIter *, void *) _BCD_func__9452;
alias _BCD_func__9452 GtkEntryCompletionMatchFunc;
alias void GtkEntryCompletionPrivate;
alias _GtkEntryCompletionClass GtkEntryCompletionClass;
alias int function(_GtkEntryCompletion *, void *, _GtkTreeIter *) _BCD_func__15100;
alias void function(_GtkEntryCompletion *, int) _BCD_func__15101;
alias int function(_GtkEntryCompletion *, char *) _BCD_func__15102;
alias void GtkTreeModelFilterPrivate;
alias _GtkTreeModelFilterClass GtkTreeModelFilterClass;
alias _GtkTreeModelFilter GtkTreeModelFilter;
alias void function(void *, _GtkTreeIter *, _GValue *, int, void *) _BCD_func__9478;
alias _BCD_func__9478 GtkTreeModelFilterModifyFunc;
alias int function(void *, _GtkTreeIter *, void *) _BCD_func__9479;
alias _BCD_func__9479 GtkTreeModelFilterVisibleFunc;
alias _GtkListStoreClass GtkListStoreClass;
alias _GtkListStore GtkListStore;
alias void function(_GtkIMContext *) _BCD_func__15109;
alias void function(_GtkIMContext *, char *) _BCD_func__15110;
alias int function(_GtkIMContext *) _BCD_func__15111;
alias int function(_GtkIMContext *, int, int) _BCD_func__15112;
alias void function(_GtkIMContext *, _GdkDrawable *) _BCD_func__15113;
alias void function(_GtkIMContext *, char * *, void * *, int *) _BCD_func__15114;
alias int function(_GtkIMContext *, _GdkEventKey *) _BCD_func__15115;
alias void function(_GtkIMContext *, _GdkRectangle *) _BCD_func__15116;
alias void function(_GtkIMContext *, int) _BCD_func__15117;
alias void function(_GtkIMContext *, char *, int, int) _BCD_func__15118;
alias int function(_GtkIMContext *, char * *, int *) _BCD_func__15119;
alias _GtkEditableClass GtkEditableClass;
alias void GtkEditable;
alias void function(void *, char *, int, int *) _BCD_func__15122;
alias void function(void *, int, int) _BCD_func__15123;
alias void function(void *) _BCD_func__15124;
alias char * function(void *, int, int) _BCD_func__15125;
alias int function(void *, int *, int *) _BCD_func__15126;
alias void function(void *, int) _BCD_func__15127;
alias int function(void *) _BCD_func__15128;
alias _GtkCurveClass GtkCurveClass;
alias _GtkDrawingAreaClass GtkDrawingAreaClass;
alias _GtkCurve GtkCurve;
alias void function(_GtkCurve *) _BCD_func__15130;
alias _GtkDrawingArea GtkDrawingArea;
enum GtkCurveType {
GTK_CURVE_TYPE_LINEAR=0,
GTK_CURVE_TYPE_SPLINE=1,
GTK_CURVE_TYPE_FREE=2,
}
alias _GtkCTree GtkCTree;
alias _GtkCTreeNode GtkCTreeNode;
alias int function(_GtkCTree *, _GtkCTreeNode *, _GtkCTreeNode *, _GtkCTreeNode *) _BCD_func__9593;
alias _BCD_func__9593 GtkCTreeCompareDragFunc;
alias int function(_GtkCTree *, uint, _GNode *, _GtkCTreeNode *, void *) _BCD_func__9594;
alias _BCD_func__9594 GtkCTreeGNodeFunc;
alias void function(_GtkCTree *, _GtkCTreeNode *, void *) _BCD_func__9595;
alias _BCD_func__9595 GtkCTreeFunc;
alias _GtkCTreeRow GtkCTreeRow;
alias _GtkCListRow GtkCListRow;
alias _GtkCTreeClass GtkCTreeClass;
alias _GtkCListClass GtkCListClass;
alias void function(_GtkCTree *, _GtkCTreeNode *, int) _BCD_func__15138;
alias void function(_GtkCTree *, _GtkCTreeNode *) _BCD_func__15139;
alias void function(_GtkCTree *, _GtkCTreeNode *, _GtkCTreeNode *, _GtkCTreeNode *) _BCD_func__15140;
enum GtkCTreeExpansionType {
GTK_CTREE_EXPANSION_EXPAND=0,
GTK_CTREE_EXPANSION_EXPAND_RECURSIVE=1,
GTK_CTREE_EXPANSION_COLLAPSE=2,
GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE=3,
GTK_CTREE_EXPANSION_TOGGLE=4,
GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE=5,
}
alias void function(_GtkCTree *, int) _BCD_func__15141;
alias _GtkCList GtkCList;
enum GtkCTreeExpanderStyle {
GTK_CTREE_EXPANDER_NONE=0,
GTK_CTREE_EXPANDER_SQUARE=1,
GTK_CTREE_EXPANDER_TRIANGLE=2,
GTK_CTREE_EXPANDER_CIRCULAR=3,
}
enum GtkCTreeLineStyle {
GTK_CTREE_LINES_NONE=0,
GTK_CTREE_LINES_SOLID=1,
GTK_CTREE_LINES_DOTTED=2,
GTK_CTREE_LINES_TABBED=3,
}
enum GtkCTreePos {
GTK_CTREE_POS_BEFORE=0,
GTK_CTREE_POS_AS_CHILD=1,
GTK_CTREE_POS_AFTER=2,
}
alias void GtkComboBoxEntryPrivate;
alias _GtkComboBoxEntryClass GtkComboBoxEntryClass;
alias _GtkComboBoxClass GtkComboBoxClass;
alias _GtkComboBoxEntry GtkComboBoxEntry;
alias _GtkComboBox GtkComboBox;
alias void GtkComboBoxPrivate;
alias void function(_GtkComboBox *) _BCD_func__15146;
alias char * function(_GtkComboBox *) _BCD_func__15147;
alias _GtkTreeView GtkTreeView;
alias void function(_GtkTreeView *, void *, int, void *) _BCD_func__9658;
alias _BCD_func__9658 GtkTreeDestroyCountFunc;
alias _BCD_func__9479 GtkTreeViewRowSeparatorFunc;
alias int function(void *, int, char *, _GtkTreeIter *, void *) _BCD_func__9662;
alias _BCD_func__9662 GtkTreeViewSearchEqualFunc;
alias void function(_GtkTreeView *, void *, void *) _BCD_func__9663;
alias _BCD_func__9663 GtkTreeViewMappingFunc;
alias _GtkTreeViewColumn GtkTreeViewColumn;
alias int function(_GtkTreeView *, _GtkTreeViewColumn *, _GtkTreeViewColumn *, _GtkTreeViewColumn *, void *) _BCD_func__9664;
alias _BCD_func__9664 GtkTreeViewColumnDropFunc;
alias _GtkTreeSelectionClass GtkTreeSelectionClass;
alias void function(_GtkTreeSelection *) _BCD_func__15150;
enum GtkSelectionMode {
GTK_SELECTION_NONE=0,
GTK_SELECTION_SINGLE=1,
GTK_SELECTION_BROWSE=2,
GTK_SELECTION_MULTIPLE=3,
GTK_SELECTION_EXTENDED=3,
}
alias void GtkTreeViewPrivate;
alias _GtkTreeViewClass GtkTreeViewClass;
alias void function(_GtkTreeView *, _GtkAdjustment *, _GtkAdjustment *) _BCD_func__15153;
alias void function(_GtkTreeView *, void *, _GtkTreeViewColumn *) _BCD_func__15154;
alias int function(_GtkTreeView *, _GtkTreeIter *, void *) _BCD_func__15155;
alias void function(_GtkTreeView *, _GtkTreeIter *, void *) _BCD_func__15156;
alias void function(_GtkTreeView *) _BCD_func__15157;
alias int function(_GtkTreeView *, int, int) _BCD_func__15158;
alias int function(_GtkTreeView *) _BCD_func__15159;
alias int function(_GtkTreeView *, int) _BCD_func__15160;
alias int function(_GtkTreeView *, int, int, int) _BCD_func__15161;
enum GtkTreeViewDropPosition {
GTK_TREE_VIEW_DROP_BEFORE=0,
GTK_TREE_VIEW_DROP_AFTER=1,
GTK_TREE_VIEW_DROP_INTO_OR_BEFORE=2,
GTK_TREE_VIEW_DROP_INTO_OR_AFTER=3,
}
enum GtkTargetFlags {
GTK_TARGET_SAME_APP=1,
GTK_TARGET_SAME_WIDGET=2,
}
enum GtkDestDefaults {
GTK_DEST_DEFAULT_MOTION=1,
GTK_DEST_DEFAULT_HIGHLIGHT=2,
GTK_DEST_DEFAULT_DROP=4,
GTK_DEST_DEFAULT_ALL=7,
}
alias _GtkComboClass GtkComboClass;
alias _GtkCombo GtkCombo;
alias _GtkBoxClass GtkBoxClass;
alias _GtkBox GtkBox;
alias _GtkColorSelectionDialogClass GtkColorSelectionDialogClass;
alias _GtkColorSelectionDialog GtkColorSelectionDialog;
alias void function(_GdkScreen *, _GdkColor *, int) _BCD_func__9760;
alias _BCD_func__9760 GtkColorSelectionChangePaletteWithScreenFunc;
alias void function(_GdkColor *, int) _BCD_func__9761;
alias _BCD_func__9761 GtkColorSelectionChangePaletteFunc;
alias _GtkColorSelectionClass GtkColorSelectionClass;
alias _GtkColorSelection GtkColorSelection;
alias void function(_GtkColorSelection *) _BCD_func__15170;
alias void GtkColorButtonPrivate;
alias _GtkColorButtonClass GtkColorButtonClass;
alias _GtkColorButton GtkColorButton;
alias void function(_GtkColorButton *) _BCD_func__15175;
alias _GtkCListDestInfo GtkCListDestInfo;
alias _GtkCListCellInfo GtkCListCellInfo;
enum GtkCListDragPos {
GTK_CLIST_DRAG_NONE=0,
GTK_CLIST_DRAG_BEFORE=1,
GTK_CLIST_DRAG_INTO=2,
GTK_CLIST_DRAG_AFTER=3,
}
alias int function(_GtkCList *, void *, void *) _BCD_func__9803;
alias _BCD_func__9803 GtkCListCompareFunc;
alias _GtkCellWidget GtkCellWidget;
enum GtkCellType {
GTK_CELL_EMPTY=0,
GTK_CELL_TEXT=1,
GTK_CELL_PIXMAP=2,
GTK_CELL_PIXTEXT=3,
GTK_CELL_WIDGET=4,
}
alias _GtkStyle GtkStyle;
alias _GtkCellPixText GtkCellPixText;
alias _GtkCellPixmap GtkCellPixmap;
alias _GtkCellText GtkCellText;
alias _GtkCell GtkCell;
alias _GtkCListColumn GtkCListColumn;
alias void function(_GtkCList *, _GtkAdjustment *, _GtkAdjustment *) _BCD_func__15198;
alias void function(_GtkCList *) _BCD_func__15199;
alias void function(_GtkCList *, int, int, _GdkEvent *) _BCD_func__15200;
alias void function(_GtkCList *, int, int) _BCD_func__15201;
alias void function(_GtkCList *, int) _BCD_func__15202;
alias void function(_GtkCList *, int, float, int) _BCD_func__15203;
alias void function(_GtkCList *, int, float) _BCD_func__15204;
alias void function(_GtkCList *, _GdkEvent *) _BCD_func__15205;
alias _GList * function(_GtkCList *, int, _GList *) _BCD_func__15206;
alias void function(_GtkCList *, _GdkRectangle *, int, _GtkCListRow *) _BCD_func__15207;
alias void function(_GtkCList *, _GtkCListRow *, int, int) _BCD_func__15208;
alias int function(_GtkCList *, int, char * *) _BCD_func__15209;
alias void function(_GtkCList *, _GtkCListRow *, int, int, char *, char, _GdkDrawable *, _GdkDrawable *) _BCD_func__15210;
alias void function(_GtkCList *, _GtkCListRow *, int, _GtkRequisition *) _BCD_func__15211;
enum GtkButtonAction {
GTK_BUTTON_IGNORED=0,
GTK_BUTTON_SELECTS=1,
GTK_BUTTON_DRAGS=2,
GTK_BUTTON_EXPANDS=4,
}
alias _GtkVScrollbarClass GtkVScrollbarClass;
alias _GtkScrollbarClass GtkScrollbarClass;
alias _GtkVScrollbar GtkVScrollbar;
alias _GtkScrollbar GtkScrollbar;
alias _GtkHScrollbarClass GtkHScrollbarClass;
alias _GtkHScrollbar GtkHScrollbar;
alias void function(_GtkRange *) _BCD_func__15220;
alias void function(_GtkRange *, double) _BCD_func__15221;
alias void function(_GtkRange *, int) _BCD_func__15222;
alias _GtkBorder GtkBorder;
alias void function(_GtkRange *, _GtkBorder *) _BCD_func__15223;
alias int function(_GtkRange *, int, double) _BCD_func__15224;
enum GtkUpdateType {
GTK_UPDATE_CONTINUOUS=0,
GTK_UPDATE_DISCONTINUOUS=1,
GTK_UPDATE_DELAYED=2,
}
alias void GtkRangeLayout;
alias void GtkRangeStepTimer;
alias void GtkClipboard;
alias void function(void *, void *) _BCD_func__10018;
alias _BCD_func__10018 GtkClipboardClearFunc;
alias void function(void *, _GtkSelectionData *, uint, void *) _BCD_func__10019;
alias _BCD_func__10019 GtkClipboardGetFunc;
alias void function(void *, void * *, int, void *) _BCD_func__10020;
alias _BCD_func__10020 GtkClipboardTargetsReceivedFunc;
alias void function(void *, void *, void *) _BCD_func__10021;
alias _BCD_func__10021 GtkClipboardImageReceivedFunc;
alias void function(void *, char *, void *) _BCD_func__10022;
alias _BCD_func__10022 GtkClipboardTextReceivedFunc;
alias void function(void *, _GtkSelectionData *, void *) _BCD_func__10023;
alias _BCD_func__10023 GtkClipboardReceivedFunc;
alias _GtkTargetPair GtkTargetPair;
alias _GtkTargetEntry GtkTargetEntry;
alias _GtkTargetList GtkTargetList;
alias void function(_GtkCheckMenuItem *) _BCD_func__15230;
alias void function(_GtkCheckMenuItem *, _GdkRectangle *) _BCD_func__15231;
alias void function(_GtkMenuItem *) _BCD_func__15234;
alias void function(_GtkMenuItem *, int *) _BCD_func__15235;
alias void function(_GtkMenuItem *, int) _BCD_func__15236;
alias void function(_GtkItem *) _BCD_func__15239;
alias _GtkToggleButtonClass GtkToggleButtonClass;
alias void function(_GtkCheckButton *, _GdkRectangle *) _BCD_func__15242;
alias _GtkToggleButton GtkToggleButton;
alias void function(_GtkToggleButton *) _BCD_func__15245;
alias void GtkCellViewPrivate;
alias _GtkCellViewClass GtkCellViewClass;
alias _GtkCellView GtkCellView;
alias _GtkCellRendererToggleClass GtkCellRendererToggleClass;
alias _GtkCellRendererClass GtkCellRendererClass;
alias _GtkCellRendererToggle GtkCellRendererToggle;
alias void function(_GtkCellRendererToggle *, char *) _BCD_func__15250;
alias _GtkCellRenderer GtkCellRenderer;
alias void GtkCellRendererProgressPrivate;
alias _GtkCellRendererProgressClass GtkCellRendererProgressClass;
alias _GtkCellRendererProgress GtkCellRendererProgress;
alias _GtkCellRendererPixbufClass GtkCellRendererPixbufClass;
alias _GtkCellRendererPixbuf GtkCellRendererPixbuf;
alias _GtkCellRendererComboClass GtkCellRendererComboClass;
alias _GtkCellRendererTextClass GtkCellRendererTextClass;
alias _GtkCellRendererCombo GtkCellRendererCombo;
alias _GtkCellRendererText GtkCellRendererText;
alias void function(_GtkCellRendererText *, char *, char *) _BCD_func__15259;
alias void GtkCellLayout;
alias void function(void *, _GtkCellRenderer *, void *, _GtkTreeIter *, void *) _BCD_func__10214;
alias _BCD_func__10214 GtkCellLayoutDataFunc;
alias _GtkCellLayoutIface GtkCellLayoutIface;
alias void function(void *, _GtkCellRenderer *, int) _BCD_func__15262;
alias void function(void *) _BCD_func__15263;
alias void function(void *, _GtkCellRenderer *, char *, int) _BCD_func__15264;
alias void function(void *, _GtkCellRenderer *, _BCD_func__10214, void *, _BCD_func__11672) _BCD_func__15265;
alias void function(void *, _GtkCellRenderer *) _BCD_func__15266;
alias void function(_GtkTreeViewColumn *, _GtkCellRenderer *, void *, _GtkTreeIter *, void *) _BCD_func__10225;
alias _BCD_func__10225 GtkTreeCellDataFunc;
alias _GtkTreeViewColumnClass GtkTreeViewColumnClass;
alias void function(_GtkTreeViewColumn *) _BCD_func__15268;
alias void GtkCellEditable;
enum GtkTreeViewColumnSizing {
GTK_TREE_VIEW_COLUMN_GROW_ONLY=0,
GTK_TREE_VIEW_COLUMN_AUTOSIZE=1,
GTK_TREE_VIEW_COLUMN_FIXED=2,
}
alias _GtkTreeSortableIface GtkTreeSortableIface;
alias void GtkTreeSortable;
alias void function(void *) _BCD_func__15271;
alias int function(void *, int *, int *) _BCD_func__15272;
alias void function(void *, int, int) _BCD_func__15273;
alias void function(void *, int, _BCD_func__10274, void *, _BCD_func__11672) _BCD_func__15274;
alias void function(void *, _BCD_func__10274, void *, _BCD_func__11672) _BCD_func__15275;
alias int function(void *) _BCD_func__15276;
enum GtkTreeModelFlags {
GTK_TREE_MODEL_ITERS_PERSIST=1,
GTK_TREE_MODEL_LIST_ONLY=2,
}
alias int function(void *, void *, _GtkTreeIter *, void *) _BCD_func__10286;
alias _BCD_func__10286 GtkTreeModelForeachFunc;
alias _GtkTreeModelIface GtkTreeModelIface;
alias void function(void *, void *, _GtkTreeIter *) _BCD_func__15278;
alias void function(void *, void *) _BCD_func__15279;
alias void function(void *, void *, _GtkTreeIter *, int *) _BCD_func__15280;
alias int function(void *) _BCD_func__15281;
alias int function(void *) _BCD_func__15282;
alias uint function(void *, int) _BCD_func__15283;
alias int function(void *, _GtkTreeIter *, void *) _BCD_func__15284;
alias void * function(void *, _GtkTreeIter *) _BCD_func__15285;
alias void function(void *, _GtkTreeIter *, int, _GValue *) _BCD_func__15286;
alias int function(void *, _GtkTreeIter *) _BCD_func__15287;
alias int function(void *, _GtkTreeIter *, _GtkTreeIter *) _BCD_func__15288;
alias int function(void *, _GtkTreeIter *) _BCD_func__15289;
alias int function(void *, _GtkTreeIter *, _GtkTreeIter *, int) _BCD_func__15290;
alias void function(void *, _GtkTreeIter *) _BCD_func__15291;
alias void GtkTreeRowReference;
alias void function(_GtkCellRenderer *, _GtkWidget *, _GdkRectangle *, int *, int *, int *, int *) _BCD_func__15294;
enum GtkCellRendererState {
GTK_CELL_RENDERER_SELECTED=1,
GTK_CELL_RENDERER_PRELIT=2,
GTK_CELL_RENDERER_INSENSITIVE=4,
GTK_CELL_RENDERER_SORTED=8,
GTK_CELL_RENDERER_FOCUSED=16,
}
alias void function(_GtkCellRenderer *, _GdkDrawable *, _GtkWidget *, _GdkRectangle *, _GdkRectangle *, _GdkRectangle *, int) _BCD_func__15295;
alias int function(_GtkCellRenderer *, _GdkEvent *, _GtkWidget *, char *, _GdkRectangle *, _GdkRectangle *, int) _BCD_func__15296;
alias void * function(_GtkCellRenderer *, _GdkEvent *, _GtkWidget *, char *, _GdkRectangle *, _GdkRectangle *, int) _BCD_func__15297;
alias void function(_GtkCellRenderer *) _BCD_func__15298;
alias void function(_GtkCellRenderer *, void *, char *) _BCD_func__15299;
enum GtkCellRendererMode {
GTK_CELL_RENDERER_MODE_INERT=0,
GTK_CELL_RENDERER_MODE_ACTIVATABLE=1,
GTK_CELL_RENDERER_MODE_EDITABLE=2,
}
alias _GtkCellEditableIface GtkCellEditableIface;
alias void function(void *) _BCD_func__15302;
alias void function(void *, _GdkEvent *) _BCD_func__15303;
enum GtkCalendarDisplayOptions {
GTK_CALENDAR_SHOW_HEADING=1,
GTK_CALENDAR_SHOW_DAY_NAMES=2,
GTK_CALENDAR_NO_MONTH_CHANGE=4,
GTK_CALENDAR_SHOW_WEEK_NUMBERS=8,
GTK_CALENDAR_WEEK_START_MONDAY=16,
}
alias void GtkCalendarPrivate;
alias _GtkCalendarClass GtkCalendarClass;
alias _GtkCalendar GtkCalendar;
alias void function(_GtkCalendar *) _BCD_func__15305;
alias void function(_GtkButton *) _BCD_func__15309;
enum GtkImageType {
GTK_IMAGE_EMPTY=0,
GTK_IMAGE_PIXMAP=1,
GTK_IMAGE_IMAGE=2,
GTK_IMAGE_PIXBUF=3,
GTK_IMAGE_STOCK=4,
GTK_IMAGE_ICON_SET=5,
GTK_IMAGE_ANIMATION=6,
GTK_IMAGE_ICON_NAME=7,
}
alias _GtkImageIconNameData GtkImageIconNameData;
alias _GtkImageAnimationData GtkImageAnimationData;
alias _GtkImageIconSetData GtkImageIconSetData;
alias void GtkIconSet;
alias _GtkImageStockData GtkImageStockData;
alias _GtkImagePixbufData GtkImagePixbufData;
alias _GtkImageImageData GtkImageImageData;
alias _GtkImagePixmapData GtkImagePixmapData;
alias _GtkImageClass GtkImageClass;
alias _GtkImage GtkImage;
alias _GtkBindingArg GtkBindingArg;
alias _GtkBindingSignal GtkBindingSignal;
alias _GtkBindingEntry GtkBindingEntry;
alias _GtkBindingSet GtkBindingSet;
enum GtkButtonBoxStyle {
GTK_BUTTONBOX_DEFAULT_STYLE=0,
GTK_BUTTONBOX_SPREAD=1,
GTK_BUTTONBOX_EDGE=2,
GTK_BUTTONBOX_START=3,
GTK_BUTTONBOX_END=4,
}
alias _GtkBoxChild GtkBoxChild;
alias _GtkAspectFrameClass GtkAspectFrameClass;
alias _GtkFrameClass GtkFrameClass;
alias _GtkAspectFrame GtkAspectFrame;
alias _GtkFrame GtkFrame;
alias void function(_GtkFrame *, _GdkRectangle *) _BCD_func__15334;
alias _GtkArrowClass GtkArrowClass;
alias _GtkArrow GtkArrow;
alias void GtkAlignmentPrivate;
alias _GtkAlignmentClass GtkAlignmentClass;
alias _GtkAlignment GtkAlignment;
alias _GtkRadioActionEntry GtkRadioActionEntry;
alias _GtkToggleActionEntry GtkToggleActionEntry;
alias _GtkActionEntry GtkActionEntry;
alias _GtkActionGroupClass GtkActionGroupClass;
alias _GtkActionGroup GtkActionGroup;
alias _GtkAction * function(_GtkActionGroup *, char *) _BCD_func__15344;
alias void GtkActionGroupPrivate;
alias void function(_GtkWidget *, void *, uint) _BCD_func__10615;
alias _BCD_func__10615 GtkItemFactoryCallback2;
alias void function(_GtkWidget *, void *) _BCD_func__10623;
alias _BCD_func__10623 GtkMenuCallback;
alias _GtkItemFactoryItem GtkItemFactoryItem;
alias _GtkItemFactoryEntry GtkItemFactoryEntry;
alias _BCD_func__10655 GtkItemFactoryCallback;
alias _GtkItemFactoryClass GtkItemFactoryClass;
alias _GtkItemFactory GtkItemFactory;
alias char * function(char *, void *) _BCD_func__10657;
alias _BCD_func__10657 GtkTranslateFunc;
alias void function(void *, uint, _GtkWidget *) _BCD_func__10654;
alias _BCD_func__10654 GtkItemFactoryCallback1;
alias void function(void *, char *) _BCD_func__10656;
alias _BCD_func__10656 GtkPrintFunc;
alias void GtkActionPrivate;
alias void function(_GtkAction *) _BCD_func__15352;
alias _GtkWidget * function(_GtkAction *) _BCD_func__15353;
alias void function(_GtkAction *, _GtkWidget *) _BCD_func__15354;
alias _GtkAccessibleClass GtkAccessibleClass;
alias _GtkAccessible GtkAccessible;
alias void function(_GtkAccessible *) _BCD_func__15357;
alias void function(void *, char *, uint, int, int) _BCD_func__11014;
alias _BCD_func__11014 GtkAccelMapForeach;
alias void GtkAccelMapClass;
alias void GtkAccelMap;
alias _GtkAccelLabelClass GtkAccelLabelClass;
alias _GtkAccelLabel GtkAccelLabel;
alias void GtkLabelSelectionInfo;
alias void function(_GtkLabel *, int, int, int) _BCD_func__15485;
alias void function(_GtkLabel *) _BCD_func__15486;
alias void function(_GtkLabel *, _GtkMenu *) _BCD_func__15487;
alias void function(_GtkWidget *, _GtkMenu *) _BCD_func__11072;
alias _BCD_func__11072 GtkMenuDetachFunc;
alias void function(_GtkMenu *, int *, int *, int *, void *) _BCD_func__11073;
alias _BCD_func__11073 GtkMenuPositionFunc;
alias _GtkMenuClass GtkMenuClass;
alias void function(_GtkMenuShell *) _BCD_func__15492;
enum GtkMenuDirectionType {
GTK_MENU_DIR_PARENT=0,
GTK_MENU_DIR_CHILD=1,
GTK_MENU_DIR_NEXT=2,
GTK_MENU_DIR_PREV=3,
}
alias void function(_GtkMenuShell *, int) _BCD_func__15493;
alias void function(_GtkMenuShell *, int) _BCD_func__15494;
alias void function(_GtkMenuShell *, _GtkWidget *) _BCD_func__15495;
alias void function(_GtkMenuShell *, _GtkWidget *, int) _BCD_func__15496;
alias int function(_GtkMenuShell *) _BCD_func__15497;
alias _GtkAboutDialog GtkAboutDialog;
alias void function(_GtkAboutDialog *, char *, void *) _BCD_func__11152;
alias _BCD_func__11152 GtkAboutDialogActivateLinkFunc;
alias _GtkAboutDialogClass GtkAboutDialogClass;
alias void function(_GtkDialog *, int) _BCD_func__15504;
alias void function(_GtkDialog *) _BCD_func__15505;
enum GtkResponseType {
GTK_RESPONSE_NONE=-1,
GTK_RESPONSE_REJECT=-2,
GTK_RESPONSE_ACCEPT=-3,
GTK_RESPONSE_DELETE_EVENT=-4,
GTK_RESPONSE_OK=-5,
GTK_RESPONSE_CANCEL=-6,
GTK_RESPONSE_CLOSE=-7,
GTK_RESPONSE_YES=-8,
GTK_RESPONSE_NO=-9,
GTK_RESPONSE_APPLY=-10,
GTK_RESPONSE_HELP=-11,
}
enum GtkDialogFlags {
GTK_DIALOG_MODAL=1,
GTK_DIALOG_DESTROY_WITH_PARENT=2,
GTK_DIALOG_NO_SEPARATOR=4,
}
alias void function(_GtkWindow *, uint, int, int, void *) _BCD_func__11182;
alias _BCD_func__11182 GtkWindowKeysForeachFunc;
alias _GtkWindowGroupClass GtkWindowGroupClass;
alias void GtkWindowGeometryInfo;
alias void function(_GtkWindow *, _GtkWidget *) _BCD_func__15510;
alias int function(_GtkWindow *, _GdkEvent *) _BCD_func__15511;
alias void function(_GtkWindow *) _BCD_func__15512;
alias void function(_GtkWindow *, int) _BCD_func__15513;
alias void function(_GtkContainer *, _GtkWidget *) _BCD_func__15518;
alias void function(_GtkContainer *) _BCD_func__15519;
alias void function(_GtkContainer *, int, _BCD_func__10623, void *) _BCD_func__15520;
alias uint function(_GtkContainer *) _BCD_func__15521;
alias char * function(_GtkContainer *, _GtkWidget *) _BCD_func__15522;
alias void function(_GtkContainer *, _GtkWidget *, uint, _GValue *, _GParamSpec *) _BCD_func__15523;
alias void function(_GtkContainer *, _GtkWidget *, uint, _GValue *, _GParamSpec *) _BCD_func__15524;
alias _BCD_func__10623 GtkCallback;
alias _GtkWidgetShapeInfo GtkWidgetShapeInfo;
alias _GtkWidgetAuxInfo GtkWidgetAuxInfo;
alias void function(_GtkWidget *, uint, _GParamSpec * *) _BCD_func__15529;
alias void function(_GtkWidget *) _BCD_func__15530;
alias void function(_GtkWidget *, _GtkRequisition *) _BCD_func__15531;
alias void function(_GtkWidget *, _GdkRectangle *) _BCD_func__15532;
alias void function(_GtkWidget *, int) _BCD_func__15533;
alias void function(_GtkWidget *, _GtkWidget *) _BCD_func__15534;
alias void function(_GtkWidget *, _GtkStyle *) _BCD_func__15535;
alias void function(_GtkWidget *, int) _BCD_func__15536;
alias void function(_GtkWidget *, int) _BCD_func__15537;
alias void function(_GtkWidget *, _GParamSpec *) _BCD_func__15538;
alias int function(_GtkWidget *, int) _BCD_func__15539;
alias int function(_GtkWidget *, int) _BCD_func__15540;
alias int function(_GtkWidget *, _GdkEvent *) _BCD_func__15541;
alias int function(_GtkWidget *, _GdkEventButton *) _BCD_func__15542;
alias int function(_GtkWidget *, _GdkEventScroll *) _BCD_func__15543;
alias int function(_GtkWidget *, _GdkEventMotion *) _BCD_func__15544;
alias int function(_GtkWidget *, _GdkEventAny *) _BCD_func__15545;
alias int function(_GtkWidget *, _GdkEventExpose *) _BCD_func__15546;
alias int function(_GtkWidget *, _GdkEventKey *) _BCD_func__15547;
alias int function(_GtkWidget *, _GdkEventCrossing *) _BCD_func__15548;
alias int function(_GtkWidget *, _GdkEventConfigure *) _BCD_func__15549;
alias int function(_GtkWidget *, _GdkEventFocus *) _BCD_func__15550;
alias int function(_GtkWidget *, _GdkEventProperty *) _BCD_func__15551;
alias int function(_GtkWidget *, _GdkEventSelection *) _BCD_func__15552;
alias int function(_GtkWidget *, _GdkEventProximity *) _BCD_func__15553;
alias int function(_GtkWidget *, _GdkEventVisibility *) _BCD_func__15554;
alias int function(_GtkWidget *, _GdkEventClient *) _BCD_func__15555;
alias int function(_GtkWidget *, _GdkEventWindowState *) _BCD_func__15556;
alias void function(_GtkWidget *, _GtkSelectionData *, uint, uint) _BCD_func__15557;
alias void function(_GtkWidget *, _GtkSelectionData *, uint) _BCD_func__15558;
alias void function(_GtkWidget *, _GdkDragContext *) _BCD_func__15559;
alias void function(_GtkWidget *, _GdkDragContext *, _GtkSelectionData *, uint, uint) _BCD_func__15560;
alias void function(_GtkWidget *, _GdkDragContext *, uint) _BCD_func__15561;
alias int function(_GtkWidget *, _GdkDragContext *, int, int, uint) _BCD_func__15562;
alias void function(_GtkWidget *, _GdkDragContext *, int, int, _GtkSelectionData *, uint, uint) _BCD_func__15563;
alias int function(_GtkWidget *) _BCD_func__15564;
enum GtkWidgetHelpType {
GTK_WIDGET_HELP_TOOLTIP=0,
GTK_WIDGET_HELP_WHATS_THIS=1,
}
alias int function(_GtkWidget *, int) _BCD_func__15565;
alias _AtkObject * function(_GtkWidget *) _BCD_func__15566;
alias void function(_GtkWidget *, _GdkScreen *) _BCD_func__15567;
alias int function(_GtkWidget *, uint) _BCD_func__15568;
alias int function(_GtkWidget *, _GdkEventGrabBroken *) _BCD_func__15569;
enum GtkWidgetFlags {
GTK_TOPLEVEL=16,
GTK_NO_WINDOW=32,
GTK_REALIZED=64,
GTK_MAPPED=128,
GTK_VISIBLE=256,
GTK_SENSITIVE=512,
GTK_PARENT_SENSITIVE=1024,
GTK_CAN_FOCUS=2048,
GTK_HAS_FOCUS=4096,
GTK_CAN_DEFAULT=8192,
GTK_HAS_DEFAULT=16384,
GTK_HAS_GRAB=32768,
GTK_RC_STYLE=65536,
GTK_COMPOSITE_CHILD=131072,
GTK_NO_REPARENT=262144,
GTK_APP_PAINTABLE=524288,
GTK_RECEIVES_DEFAULT=1048576,
GTK_DOUBLE_BUFFERED=2097152,
GTK_NO_SHOW_ALL=4194304,
}
alias void GtkSettingsPropertyValue;
alias _GtkSettingsValue GtkSettingsValue;
alias _GtkSettingsClass GtkSettingsClass;
enum GtkRcTokenType {
GTK_RC_TOKEN_INVALID=270,
GTK_RC_TOKEN_INCLUDE=271,
GTK_RC_TOKEN_NORMAL=272,
GTK_RC_TOKEN_ACTIVE=273,
GTK_RC_TOKEN_PRELIGHT=274,
GTK_RC_TOKEN_SELECTED=275,
GTK_RC_TOKEN_INSENSITIVE=276,
GTK_RC_TOKEN_FG=277,
GTK_RC_TOKEN_BG=278,
GTK_RC_TOKEN_TEXT=279,
GTK_RC_TOKEN_BASE=280,
GTK_RC_TOKEN_XTHICKNESS=281,
GTK_RC_TOKEN_YTHICKNESS=282,
GTK_RC_TOKEN_FONT=283,
GTK_RC_TOKEN_FONTSET=284,
GTK_RC_TOKEN_FONT_NAME=285,
GTK_RC_TOKEN_BG_PIXMAP=286,
GTK_RC_TOKEN_PIXMAP_PATH=287,
GTK_RC_TOKEN_STYLE=288,
GTK_RC_TOKEN_BINDING=289,
GTK_RC_TOKEN_BIND=290,
GTK_RC_TOKEN_WIDGET=291,
GTK_RC_TOKEN_WIDGET_CLASS=292,
GTK_RC_TOKEN_CLASS=293,
GTK_RC_TOKEN_LOWEST=294,
GTK_RC_TOKEN_GTK=295,
GTK_RC_TOKEN_APPLICATION=296,
GTK_RC_TOKEN_THEME=297,
GTK_RC_TOKEN_RC=298,
GTK_RC_TOKEN_HIGHEST=299,
GTK_RC_TOKEN_ENGINE=300,
GTK_RC_TOKEN_MODULE_PATH=301,
GTK_RC_TOKEN_IM_MODULE_PATH=302,
GTK_RC_TOKEN_IM_MODULE_FILE=303,
GTK_RC_TOKEN_STOCK=304,
GTK_RC_TOKEN_LTR=305,
GTK_RC_TOKEN_RTL=306,
GTK_RC_TOKEN_LAST=307,
}
enum GtkRcFlags {
GTK_RC_FG=1,
GTK_RC_BG=2,
GTK_RC_TEXT=4,
GTK_RC_BASE=8,
}
alias _GtkRcStyleClass GtkRcStyleClass;
alias _GtkRcStyle GtkRcStyle;
alias _GtkRcStyle * function(_GtkRcStyle *) _BCD_func__15600;
alias _GtkSettings GtkSettings;
alias uint function(_GtkRcStyle *, _GtkSettings *, _GScanner *) _BCD_func__15601;
alias void function(_GtkRcStyle *, _GtkRcStyle *) _BCD_func__15602;
alias _GtkStyle * function(_GtkRcStyle *) _BCD_func__15603;
alias void GtkRcContext;
alias _GtkIconFactory GtkIconFactory;
alias int function(_GParamSpec *, _GString *, _GValue *) _BCD_func__11507;
alias _BCD_func__11507 GtkRcPropertyParser;
alias _GtkRcProperty GtkRcProperty;
alias void GtkIconSource;
alias void GtkThemeEngine;
alias _GtkStyleClass GtkStyleClass;
alias void function(_GtkStyle *) _BCD_func__15610;
alias void function(_GtkStyle *, _GtkStyle *) _BCD_func__15611;
alias _GtkStyle * function(_GtkStyle *) _BCD_func__15612;
alias void function(_GtkStyle *, _GtkRcStyle *) _BCD_func__15613;
alias void function(_GtkStyle *, _GdkDrawable *, int) _BCD_func__15614;
alias void * function(_GtkStyle *, void *, int, int, int, _GtkWidget *, char *) _BCD_func__15615;
alias void function(_GtkStyle *, _GdkDrawable *, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int) _BCD_func__15616;
alias void function(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int) _BCD_func__15617;
alias void function(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, _GdkPoint *, int, int) _BCD_func__15618;
enum GtkArrowType {
GTK_ARROW_UP=0,
GTK_ARROW_DOWN=1,
GTK_ARROW_LEFT=2,
GTK_ARROW_RIGHT=3,
}
alias void function(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int, int) _BCD_func__15619;
alias void function(_GtkStyle *, _GdkDrawable *, int, _GdkRectangle *, _GtkWidget *, char *, int, int, char *) _BCD_func__15620;
enum GtkPositionType {
GTK_POS_LEFT=0,
GTK_POS_RIGHT=1,
GTK_POS_TOP=2,
GTK_POS_BOTTOM=3,
}
alias void function(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int, int, int) _BCD_func__15621;
alias void function(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int) _BCD_func__15622;
alias void function(_GtkStyle *, _GdkDrawable *, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int) _BCD_func__15623;
alias void function(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int) _BCD_func__15624;
enum GtkExpanderStyle {
GTK_EXPANDER_COLLAPSED=0,
GTK_EXPANDER_SEMI_COLLAPSED=1,
GTK_EXPANDER_SEMI_EXPANDED=2,
GTK_EXPANDER_EXPANDED=3,
}
alias void function(_GtkStyle *, _GdkDrawable *, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int) _BCD_func__15625;
alias void function(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, void *) _BCD_func__15626;
alias void function(_GtkStyle *, _GdkDrawable *, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int) _BCD_func__15627;
alias _GtkAdjustmentClass GtkAdjustmentClass;
alias void function(_GtkAdjustment *) _BCD_func__15631;
enum GtkArgFlags {
GTK_ARG_READABLE=1,
GTK_ARG_WRITABLE=2,
GTK_ARG_CONSTRUCT=4,
GTK_ARG_CONSTRUCT_ONLY=8,
GTK_ARG_CHILD_ARG=16,
}
alias _GtkArg GtkArg;
alias void function(_GtkObject *, _GtkArg *, uint) _BCD_func__15634;
alias void function(_GtkObject *) _BCD_func__15635;
enum GtkObjectFlags {
GTK_IN_DESTRUCTION=1,
GTK_FLOATING=2,
GTK_RESERVED_1=4,
GTK_RESERVED_2=8,
}
enum GtkDebugFlag {
GTK_DEBUG_MISC=1,
GTK_DEBUG_PLUGSOCKET=2,
GTK_DEBUG_TEXT=4,
GTK_DEBUG_TREE=8,
GTK_DEBUG_UPDATES=16,
GTK_DEBUG_KEYBINDINGS=32,
GTK_DEBUG_MULTIHEAD=64,
GTK_DEBUG_MODULES=128,
GTK_DEBUG_GEOMETRY=256,
GTK_DEBUG_ICONTHEME=512,
}
alias _GFlagsValue GtkFlagValue;
alias _GEnumValue GtkEnumValue;
alias void function(_GClosure *, _GValue *, uint, _GValue *, void *, void *) _BCD_func__11660;
alias _BCD_func__11660 GtkSignalMarshaller;
alias _GtkTypeInfo GtkTypeInfo;
alias _BCD_func__11672 GtkClassInitFunc;
alias void function(_GTypeInstance *, void *) _BCD_func__11683;
alias _BCD_func__11683 GtkObjectInitFunc;
alias _BCD_func__10655 GtkSignalFunc;
alias void function(_GtkObject *, void *, uint, _GtkArg *) _BCD_func__11671;
alias _BCD_func__11671 GtkCallbackMarshal;
alias int function(void *) _BCD_func__11406;
alias _BCD_func__11406 GtkFunction;
alias uint GtkType;
alias _GTypeClass GtkTypeClass;
alias _GTypeInstance GtkTypeObject;
alias uint GtkFundamentalType;
alias _GtkAccelKey GtkAccelKey;
alias int function(_GtkAccelKey *, _GClosure *, void *) _BCD_func__11691;
alias _BCD_func__11691 GtkAccelGroupFindFunc;
alias int function(_GtkAccelGroup *, _GObject *, uint, int) _BCD_func__11692;
alias _BCD_func__11692 GtkAccelGroupActivate;
alias _GtkAccelGroupEntry GtkAccelGroupEntry;
alias _GtkAccelGroupClass GtkAccelGroupClass;
alias void function(_GtkAccelGroup *, uint, int, _GClosure *) _BCD_func__15651;
enum GtkAccelFlags {
GTK_ACCEL_VISIBLE=1,
GTK_ACCEL_LOCKED=2,
GTK_ACCEL_MASK=7,
}
enum GtkPackDirection {
GTK_PACK_DIRECTION_LTR=0,
GTK_PACK_DIRECTION_RTL=1,
GTK_PACK_DIRECTION_TTB=2,
GTK_PACK_DIRECTION_BTT=3,
}
enum GtkIMStatusStyle {
GTK_IM_STATUS_NOTHING=0,
GTK_IM_STATUS_CALLBACK=1,
GTK_IM_STATUS_NONE=2,
}
enum GtkIMPreeditStyle {
GTK_IM_PREEDIT_NOTHING=0,
GTK_IM_PREEDIT_CALLBACK=1,
GTK_IM_PREEDIT_NONE=2,
}
enum GtkWindowType {
GTK_WINDOW_TOPLEVEL=0,
GTK_WINDOW_POPUP=1,
}
enum GtkWindowPosition {
GTK_WIN_POS_NONE=0,
GTK_WIN_POS_CENTER=1,
GTK_WIN_POS_MOUSE=2,
GTK_WIN_POS_CENTER_ALWAYS=3,
GTK_WIN_POS_CENTER_ON_PARENT=4,
}
enum GtkVisibility {
GTK_VISIBILITY_NONE=0,
GTK_VISIBILITY_PARTIAL=1,
GTK_VISIBILITY_FULL=2,
}
enum GtkSubmenuPlacement {
GTK_TOP_BOTTOM=0,
GTK_LEFT_RIGHT=1,
}
enum GtkSubmenuDirection {
GTK_DIRECTION_LEFT=0,
GTK_DIRECTION_RIGHT=1,
}
enum GtkSignalRunType {
GTK_RUN_FIRST=1,
GTK_RUN_LAST=2,
GTK_RUN_BOTH=3,
GTK_RUN_NO_RECURSE=8,
GTK_RUN_ACTION=32,
GTK_RUN_NO_HOOKS=64,
}
enum GtkResizeMode {
GTK_RESIZE_PARENT=0,
GTK_RESIZE_QUEUE=1,
GTK_RESIZE_IMMEDIATE=2,
}
enum GtkReliefStyle {
GTK_RELIEF_NORMAL=0,
GTK_RELIEF_HALF=1,
GTK_RELIEF_NONE=2,
}
enum GtkPreviewType {
GTK_PREVIEW_COLOR=0,
GTK_PREVIEW_GRAYSCALE=1,
}
enum GtkPolicyType {
GTK_POLICY_ALWAYS=0,
GTK_POLICY_AUTOMATIC=1,
GTK_POLICY_NEVER=2,
}
enum GtkPathType {
GTK_PATH_WIDGET=0,
GTK_PATH_WIDGET_CLASS=1,
GTK_PATH_CLASS=2,
}
enum GtkPathPriorityType {
GTK_PATH_PRIO_LOWEST=0,
GTK_PATH_PRIO_GTK=4,
GTK_PATH_PRIO_APPLICATION=8,
GTK_PATH_PRIO_THEME=10,
GTK_PATH_PRIO_RC=12,
GTK_PATH_PRIO_HIGHEST=15,
}
enum GtkPackType {
GTK_PACK_START=0,
GTK_PACK_END=1,
}
enum GtkCornerType {
GTK_CORNER_TOP_LEFT=0,
GTK_CORNER_BOTTOM_LEFT=1,
GTK_CORNER_TOP_RIGHT=2,
GTK_CORNER_BOTTOM_RIGHT=3,
}
enum GtkScrollStep {
GTK_SCROLL_STEPS=0,
GTK_SCROLL_PAGES=1,
GTK_SCROLL_ENDS=2,
GTK_SCROLL_HORIZONTAL_STEPS=3,
GTK_SCROLL_HORIZONTAL_PAGES=4,
GTK_SCROLL_HORIZONTAL_ENDS=5,
}
enum GtkMetricType {
GTK_PIXELS=0,
GTK_INCHES=1,
GTK_CENTIMETERS=2,
}
enum GtkMatchType {
GTK_MATCH_ALL=0,
GTK_MATCH_ALL_TAIL=1,
GTK_MATCH_HEAD=2,
GTK_MATCH_TAIL=3,
GTK_MATCH_EXACT=4,
GTK_MATCH_LAST=5,
}
enum GtkSideType {
GTK_SIDE_TOP=0,
GTK_SIDE_BOTTOM=1,
GTK_SIDE_LEFT=2,
GTK_SIDE_RIGHT=3,
}
enum GtkAttachOptions {
GTK_EXPAND=1,
GTK_SHRINK=2,
GTK_FILL=4,
}
enum GtkAnchorType {
GTK_ANCHOR_CENTER=0,
GTK_ANCHOR_NORTH=1,
GTK_ANCHOR_NORTH_WEST=2,
GTK_ANCHOR_NORTH_EAST=3,
GTK_ANCHOR_SOUTH=4,
GTK_ANCHOR_SOUTH_WEST=5,
GTK_ANCHOR_SOUTH_EAST=6,
GTK_ANCHOR_WEST=7,
GTK_ANCHOR_EAST=8,
GTK_ANCHOR_N=1,
GTK_ANCHOR_NW=2,
GTK_ANCHOR_NE=3,
GTK_ANCHOR_S=4,
GTK_ANCHOR_SW=5,
GTK_ANCHOR_SE=6,
GTK_ANCHOR_W=7,
GTK_ANCHOR_E=8,
}
extern (C) _GtkWidget * gtk_vseparator_new();
extern (C) uint gtk_vseparator_get_type();
extern (C) _GtkWidget * gtk_vscale_new_with_range(double, double, double);
extern (C) _GtkWidget * gtk_vscale_new(_GtkAdjustment *);
extern (C) uint gtk_vscale_get_type();
extern (C) _GtkWidget * gtk_vruler_new();
extern (C) uint gtk_vruler_get_type();
extern (C) _GtkWidget * gtk_vpaned_new();
extern (C) uint gtk_vpaned_get_type();
extern (C) void gtk_vbutton_box_set_layout_default(int);
extern (C) int gtk_vbutton_box_get_layout_default();
extern (C) void gtk_vbutton_box_set_spacing_default(int);
extern (C) int gtk_vbutton_box_get_spacing_default();
extern (C) _GtkWidget * gtk_vbutton_box_new();
extern (C) uint gtk_vbutton_box_get_type();
extern (C) uint gtk_ui_manager_new_merge_id(_GtkUIManager *);
extern (C) void gtk_ui_manager_ensure_update(_GtkUIManager *);
extern (C) char * gtk_ui_manager_get_ui(_GtkUIManager *);
extern (C) void gtk_ui_manager_remove_ui(_GtkUIManager *, uint);
extern (C) void gtk_ui_manager_add_ui(_GtkUIManager *, uint, char *, char *, char *, int, int);
extern (C) uint gtk_ui_manager_add_ui_from_file(_GtkUIManager *, char *, _GError * *);
extern (C) uint gtk_ui_manager_add_ui_from_string(_GtkUIManager *, char *, int, _GError * *);
extern (C) _GtkAction * gtk_ui_manager_get_action(_GtkUIManager *, char *);
extern (C) _GSList * gtk_ui_manager_get_toplevels(_GtkUIManager *, int);
extern (C) _GtkWidget * gtk_ui_manager_get_widget(_GtkUIManager *, char *);
extern (C) _GtkAccelGroup * gtk_ui_manager_get_accel_group(_GtkUIManager *);
extern (C) _GList * gtk_ui_manager_get_action_groups(_GtkUIManager *);
extern (C) void gtk_ui_manager_remove_action_group(_GtkUIManager *, _GtkActionGroup *);
extern (C) void gtk_ui_manager_insert_action_group(_GtkUIManager *, _GtkActionGroup *, int);
extern (C) int gtk_ui_manager_get_add_tearoffs(_GtkUIManager *);
extern (C) void gtk_ui_manager_set_add_tearoffs(_GtkUIManager *, int);
extern (C) _GtkUIManager * gtk_ui_manager_new();
extern (C) uint gtk_ui_manager_get_type();
extern (C) void gtk_tree_store_move_after(_GtkTreeStore *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_tree_store_move_before(_GtkTreeStore *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_tree_store_swap(_GtkTreeStore *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_tree_store_reorder(_GtkTreeStore *, _GtkTreeIter *, int *);
extern (C) int gtk_tree_store_iter_is_valid(_GtkTreeStore *, _GtkTreeIter *);
extern (C) void gtk_tree_store_clear(_GtkTreeStore *);
extern (C) int gtk_tree_store_iter_depth(_GtkTreeStore *, _GtkTreeIter *);
extern (C) int gtk_tree_store_is_ancestor(_GtkTreeStore *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_tree_store_append(_GtkTreeStore *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_tree_store_prepend(_GtkTreeStore *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_tree_store_insert_after(_GtkTreeStore *, _GtkTreeIter *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_tree_store_insert_before(_GtkTreeStore *, _GtkTreeIter *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_tree_store_insert(_GtkTreeStore *, _GtkTreeIter *, _GtkTreeIter *, int);
extern (C) int gtk_tree_store_remove(_GtkTreeStore *, _GtkTreeIter *);
extern (C) void gtk_tree_store_set_valist(_GtkTreeStore *, _GtkTreeIter *, char *);
extern (C) void gtk_tree_store_set(_GtkTreeStore *, _GtkTreeIter *, ...);
extern (C) void gtk_tree_store_set_value(_GtkTreeStore *, _GtkTreeIter *, int, _GValue *);
extern (C) void gtk_tree_store_set_column_types(_GtkTreeStore *, int, uint *);
extern (C) _GtkTreeStore * gtk_tree_store_newv(int, uint *);
extern (C) _GtkTreeStore * gtk_tree_store_new(int, ...);
extern (C) uint gtk_tree_store_get_type();
extern (C) void gtk_tree_selection_unselect_range(_GtkTreeSelection *, void *, void *);
extern (C) void gtk_tree_selection_select_range(_GtkTreeSelection *, void *, void *);
extern (C) void gtk_tree_selection_unselect_all(_GtkTreeSelection *);
extern (C) void gtk_tree_selection_select_all(_GtkTreeSelection *);
extern (C) int gtk_tree_selection_iter_is_selected(_GtkTreeSelection *, _GtkTreeIter *);
extern (C) int gtk_tree_selection_path_is_selected(_GtkTreeSelection *, void *);
extern (C) void gtk_tree_selection_unselect_iter(_GtkTreeSelection *, _GtkTreeIter *);
extern (C) void gtk_tree_selection_select_iter(_GtkTreeSelection *, _GtkTreeIter *);
extern (C) void gtk_tree_selection_unselect_path(_GtkTreeSelection *, void *);
extern (C) void gtk_tree_selection_select_path(_GtkTreeSelection *, void *);
extern (C) void gtk_tree_selection_selected_foreach(_GtkTreeSelection *, _BCD_func__7923, void *);
extern (C) int gtk_tree_selection_count_selected_rows(_GtkTreeSelection *);
extern (C) _GList * gtk_tree_selection_get_selected_rows(_GtkTreeSelection *, void * *);
extern (C) int gtk_tree_selection_get_selected(_GtkTreeSelection *, void * *, _GtkTreeIter *);
extern (C) _GtkTreeView * gtk_tree_selection_get_tree_view(_GtkTreeSelection *);
extern (C) void * gtk_tree_selection_get_user_data(_GtkTreeSelection *);
extern (C) void gtk_tree_selection_set_select_function(_GtkTreeSelection *, _BCD_func__7924, void *, _BCD_func__11672);
extern (C) int gtk_tree_selection_get_mode(_GtkTreeSelection *);
extern (C) void gtk_tree_selection_set_mode(_GtkTreeSelection *, int);
extern (C) uint gtk_tree_selection_get_type();
extern (C) int gtk_tree_model_sort_iter_is_valid(_GtkTreeModelSort *, _GtkTreeIter *);
extern (C) void gtk_tree_model_sort_clear_cache(_GtkTreeModelSort *);
extern (C) void gtk_tree_model_sort_reset_default_sort_func(_GtkTreeModelSort *);
extern (C) void gtk_tree_model_sort_convert_iter_to_child_iter(_GtkTreeModelSort *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void * gtk_tree_model_sort_convert_path_to_child_path(_GtkTreeModelSort *, void *);
extern (C) void gtk_tree_model_sort_convert_child_iter_to_iter(_GtkTreeModelSort *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void * gtk_tree_model_sort_convert_child_path_to_path(_GtkTreeModelSort *, void *);
extern (C) void * gtk_tree_model_sort_get_model(_GtkTreeModelSort *);
extern (C) void * gtk_tree_model_sort_new_with_model(void *);
extern (C) uint gtk_tree_model_sort_get_type();
extern (C) int gtk_tree_get_row_drag_data(_GtkSelectionData *, void * *, void * *);
extern (C) int gtk_tree_set_row_drag_data(_GtkSelectionData *, void *, void *);
extern (C) int gtk_tree_drag_dest_row_drop_possible(void *, void *, _GtkSelectionData *);
extern (C) int gtk_tree_drag_dest_drag_data_received(void *, void *, _GtkSelectionData *);
extern (C) uint gtk_tree_drag_dest_get_type();
extern (C) int gtk_tree_drag_source_drag_data_get(void *, void *, _GtkSelectionData *);
extern (C) int gtk_tree_drag_source_drag_data_delete(void *, void *);
extern (C) int gtk_tree_drag_source_row_draggable(void *, void *);
extern (C) uint gtk_tree_drag_source_get_type();
extern (C) void gtk_toolbar_insert_widget(_GtkToolbar *, _GtkWidget *, char *, char *, int);
extern (C) void gtk_toolbar_prepend_widget(_GtkToolbar *, _GtkWidget *, char *, char *);
extern (C) void gtk_toolbar_append_widget(_GtkToolbar *, _GtkWidget *, char *, char *);
extern (C) _GtkWidget * gtk_toolbar_insert_element(_GtkToolbar *, int, _GtkWidget *, char *, char *, char *, _GtkWidget *, _BCD_func__10655, void *, int);
extern (C) _GtkWidget * gtk_toolbar_prepend_element(_GtkToolbar *, int, _GtkWidget *, char *, char *, char *, _GtkWidget *, _BCD_func__10655, void *);
extern (C) _GtkWidget * gtk_toolbar_append_element(_GtkToolbar *, int, _GtkWidget *, char *, char *, char *, _GtkWidget *, _BCD_func__10655, void *);
extern (C) void gtk_toolbar_remove_space(_GtkToolbar *, int);
extern (C) void gtk_toolbar_insert_space(_GtkToolbar *, int);
extern (C) void gtk_toolbar_prepend_space(_GtkToolbar *);
extern (C) void gtk_toolbar_append_space(_GtkToolbar *);
extern (C) _GtkWidget * gtk_toolbar_insert_stock(_GtkToolbar *, char *, char *, char *, _BCD_func__10655, void *, int);
extern (C) _GtkWidget * gtk_toolbar_insert_item(_GtkToolbar *, char *, char *, char *, _GtkWidget *, _BCD_func__10655, void *, int);
extern (C) _GtkWidget * gtk_toolbar_prepend_item(_GtkToolbar *, char *, char *, char *, _GtkWidget *, _BCD_func__10655, void *);
extern (C) _GtkWidget * gtk_toolbar_append_item(_GtkToolbar *, char *, char *, char *, _GtkWidget *, _BCD_func__10655, void *);
extern (C) void gtk_toolbar_unset_icon_size(_GtkToolbar *);
extern (C) void gtk_toolbar_set_icon_size(_GtkToolbar *, int);
extern (C) void _gtk_toolbar_rebuild_menu(_GtkToolbar *);
extern (C) int _gtk_toolbar_get_default_space_size();
extern (C) void _gtk_toolbar_paint_space_line(_GtkWidget *, _GtkToolbar *, _GdkRectangle *, _GdkRectangle *);
extern (C) char * _gtk_toolbar_elide_underscores(char *);
extern (C) void gtk_toolbar_set_drop_highlight_item(_GtkToolbar *, _GtkToolItem *, int);
extern (C) int gtk_toolbar_get_drop_index(_GtkToolbar *, int, int);
extern (C) int gtk_toolbar_get_relief_style(_GtkToolbar *);
extern (C) int gtk_toolbar_get_icon_size(_GtkToolbar *);
extern (C) void gtk_toolbar_unset_style(_GtkToolbar *);
extern (C) void gtk_toolbar_set_style(_GtkToolbar *, int);
extern (C) int gtk_toolbar_get_style(_GtkToolbar *);
extern (C) void gtk_toolbar_set_tooltips(_GtkToolbar *, int);
extern (C) int gtk_toolbar_get_tooltips(_GtkToolbar *);
extern (C) void gtk_toolbar_set_orientation(_GtkToolbar *, int);
extern (C) int gtk_toolbar_get_orientation(_GtkToolbar *);
extern (C) void gtk_toolbar_set_show_arrow(_GtkToolbar *, int);
extern (C) int gtk_toolbar_get_show_arrow(_GtkToolbar *);
extern (C) _GtkToolItem * gtk_toolbar_get_nth_item(_GtkToolbar *, int);
extern (C) int gtk_toolbar_get_n_items(_GtkToolbar *);
extern (C) int gtk_toolbar_get_item_index(_GtkToolbar *, _GtkToolItem *);
extern (C) void gtk_toolbar_insert(_GtkToolbar *, _GtkToolItem *, int);
extern (C) _GtkWidget * gtk_toolbar_new();
extern (C) uint gtk_toolbar_get_type();
extern (C) void gtk_tips_query_set_labels(_GtkTipsQuery *, char *, char *);
extern (C) void gtk_tips_query_set_caller(_GtkTipsQuery *, _GtkWidget *);
extern (C) void gtk_tips_query_stop_query(_GtkTipsQuery *);
extern (C) void gtk_tips_query_start_query(_GtkTipsQuery *);
extern (C) _GtkWidget * gtk_tips_query_new();
extern (C) uint gtk_tips_query_get_type();
extern (C) _GtkTextAttributes * gtk_text_view_get_default_attributes(_GtkTextView *);
extern (C) void * gtk_text_view_get_tabs(_GtkTextView *);
extern (C) void gtk_text_view_set_tabs(_GtkTextView *, void *);
extern (C) int gtk_text_view_get_indent(_GtkTextView *);
extern (C) void gtk_text_view_set_indent(_GtkTextView *, int);
extern (C) int gtk_text_view_get_right_margin(_GtkTextView *);
extern (C) void gtk_text_view_set_right_margin(_GtkTextView *, int);
extern (C) int gtk_text_view_get_left_margin(_GtkTextView *);
extern (C) void gtk_text_view_set_left_margin(_GtkTextView *, int);
extern (C) int gtk_text_view_get_justification(_GtkTextView *);
extern (C) void gtk_text_view_set_justification(_GtkTextView *, int);
extern (C) int gtk_text_view_get_pixels_inside_wrap(_GtkTextView *);
extern (C) void gtk_text_view_set_pixels_inside_wrap(_GtkTextView *, int);
extern (C) int gtk_text_view_get_pixels_below_lines(_GtkTextView *);
extern (C) void gtk_text_view_set_pixels_below_lines(_GtkTextView *, int);
extern (C) int gtk_text_view_get_pixels_above_lines(_GtkTextView *);
extern (C) void gtk_text_view_set_pixels_above_lines(_GtkTextView *, int);
extern (C) int gtk_text_view_get_accepts_tab(_GtkTextView *);
extern (C) void gtk_text_view_set_accepts_tab(_GtkTextView *, int);
extern (C) int gtk_text_view_get_overwrite(_GtkTextView *);
extern (C) void gtk_text_view_set_overwrite(_GtkTextView *, int);
extern (C) int gtk_text_view_get_editable(_GtkTextView *);
extern (C) void gtk_text_view_set_editable(_GtkTextView *, int);
extern (C) int gtk_text_view_get_wrap_mode(_GtkTextView *);
extern (C) void gtk_text_view_set_wrap_mode(_GtkTextView *, int);
extern (C) void gtk_text_view_move_child(_GtkTextView *, _GtkWidget *, int, int);
extern (C) void gtk_text_view_add_child_in_window(_GtkTextView *, _GtkWidget *, int, int, int);
extern (C) void gtk_text_view_add_child_at_anchor(_GtkTextView *, _GtkWidget *, _GtkTextChildAnchor *);
extern (C) int gtk_text_view_move_visually(_GtkTextView *, _GtkTextIter *, int);
extern (C) int gtk_text_view_starts_display_line(_GtkTextView *, _GtkTextIter *);
extern (C) int gtk_text_view_backward_display_line_start(_GtkTextView *, _GtkTextIter *);
extern (C) int gtk_text_view_forward_display_line_end(_GtkTextView *, _GtkTextIter *);
extern (C) int gtk_text_view_backward_display_line(_GtkTextView *, _GtkTextIter *);
extern (C) int gtk_text_view_forward_display_line(_GtkTextView *, _GtkTextIter *);
extern (C) int gtk_text_view_get_border_window_size(_GtkTextView *, int);
extern (C) void gtk_text_view_set_border_window_size(_GtkTextView *, int, int);
extern (C) int gtk_text_view_get_window_type(_GtkTextView *, _GdkDrawable *);
extern (C) _GdkDrawable * gtk_text_view_get_window(_GtkTextView *, int);
extern (C) void gtk_text_view_window_to_buffer_coords(_GtkTextView *, int, int, int, int *, int *);
extern (C) void gtk_text_view_buffer_to_window_coords(_GtkTextView *, int, int, int, int *, int *);
extern (C) void gtk_text_view_get_line_at_y(_GtkTextView *, _GtkTextIter *, int, int *);
extern (C) void gtk_text_view_get_line_yrange(_GtkTextView *, _GtkTextIter *, int *, int *);
extern (C) void gtk_text_view_get_iter_at_position(_GtkTextView *, _GtkTextIter *, int *, int, int);
extern (C) void gtk_text_view_get_iter_at_location(_GtkTextView *, _GtkTextIter *, int, int);
extern (C) void gtk_text_view_get_iter_location(_GtkTextView *, _GtkTextIter *, _GdkRectangle *);
extern (C) int gtk_text_view_get_cursor_visible(_GtkTextView *);
extern (C) void gtk_text_view_set_cursor_visible(_GtkTextView *, int);
extern (C) void gtk_text_view_get_visible_rect(_GtkTextView *, _GdkRectangle *);
extern (C) int gtk_text_view_place_cursor_onscreen(_GtkTextView *);
extern (C) int gtk_text_view_move_mark_onscreen(_GtkTextView *, _GtkTextMark *);
extern (C) void gtk_text_view_scroll_mark_onscreen(_GtkTextView *, _GtkTextMark *);
extern (C) void gtk_text_view_scroll_to_mark(_GtkTextView *, _GtkTextMark *, double, int, double, double);
extern (C) int gtk_text_view_scroll_to_iter(_GtkTextView *, _GtkTextIter *, double, int, double, double);
extern (C) _GtkTextBuffer * gtk_text_view_get_buffer(_GtkTextView *);
extern (C) void gtk_text_view_set_buffer(_GtkTextView *, _GtkTextBuffer *);
extern (C) _GtkWidget * gtk_text_view_new_with_buffer(_GtkTextBuffer *);
extern (C) _GtkWidget * gtk_text_view_new();
extern (C) uint gtk_text_view_get_type();
extern (C) void _gtk_text_buffer_notify_will_remove_tag(_GtkTextBuffer *, _GtkTextTag *);
extern (C) _PangoLogAttr * _gtk_text_buffer_get_line_log_attrs(_GtkTextBuffer *, _GtkTextIter *, int *);
extern (C) void * _gtk_text_buffer_get_btree(_GtkTextBuffer *);
extern (C) void _gtk_text_buffer_spew(_GtkTextBuffer *);
extern (C) void gtk_text_buffer_end_user_action(_GtkTextBuffer *);
extern (C) void gtk_text_buffer_begin_user_action(_GtkTextBuffer *);
extern (C) int gtk_text_buffer_delete_selection(_GtkTextBuffer *, int, int);
extern (C) int gtk_text_buffer_get_selection_bounds(_GtkTextBuffer *, _GtkTextIter *, _GtkTextIter *);
extern (C) void gtk_text_buffer_paste_clipboard(_GtkTextBuffer *, void *, _GtkTextIter *, int);
extern (C) void gtk_text_buffer_copy_clipboard(_GtkTextBuffer *, void *);
extern (C) void gtk_text_buffer_cut_clipboard(_GtkTextBuffer *, void *, int);
extern (C) void gtk_text_buffer_remove_selection_clipboard(_GtkTextBuffer *, void *);
extern (C) void gtk_text_buffer_add_selection_clipboard(_GtkTextBuffer *, void *);
extern (C) void gtk_text_buffer_set_modified(_GtkTextBuffer *, int);
extern (C) int gtk_text_buffer_get_modified(_GtkTextBuffer *);
extern (C) void gtk_text_buffer_get_iter_at_child_anchor(_GtkTextBuffer *, _GtkTextIter *, _GtkTextChildAnchor *);
extern (C) void gtk_text_buffer_get_iter_at_mark(_GtkTextBuffer *, _GtkTextIter *, _GtkTextMark *);
extern (C) void gtk_text_buffer_get_bounds(_GtkTextBuffer *, _GtkTextIter *, _GtkTextIter *);
extern (C) void gtk_text_buffer_get_end_iter(_GtkTextBuffer *, _GtkTextIter *);
extern (C) void gtk_text_buffer_get_start_iter(_GtkTextBuffer *, _GtkTextIter *);
extern (C) void gtk_text_buffer_get_iter_at_line(_GtkTextBuffer *, _GtkTextIter *, int);
extern (C) void gtk_text_buffer_get_iter_at_offset(_GtkTextBuffer *, _GtkTextIter *, int);
extern (C) void gtk_text_buffer_get_iter_at_line_index(_GtkTextBuffer *, _GtkTextIter *, int, int);
extern (C) void gtk_text_buffer_get_iter_at_line_offset(_GtkTextBuffer *, _GtkTextIter *, int, int);
extern (C) _GtkTextTag * gtk_text_buffer_create_tag(_GtkTextBuffer *, char *, char *, ...);
extern (C) void gtk_text_buffer_remove_all_tags(_GtkTextBuffer *, _GtkTextIter *, _GtkTextIter *);
extern (C) void gtk_text_buffer_remove_tag_by_name(_GtkTextBuffer *, char *, _GtkTextIter *, _GtkTextIter *);
extern (C) void gtk_text_buffer_apply_tag_by_name(_GtkTextBuffer *, char *, _GtkTextIter *, _GtkTextIter *);
extern (C) void gtk_text_buffer_remove_tag(_GtkTextBuffer *, _GtkTextTag *, _GtkTextIter *, _GtkTextIter *);
extern (C) void gtk_text_buffer_apply_tag(_GtkTextBuffer *, _GtkTextTag *, _GtkTextIter *, _GtkTextIter *);
extern (C) void gtk_text_buffer_select_range(_GtkTextBuffer *, _GtkTextIter *, _GtkTextIter *);
extern (C) void gtk_text_buffer_place_cursor(_GtkTextBuffer *, _GtkTextIter *);
extern (C) _GtkTextMark * gtk_text_buffer_get_selection_bound(_GtkTextBuffer *);
extern (C) _GtkTextMark * gtk_text_buffer_get_insert(_GtkTextBuffer *);
extern (C) void gtk_text_buffer_delete_mark_by_name(_GtkTextBuffer *, char *);
extern (C) void gtk_text_buffer_move_mark_by_name(_GtkTextBuffer *, char *, _GtkTextIter *);
extern (C) _GtkTextMark * gtk_text_buffer_get_mark(_GtkTextBuffer *, char *);
extern (C) void gtk_text_buffer_delete_mark(_GtkTextBuffer *, _GtkTextMark *);
extern (C) void gtk_text_buffer_move_mark(_GtkTextBuffer *, _GtkTextMark *, _GtkTextIter *);
extern (C) _GtkTextMark * gtk_text_buffer_create_mark(_GtkTextBuffer *, char *, _GtkTextIter *, int);
extern (C) _GtkTextChildAnchor * gtk_text_buffer_create_child_anchor(_GtkTextBuffer *, _GtkTextIter *);
extern (C) void gtk_text_buffer_insert_child_anchor(_GtkTextBuffer *, _GtkTextIter *, _GtkTextChildAnchor *);
extern (C) void gtk_text_buffer_insert_pixbuf(_GtkTextBuffer *, _GtkTextIter *, void *);
extern (C) char * gtk_text_buffer_get_slice(_GtkTextBuffer *, _GtkTextIter *, _GtkTextIter *, int);
extern (C) char * gtk_text_buffer_get_text(_GtkTextBuffer *, _GtkTextIter *, _GtkTextIter *, int);
extern (C) int gtk_text_buffer_backspace(_GtkTextBuffer *, _GtkTextIter *, int, int);
extern (C) int gtk_text_buffer_delete_interactive(_GtkTextBuffer *, _GtkTextIter *, _GtkTextIter *, int);
extern (C) void gtk_text_buffer_delete(_GtkTextBuffer *, _GtkTextIter *, _GtkTextIter *);
extern (C) void gtk_text_buffer_insert_with_tags_by_name(_GtkTextBuffer *, _GtkTextIter *, char *, int, char *, ...);
extern (C) void gtk_text_buffer_insert_with_tags(_GtkTextBuffer *, _GtkTextIter *, char *, int, _GtkTextTag *, ...);
extern (C) int gtk_text_buffer_insert_range_interactive(_GtkTextBuffer *, _GtkTextIter *, _GtkTextIter *, _GtkTextIter *, int);
extern (C) void gtk_text_buffer_insert_range(_GtkTextBuffer *, _GtkTextIter *, _GtkTextIter *, _GtkTextIter *);
extern (C) int gtk_text_buffer_insert_interactive_at_cursor(_GtkTextBuffer *, char *, int, int);
extern (C) int gtk_text_buffer_insert_interactive(_GtkTextBuffer *, _GtkTextIter *, char *, int, int);
extern (C) void gtk_text_buffer_insert_at_cursor(_GtkTextBuffer *, char *, int);
extern (C) void gtk_text_buffer_insert(_GtkTextBuffer *, _GtkTextIter *, char *, int);
extern (C) void gtk_text_buffer_set_text(_GtkTextBuffer *, char *, int);
extern (C) _GtkTextTagTable * gtk_text_buffer_get_tag_table(_GtkTextBuffer *);
extern (C) int gtk_text_buffer_get_char_count(_GtkTextBuffer *);
extern (C) int gtk_text_buffer_get_line_count(_GtkTextBuffer *);
extern (C) _GtkTextBuffer * gtk_text_buffer_new(_GtkTextTagTable *);
extern (C) uint gtk_text_buffer_get_type();
extern (C) int gtk_text_mark_get_left_gravity(_GtkTextMark *);
extern (C) _GtkTextBuffer * gtk_text_mark_get_buffer(_GtkTextMark *);
extern (C) int gtk_text_mark_get_deleted(_GtkTextMark *);
extern (C) char * gtk_text_mark_get_name(_GtkTextMark *);
extern (C) int gtk_text_mark_get_visible(_GtkTextMark *);
extern (C) void gtk_text_mark_set_visible(_GtkTextMark *, int);
extern (C) uint gtk_text_mark_get_type();
extern (C) void gtk_text_iter_order(_GtkTextIter *, _GtkTextIter *);
extern (C) int gtk_text_iter_in_range(_GtkTextIter *, _GtkTextIter *, _GtkTextIter *);
extern (C) int gtk_text_iter_compare(_GtkTextIter *, _GtkTextIter *);
extern (C) int gtk_text_iter_equal(_GtkTextIter *, _GtkTextIter *);
extern (C) int gtk_text_iter_backward_search(_GtkTextIter *, char *, int, _GtkTextIter *, _GtkTextIter *, _GtkTextIter *);
extern (C) int gtk_text_iter_forward_search(_GtkTextIter *, char *, int, _GtkTextIter *, _GtkTextIter *, _GtkTextIter *);
extern (C) int gtk_text_iter_backward_find_char(_GtkTextIter *, _BCD_func__8145, void *, _GtkTextIter *);
extern (C) int gtk_text_iter_forward_find_char(_GtkTextIter *, _BCD_func__8145, void *, _GtkTextIter *);
extern (C) int gtk_text_iter_backward_to_tag_toggle(_GtkTextIter *, _GtkTextTag *);
extern (C) int gtk_text_iter_forward_to_tag_toggle(_GtkTextIter *, _GtkTextTag *);
extern (C) void gtk_text_iter_set_visible_line_index(_GtkTextIter *, int);
extern (C) void gtk_text_iter_set_visible_line_offset(_GtkTextIter *, int);
extern (C) int gtk_text_iter_forward_to_line_end(_GtkTextIter *);
extern (C) void gtk_text_iter_forward_to_end(_GtkTextIter *);
extern (C) void gtk_text_iter_set_line_index(_GtkTextIter *, int);
extern (C) void gtk_text_iter_set_line_offset(_GtkTextIter *, int);
extern (C) void gtk_text_iter_set_line(_GtkTextIter *, int);
extern (C) void gtk_text_iter_set_offset(_GtkTextIter *, int);
extern (C) int gtk_text_iter_backward_visible_cursor_positions(_GtkTextIter *, int);
extern (C) int gtk_text_iter_forward_visible_cursor_positions(_GtkTextIter *, int);
extern (C) int gtk_text_iter_backward_visible_cursor_position(_GtkTextIter *);
extern (C) int gtk_text_iter_forward_visible_cursor_position(_GtkTextIter *);
extern (C) int gtk_text_iter_backward_cursor_positions(_GtkTextIter *, int);
extern (C) int gtk_text_iter_forward_cursor_positions(_GtkTextIter *, int);
extern (C) int gtk_text_iter_backward_cursor_position(_GtkTextIter *);
extern (C) int gtk_text_iter_forward_cursor_position(_GtkTextIter *);
extern (C) int gtk_text_iter_backward_sentence_starts(_GtkTextIter *, int);
extern (C) int gtk_text_iter_forward_sentence_ends(_GtkTextIter *, int);
extern (C) int gtk_text_iter_backward_sentence_start(_GtkTextIter *);
extern (C) int gtk_text_iter_forward_sentence_end(_GtkTextIter *);
extern (C) int gtk_text_iter_backward_visible_word_starts(_GtkTextIter *, int);
extern (C) int gtk_text_iter_forward_visible_word_ends(_GtkTextIter *, int);
extern (C) int gtk_text_iter_backward_visible_word_start(_GtkTextIter *);
extern (C) int gtk_text_iter_forward_visible_word_end(_GtkTextIter *);
extern (C) int gtk_text_iter_backward_visible_lines(_GtkTextIter *, int);
extern (C) int gtk_text_iter_forward_visible_lines(_GtkTextIter *, int);
extern (C) int gtk_text_iter_backward_visible_line(_GtkTextIter *);
extern (C) int gtk_text_iter_forward_visible_line(_GtkTextIter *);
extern (C) int gtk_text_iter_backward_word_starts(_GtkTextIter *, int);
extern (C) int gtk_text_iter_forward_word_ends(_GtkTextIter *, int);
extern (C) int gtk_text_iter_backward_word_start(_GtkTextIter *);
extern (C) int gtk_text_iter_forward_word_end(_GtkTextIter *);
extern (C) int gtk_text_iter_backward_lines(_GtkTextIter *, int);
extern (C) int gtk_text_iter_forward_lines(_GtkTextIter *, int);
extern (C) int gtk_text_iter_backward_line(_GtkTextIter *);
extern (C) int gtk_text_iter_forward_line(_GtkTextIter *);
extern (C) int gtk_text_iter_backward_chars(_GtkTextIter *, int);
extern (C) int gtk_text_iter_forward_chars(_GtkTextIter *, int);
extern (C) int gtk_text_iter_backward_char(_GtkTextIter *);
extern (C) int gtk_text_iter_forward_char(_GtkTextIter *);
extern (C) int gtk_text_iter_is_start(_GtkTextIter *);
extern (C) int gtk_text_iter_is_end(_GtkTextIter *);
extern (C) void * gtk_text_iter_get_language(_GtkTextIter *);
extern (C) int gtk_text_iter_get_attributes(_GtkTextIter *, _GtkTextAttributes *);
extern (C) int gtk_text_iter_get_bytes_in_line(_GtkTextIter *);
extern (C) int gtk_text_iter_get_chars_in_line(_GtkTextIter *);
extern (C) int gtk_text_iter_is_cursor_position(_GtkTextIter *);
extern (C) int gtk_text_iter_ends_line(_GtkTextIter *);
extern (C) int gtk_text_iter_starts_line(_GtkTextIter *);
extern (C) int gtk_text_iter_inside_sentence(_GtkTextIter *);
extern (C) int gtk_text_iter_ends_sentence(_GtkTextIter *);
extern (C) int gtk_text_iter_starts_sentence(_GtkTextIter *);
extern (C) int gtk_text_iter_inside_word(_GtkTextIter *);
extern (C) int gtk_text_iter_ends_word(_GtkTextIter *);
extern (C) int gtk_text_iter_starts_word(_GtkTextIter *);
extern (C) int gtk_text_iter_can_insert(_GtkTextIter *, int);
extern (C) int gtk_text_iter_editable(_GtkTextIter *, int);
extern (C) _GSList * gtk_text_iter_get_tags(_GtkTextIter *);
extern (C) int gtk_text_iter_has_tag(_GtkTextIter *, _GtkTextTag *);
extern (C) int gtk_text_iter_toggles_tag(_GtkTextIter *, _GtkTextTag *);
extern (C) int gtk_text_iter_ends_tag(_GtkTextIter *, _GtkTextTag *);
extern (C) int gtk_text_iter_begins_tag(_GtkTextIter *, _GtkTextTag *);
extern (C) _GSList * gtk_text_iter_get_toggled_tags(_GtkTextIter *, int);
extern (C) _GtkTextChildAnchor * gtk_text_iter_get_child_anchor(_GtkTextIter *);
extern (C) _GSList * gtk_text_iter_get_marks(_GtkTextIter *);
extern (C) void * gtk_text_iter_get_pixbuf(_GtkTextIter *);
extern (C) char * gtk_text_iter_get_visible_text(_GtkTextIter *, _GtkTextIter *);
extern (C) char * gtk_text_iter_get_visible_slice(_GtkTextIter *, _GtkTextIter *);
extern (C) char * gtk_text_iter_get_text(_GtkTextIter *, _GtkTextIter *);
extern (C) char * gtk_text_iter_get_slice(_GtkTextIter *, _GtkTextIter *);
extern (C) uint gtk_text_iter_get_char(_GtkTextIter *);
extern (C) int gtk_text_iter_get_visible_line_index(_GtkTextIter *);
extern (C) int gtk_text_iter_get_visible_line_offset(_GtkTextIter *);
extern (C) int gtk_text_iter_get_line_index(_GtkTextIter *);
extern (C) int gtk_text_iter_get_line_offset(_GtkTextIter *);
extern (C) int gtk_text_iter_get_line(_GtkTextIter *);
extern (C) int gtk_text_iter_get_offset(_GtkTextIter *);
extern (C) uint gtk_text_iter_get_type();
extern (C) void gtk_text_iter_free(_GtkTextIter *);
extern (C) _GtkTextIter * gtk_text_iter_copy(_GtkTextIter *);
extern (C) _GtkTextBuffer * gtk_text_iter_get_buffer(_GtkTextIter *);
extern (C) int gtk_text_child_anchor_get_deleted(_GtkTextChildAnchor *);
extern (C) _GList * gtk_text_child_anchor_get_widgets(_GtkTextChildAnchor *);
extern (C) _GtkTextChildAnchor * gtk_text_child_anchor_new();
extern (C) uint gtk_text_child_anchor_get_type();
extern (C) void _gtk_text_tag_table_remove_buffer(_GtkTextTagTable *, void *);
extern (C) void _gtk_text_tag_table_add_buffer(_GtkTextTagTable *, void *);
extern (C) int gtk_text_tag_table_get_size(_GtkTextTagTable *);
extern (C) void gtk_text_tag_table_foreach(_GtkTextTagTable *, _BCD_func__8178, void *);
extern (C) _GtkTextTag * gtk_text_tag_table_lookup(_GtkTextTagTable *, char *);
extern (C) void gtk_text_tag_table_remove(_GtkTextTagTable *, _GtkTextTag *);
extern (C) void gtk_text_tag_table_add(_GtkTextTagTable *, _GtkTextTag *);
extern (C) _GtkTextTagTable * gtk_text_tag_table_new();
extern (C) uint gtk_text_tag_table_get_type();
extern (C) uint gtk_text_attributes_get_type();
extern (C) void gtk_text_attributes_ref(_GtkTextAttributes *);
extern (C) void gtk_text_attributes_unref(_GtkTextAttributes *);
extern (C) void gtk_text_attributes_copy_values(_GtkTextAttributes *, _GtkTextAttributes *);
extern (C) _GtkTextAttributes * gtk_text_attributes_copy(_GtkTextAttributes *);
extern (C) _GtkTextAttributes * gtk_text_attributes_new();
extern (C) int gtk_text_tag_event(_GtkTextTag *, _GObject *, _GdkEvent *, _GtkTextIter *);
extern (C) void gtk_text_tag_set_priority(_GtkTextTag *, int);
extern (C) int gtk_text_tag_get_priority(_GtkTextTag *);
extern (C) _GtkTextTag * gtk_text_tag_new(char *);
extern (C) uint gtk_text_tag_get_type();
extern (C) _GtkWidget * gtk_tearoff_menu_item_new();
extern (C) uint gtk_tearoff_menu_item_get_type();
extern (C) int gtk_table_get_homogeneous(_GtkTable *);
extern (C) void gtk_table_set_homogeneous(_GtkTable *, int);
extern (C) uint gtk_table_get_default_col_spacing(_GtkTable *);
extern (C) void gtk_table_set_col_spacings(_GtkTable *, uint);
extern (C) uint gtk_table_get_default_row_spacing(_GtkTable *);
extern (C) void gtk_table_set_row_spacings(_GtkTable *, uint);
extern (C) uint gtk_table_get_col_spacing(_GtkTable *, uint);
extern (C) void gtk_table_set_col_spacing(_GtkTable *, uint, uint);
extern (C) uint gtk_table_get_row_spacing(_GtkTable *, uint);
extern (C) void gtk_table_set_row_spacing(_GtkTable *, uint, uint);
extern (C) void gtk_table_attach_defaults(_GtkTable *, _GtkWidget *, uint, uint, uint, uint);
extern (C) void gtk_table_attach(_GtkTable *, _GtkWidget *, uint, uint, uint, uint, int, int, uint, uint);
extern (C) void gtk_table_resize(_GtkTable *, uint, uint);
extern (C) _GtkWidget * gtk_table_new(uint, uint, int);
extern (C) uint gtk_table_get_type();
extern (C) void gtk_stock_set_translate_func(char *, _BCD_func__10657, void *, _BCD_func__11672);
extern (C) void gtk_stock_item_free(_GtkStockItem *);
extern (C) _GtkStockItem * gtk_stock_item_copy(_GtkStockItem *);
extern (C) _GSList * gtk_stock_list_ids();
extern (C) int gtk_stock_lookup(char *, _GtkStockItem *);
extern (C) void gtk_stock_add_static(_GtkStockItem *, uint);
extern (C) void gtk_stock_add(_GtkStockItem *, uint);
extern (C) int gtk_statusbar_get_has_resize_grip(_GtkStatusbar *);
extern (C) void gtk_statusbar_set_has_resize_grip(_GtkStatusbar *, int);
extern (C) void gtk_statusbar_remove(_GtkStatusbar *, uint, uint);
extern (C) void gtk_statusbar_pop(_GtkStatusbar *, uint);
extern (C) uint gtk_statusbar_push(_GtkStatusbar *, uint, char *);
extern (C) uint gtk_statusbar_get_context_id(_GtkStatusbar *, char *);
extern (C) _GtkWidget * gtk_statusbar_new();
extern (C) uint gtk_statusbar_get_type();
extern (C) void gtk_spin_button_update(_GtkSpinButton *);
extern (C) int gtk_spin_button_get_snap_to_ticks(_GtkSpinButton *);
extern (C) void gtk_spin_button_set_snap_to_ticks(_GtkSpinButton *, int);
extern (C) int gtk_spin_button_get_wrap(_GtkSpinButton *);
extern (C) void gtk_spin_button_set_wrap(_GtkSpinButton *, int);
extern (C) void gtk_spin_button_spin(_GtkSpinButton *, int, double);
extern (C) int gtk_spin_button_get_numeric(_GtkSpinButton *);
extern (C) void gtk_spin_button_set_numeric(_GtkSpinButton *, int);
extern (C) int gtk_spin_button_get_update_policy(_GtkSpinButton *);
extern (C) void gtk_spin_button_set_update_policy(_GtkSpinButton *, int);
extern (C) void gtk_spin_button_set_value(_GtkSpinButton *, double);
extern (C) int gtk_spin_button_get_value_as_int(_GtkSpinButton *);
extern (C) double gtk_spin_button_get_value(_GtkSpinButton *);
extern (C) void gtk_spin_button_get_range(_GtkSpinButton *, double *, double *);
extern (C) void gtk_spin_button_set_range(_GtkSpinButton *, double, double);
extern (C) void gtk_spin_button_get_increments(_GtkSpinButton *, double *, double *);
extern (C) void gtk_spin_button_set_increments(_GtkSpinButton *, double, double);
extern (C) uint gtk_spin_button_get_digits(_GtkSpinButton *);
extern (C) void gtk_spin_button_set_digits(_GtkSpinButton *, uint);
extern (C) _GtkAdjustment * gtk_spin_button_get_adjustment(_GtkSpinButton *);
extern (C) void gtk_spin_button_set_adjustment(_GtkSpinButton *, _GtkAdjustment *);
extern (C) _GtkWidget * gtk_spin_button_new_with_range(double, double, double);
extern (C) _GtkWidget * gtk_spin_button_new(_GtkAdjustment *, double, uint);
extern (C) void gtk_spin_button_configure(_GtkSpinButton *, _GtkAdjustment *, double, uint);
extern (C) uint gtk_spin_button_get_type();
extern (C) void _gtk_size_group_queue_resize(_GtkWidget *);
extern (C) void _gtk_size_group_compute_requisition(_GtkWidget *, _GtkRequisition *);
extern (C) void _gtk_size_group_get_child_requisition(_GtkWidget *, _GtkRequisition *);
extern (C) void gtk_size_group_remove_widget(_GtkSizeGroup *, _GtkWidget *);
extern (C) void gtk_size_group_add_widget(_GtkSizeGroup *, _GtkWidget *);
extern (C) int gtk_size_group_get_ignore_hidden(_GtkSizeGroup *);
extern (C) void gtk_size_group_set_ignore_hidden(_GtkSizeGroup *, int);
extern (C) int gtk_size_group_get_mode(_GtkSizeGroup *);
extern (C) void gtk_size_group_set_mode(_GtkSizeGroup *, int);
extern (C) _GtkSizeGroup * gtk_size_group_new(int);
extern (C) uint gtk_size_group_get_type();
extern (C) void gtk_separator_tool_item_set_draw(_GtkSeparatorToolItem *, int);
extern (C) int gtk_separator_tool_item_get_draw(_GtkSeparatorToolItem *);
extern (C) _GtkToolItem * gtk_separator_tool_item_new();
extern (C) uint gtk_separator_tool_item_get_type();
extern (C) _GtkWidget * gtk_separator_menu_item_new();
extern (C) uint gtk_separator_menu_item_get_type();
extern (C) int _gtk_scrolled_window_get_scrollbar_spacing(_GtkScrolledWindow *);
extern (C) void gtk_scrolled_window_add_with_viewport(_GtkScrolledWindow *, _GtkWidget *);
extern (C) int gtk_scrolled_window_get_shadow_type(_GtkScrolledWindow *);
extern (C) void gtk_scrolled_window_set_shadow_type(_GtkScrolledWindow *, int);
extern (C) int gtk_scrolled_window_get_placement(_GtkScrolledWindow *);
extern (C) void gtk_scrolled_window_set_placement(_GtkScrolledWindow *, int);
extern (C) void gtk_scrolled_window_get_policy(_GtkScrolledWindow *, int *, int *);
extern (C) void gtk_scrolled_window_set_policy(_GtkScrolledWindow *, int, int);
extern (C) _GtkWidget * gtk_scrolled_window_get_vscrollbar(_GtkScrolledWindow *);
extern (C) _GtkWidget * gtk_scrolled_window_get_hscrollbar(_GtkScrolledWindow *);
extern (C) _GtkAdjustment * gtk_scrolled_window_get_vadjustment(_GtkScrolledWindow *);
extern (C) _GtkAdjustment * gtk_scrolled_window_get_hadjustment(_GtkScrolledWindow *);
extern (C) void gtk_scrolled_window_set_vadjustment(_GtkScrolledWindow *, _GtkAdjustment *);
extern (C) void gtk_scrolled_window_set_hadjustment(_GtkScrolledWindow *, _GtkAdjustment *);
extern (C) _GtkWidget * gtk_scrolled_window_new(_GtkAdjustment *, _GtkAdjustment *);
extern (C) uint gtk_scrolled_window_get_type();
extern (C) int gtk_viewport_get_shadow_type(_GtkViewport *);
extern (C) void gtk_viewport_set_shadow_type(_GtkViewport *, int);
extern (C) void gtk_viewport_set_vadjustment(_GtkViewport *, _GtkAdjustment *);
extern (C) void gtk_viewport_set_hadjustment(_GtkViewport *, _GtkAdjustment *);
extern (C) _GtkAdjustment * gtk_viewport_get_vadjustment(_GtkViewport *);
extern (C) _GtkAdjustment * gtk_viewport_get_hadjustment(_GtkViewport *);
extern (C) _GtkWidget * gtk_viewport_new(_GtkAdjustment *, _GtkAdjustment *);
extern (C) uint gtk_viewport_get_type();
extern (C) void gtk_radio_tool_button_set_group(_GtkRadioToolButton *, _GSList *);
extern (C) _GSList * gtk_radio_tool_button_get_group(_GtkRadioToolButton *);
extern (C) _GtkToolItem * gtk_radio_tool_button_new_with_stock_from_widget(_GtkRadioToolButton *, char *);
extern (C) _GtkToolItem * gtk_radio_tool_button_new_from_widget(_GtkRadioToolButton *);
extern (C) _GtkToolItem * gtk_radio_tool_button_new_from_stock(_GSList *, char *);
extern (C) _GtkToolItem * gtk_radio_tool_button_new(_GSList *);
extern (C) uint gtk_radio_tool_button_get_type();
extern (C) int gtk_toggle_tool_button_get_active(_GtkToggleToolButton *);
extern (C) void gtk_toggle_tool_button_set_active(_GtkToggleToolButton *, int);
extern (C) _GtkToolItem * gtk_toggle_tool_button_new_from_stock(char *);
extern (C) _GtkToolItem * gtk_toggle_tool_button_new();
extern (C) uint gtk_toggle_tool_button_get_type();
extern (C) void gtk_radio_menu_item_set_group(_GtkRadioMenuItem *, _GSList *);
extern (C) _GSList * gtk_radio_menu_item_get_group(_GtkRadioMenuItem *);
extern (C) _GtkWidget * gtk_radio_menu_item_new_with_label_from_widget(_GtkRadioMenuItem *, char *);
extern (C) _GtkWidget * gtk_radio_menu_item_new_with_mnemonic_from_widget(_GtkRadioMenuItem *, char *);
extern (C) _GtkWidget * gtk_radio_menu_item_new_from_widget(_GtkRadioMenuItem *);
extern (C) _GtkWidget * gtk_radio_menu_item_new_with_mnemonic(_GSList *, char *);
extern (C) _GtkWidget * gtk_radio_menu_item_new_with_label(_GSList *, char *);
extern (C) _GtkWidget * gtk_radio_menu_item_new(_GSList *);
extern (C) uint gtk_radio_menu_item_get_type();
extern (C) void gtk_radio_button_set_group(_GtkRadioButton *, _GSList *);
extern (C) _GSList * gtk_radio_button_get_group(_GtkRadioButton *);
extern (C) _GtkWidget * gtk_radio_button_new_with_mnemonic_from_widget(_GtkRadioButton *, char *);
extern (C) _GtkWidget * gtk_radio_button_new_with_mnemonic(_GSList *, char *);
extern (C) _GtkWidget * gtk_radio_button_new_with_label_from_widget(_GtkRadioButton *, char *);
extern (C) _GtkWidget * gtk_radio_button_new_with_label(_GSList *, char *);
extern (C) _GtkWidget * gtk_radio_button_new_from_widget(_GtkRadioButton *);
extern (C) _GtkWidget * gtk_radio_button_new(_GSList *);
extern (C) uint gtk_radio_button_get_type();
extern (C) int gtk_radio_action_get_current_value(_GtkRadioAction *);
extern (C) void gtk_radio_action_set_group(_GtkRadioAction *, _GSList *);
extern (C) _GSList * gtk_radio_action_get_group(_GtkRadioAction *);
extern (C) _GtkRadioAction * gtk_radio_action_new(char *, char *, char *, char *, int);
extern (C) uint gtk_radio_action_get_type();
extern (C) int gtk_toggle_action_get_draw_as_radio(_GtkToggleAction *);
extern (C) void gtk_toggle_action_set_draw_as_radio(_GtkToggleAction *, int);
extern (C) int gtk_toggle_action_get_active(_GtkToggleAction *);
extern (C) void gtk_toggle_action_set_active(_GtkToggleAction *, int);
extern (C) void gtk_toggle_action_toggled(_GtkToggleAction *);
extern (C) _GtkToggleAction * gtk_toggle_action_new(char *, char *, char *, char *);
extern (C) uint gtk_toggle_action_get_type();
extern (C) void gtk_progress_bar_update(_GtkProgressBar *, double);
extern (C) void gtk_progress_bar_set_activity_blocks(_GtkProgressBar *, uint);
extern (C) void gtk_progress_bar_set_activity_step(_GtkProgressBar *, uint);
extern (C) void gtk_progress_bar_set_discrete_blocks(_GtkProgressBar *, uint);
extern (C) void gtk_progress_bar_set_bar_style(_GtkProgressBar *, int);
extern (C) _GtkWidget * gtk_progress_bar_new_with_adjustment(_GtkAdjustment *);
extern (C) int gtk_progress_bar_get_ellipsize(_GtkProgressBar *);
extern (C) void gtk_progress_bar_set_ellipsize(_GtkProgressBar *, int);
extern (C) int gtk_progress_bar_get_orientation(_GtkProgressBar *);
extern (C) double gtk_progress_bar_get_pulse_step(_GtkProgressBar *);
extern (C) double gtk_progress_bar_get_fraction(_GtkProgressBar *);
extern (C) char * gtk_progress_bar_get_text(_GtkProgressBar *);
extern (C) void gtk_progress_bar_set_orientation(_GtkProgressBar *, int);
extern (C) void gtk_progress_bar_set_pulse_step(_GtkProgressBar *, double);
extern (C) void gtk_progress_bar_set_fraction(_GtkProgressBar *, double);
extern (C) void gtk_progress_bar_set_text(_GtkProgressBar *, char *);
extern (C) void gtk_progress_bar_pulse(_GtkProgressBar *);
extern (C) _GtkWidget * gtk_progress_bar_new();
extern (C) uint gtk_progress_bar_get_type();
extern (C) double gtk_progress_get_percentage_from_value(_GtkProgress *, double);
extern (C) double gtk_progress_get_current_percentage(_GtkProgress *);
extern (C) char * gtk_progress_get_text_from_value(_GtkProgress *, double);
extern (C) char * gtk_progress_get_current_text(_GtkProgress *);
extern (C) void gtk_progress_set_activity_mode(_GtkProgress *, int);
extern (C) double gtk_progress_get_value(_GtkProgress *);
extern (C) void gtk_progress_set_value(_GtkProgress *, double);
extern (C) void gtk_progress_set_percentage(_GtkProgress *, double);
extern (C) void gtk_progress_configure(_GtkProgress *, double, double, double);
extern (C) void gtk_progress_set_adjustment(_GtkProgress *, _GtkAdjustment *);
extern (C) void gtk_progress_set_format_string(_GtkProgress *, char *);
extern (C) void gtk_progress_set_text_alignment(_GtkProgress *, float, float);
extern (C) void gtk_progress_set_show_text(_GtkProgress *, int);
extern (C) uint gtk_progress_get_type();
extern (C) void gtk_preview_reset();
extern (C) _GtkPreviewInfo * gtk_preview_get_info();
extern (C) _GdkColormap * gtk_preview_get_cmap();
extern (C) _GdkVisual * gtk_preview_get_visual();
extern (C) void gtk_preview_set_dither(_GtkPreview *, int);
extern (C) void gtk_preview_set_reserved(int);
extern (C) void gtk_preview_set_install_cmap(int);
extern (C) void gtk_preview_set_color_cube(uint, uint, uint, uint);
extern (C) void gtk_preview_set_gamma(double);
extern (C) void gtk_preview_set_expand(_GtkPreview *, int);
extern (C) void gtk_preview_draw_row(_GtkPreview *, char *, int, int, int);
extern (C) void gtk_preview_put(_GtkPreview *, _GdkDrawable *, _GdkGC *, int, int, int, int, int, int);
extern (C) void gtk_preview_size(_GtkPreview *, int, int);
extern (C) _GtkWidget * gtk_preview_new(int);
extern (C) void gtk_preview_uninit();
extern (C) uint gtk_preview_get_type();
extern (C) void _gtk_plug_remove_from_socket(_GtkPlug *, _GtkSocket *);
extern (C) void _gtk_plug_add_to_socket(_GtkPlug *, _GtkSocket *);
extern (C) uint gtk_plug_get_id(_GtkPlug *);
extern (C) _GtkWidget * gtk_plug_new_for_display(_GdkDisplay *, uint);
extern (C) void gtk_plug_construct_for_display(_GtkPlug *, _GdkDisplay *, uint);
extern (C) _GtkWidget * gtk_plug_new(uint);
extern (C) void gtk_plug_construct(_GtkPlug *, uint);
extern (C) uint gtk_plug_get_type();
extern (C) void gtk_socket_steal(_GtkSocket *, uint);
extern (C) uint gtk_socket_get_id(_GtkSocket *);
extern (C) void gtk_socket_add_id(_GtkSocket *, uint);
extern (C) _GtkWidget * gtk_socket_new();
extern (C) uint gtk_socket_get_type();
extern (C) void gtk_pixmap_set_build_insensitive(_GtkPixmap *, int);
extern (C) void gtk_pixmap_get(_GtkPixmap *, _GdkDrawable * *, _GdkDrawable * *);
extern (C) void gtk_pixmap_set(_GtkPixmap *, _GdkDrawable *, _GdkDrawable *);
extern (C) _GtkWidget * gtk_pixmap_new(_GdkDrawable *, _GdkDrawable *);
extern (C) uint gtk_pixmap_get_type();
extern (C) void gtk_option_menu_set_history(_GtkOptionMenu *, uint);
extern (C) int gtk_option_menu_get_history(_GtkOptionMenu *);
extern (C) void gtk_option_menu_remove_menu(_GtkOptionMenu *);
extern (C) void gtk_option_menu_set_menu(_GtkOptionMenu *, _GtkWidget *);
extern (C) _GtkWidget * gtk_option_menu_get_menu(_GtkOptionMenu *);
extern (C) _GtkWidget * gtk_option_menu_new();
extern (C) uint gtk_option_menu_get_type();
extern (C) void gtk_old_editable_changed(_GtkOldEditable *);
extern (C) void gtk_old_editable_claim_selection(_GtkOldEditable *, int, uint);
extern (C) uint gtk_old_editable_get_type();
extern (C) void gtk_notebook_reorder_child(_GtkNotebook *, _GtkWidget *, int);
extern (C) void gtk_notebook_set_tab_label_packing(_GtkNotebook *, _GtkWidget *, int, int, int);
extern (C) void gtk_notebook_query_tab_label_packing(_GtkNotebook *, _GtkWidget *, int *, int *, int *);
extern (C) char * gtk_notebook_get_menu_label_text(_GtkNotebook *, _GtkWidget *);
extern (C) void gtk_notebook_set_menu_label_text(_GtkNotebook *, _GtkWidget *, char *);
extern (C) void gtk_notebook_set_menu_label(_GtkNotebook *, _GtkWidget *, _GtkWidget *);
extern (C) _GtkWidget * gtk_notebook_get_menu_label(_GtkNotebook *, _GtkWidget *);
extern (C) char * gtk_notebook_get_tab_label_text(_GtkNotebook *, _GtkWidget *);
extern (C) void gtk_notebook_set_tab_label_text(_GtkNotebook *, _GtkWidget *, char *);
extern (C) void gtk_notebook_set_tab_label(_GtkNotebook *, _GtkWidget *, _GtkWidget *);
extern (C) _GtkWidget * gtk_notebook_get_tab_label(_GtkNotebook *, _GtkWidget *);
extern (C) void gtk_notebook_popup_disable(_GtkNotebook *);
extern (C) void gtk_notebook_popup_enable(_GtkNotebook *);
extern (C) int gtk_notebook_get_scrollable(_GtkNotebook *);
extern (C) void gtk_notebook_set_scrollable(_GtkNotebook *, int);
extern (C) void gtk_notebook_set_tab_vborder(_GtkNotebook *, uint);
extern (C) void gtk_notebook_set_tab_hborder(_GtkNotebook *, uint);
extern (C) void gtk_notebook_set_tab_border(_GtkNotebook *, uint);
extern (C) void gtk_notebook_set_homogeneous_tabs(_GtkNotebook *, int);
extern (C) int gtk_notebook_get_tab_pos(_GtkNotebook *);
extern (C) void gtk_notebook_set_tab_pos(_GtkNotebook *, int);
extern (C) int gtk_notebook_get_show_tabs(_GtkNotebook *);
extern (C) void gtk_notebook_set_show_tabs(_GtkNotebook *, int);
extern (C) int gtk_notebook_get_show_border(_GtkNotebook *);
extern (C) void gtk_notebook_set_show_border(_GtkNotebook *, int);
extern (C) void gtk_notebook_prev_page(_GtkNotebook *);
extern (C) void gtk_notebook_next_page(_GtkNotebook *);
extern (C) void gtk_notebook_set_current_page(_GtkNotebook *, int);
extern (C) int gtk_notebook_page_num(_GtkNotebook *, _GtkWidget *);
extern (C) int gtk_notebook_get_n_pages(_GtkNotebook *);
extern (C) _GtkWidget * gtk_notebook_get_nth_page(_GtkNotebook *, int);
extern (C) int gtk_notebook_get_current_page(_GtkNotebook *);
extern (C) void gtk_notebook_remove_page(_GtkNotebook *, int);
extern (C) int gtk_notebook_insert_page_menu(_GtkNotebook *, _GtkWidget *, _GtkWidget *, _GtkWidget *, int);
extern (C) int gtk_notebook_insert_page(_GtkNotebook *, _GtkWidget *, _GtkWidget *, int);
extern (C) int gtk_notebook_prepend_page_menu(_GtkNotebook *, _GtkWidget *, _GtkWidget *, _GtkWidget *);
extern (C) int gtk_notebook_prepend_page(_GtkNotebook *, _GtkWidget *, _GtkWidget *);
extern (C) int gtk_notebook_append_page_menu(_GtkNotebook *, _GtkWidget *, _GtkWidget *, _GtkWidget *);
extern (C) int gtk_notebook_append_page(_GtkNotebook *, _GtkWidget *, _GtkWidget *);
extern (C) _GtkWidget * gtk_notebook_new();
extern (C) uint gtk_notebook_get_type();
extern (C) void _gtk_modules_settings_changed(_GtkSettings *, char *);
extern (C) void _gtk_modules_init(int *, char * * *, char *);
extern (C) char * * _gtk_get_module_path(char *);
extern (C) char * _gtk_find_module(char *, char *);
extern (C) void gtk_message_dialog_format_secondary_markup(_GtkMessageDialog *, char *, ...);
extern (C) void gtk_message_dialog_format_secondary_text(_GtkMessageDialog *, char *, ...);
extern (C) void gtk_message_dialog_set_markup(_GtkMessageDialog *, char *);
extern (C) _GtkWidget * gtk_message_dialog_new_with_markup(_GtkWindow *, int, int, int, char *, ...);
extern (C) _GtkWidget * gtk_message_dialog_new(_GtkWindow *, int, int, int, char *, ...);
extern (C) uint gtk_message_dialog_get_type();
extern (C) void gtk_menu_tool_button_set_arrow_tooltip(_GtkMenuToolButton *, _GtkTooltips *, char *, char *);
extern (C) _GtkWidget * gtk_menu_tool_button_get_menu(_GtkMenuToolButton *);
extern (C) void gtk_menu_tool_button_set_menu(_GtkMenuToolButton *, _GtkWidget *);
extern (C) _GtkToolItem * gtk_menu_tool_button_new_from_stock(char *);
extern (C) _GtkToolItem * gtk_menu_tool_button_new(_GtkWidget *, char *);
extern (C) uint gtk_menu_tool_button_get_type();
extern (C) _GtkWidget * _gtk_tool_button_get_button(_GtkToolButton *);
extern (C) _GtkWidget * gtk_tool_button_get_label_widget(_GtkToolButton *);
extern (C) void gtk_tool_button_set_label_widget(_GtkToolButton *, _GtkWidget *);
extern (C) _GtkWidget * gtk_tool_button_get_icon_widget(_GtkToolButton *);
extern (C) void gtk_tool_button_set_icon_widget(_GtkToolButton *, _GtkWidget *);
extern (C) char * gtk_tool_button_get_icon_name(_GtkToolButton *);
extern (C) void gtk_tool_button_set_icon_name(_GtkToolButton *, char *);
extern (C) char * gtk_tool_button_get_stock_id(_GtkToolButton *);
extern (C) void gtk_tool_button_set_stock_id(_GtkToolButton *, char *);
extern (C) int gtk_tool_button_get_use_underline(_GtkToolButton *);
extern (C) void gtk_tool_button_set_use_underline(_GtkToolButton *, int);
extern (C) char * gtk_tool_button_get_label(_GtkToolButton *);
extern (C) void gtk_tool_button_set_label(_GtkToolButton *, char *);
extern (C) _GtkToolItem * gtk_tool_button_new_from_stock(char *);
extern (C) _GtkToolItem * gtk_tool_button_new(_GtkWidget *, char *);
extern (C) uint gtk_tool_button_get_type();
extern (C) void _gtk_tool_item_toolbar_reconfigured(_GtkToolItem *);
extern (C) void gtk_tool_item_rebuild_menu(_GtkToolItem *);
extern (C) void gtk_tool_item_set_proxy_menu_item(_GtkToolItem *, char *, _GtkWidget *);
extern (C) _GtkWidget * gtk_tool_item_get_proxy_menu_item(_GtkToolItem *, char *);
extern (C) _GtkWidget * gtk_tool_item_retrieve_proxy_menu_item(_GtkToolItem *);
extern (C) int gtk_tool_item_get_relief_style(_GtkToolItem *);
extern (C) int gtk_tool_item_get_toolbar_style(_GtkToolItem *);
extern (C) int gtk_tool_item_get_orientation(_GtkToolItem *);
extern (C) int gtk_tool_item_get_icon_size(_GtkToolItem *);
extern (C) void gtk_tool_item_set_is_important(_GtkToolItem *, int);
extern (C) int gtk_tool_item_get_is_important(_GtkToolItem *);
extern (C) int gtk_tool_item_get_visible_vertical(_GtkToolItem *);
extern (C) void gtk_tool_item_set_visible_vertical(_GtkToolItem *, int);
extern (C) int gtk_tool_item_get_visible_horizontal(_GtkToolItem *);
extern (C) void gtk_tool_item_set_visible_horizontal(_GtkToolItem *, int);
extern (C) int gtk_tool_item_get_use_drag_window(_GtkToolItem *);
extern (C) void gtk_tool_item_set_use_drag_window(_GtkToolItem *, int);
extern (C) void gtk_tool_item_set_tooltip(_GtkToolItem *, _GtkTooltips *, char *, char *);
extern (C) int gtk_tool_item_get_expand(_GtkToolItem *);
extern (C) void gtk_tool_item_set_expand(_GtkToolItem *, int);
extern (C) int gtk_tool_item_get_homogeneous(_GtkToolItem *);
extern (C) void gtk_tool_item_set_homogeneous(_GtkToolItem *, int);
extern (C) _GtkToolItem * gtk_tool_item_new();
extern (C) uint gtk_tool_item_get_type();
extern (C) int gtk_tooltips_get_info_from_tip_window(_GtkWindow *, _GtkTooltips * *, _GtkWidget * *);
extern (C) void _gtk_tooltips_toggle_keyboard_mode(_GtkWidget *);
extern (C) void gtk_tooltips_force_window(_GtkTooltips *);
extern (C) _GtkTooltipsData * gtk_tooltips_data_get(_GtkWidget *);
extern (C) void gtk_tooltips_set_tip(_GtkTooltips *, _GtkWidget *, char *, char *);
extern (C) void gtk_tooltips_set_delay(_GtkTooltips *, uint);
extern (C) void gtk_tooltips_disable(_GtkTooltips *);
extern (C) void gtk_tooltips_enable(_GtkTooltips *);
extern (C) _GtkTooltips * gtk_tooltips_new();
extern (C) uint gtk_tooltips_get_type();
extern (C) void _gtk_menu_bar_cycle_focus(_GtkMenuBar *, int);
extern (C) void gtk_menu_bar_set_child_pack_direction(_GtkMenuBar *, int);
extern (C) int gtk_menu_bar_get_child_pack_direction(_GtkMenuBar *);
extern (C) void gtk_menu_bar_set_pack_direction(_GtkMenuBar *, int);
extern (C) int gtk_menu_bar_get_pack_direction(_GtkMenuBar *);
extern (C) _GtkWidget * gtk_menu_bar_new();
extern (C) uint gtk_menu_bar_get_type();
extern (C) char * _gtk_get_lc_ctype();
extern (C) int _gtk_boolean_handled_accumulator(_GSignalInvocationHint *, _GValue *, _GValue *, void *);
extern (C) void gtk_propagate_event(_GtkWidget *, _GdkEvent *);
extern (C) _GtkWidget * gtk_get_event_widget(_GdkEvent *);
extern (C) int gtk_get_current_event_state(int *);
extern (C) uint gtk_get_current_event_time();
extern (C) _GdkEvent * gtk_get_current_event();
extern (C) void gtk_key_snooper_remove(uint);
extern (C) uint gtk_key_snooper_install(_BCD_func__8879, void *);
extern (C) void gtk_input_remove(uint);
alias void function(void *, int, int) _BCD_func__12385;
extern (C) uint gtk_input_add_full(int, int, _BCD_func__12385, _BCD_func__11671, void *, _BCD_func__11672);
extern (C) void gtk_idle_remove_by_data(void *);
extern (C) void gtk_idle_remove(uint);
extern (C) uint gtk_idle_add_full(int, _BCD_func__11406, _BCD_func__11671, void *, _BCD_func__11672);
extern (C) uint gtk_idle_add_priority(int, _BCD_func__11406, void *);
extern (C) uint gtk_idle_add(_BCD_func__11406, void *);
extern (C) void gtk_timeout_remove(uint);
extern (C) uint gtk_timeout_add_full(uint, _BCD_func__11406, _BCD_func__11671, void *, _BCD_func__11672);
extern (C) uint gtk_timeout_add(uint, _BCD_func__11406, void *);
extern (C) void gtk_quit_remove_by_data(void *);
extern (C) void gtk_quit_remove(uint);
extern (C) uint gtk_quit_add_full(uint, _BCD_func__11406, _BCD_func__11671, void *, _BCD_func__11672);
extern (C) uint gtk_quit_add(uint, _BCD_func__11406, void *);
extern (C) void gtk_quit_add_destroy(uint, _GtkObject *);
extern (C) void gtk_init_add(_BCD_func__11406, void *);
extern (C) void gtk_grab_remove(_GtkWidget *);
extern (C) _GtkWidget * gtk_grab_get_current();
extern (C) void gtk_grab_add(_GtkWidget *);
extern (C) int gtk_false();
extern (C) int gtk_true();
extern (C) int gtk_main_iteration_do(int);
extern (C) int gtk_main_iteration();
extern (C) void gtk_main_quit();
extern (C) uint gtk_main_level();
extern (C) void gtk_main();
extern (C) void gtk_main_do_event(_GdkEvent *);
extern (C) int gtk_events_pending();
extern (C) void * gtk_get_default_language();
extern (C) char * gtk_set_locale();
extern (C) void gtk_disable_setlocale();
extern (C) void gtk_exit(int);
extern (C) void * gtk_get_option_group(int);
extern (C) int gtk_init_with_args(int *, char * * *, char *, _GOptionEntry *, char *, _GError * *);
extern (C) int gtk_init_check(int *, char * * *);
extern (C) void gtk_init(int *, char * * *);
extern (C) int gtk_parse_args(int *, char * * *);
extern (C) char * gtk_check_version(uint, uint, uint);
extern (C) void gtk_list_end_drag_selection(_GtkList *);
extern (C) void gtk_list_undo_selection(_GtkList *);
extern (C) void gtk_list_toggle_row(_GtkList *, _GtkWidget *);
extern (C) void gtk_list_toggle_focus_row(_GtkList *);
extern (C) void gtk_list_toggle_add_mode(_GtkList *);
extern (C) void gtk_list_scroll_vertical(_GtkList *, int, float);
extern (C) void gtk_list_scroll_horizontal(_GtkList *, int, float);
extern (C) void gtk_list_unselect_all(_GtkList *);
extern (C) void gtk_list_select_all(_GtkList *);
extern (C) void gtk_list_end_selection(_GtkList *);
extern (C) void gtk_list_start_selection(_GtkList *);
extern (C) void gtk_list_extend_selection(_GtkList *, int, float, int);
extern (C) void gtk_list_set_selection_mode(_GtkList *, int);
extern (C) int gtk_list_child_position(_GtkList *, _GtkWidget *);
extern (C) void gtk_list_unselect_child(_GtkList *, _GtkWidget *);
extern (C) void gtk_list_select_child(_GtkList *, _GtkWidget *);
extern (C) void gtk_list_unselect_item(_GtkList *, int);
extern (C) void gtk_list_select_item(_GtkList *, int);
extern (C) void gtk_list_clear_items(_GtkList *, int, int);
extern (C) void gtk_list_remove_items_no_unref(_GtkList *, _GList *);
extern (C) void gtk_list_remove_items(_GtkList *, _GList *);
extern (C) void gtk_list_prepend_items(_GtkList *, _GList *);
extern (C) void gtk_list_append_items(_GtkList *, _GList *);
extern (C) void gtk_list_insert_items(_GtkList *, _GList *, int);
extern (C) _GtkWidget * gtk_list_new();
extern (C) uint gtk_list_get_type();
extern (C) void gtk_list_item_deselect(_GtkListItem *);
extern (C) void gtk_list_item_select(_GtkListItem *);
extern (C) _GtkWidget * gtk_list_item_new_with_label(char *);
extern (C) _GtkWidget * gtk_list_item_new();
extern (C) uint gtk_list_item_get_type();
extern (C) void gtk_layout_thaw(_GtkLayout *);
extern (C) void gtk_layout_freeze(_GtkLayout *);
extern (C) void gtk_layout_set_vadjustment(_GtkLayout *, _GtkAdjustment *);
extern (C) void gtk_layout_set_hadjustment(_GtkLayout *, _GtkAdjustment *);
extern (C) _GtkAdjustment * gtk_layout_get_vadjustment(_GtkLayout *);
extern (C) _GtkAdjustment * gtk_layout_get_hadjustment(_GtkLayout *);
extern (C) void gtk_layout_get_size(_GtkLayout *, uint *, uint *);
extern (C) void gtk_layout_set_size(_GtkLayout *, uint, uint);
extern (C) void gtk_layout_move(_GtkLayout *, _GtkWidget *, int, int);
extern (C) void gtk_layout_put(_GtkLayout *, _GtkWidget *, int, int);
extern (C) _GtkWidget * gtk_layout_new(_GtkAdjustment *, _GtkAdjustment *);
extern (C) uint gtk_layout_get_type();
extern (C) _GdkScreen * gtk_invisible_get_screen(_GtkInvisible *);
extern (C) void gtk_invisible_set_screen(_GtkInvisible *, _GdkScreen *);
extern (C) _GtkWidget * gtk_invisible_new_for_screen(_GdkScreen *);
extern (C) _GtkWidget * gtk_invisible_new();
extern (C) uint gtk_invisible_get_type();
extern (C) _GtkWidget * gtk_input_dialog_new();
extern (C) uint gtk_input_dialog_get_type();
extern (C) void gtk_im_multicontext_append_menuitems(_GtkIMMulticontext *, _GtkMenuShell *);
extern (C) _GtkIMContext * gtk_im_multicontext_new();
extern (C) uint gtk_im_multicontext_get_type();
extern (C) void gtk_im_context_simple_add_table(_GtkIMContextSimple *, ushort *, int, int);
extern (C) _GtkIMContext * gtk_im_context_simple_new();
extern (C) uint gtk_im_context_simple_get_type();
extern (C) _GtkWidget * gtk_image_menu_item_get_image(_GtkImageMenuItem *);
extern (C) void gtk_image_menu_item_set_image(_GtkImageMenuItem *, _GtkWidget *);
extern (C) _GtkWidget * gtk_image_menu_item_new_from_stock(char *, _GtkAccelGroup *);
extern (C) _GtkWidget * gtk_image_menu_item_new_with_mnemonic(char *);
extern (C) _GtkWidget * gtk_image_menu_item_new_with_label(char *);
extern (C) _GtkWidget * gtk_image_menu_item_new();
extern (C) uint gtk_image_menu_item_get_type();
extern (C) _GdkDrawable * gtk_icon_view_create_drag_icon(_GtkIconView *, void *);
extern (C) int gtk_icon_view_get_dest_item_at_pos(_GtkIconView *, int, int, void * *, int *);
extern (C) void gtk_icon_view_get_drag_dest_item(_GtkIconView *, void * *, int *);
extern (C) void gtk_icon_view_set_drag_dest_item(_GtkIconView *, void *, int);
extern (C) int gtk_icon_view_get_reorderable(_GtkIconView *);
extern (C) void gtk_icon_view_set_reorderable(_GtkIconView *, int);
extern (C) void gtk_icon_view_unset_model_drag_dest(_GtkIconView *);
extern (C) void gtk_icon_view_unset_model_drag_source(_GtkIconView *);
extern (C) void gtk_icon_view_enable_model_drag_dest(_GtkIconView *, _GtkTargetEntry *, int, int);
extern (C) void gtk_icon_view_enable_model_drag_source(_GtkIconView *, int, _GtkTargetEntry *, int, int);
extern (C) void gtk_icon_view_scroll_to_path(_GtkIconView *, void *, int, float, float);
extern (C) int gtk_icon_view_get_cursor(_GtkIconView *, void * *, _GtkCellRenderer * *);
extern (C) void gtk_icon_view_set_cursor(_GtkIconView *, void *, _GtkCellRenderer *, int);
extern (C) void gtk_icon_view_item_activated(_GtkIconView *, void *);
extern (C) void gtk_icon_view_unselect_all(_GtkIconView *);
extern (C) void gtk_icon_view_select_all(_GtkIconView *);
extern (C) _GList * gtk_icon_view_get_selected_items(_GtkIconView *);
extern (C) int gtk_icon_view_path_is_selected(_GtkIconView *, void *);
extern (C) void gtk_icon_view_unselect_path(_GtkIconView *, void *);
extern (C) void gtk_icon_view_select_path(_GtkIconView *, void *);
extern (C) int gtk_icon_view_get_selection_mode(_GtkIconView *);
extern (C) void gtk_icon_view_set_selection_mode(_GtkIconView *, int);
extern (C) void gtk_icon_view_selected_foreach(_GtkIconView *, _BCD_func__9021, void *);
extern (C) int gtk_icon_view_get_visible_range(_GtkIconView *, void * *, void * *);
extern (C) int gtk_icon_view_get_item_at_pos(_GtkIconView *, int, int, void * *, _GtkCellRenderer * *);
extern (C) void * gtk_icon_view_get_path_at_pos(_GtkIconView *, int, int);
extern (C) int gtk_icon_view_get_margin(_GtkIconView *);
extern (C) void gtk_icon_view_set_margin(_GtkIconView *, int);
extern (C) int gtk_icon_view_get_column_spacing(_GtkIconView *);
extern (C) void gtk_icon_view_set_column_spacing(_GtkIconView *, int);
extern (C) int gtk_icon_view_get_row_spacing(_GtkIconView *);
extern (C) void gtk_icon_view_set_row_spacing(_GtkIconView *, int);
extern (C) int gtk_icon_view_get_spacing(_GtkIconView *);
extern (C) void gtk_icon_view_set_spacing(_GtkIconView *, int);
extern (C) int gtk_icon_view_get_item_width(_GtkIconView *);
extern (C) void gtk_icon_view_set_item_width(_GtkIconView *, int);
extern (C) int gtk_icon_view_get_columns(_GtkIconView *);
extern (C) void gtk_icon_view_set_columns(_GtkIconView *, int);
extern (C) int gtk_icon_view_get_orientation(_GtkIconView *);
extern (C) void gtk_icon_view_set_orientation(_GtkIconView *, int);
extern (C) int gtk_icon_view_get_pixbuf_column(_GtkIconView *);
extern (C) void gtk_icon_view_set_pixbuf_column(_GtkIconView *, int);
extern (C) int gtk_icon_view_get_markup_column(_GtkIconView *);
extern (C) void gtk_icon_view_set_markup_column(_GtkIconView *, int);
extern (C) int gtk_icon_view_get_text_column(_GtkIconView *);
extern (C) void gtk_icon_view_set_text_column(_GtkIconView *, int);
extern (C) void * gtk_icon_view_get_model(_GtkIconView *);
extern (C) void gtk_icon_view_set_model(_GtkIconView *, void *);
extern (C) _GtkWidget * gtk_icon_view_new_with_model(void *);
extern (C) _GtkWidget * gtk_icon_view_new();
extern (C) uint gtk_icon_view_get_type();
extern (C) void _gtk_icon_theme_check_reload(_GdkDisplay *);
extern (C) char * gtk_icon_info_get_display_name(void *);
extern (C) int gtk_icon_info_get_attach_points(void *, _GdkPoint * *, int *);
extern (C) int gtk_icon_info_get_embedded_rect(void *, _GdkRectangle *);
extern (C) void gtk_icon_info_set_raw_coordinates(void *, int);
extern (C) void * gtk_icon_info_load_icon(void *, _GError * *);
extern (C) void * gtk_icon_info_get_builtin_pixbuf(void *);
extern (C) char * gtk_icon_info_get_filename(void *);
extern (C) int gtk_icon_info_get_base_size(void *);
extern (C) void gtk_icon_info_free(void *);
extern (C) void * gtk_icon_info_copy(void *);
extern (C) uint gtk_icon_info_get_type();
extern (C) void gtk_icon_theme_add_builtin_icon(char *, int, void *);
extern (C) int gtk_icon_theme_rescan_if_needed(_GtkIconTheme *);
extern (C) char * gtk_icon_theme_get_example_icon_name(_GtkIconTheme *);
extern (C) _GList * gtk_icon_theme_list_icons(_GtkIconTheme *, char *);
extern (C) void * gtk_icon_theme_load_icon(_GtkIconTheme *, char *, int, int, _GError * *);
extern (C) void * gtk_icon_theme_lookup_icon(_GtkIconTheme *, char *, int, int);
extern (C) int * gtk_icon_theme_get_icon_sizes(_GtkIconTheme *, char *);
extern (C) int gtk_icon_theme_has_icon(_GtkIconTheme *, char *);
extern (C) void gtk_icon_theme_set_custom_theme(_GtkIconTheme *, char *);
extern (C) void gtk_icon_theme_prepend_search_path(_GtkIconTheme *, char *);
extern (C) void gtk_icon_theme_append_search_path(_GtkIconTheme *, char *);
extern (C) void gtk_icon_theme_get_search_path(_GtkIconTheme *, char * * *, int *);
extern (C) void gtk_icon_theme_set_search_path(_GtkIconTheme *, char * *, int);
extern (C) void gtk_icon_theme_set_screen(_GtkIconTheme *, _GdkScreen *);
extern (C) _GtkIconTheme * gtk_icon_theme_get_for_screen(_GdkScreen *);
extern (C) _GtkIconTheme * gtk_icon_theme_get_default();
extern (C) _GtkIconTheme * gtk_icon_theme_new();
extern (C) uint gtk_icon_theme_get_type();
extern (C) uint gtk_icon_theme_error_quark();
extern (C) void _gtk_icon_factory_ensure_default_icons();
extern (C) _GSList * _gtk_icon_factory_list_ids();
extern (C) void _gtk_icon_set_invalidate_caches();
extern (C) int gtk_icon_source_get_size(void *);
extern (C) int gtk_icon_source_get_state(void *);
extern (C) int gtk_icon_source_get_direction(void *);
extern (C) void gtk_icon_source_set_size(void *, int);
extern (C) void gtk_icon_source_set_state(void *, int);
extern (C) void gtk_icon_source_set_direction(void *, int);
extern (C) int gtk_icon_source_get_direction_wildcarded(void *);
extern (C) int gtk_icon_source_get_state_wildcarded(void *);
extern (C) int gtk_icon_source_get_size_wildcarded(void *);
extern (C) void gtk_icon_source_set_size_wildcarded(void *, int);
extern (C) void gtk_icon_source_set_state_wildcarded(void *, int);
extern (C) void gtk_icon_source_set_direction_wildcarded(void *, int);
extern (C) void * gtk_icon_source_get_pixbuf(void *);
extern (C) char * gtk_icon_source_get_icon_name(void *);
extern (C) char * gtk_icon_source_get_filename(void *);
extern (C) void gtk_icon_source_set_pixbuf(void *, void *);
extern (C) void gtk_icon_source_set_icon_name(void *, char *);
extern (C) void gtk_icon_source_set_filename(void *, char *);
extern (C) void gtk_icon_source_free(void *);
extern (C) void * gtk_icon_source_copy(void *);
extern (C) void * gtk_icon_source_new();
extern (C) uint gtk_icon_source_get_type();
extern (C) void gtk_icon_set_get_sizes(void *, int * *, int *);
extern (C) void gtk_icon_set_add_source(void *, void *);
extern (C) void * gtk_icon_set_render_icon(void *, _GtkStyle *, int, int, int, _GtkWidget *, char *);
extern (C) void * gtk_icon_set_copy(void *);
extern (C) void gtk_icon_set_unref(void *);
extern (C) void * gtk_icon_set_ref(void *);
extern (C) void * gtk_icon_set_new_from_pixbuf(void *);
extern (C) void * gtk_icon_set_new();
extern (C) uint gtk_icon_set_get_type();
extern (C) char * gtk_icon_size_get_name(int);
extern (C) int gtk_icon_size_from_name(char *);
extern (C) void gtk_icon_size_register_alias(char *, int);
extern (C) int gtk_icon_size_register(char *, int, int);
extern (C) int gtk_icon_size_lookup_for_settings(_GtkSettings *, int, int *, int *);
extern (C) int gtk_icon_size_lookup(int, int *, int *);
extern (C) void * gtk_icon_factory_lookup_default(char *);
extern (C) void gtk_icon_factory_remove_default(_GtkIconFactory *);
extern (C) void gtk_icon_factory_add_default(_GtkIconFactory *);
extern (C) void * gtk_icon_factory_lookup(_GtkIconFactory *, char *);
extern (C) void gtk_icon_factory_add(_GtkIconFactory *, char *, void *);
extern (C) _GtkIconFactory * gtk_icon_factory_new();
extern (C) uint gtk_icon_factory_get_type();
extern (C) _GtkWidget * gtk_hseparator_new();
extern (C) uint gtk_hseparator_get_type();
extern (C) uint gtk_separator_get_type();
extern (C) _GtkWidget * gtk_hscale_new_with_range(double, double, double);
extern (C) _GtkWidget * gtk_hscale_new(_GtkAdjustment *);
extern (C) uint gtk_hscale_get_type();
extern (C) char * _gtk_scale_format_value(_GtkScale *, double);
extern (C) void _gtk_scale_get_value_size(_GtkScale *, int *, int *);
extern (C) void _gtk_scale_clear_layout(_GtkScale *);
extern (C) void gtk_scale_get_layout_offsets(_GtkScale *, int *, int *);
extern (C) void * gtk_scale_get_layout(_GtkScale *);
extern (C) int gtk_scale_get_value_pos(_GtkScale *);
extern (C) void gtk_scale_set_value_pos(_GtkScale *, int);
extern (C) int gtk_scale_get_draw_value(_GtkScale *);
extern (C) void gtk_scale_set_draw_value(_GtkScale *, int);
extern (C) int gtk_scale_get_digits(_GtkScale *);
extern (C) void gtk_scale_set_digits(_GtkScale *, int);
extern (C) uint gtk_scale_get_type();
extern (C) _GtkWidget * gtk_hruler_new();
extern (C) uint gtk_hruler_get_type();
extern (C) void gtk_ruler_get_range(_GtkRuler *, double *, double *, double *, double *);
extern (C) int gtk_ruler_get_metric(_GtkRuler *);
extern (C) void gtk_ruler_draw_pos(_GtkRuler *);
extern (C) void gtk_ruler_draw_ticks(_GtkRuler *);
extern (C) void gtk_ruler_set_range(_GtkRuler *, double, double, double, double);
extern (C) void gtk_ruler_set_metric(_GtkRuler *, int);
extern (C) uint gtk_ruler_get_type();
extern (C) _GtkWidget * gtk_hpaned_new();
extern (C) uint gtk_hpaned_get_type();
extern (C) void gtk_paned_compute_position(_GtkPaned *, int, int, int);
extern (C) _GtkWidget * gtk_paned_get_child2(_GtkPaned *);
extern (C) _GtkWidget * gtk_paned_get_child1(_GtkPaned *);
extern (C) void gtk_paned_set_position(_GtkPaned *, int);
extern (C) int gtk_paned_get_position(_GtkPaned *);
extern (C) void gtk_paned_pack2(_GtkPaned *, _GtkWidget *, int, int);
extern (C) void gtk_paned_pack1(_GtkPaned *, _GtkWidget *, int, int);
extern (C) void gtk_paned_add2(_GtkPaned *, _GtkWidget *);
extern (C) void gtk_paned_add1(_GtkPaned *, _GtkWidget *);
extern (C) uint gtk_paned_get_type();
extern (C) void gtk_hbutton_box_set_layout_default(int);
extern (C) void gtk_hbutton_box_set_spacing_default(int);
extern (C) int gtk_hbutton_box_get_layout_default();
extern (C) int gtk_hbutton_box_get_spacing_default();
extern (C) _GtkWidget * gtk_hbutton_box_new();
extern (C) uint gtk_hbutton_box_get_type();
extern (C) int gtk_handle_box_get_snap_edge(_GtkHandleBox *);
extern (C) void gtk_handle_box_set_snap_edge(_GtkHandleBox *, int);
extern (C) int gtk_handle_box_get_handle_position(_GtkHandleBox *);
extern (C) void gtk_handle_box_set_handle_position(_GtkHandleBox *, int);
extern (C) int gtk_handle_box_get_shadow_type(_GtkHandleBox *);
extern (C) void gtk_handle_box_set_shadow_type(_GtkHandleBox *, int);
extern (C) _GtkWidget * gtk_handle_box_new();
extern (C) uint gtk_handle_box_get_type();
extern (C) void gtk_gc_release(_GdkGC *);
extern (C) _GdkGC * gtk_gc_get(int, _GdkColormap *, _GdkGCValues *, int);
extern (C) _GtkWidget * gtk_gamma_curve_new();
extern (C) uint gtk_gamma_curve_get_type();
extern (C) void gtk_font_selection_dialog_set_preview_text(_GtkFontSelectionDialog *, char *);
extern (C) char * gtk_font_selection_dialog_get_preview_text(_GtkFontSelectionDialog *);
extern (C) int gtk_font_selection_dialog_set_font_name(_GtkFontSelectionDialog *, char *);
extern (C) _GdkFont * gtk_font_selection_dialog_get_font(_GtkFontSelectionDialog *);
extern (C) char * gtk_font_selection_dialog_get_font_name(_GtkFontSelectionDialog *);
extern (C) _GtkWidget * gtk_font_selection_dialog_new(char *);
extern (C) uint gtk_font_selection_dialog_get_type();
extern (C) void gtk_font_selection_set_preview_text(_GtkFontSelection *, char *);
extern (C) char * gtk_font_selection_get_preview_text(_GtkFontSelection *);
extern (C) int gtk_font_selection_set_font_name(_GtkFontSelection *, char *);
extern (C) _GdkFont * gtk_font_selection_get_font(_GtkFontSelection *);
extern (C) char * gtk_font_selection_get_font_name(_GtkFontSelection *);
extern (C) _GtkWidget * gtk_font_selection_new();
extern (C) uint gtk_font_selection_get_type();
extern (C) void gtk_font_button_set_show_size(_GtkFontButton *, int);
extern (C) int gtk_font_button_get_show_size(_GtkFontButton *);
extern (C) void gtk_font_button_set_show_style(_GtkFontButton *, int);
extern (C) int gtk_font_button_get_show_style(_GtkFontButton *);
extern (C) int gtk_font_button_set_font_name(_GtkFontButton *, char *);
extern (C) char * gtk_font_button_get_font_name(_GtkFontButton *);
extern (C) void gtk_font_button_set_use_size(_GtkFontButton *, int);
extern (C) int gtk_font_button_get_use_size(_GtkFontButton *);
extern (C) void gtk_font_button_set_use_font(_GtkFontButton *, int);
extern (C) int gtk_font_button_get_use_font(_GtkFontButton *);
extern (C) void gtk_font_button_set_title(_GtkFontButton *, char *);
extern (C) char * gtk_font_button_get_title(_GtkFontButton *);
extern (C) _GtkWidget * gtk_font_button_new_with_font(char *);
extern (C) _GtkWidget * gtk_font_button_new();
extern (C) uint gtk_font_button_get_type();
extern (C) _GtkWidget * gtk_file_chooser_widget_new_with_backend(int, char *);
extern (C) _GtkWidget * gtk_file_chooser_widget_new(int);
extern (C) uint gtk_file_chooser_widget_get_type();
extern (C) _GtkWidget * gtk_file_chooser_dialog_new_with_backend(char *, _GtkWindow *, int, char *, char *, ...);
extern (C) _GtkWidget * gtk_file_chooser_dialog_new(char *, _GtkWindow *, int, char *, ...);
extern (C) uint gtk_file_chooser_dialog_get_type();
extern (C) void gtk_file_chooser_button_set_width_chars(_GtkFileChooserButton *, int);
extern (C) int gtk_file_chooser_button_get_width_chars(_GtkFileChooserButton *);
extern (C) void gtk_file_chooser_button_set_title(_GtkFileChooserButton *, char *);
extern (C) char * gtk_file_chooser_button_get_title(_GtkFileChooserButton *);
extern (C) _GtkWidget * gtk_file_chooser_button_new_with_dialog(_GtkWidget *);
extern (C) _GtkWidget * gtk_file_chooser_button_new_with_backend(char *, int, char *);
extern (C) _GtkWidget * gtk_file_chooser_button_new(char *, int);
extern (C) uint gtk_file_chooser_button_get_type();
extern (C) _GSList * gtk_file_chooser_list_shortcut_folder_uris(void *);
extern (C) int gtk_file_chooser_remove_shortcut_folder_uri(void *, char *, _GError * *);
extern (C) int gtk_file_chooser_add_shortcut_folder_uri(void *, char *, _GError * *);
extern (C) _GSList * gtk_file_chooser_list_shortcut_folders(void *);
extern (C) int gtk_file_chooser_remove_shortcut_folder(void *, char *, _GError * *);
extern (C) int gtk_file_chooser_add_shortcut_folder(void *, char *, _GError * *);
extern (C) void * gtk_file_chooser_get_filter(void *);
extern (C) void gtk_file_chooser_set_filter(void *, void *);
extern (C) _GSList * gtk_file_chooser_list_filters(void *);
extern (C) void gtk_file_chooser_remove_filter(void *, void *);
extern (C) void gtk_file_chooser_add_filter(void *, void *);
extern (C) _GtkWidget * gtk_file_chooser_get_extra_widget(void *);
extern (C) void gtk_file_chooser_set_extra_widget(void *, _GtkWidget *);
extern (C) char * gtk_file_chooser_get_preview_uri(void *);
extern (C) char * gtk_file_chooser_get_preview_filename(void *);
extern (C) int gtk_file_chooser_get_use_preview_label(void *);
extern (C) void gtk_file_chooser_set_use_preview_label(void *, int);
extern (C) int gtk_file_chooser_get_preview_widget_active(void *);
extern (C) void gtk_file_chooser_set_preview_widget_active(void *, int);
extern (C) _GtkWidget * gtk_file_chooser_get_preview_widget(void *);
extern (C) void gtk_file_chooser_set_preview_widget(void *, _GtkWidget *);
extern (C) char * gtk_file_chooser_get_current_folder_uri(void *);
extern (C) int gtk_file_chooser_set_current_folder_uri(void *, char *);
extern (C) _GSList * gtk_file_chooser_get_uris(void *);
extern (C) void gtk_file_chooser_unselect_uri(void *, char *);
extern (C) int gtk_file_chooser_select_uri(void *, char *);
extern (C) int gtk_file_chooser_set_uri(void *, char *);
extern (C) char * gtk_file_chooser_get_uri(void *);
extern (C) char * gtk_file_chooser_get_current_folder(void *);
extern (C) int gtk_file_chooser_set_current_folder(void *, char *);
extern (C) _GSList * gtk_file_chooser_get_filenames(void *);
extern (C) void gtk_file_chooser_unselect_all(void *);
extern (C) void gtk_file_chooser_select_all(void *);
extern (C) void gtk_file_chooser_unselect_filename(void *, char *);
extern (C) int gtk_file_chooser_select_filename(void *, char *);
extern (C) int gtk_file_chooser_set_filename(void *, char *);
extern (C) char * gtk_file_chooser_get_filename(void *);
extern (C) void gtk_file_chooser_set_current_name(void *, char *);
extern (C) int gtk_file_chooser_get_do_overwrite_confirmation(void *);
extern (C) void gtk_file_chooser_set_do_overwrite_confirmation(void *, int);
extern (C) int gtk_file_chooser_get_show_hidden(void *);
extern (C) void gtk_file_chooser_set_show_hidden(void *, int);
extern (C) int gtk_file_chooser_get_select_multiple(void *);
extern (C) void gtk_file_chooser_set_select_multiple(void *, int);
extern (C) int gtk_file_chooser_get_local_only(void *);
extern (C) void gtk_file_chooser_set_local_only(void *, int);
extern (C) int gtk_file_chooser_get_action(void *);
extern (C) void gtk_file_chooser_set_action(void *, int);
extern (C) uint gtk_file_chooser_error_quark();
extern (C) uint gtk_file_chooser_get_type();
extern (C) int gtk_file_filter_filter(void *, _GtkFileFilterInfo *);
extern (C) int gtk_file_filter_get_needed(void *);
extern (C) void gtk_file_filter_add_custom(void *, int, _BCD_func__9321, void *, _BCD_func__11672);
extern (C) void gtk_file_filter_add_pixbuf_formats(void *);
extern (C) void gtk_file_filter_add_pattern(void *, char *);
extern (C) void gtk_file_filter_add_mime_type(void *, char *);
extern (C) char * gtk_file_filter_get_name(void *);
extern (C) void gtk_file_filter_set_name(void *, char *);
extern (C) void * gtk_file_filter_new();
extern (C) uint gtk_file_filter_get_type();
extern (C) int gtk_fixed_get_has_window(_GtkFixed *);
extern (C) void gtk_fixed_set_has_window(_GtkFixed *, int);
extern (C) void gtk_fixed_move(_GtkFixed *, _GtkWidget *, int, int);
extern (C) void gtk_fixed_put(_GtkFixed *, _GtkWidget *, int, int);
extern (C) _GtkWidget * gtk_fixed_new();
extern (C) uint gtk_fixed_get_type();
extern (C) int gtk_file_selection_get_select_multiple(_GtkFileSelection *);
extern (C) void gtk_file_selection_set_select_multiple(_GtkFileSelection *, int);
extern (C) char * * gtk_file_selection_get_selections(_GtkFileSelection *);
extern (C) void gtk_file_selection_hide_fileop_buttons(_GtkFileSelection *);
extern (C) void gtk_file_selection_show_fileop_buttons(_GtkFileSelection *);
extern (C) void gtk_file_selection_complete(_GtkFileSelection *, char *);
extern (C) char * gtk_file_selection_get_filename(_GtkFileSelection *);
extern (C) void gtk_file_selection_set_filename(_GtkFileSelection *, char *);
extern (C) _GtkWidget * gtk_file_selection_new(char *);
extern (C) uint gtk_file_selection_get_type();
extern (C) _GtkWidget * gtk_expander_get_label_widget(_GtkExpander *);
extern (C) void gtk_expander_set_label_widget(_GtkExpander *, _GtkWidget *);
extern (C) int gtk_expander_get_use_markup(_GtkExpander *);
extern (C) void gtk_expander_set_use_markup(_GtkExpander *, int);
extern (C) int gtk_expander_get_use_underline(_GtkExpander *);
extern (C) void gtk_expander_set_use_underline(_GtkExpander *, int);
extern (C) char * gtk_expander_get_label(_GtkExpander *);
extern (C) void gtk_expander_set_label(_GtkExpander *, char *);
extern (C) int gtk_expander_get_spacing(_GtkExpander *);
extern (C) void gtk_expander_set_spacing(_GtkExpander *, int);
extern (C) int gtk_expander_get_expanded(_GtkExpander *);
extern (C) void gtk_expander_set_expanded(_GtkExpander *, int);
extern (C) _GtkWidget * gtk_expander_new_with_mnemonic(char *);
extern (C) _GtkWidget * gtk_expander_new(char *);
extern (C) uint gtk_expander_get_type();
extern (C) void gtk_event_box_set_above_child(_GtkEventBox *, int);
extern (C) int gtk_event_box_get_above_child(_GtkEventBox *);
extern (C) void gtk_event_box_set_visible_window(_GtkEventBox *, int);
extern (C) int gtk_event_box_get_visible_window(_GtkEventBox *);
extern (C) _GtkWidget * gtk_event_box_new();
extern (C) uint gtk_event_box_get_type();
extern (C) void _gtk_entry_get_borders(_GtkEntry *, int *, int *);
extern (C) void gtk_entry_set_editable(_GtkEntry *, int);
extern (C) void gtk_entry_select_region(_GtkEntry *, int, int);
extern (C) void gtk_entry_set_position(_GtkEntry *, int);
extern (C) void gtk_entry_prepend_text(_GtkEntry *, char *);
extern (C) void gtk_entry_append_text(_GtkEntry *, char *);
extern (C) _GtkWidget * gtk_entry_new_with_max_length(int);
extern (C) int gtk_entry_text_index_to_layout_index(_GtkEntry *, int);
extern (C) int gtk_entry_layout_index_to_text_index(_GtkEntry *, int);
extern (C) _GtkEntryCompletion * gtk_entry_get_completion(_GtkEntry *);
extern (C) void gtk_entry_set_completion(_GtkEntry *, _GtkEntryCompletion *);
extern (C) float gtk_entry_get_alignment(_GtkEntry *);
extern (C) void gtk_entry_set_alignment(_GtkEntry *, float);
extern (C) void gtk_entry_get_layout_offsets(_GtkEntry *, int *, int *);
extern (C) void * gtk_entry_get_layout(_GtkEntry *);
extern (C) char * gtk_entry_get_text(_GtkEntry *);
extern (C) void gtk_entry_set_text(_GtkEntry *, char *);
extern (C) int gtk_entry_get_width_chars(_GtkEntry *);
extern (C) void gtk_entry_set_width_chars(_GtkEntry *, int);
extern (C) int gtk_entry_get_activates_default(_GtkEntry *);
extern (C) void gtk_entry_set_activates_default(_GtkEntry *, int);
extern (C) int gtk_entry_get_max_length(_GtkEntry *);
extern (C) void gtk_entry_set_max_length(_GtkEntry *, int);
extern (C) int gtk_entry_get_has_frame(_GtkEntry *);
extern (C) void gtk_entry_set_has_frame(_GtkEntry *, int);
extern (C) uint gtk_entry_get_invisible_char(_GtkEntry *);
extern (C) void gtk_entry_set_invisible_char(_GtkEntry *, uint);
extern (C) int gtk_entry_get_visibility(_GtkEntry *);
extern (C) void gtk_entry_set_visibility(_GtkEntry *, int);
extern (C) _GtkWidget * gtk_entry_new();
extern (C) uint gtk_entry_get_type();
extern (C) int gtk_entry_completion_get_text_column(_GtkEntryCompletion *);
extern (C) void gtk_entry_completion_set_text_column(_GtkEntryCompletion *, int);
extern (C) int gtk_entry_completion_get_popup_single_match(_GtkEntryCompletion *);
extern (C) void gtk_entry_completion_set_popup_single_match(_GtkEntryCompletion *, int);
extern (C) int gtk_entry_completion_get_popup_set_width(_GtkEntryCompletion *);
extern (C) void gtk_entry_completion_set_popup_set_width(_GtkEntryCompletion *, int);
extern (C) int gtk_entry_completion_get_popup_completion(_GtkEntryCompletion *);
extern (C) void gtk_entry_completion_set_popup_completion(_GtkEntryCompletion *, int);
extern (C) int gtk_entry_completion_get_inline_completion(_GtkEntryCompletion *);
extern (C) void gtk_entry_completion_set_inline_completion(_GtkEntryCompletion *, int);
extern (C) void gtk_entry_completion_delete_action(_GtkEntryCompletion *, int);
extern (C) void gtk_entry_completion_insert_action_markup(_GtkEntryCompletion *, int, char *);
extern (C) void gtk_entry_completion_insert_action_text(_GtkEntryCompletion *, int, char *);
extern (C) void gtk_entry_completion_insert_prefix(_GtkEntryCompletion *);
extern (C) void gtk_entry_completion_complete(_GtkEntryCompletion *);
extern (C) int gtk_entry_completion_get_minimum_key_length(_GtkEntryCompletion *);
extern (C) void gtk_entry_completion_set_minimum_key_length(_GtkEntryCompletion *, int);
extern (C) void gtk_entry_completion_set_match_func(_GtkEntryCompletion *, _BCD_func__9452, void *, _BCD_func__11672);
extern (C) void * gtk_entry_completion_get_model(_GtkEntryCompletion *);
extern (C) void gtk_entry_completion_set_model(_GtkEntryCompletion *, void *);
extern (C) _GtkWidget * gtk_entry_completion_get_entry(_GtkEntryCompletion *);
extern (C) _GtkEntryCompletion * gtk_entry_completion_new();
extern (C) uint gtk_entry_completion_get_type();
extern (C) void gtk_tree_model_filter_clear_cache(_GtkTreeModelFilter *);
extern (C) void gtk_tree_model_filter_refilter(_GtkTreeModelFilter *);
extern (C) void * gtk_tree_model_filter_convert_path_to_child_path(_GtkTreeModelFilter *, void *);
extern (C) void * gtk_tree_model_filter_convert_child_path_to_path(_GtkTreeModelFilter *, void *);
extern (C) void gtk_tree_model_filter_convert_iter_to_child_iter(_GtkTreeModelFilter *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_tree_model_filter_convert_child_iter_to_iter(_GtkTreeModelFilter *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void * gtk_tree_model_filter_get_model(_GtkTreeModelFilter *);
extern (C) void gtk_tree_model_filter_set_visible_column(_GtkTreeModelFilter *, int);
extern (C) void gtk_tree_model_filter_set_modify_func(_GtkTreeModelFilter *, int, uint *, _BCD_func__9478, void *, _BCD_func__11672);
extern (C) void gtk_tree_model_filter_set_visible_func(_GtkTreeModelFilter *, _BCD_func__9479, void *, _BCD_func__11672);
extern (C) void * gtk_tree_model_filter_new(void *, void *);
extern (C) uint gtk_tree_model_filter_get_type();
extern (C) void gtk_list_store_move_before(_GtkListStore *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_list_store_move_after(_GtkListStore *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_list_store_swap(_GtkListStore *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_list_store_reorder(_GtkListStore *, int *);
extern (C) int gtk_list_store_iter_is_valid(_GtkListStore *, _GtkTreeIter *);
extern (C) void gtk_list_store_clear(_GtkListStore *);
extern (C) void gtk_list_store_append(_GtkListStore *, _GtkTreeIter *);
extern (C) void gtk_list_store_prepend(_GtkListStore *, _GtkTreeIter *);
extern (C) void gtk_list_store_insert_with_valuesv(_GtkListStore *, _GtkTreeIter *, int, int *, _GValue *, int);
extern (C) void gtk_list_store_insert_with_values(_GtkListStore *, _GtkTreeIter *, int, ...);
extern (C) void gtk_list_store_insert_after(_GtkListStore *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_list_store_insert_before(_GtkListStore *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) void gtk_list_store_insert(_GtkListStore *, _GtkTreeIter *, int);
extern (C) int gtk_list_store_remove(_GtkListStore *, _GtkTreeIter *);
extern (C) void gtk_list_store_set_valist(_GtkListStore *, _GtkTreeIter *, char *);
extern (C) void gtk_list_store_set(_GtkListStore *, _GtkTreeIter *, ...);
extern (C) void gtk_list_store_set_value(_GtkListStore *, _GtkTreeIter *, int, _GValue *);
extern (C) void gtk_list_store_set_column_types(_GtkListStore *, int, uint *);
extern (C) _GtkListStore * gtk_list_store_newv(int, uint *);
extern (C) _GtkListStore * gtk_list_store_new(int, ...);
extern (C) uint gtk_list_store_get_type();
extern (C) int gtk_im_context_delete_surrounding(_GtkIMContext *, int, int);
extern (C) int gtk_im_context_get_surrounding(_GtkIMContext *, char * *, int *);
extern (C) void gtk_im_context_set_surrounding(_GtkIMContext *, char *, int, int);
extern (C) void gtk_im_context_set_use_preedit(_GtkIMContext *, int);
extern (C) void gtk_im_context_set_cursor_location(_GtkIMContext *, _GdkRectangle *);
extern (C) void gtk_im_context_reset(_GtkIMContext *);
extern (C) void gtk_im_context_focus_out(_GtkIMContext *);
extern (C) void gtk_im_context_focus_in(_GtkIMContext *);
extern (C) int gtk_im_context_filter_keypress(_GtkIMContext *, _GdkEventKey *);
extern (C) void gtk_im_context_get_preedit_string(_GtkIMContext *, char * *, void * *, int *);
extern (C) void gtk_im_context_set_client_window(_GtkIMContext *, _GdkDrawable *);
extern (C) uint gtk_im_context_get_type();
extern (C) int gtk_editable_get_editable(void *);
extern (C) void gtk_editable_set_editable(void *, int);
extern (C) int gtk_editable_get_position(void *);
extern (C) void gtk_editable_set_position(void *, int);
extern (C) void gtk_editable_delete_selection(void *);
extern (C) void gtk_editable_paste_clipboard(void *);
extern (C) void gtk_editable_copy_clipboard(void *);
extern (C) void gtk_editable_cut_clipboard(void *);
extern (C) char * gtk_editable_get_chars(void *, int, int);
extern (C) void gtk_editable_delete_text(void *, int, int);
extern (C) void gtk_editable_insert_text(void *, char *, int, int *);
extern (C) int gtk_editable_get_selection_bounds(void *, int *, int *);
extern (C) void gtk_editable_select_region(void *, int, int);
extern (C) uint gtk_editable_get_type();
extern (C) void gtk_curve_set_curve_type(_GtkCurve *, int);
extern (C) void gtk_curve_set_vector(_GtkCurve *, int, float *);
extern (C) void gtk_curve_get_vector(_GtkCurve *, int, float *);
extern (C) void gtk_curve_set_range(_GtkCurve *, float, float, float, float);
extern (C) void gtk_curve_set_gamma(_GtkCurve *, float);
extern (C) void gtk_curve_reset(_GtkCurve *);
extern (C) _GtkWidget * gtk_curve_new();
extern (C) uint gtk_curve_get_type();
extern (C) void gtk_drawing_area_size(_GtkDrawingArea *, int, int);
extern (C) _GtkWidget * gtk_drawing_area_new();
extern (C) uint gtk_drawing_area_get_type();
extern (C) uint gtk_ctree_node_get_type();
extern (C) void gtk_ctree_sort_recursive(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_sort_node(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_set_drag_compare_func(_GtkCTree *, _BCD_func__9593);
extern (C) void gtk_ctree_set_expander_style(_GtkCTree *, int);
extern (C) void gtk_ctree_set_line_style(_GtkCTree *, int);
extern (C) void gtk_ctree_set_show_stub(_GtkCTree *, int);
extern (C) void gtk_ctree_set_spacing(_GtkCTree *, int);
extern (C) void gtk_ctree_set_indent(_GtkCTree *, int);
extern (C) int gtk_ctree_node_is_visible(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_node_moveto(_GtkCTree *, _GtkCTreeNode *, int, float, float);
extern (C) void * gtk_ctree_node_get_row_data(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_node_set_row_data_full(_GtkCTree *, _GtkCTreeNode *, void *, _BCD_func__11672);
extern (C) void gtk_ctree_node_set_row_data(_GtkCTree *, _GtkCTreeNode *, void *);
extern (C) void gtk_ctree_node_set_background(_GtkCTree *, _GtkCTreeNode *, _GdkColor *);
extern (C) void gtk_ctree_node_set_foreground(_GtkCTree *, _GtkCTreeNode *, _GdkColor *);
extern (C) _GtkStyle * gtk_ctree_node_get_cell_style(_GtkCTree *, _GtkCTreeNode *, int);
extern (C) void gtk_ctree_node_set_cell_style(_GtkCTree *, _GtkCTreeNode *, int, _GtkStyle *);
extern (C) _GtkStyle * gtk_ctree_node_get_row_style(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_node_set_row_style(_GtkCTree *, _GtkCTreeNode *, _GtkStyle *);
extern (C) int gtk_ctree_get_node_info(_GtkCTree *, _GtkCTreeNode *, char * *, char *, _GdkDrawable * *, _GdkDrawable * *, _GdkDrawable * *, _GdkDrawable * *, int *, int *);
extern (C) int gtk_ctree_node_get_pixtext(_GtkCTree *, _GtkCTreeNode *, int, char * *, char *, _GdkDrawable * *, _GdkDrawable * *);
extern (C) int gtk_ctree_node_get_pixmap(_GtkCTree *, _GtkCTreeNode *, int, _GdkDrawable * *, _GdkDrawable * *);
extern (C) int gtk_ctree_node_get_text(_GtkCTree *, _GtkCTreeNode *, int, char * *);
extern (C) int gtk_ctree_node_get_cell_type(_GtkCTree *, _GtkCTreeNode *, int);
extern (C) int gtk_ctree_node_get_selectable(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_node_set_selectable(_GtkCTree *, _GtkCTreeNode *, int);
extern (C) void gtk_ctree_node_set_shift(_GtkCTree *, _GtkCTreeNode *, int, int, int);
extern (C) void gtk_ctree_set_node_info(_GtkCTree *, _GtkCTreeNode *, char *, char, _GdkDrawable *, _GdkDrawable *, _GdkDrawable *, _GdkDrawable *, int, int);
extern (C) void gtk_ctree_node_set_pixtext(_GtkCTree *, _GtkCTreeNode *, int, char *, char, _GdkDrawable *, _GdkDrawable *);
extern (C) void gtk_ctree_node_set_pixmap(_GtkCTree *, _GtkCTreeNode *, int, _GdkDrawable *, _GdkDrawable *);
extern (C) void gtk_ctree_node_set_text(_GtkCTree *, _GtkCTreeNode *, int, char *);
extern (C) void gtk_ctree_real_select_recursive(_GtkCTree *, _GtkCTreeNode *, int);
extern (C) void gtk_ctree_unselect_recursive(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_unselect(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_select_recursive(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_select(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_toggle_expansion_recursive(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_toggle_expansion(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_collapse_to_depth(_GtkCTree *, _GtkCTreeNode *, int);
extern (C) void gtk_ctree_collapse_recursive(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_collapse(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_expand_to_depth(_GtkCTree *, _GtkCTreeNode *, int);
extern (C) void gtk_ctree_expand_recursive(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_expand(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_move(_GtkCTree *, _GtkCTreeNode *, _GtkCTreeNode *, _GtkCTreeNode *);
extern (C) int gtk_ctree_is_hot_spot(_GtkCTree *, int, int);
alias int function(void *, void *) _BCD_func__13399;
extern (C) _GList * gtk_ctree_find_all_by_row_data_custom(_GtkCTree *, _GtkCTreeNode *, void *, _BCD_func__13399);
extern (C) _GtkCTreeNode * gtk_ctree_find_by_row_data_custom(_GtkCTree *, _GtkCTreeNode *, void *, _BCD_func__13399);
extern (C) _GList * gtk_ctree_find_all_by_row_data(_GtkCTree *, _GtkCTreeNode *, void *);
extern (C) _GtkCTreeNode * gtk_ctree_find_by_row_data(_GtkCTree *, _GtkCTreeNode *, void *);
extern (C) int gtk_ctree_is_ancestor(_GtkCTree *, _GtkCTreeNode *, _GtkCTreeNode *);
extern (C) int gtk_ctree_find(_GtkCTree *, _GtkCTreeNode *, _GtkCTreeNode *);
extern (C) _GtkCTreeNode * gtk_ctree_node_nth(_GtkCTree *, uint);
extern (C) _GtkCTreeNode * gtk_ctree_find_node_ptr(_GtkCTree *, _GtkCTreeRow *);
extern (C) _GtkCTreeNode * gtk_ctree_last(_GtkCTree *, _GtkCTreeNode *);
extern (C) int gtk_ctree_is_viewable(_GtkCTree *, _GtkCTreeNode *);
extern (C) void gtk_ctree_pre_recursive_to_depth(_GtkCTree *, _GtkCTreeNode *, int, _BCD_func__9595, void *);
extern (C) void gtk_ctree_pre_recursive(_GtkCTree *, _GtkCTreeNode *, _BCD_func__9595, void *);
extern (C) void gtk_ctree_post_recursive_to_depth(_GtkCTree *, _GtkCTreeNode *, int, _BCD_func__9595, void *);
extern (C) void gtk_ctree_post_recursive(_GtkCTree *, _GtkCTreeNode *, _BCD_func__9595, void *);
extern (C) _GNode * gtk_ctree_export_to_gnode(_GtkCTree *, _GNode *, _GNode *, _GtkCTreeNode *, _BCD_func__9594, void *);
extern (C) _GtkCTreeNode * gtk_ctree_insert_gnode(_GtkCTree *, _GtkCTreeNode *, _GtkCTreeNode *, _GNode *, _BCD_func__9594, void *);
extern (C) void gtk_ctree_remove_node(_GtkCTree *, _GtkCTreeNode *);
extern (C) _GtkCTreeNode * gtk_ctree_insert_node(_GtkCTree *, _GtkCTreeNode *, _GtkCTreeNode *, char * *, char, _GdkDrawable *, _GdkDrawable *, _GdkDrawable *, _GdkDrawable *, int, int);
extern (C) _GtkWidget * gtk_ctree_new(int, int);
extern (C) _GtkWidget * gtk_ctree_new_with_titles(int, int, char * *);
extern (C) uint gtk_ctree_get_type();
extern (C) _GtkWidget * gtk_combo_box_entry_new_text();
extern (C) int gtk_combo_box_entry_get_text_column(_GtkComboBoxEntry *);
extern (C) void gtk_combo_box_entry_set_text_column(_GtkComboBoxEntry *, int);
extern (C) _GtkWidget * gtk_combo_box_entry_new_with_model(void *, int);
extern (C) _GtkWidget * gtk_combo_box_entry_new();
extern (C) uint gtk_combo_box_entry_get_type();
extern (C) int _gtk_combo_box_editing_canceled(_GtkComboBox *);
extern (C) _AtkObject * gtk_combo_box_get_popup_accessible(_GtkComboBox *);
extern (C) void gtk_combo_box_popdown(_GtkComboBox *);
extern (C) void gtk_combo_box_popup(_GtkComboBox *);
extern (C) char * gtk_combo_box_get_active_text(_GtkComboBox *);
extern (C) void gtk_combo_box_remove_text(_GtkComboBox *, int);
extern (C) void gtk_combo_box_prepend_text(_GtkComboBox *, char *);
extern (C) void gtk_combo_box_insert_text(_GtkComboBox *, int, char *);
extern (C) void gtk_combo_box_append_text(_GtkComboBox *, char *);
extern (C) _GtkWidget * gtk_combo_box_new_text();
extern (C) void gtk_combo_box_set_row_separator_func(_GtkComboBox *, _BCD_func__9479, void *, _BCD_func__11672);
extern (C) _BCD_func__9479 gtk_combo_box_get_row_separator_func(_GtkComboBox *);
extern (C) void * gtk_combo_box_get_model(_GtkComboBox *);
extern (C) void gtk_combo_box_set_model(_GtkComboBox *, void *);
extern (C) void gtk_combo_box_set_active_iter(_GtkComboBox *, _GtkTreeIter *);
extern (C) int gtk_combo_box_get_active_iter(_GtkComboBox *, _GtkTreeIter *);
extern (C) void gtk_combo_box_set_active(_GtkComboBox *, int);
extern (C) int gtk_combo_box_get_active(_GtkComboBox *);
extern (C) void gtk_combo_box_set_focus_on_click(_GtkComboBox *, int);
extern (C) int gtk_combo_box_get_focus_on_click(_GtkComboBox *);
extern (C) void gtk_combo_box_set_add_tearoffs(_GtkComboBox *, int);
extern (C) int gtk_combo_box_get_add_tearoffs(_GtkComboBox *);
extern (C) void gtk_combo_box_set_column_span_column(_GtkComboBox *, int);
extern (C) int gtk_combo_box_get_column_span_column(_GtkComboBox *);
extern (C) void gtk_combo_box_set_row_span_column(_GtkComboBox *, int);
extern (C) int gtk_combo_box_get_row_span_column(_GtkComboBox *);
extern (C) void gtk_combo_box_set_wrap_width(_GtkComboBox *, int);
extern (C) int gtk_combo_box_get_wrap_width(_GtkComboBox *);
extern (C) _GtkWidget * gtk_combo_box_new_with_model(void *);
extern (C) _GtkWidget * gtk_combo_box_new();
extern (C) uint gtk_combo_box_get_type();
extern (C) void gtk_tree_view_set_row_separator_func(_GtkTreeView *, _BCD_func__9479, void *, _BCD_func__11672);
extern (C) _BCD_func__9479 gtk_tree_view_get_row_separator_func(_GtkTreeView *);
extern (C) int gtk_tree_view_get_hover_expand(_GtkTreeView *);
extern (C) void gtk_tree_view_set_hover_expand(_GtkTreeView *, int);
extern (C) int gtk_tree_view_get_hover_selection(_GtkTreeView *);
extern (C) void gtk_tree_view_set_hover_selection(_GtkTreeView *, int);
extern (C) int gtk_tree_view_get_fixed_height_mode(_GtkTreeView *);
extern (C) void gtk_tree_view_set_fixed_height_mode(_GtkTreeView *, int);
extern (C) void gtk_tree_view_set_destroy_count_func(_GtkTreeView *, _BCD_func__9658, void *, _BCD_func__11672);
extern (C) void gtk_tree_view_set_search_equal_func(_GtkTreeView *, _BCD_func__9662, void *, _BCD_func__11672);
extern (C) _BCD_func__9662 gtk_tree_view_get_search_equal_func(_GtkTreeView *);
extern (C) void gtk_tree_view_set_search_column(_GtkTreeView *, int);
extern (C) int gtk_tree_view_get_search_column(_GtkTreeView *);
extern (C) int gtk_tree_view_get_enable_search(_GtkTreeView *);
extern (C) void gtk_tree_view_set_enable_search(_GtkTreeView *, int);
extern (C) _GdkDrawable * gtk_tree_view_create_row_drag_icon(_GtkTreeView *, void *);
extern (C) int gtk_tree_view_get_dest_row_at_pos(_GtkTreeView *, int, int, void * *, int *);
extern (C) void gtk_tree_view_get_drag_dest_row(_GtkTreeView *, void * *, int *);
extern (C) void gtk_tree_view_set_drag_dest_row(_GtkTreeView *, void *, int);
extern (C) void gtk_tree_view_unset_rows_drag_dest(_GtkTreeView *);
extern (C) void gtk_tree_view_unset_rows_drag_source(_GtkTreeView *);
extern (C) void gtk_tree_view_enable_model_drag_dest(_GtkTreeView *, _GtkTargetEntry *, int, int);
extern (C) void gtk_tree_view_enable_model_drag_source(_GtkTreeView *, int, _GtkTargetEntry *, int, int);
extern (C) int gtk_tree_view_get_visible_range(_GtkTreeView *, void * *, void * *);
extern (C) void gtk_tree_view_tree_to_widget_coords(_GtkTreeView *, int, int, int *, int *);
extern (C) void gtk_tree_view_widget_to_tree_coords(_GtkTreeView *, int, int, int *, int *);
extern (C) void gtk_tree_view_get_visible_rect(_GtkTreeView *, _GdkRectangle *);
extern (C) void gtk_tree_view_get_background_area(_GtkTreeView *, void *, _GtkTreeViewColumn *, _GdkRectangle *);
extern (C) void gtk_tree_view_get_cell_area(_GtkTreeView *, void *, _GtkTreeViewColumn *, _GdkRectangle *);
extern (C) int gtk_tree_view_get_path_at_pos(_GtkTreeView *, int, int, void * *, _GtkTreeViewColumn * *, int *, int *);
extern (C) _GdkDrawable * gtk_tree_view_get_bin_window(_GtkTreeView *);
extern (C) void gtk_tree_view_get_cursor(_GtkTreeView *, void * *, _GtkTreeViewColumn * *);
extern (C) void gtk_tree_view_set_cursor_on_cell(_GtkTreeView *, void *, _GtkTreeViewColumn *, _GtkCellRenderer *, int);
extern (C) void gtk_tree_view_set_cursor(_GtkTreeView *, void *, _GtkTreeViewColumn *, int);
extern (C) int gtk_tree_view_get_reorderable(_GtkTreeView *);
extern (C) void gtk_tree_view_set_reorderable(_GtkTreeView *, int);
extern (C) int gtk_tree_view_row_expanded(_GtkTreeView *, void *);
extern (C) void gtk_tree_view_map_expanded_rows(_GtkTreeView *, _BCD_func__9663, void *);
extern (C) int gtk_tree_view_collapse_row(_GtkTreeView *, void *);
extern (C) int gtk_tree_view_expand_row(_GtkTreeView *, void *, int);
extern (C) void gtk_tree_view_expand_to_path(_GtkTreeView *, void *);
extern (C) void gtk_tree_view_collapse_all(_GtkTreeView *);
extern (C) void gtk_tree_view_expand_all(_GtkTreeView *);
extern (C) void gtk_tree_view_row_activated(_GtkTreeView *, void *, _GtkTreeViewColumn *);
extern (C) void gtk_tree_view_scroll_to_cell(_GtkTreeView *, void *, _GtkTreeViewColumn *, int, float, float);
extern (C) void gtk_tree_view_scroll_to_point(_GtkTreeView *, int, int);
extern (C) void gtk_tree_view_set_column_drag_function(_GtkTreeView *, _BCD_func__9664, void *, _BCD_func__11672);
extern (C) _GtkTreeViewColumn * gtk_tree_view_get_expander_column(_GtkTreeView *);
extern (C) void gtk_tree_view_set_expander_column(_GtkTreeView *, _GtkTreeViewColumn *);
extern (C) void gtk_tree_view_move_column_after(_GtkTreeView *, _GtkTreeViewColumn *, _GtkTreeViewColumn *);
extern (C) _GList * gtk_tree_view_get_columns(_GtkTreeView *);
extern (C) _GtkTreeViewColumn * gtk_tree_view_get_column(_GtkTreeView *, int);
extern (C) int gtk_tree_view_insert_column_with_data_func(_GtkTreeView *, int, char *, _GtkCellRenderer *, _BCD_func__10225, void *, _BCD_func__11672);
extern (C) int gtk_tree_view_insert_column_with_attributes(_GtkTreeView *, int, char *, _GtkCellRenderer *, ...);
extern (C) int gtk_tree_view_insert_column(_GtkTreeView *, _GtkTreeViewColumn *, int);
extern (C) int gtk_tree_view_remove_column(_GtkTreeView *, _GtkTreeViewColumn *);
extern (C) int gtk_tree_view_append_column(_GtkTreeView *, _GtkTreeViewColumn *);
extern (C) int gtk_tree_view_get_rules_hint(_GtkTreeView *);
extern (C) void gtk_tree_view_set_rules_hint(_GtkTreeView *, int);
extern (C) void gtk_tree_view_set_headers_clickable(_GtkTreeView *, int);
extern (C) void gtk_tree_view_columns_autosize(_GtkTreeView *);
extern (C) void gtk_tree_view_set_headers_visible(_GtkTreeView *, int);
extern (C) int gtk_tree_view_get_headers_visible(_GtkTreeView *);
extern (C) void gtk_tree_view_set_vadjustment(_GtkTreeView *, _GtkAdjustment *);
extern (C) _GtkAdjustment * gtk_tree_view_get_vadjustment(_GtkTreeView *);
extern (C) void gtk_tree_view_set_hadjustment(_GtkTreeView *, _GtkAdjustment *);
extern (C) _GtkAdjustment * gtk_tree_view_get_hadjustment(_GtkTreeView *);
extern (C) _GtkTreeSelection * gtk_tree_view_get_selection(_GtkTreeView *);
extern (C) void gtk_tree_view_set_model(_GtkTreeView *, void *);
extern (C) void * gtk_tree_view_get_model(_GtkTreeView *);
extern (C) _GtkWidget * gtk_tree_view_new_with_model(void *);
extern (C) _GtkWidget * gtk_tree_view_new();
extern (C) uint gtk_tree_view_get_type();
extern (C) void gtk_drag_set_default_icon(_GdkColormap *, _GdkDrawable *, _GdkDrawable *, int, int);
extern (C) void _gtk_drag_dest_handle_event(_GtkWidget *, _GdkEvent *);
extern (C) void _gtk_drag_source_handle_event(_GtkWidget *, _GdkEvent *);
extern (C) int gtk_drag_check_threshold(_GtkWidget *, int, int, int, int);
extern (C) void gtk_drag_set_icon_default(_GdkDragContext *);
extern (C) void gtk_drag_set_icon_name(_GdkDragContext *, char *, int, int);
extern (C) void gtk_drag_set_icon_stock(_GdkDragContext *, char *, int, int);
extern (C) void gtk_drag_set_icon_pixbuf(_GdkDragContext *, void *, int, int);
extern (C) void gtk_drag_set_icon_pixmap(_GdkDragContext *, _GdkColormap *, _GdkDrawable *, _GdkDrawable *, int, int);
extern (C) void gtk_drag_set_icon_widget(_GdkDragContext *, _GtkWidget *, int, int);
extern (C) _GdkDragContext * gtk_drag_begin(_GtkWidget *, _GtkTargetList *, int, int, _GdkEvent *);
extern (C) void gtk_drag_source_set_icon_name(_GtkWidget *, char *);
extern (C) void gtk_drag_source_set_icon_stock(_GtkWidget *, char *);
extern (C) void gtk_drag_source_set_icon_pixbuf(_GtkWidget *, void *);
extern (C) void gtk_drag_source_set_icon(_GtkWidget *, _GdkColormap *, _GdkDrawable *, _GdkDrawable *);
extern (C) void gtk_drag_source_add_uri_targets(_GtkWidget *);
extern (C) void gtk_drag_source_add_image_targets(_GtkWidget *);
extern (C) void gtk_drag_source_add_text_targets(_GtkWidget *);
extern (C) void gtk_drag_source_set_target_list(_GtkWidget *, _GtkTargetList *);
extern (C) _GtkTargetList * gtk_drag_source_get_target_list(_GtkWidget *);
extern (C) void gtk_drag_source_unset(_GtkWidget *);
extern (C) void gtk_drag_source_set(_GtkWidget *, int, _GtkTargetEntry *, int, int);
extern (C) void gtk_drag_dest_add_uri_targets(_GtkWidget *);
extern (C) void gtk_drag_dest_add_image_targets(_GtkWidget *);
extern (C) void gtk_drag_dest_add_text_targets(_GtkWidget *);
extern (C) void gtk_drag_dest_set_target_list(_GtkWidget *, _GtkTargetList *);
extern (C) _GtkTargetList * gtk_drag_dest_get_target_list(_GtkWidget *);
extern (C) void * gtk_drag_dest_find_target(_GtkWidget *, _GdkDragContext *, _GtkTargetList *);
extern (C) void gtk_drag_dest_unset(_GtkWidget *);
extern (C) void gtk_drag_dest_set_proxy(_GtkWidget *, _GdkDrawable *, int, int);
extern (C) void gtk_drag_dest_set(_GtkWidget *, int, _GtkTargetEntry *, int, int);
extern (C) void gtk_drag_unhighlight(_GtkWidget *);
extern (C) void gtk_drag_highlight(_GtkWidget *);
extern (C) _GtkWidget * gtk_drag_get_source_widget(_GdkDragContext *);
extern (C) void gtk_drag_finish(_GdkDragContext *, int, int, uint);
extern (C) void gtk_drag_get_data(_GtkWidget *, _GdkDragContext *, void *, uint);
extern (C) void gtk_combo_disable_activate(_GtkCombo *);
extern (C) void gtk_combo_set_popdown_strings(_GtkCombo *, _GList *);
extern (C) void gtk_combo_set_item_string(_GtkCombo *, _GtkItem *, char *);
extern (C) void gtk_combo_set_case_sensitive(_GtkCombo *, int);
extern (C) void gtk_combo_set_use_arrows_always(_GtkCombo *, int);
extern (C) void gtk_combo_set_use_arrows(_GtkCombo *, int);
extern (C) void gtk_combo_set_value_in_list(_GtkCombo *, int, int);
extern (C) _GtkWidget * gtk_combo_new();
extern (C) uint gtk_combo_get_type();
extern (C) _GtkWidget * gtk_hbox_new(int, int);
extern (C) uint gtk_hbox_get_type();
extern (C) _GtkWidget * gtk_color_selection_dialog_new(char *);
extern (C) uint gtk_color_selection_dialog_get_type();
extern (C) void gtk_color_selection_set_update_policy(_GtkColorSelection *, int);
extern (C) void gtk_color_selection_get_color(_GtkColorSelection *, double *);
extern (C) void gtk_color_selection_set_color(_GtkColorSelection *, double *);
extern (C) _BCD_func__9760 gtk_color_selection_set_change_palette_with_screen_hook(_BCD_func__9760);
extern (C) _BCD_func__9761 gtk_color_selection_set_change_palette_hook(_BCD_func__9761);
extern (C) char * gtk_color_selection_palette_to_string(_GdkColor *, int);
extern (C) int gtk_color_selection_palette_from_string(char *, _GdkColor * *, int *);
extern (C) int gtk_color_selection_is_adjusting(_GtkColorSelection *);
extern (C) ushort gtk_color_selection_get_previous_alpha(_GtkColorSelection *);
extern (C) void gtk_color_selection_get_previous_color(_GtkColorSelection *, _GdkColor *);
extern (C) void gtk_color_selection_set_previous_alpha(_GtkColorSelection *, ushort);
extern (C) void gtk_color_selection_set_previous_color(_GtkColorSelection *, _GdkColor *);
extern (C) ushort gtk_color_selection_get_current_alpha(_GtkColorSelection *);
extern (C) void gtk_color_selection_get_current_color(_GtkColorSelection *, _GdkColor *);
extern (C) void gtk_color_selection_set_current_alpha(_GtkColorSelection *, ushort);
extern (C) void gtk_color_selection_set_current_color(_GtkColorSelection *, _GdkColor *);
extern (C) void gtk_color_selection_set_has_palette(_GtkColorSelection *, int);
extern (C) int gtk_color_selection_get_has_palette(_GtkColorSelection *);
extern (C) void gtk_color_selection_set_has_opacity_control(_GtkColorSelection *, int);
extern (C) int gtk_color_selection_get_has_opacity_control(_GtkColorSelection *);
extern (C) _GtkWidget * gtk_color_selection_new();
extern (C) uint gtk_color_selection_get_type();
extern (C) _GtkWidget * gtk_vbox_new(int, int);
extern (C) uint gtk_vbox_get_type();
extern (C) char * gtk_color_button_get_title(_GtkColorButton *);
extern (C) void gtk_color_button_set_title(_GtkColorButton *, char *);
extern (C) int gtk_color_button_get_use_alpha(_GtkColorButton *);
extern (C) void gtk_color_button_set_use_alpha(_GtkColorButton *, int);
extern (C) ushort gtk_color_button_get_alpha(_GtkColorButton *);
extern (C) void gtk_color_button_get_color(_GtkColorButton *, _GdkColor *);
extern (C) void gtk_color_button_set_alpha(_GtkColorButton *, ushort);
extern (C) void gtk_color_button_set_color(_GtkColorButton *, _GdkColor *);
extern (C) _GtkWidget * gtk_color_button_new_with_color(_GdkColor *);
extern (C) _GtkWidget * gtk_color_button_new();
extern (C) uint gtk_color_button_get_type();
extern (C) void * _gtk_clist_create_cell_layout(_GtkCList *, _GtkCListRow *, int);
extern (C) void gtk_clist_set_auto_sort(_GtkCList *, int);
extern (C) void gtk_clist_sort(_GtkCList *);
extern (C) void gtk_clist_set_sort_type(_GtkCList *, int);
extern (C) void gtk_clist_set_sort_column(_GtkCList *, int);
extern (C) void gtk_clist_set_compare_func(_GtkCList *, _BCD_func__9803);
extern (C) void gtk_clist_row_move(_GtkCList *, int, int);
extern (C) void gtk_clist_swap_rows(_GtkCList *, int, int);
extern (C) void gtk_clist_unselect_all(_GtkCList *);
extern (C) void gtk_clist_select_all(_GtkCList *);
extern (C) int gtk_clist_get_selection_info(_GtkCList *, int, int, int *, int *);
extern (C) void gtk_clist_clear(_GtkCList *);
extern (C) void gtk_clist_undo_selection(_GtkCList *);
extern (C) void gtk_clist_unselect_row(_GtkCList *, int, int);
extern (C) void gtk_clist_select_row(_GtkCList *, int, int);
extern (C) int gtk_clist_find_row_from_data(_GtkCList *, void *);
extern (C) void * gtk_clist_get_row_data(_GtkCList *, int);
extern (C) void gtk_clist_set_row_data_full(_GtkCList *, int, void *, _BCD_func__11672);
extern (C) void gtk_clist_set_row_data(_GtkCList *, int, void *);
extern (C) void gtk_clist_remove(_GtkCList *, int);
extern (C) int gtk_clist_insert(_GtkCList *, int, char * *);
extern (C) int gtk_clist_append(_GtkCList *, char * *);
extern (C) int gtk_clist_prepend(_GtkCList *, char * *);
extern (C) int gtk_clist_get_selectable(_GtkCList *, int);
extern (C) void gtk_clist_set_selectable(_GtkCList *, int, int);
extern (C) void gtk_clist_set_shift(_GtkCList *, int, int, int, int);
extern (C) _GtkStyle * gtk_clist_get_row_style(_GtkCList *, int);
extern (C) void gtk_clist_set_row_style(_GtkCList *, int, _GtkStyle *);
extern (C) _GtkStyle * gtk_clist_get_cell_style(_GtkCList *, int, int);
extern (C) void gtk_clist_set_cell_style(_GtkCList *, int, int, _GtkStyle *);
extern (C) void gtk_clist_set_background(_GtkCList *, int, _GdkColor *);
extern (C) void gtk_clist_set_foreground(_GtkCList *, int, _GdkColor *);
extern (C) int gtk_clist_get_pixtext(_GtkCList *, int, int, char * *, char *, _GdkDrawable * *, _GdkDrawable * *);
extern (C) void gtk_clist_set_pixtext(_GtkCList *, int, int, char *, char, _GdkDrawable *, _GdkDrawable *);
extern (C) int gtk_clist_get_pixmap(_GtkCList *, int, int, _GdkDrawable * *, _GdkDrawable * *);
extern (C) void gtk_clist_set_pixmap(_GtkCList *, int, int, _GdkDrawable *, _GdkDrawable *);
extern (C) int gtk_clist_get_text(_GtkCList *, int, int, char * *);
extern (C) void gtk_clist_set_text(_GtkCList *, int, int, char *);
extern (C) int gtk_clist_get_cell_type(_GtkCList *, int, int);
extern (C) int gtk_clist_row_is_visible(_GtkCList *, int);
extern (C) void gtk_clist_moveto(_GtkCList *, int, int, float, float);
extern (C) void gtk_clist_set_row_height(_GtkCList *, uint);
extern (C) void gtk_clist_set_column_max_width(_GtkCList *, int, int);
extern (C) void gtk_clist_set_column_min_width(_GtkCList *, int, int);
extern (C) void gtk_clist_set_column_width(_GtkCList *, int, int);
extern (C) int gtk_clist_optimal_column_width(_GtkCList *, int);
extern (C) int gtk_clist_columns_autosize(_GtkCList *);
extern (C) void gtk_clist_set_column_auto_resize(_GtkCList *, int, int);
extern (C) void gtk_clist_set_column_resizeable(_GtkCList *, int, int);
extern (C) void gtk_clist_set_column_visibility(_GtkCList *, int, int);
extern (C) void gtk_clist_set_column_justification(_GtkCList *, int, int);
extern (C) _GtkWidget * gtk_clist_get_column_widget(_GtkCList *, int);
extern (C) void gtk_clist_set_column_widget(_GtkCList *, int, _GtkWidget *);
extern (C) char * gtk_clist_get_column_title(_GtkCList *, int);
extern (C) void gtk_clist_set_column_title(_GtkCList *, int, char *);
extern (C) void gtk_clist_column_titles_passive(_GtkCList *);
extern (C) void gtk_clist_column_titles_active(_GtkCList *);
extern (C) void gtk_clist_column_title_passive(_GtkCList *, int);
extern (C) void gtk_clist_column_title_active(_GtkCList *, int);
extern (C) void gtk_clist_column_titles_hide(_GtkCList *);
extern (C) void gtk_clist_column_titles_show(_GtkCList *);
extern (C) void gtk_clist_thaw(_GtkCList *);
extern (C) void gtk_clist_freeze(_GtkCList *);
extern (C) void gtk_clist_set_button_actions(_GtkCList *, uint, char);
extern (C) void gtk_clist_set_use_drag_icons(_GtkCList *, int);
extern (C) void gtk_clist_set_reorderable(_GtkCList *, int);
extern (C) void gtk_clist_set_selection_mode(_GtkCList *, int);
extern (C) void gtk_clist_set_shadow_type(_GtkCList *, int);
extern (C) _GtkAdjustment * gtk_clist_get_vadjustment(_GtkCList *);
extern (C) _GtkAdjustment * gtk_clist_get_hadjustment(_GtkCList *);
extern (C) void gtk_clist_set_vadjustment(_GtkCList *, _GtkAdjustment *);
extern (C) void gtk_clist_set_hadjustment(_GtkCList *, _GtkAdjustment *);
extern (C) _GtkWidget * gtk_clist_new_with_titles(int, char * *);
extern (C) _GtkWidget * gtk_clist_new(int);
extern (C) uint gtk_clist_get_type();
extern (C) _GtkWidget * gtk_vscrollbar_new(_GtkAdjustment *);
extern (C) uint gtk_vscrollbar_get_type();
extern (C) _GtkWidget * gtk_hscrollbar_new(_GtkAdjustment *);
extern (C) uint gtk_hscrollbar_get_type();
extern (C) uint gtk_scrollbar_get_type();
extern (C) double _gtk_range_get_wheel_delta(_GtkRange *, int);
extern (C) double gtk_range_get_value(_GtkRange *);
extern (C) void gtk_range_set_value(_GtkRange *, double);
extern (C) void gtk_range_set_range(_GtkRange *, double, double);
extern (C) void gtk_range_set_increments(_GtkRange *, double, double);
extern (C) int gtk_range_get_inverted(_GtkRange *);
extern (C) void gtk_range_set_inverted(_GtkRange *, int);
extern (C) _GtkAdjustment * gtk_range_get_adjustment(_GtkRange *);
extern (C) void gtk_range_set_adjustment(_GtkRange *, _GtkAdjustment *);
extern (C) int gtk_range_get_update_policy(_GtkRange *);
extern (C) void gtk_range_set_update_policy(_GtkRange *, int);
extern (C) uint gtk_range_get_type();
extern (C) void _gtk_clipboard_store_all();
extern (C) void _gtk_clipboard_handle_event(_GdkEventOwnerChange *);
extern (C) void gtk_clipboard_store(void *);
extern (C) void gtk_clipboard_set_can_store(void *, _GtkTargetEntry *, int);
extern (C) int gtk_clipboard_wait_is_target_available(void *, void *);
extern (C) int gtk_clipboard_wait_is_image_available(void *);
extern (C) int gtk_clipboard_wait_is_text_available(void *);
extern (C) int gtk_clipboard_wait_for_targets(void *, void * * *, int *);
extern (C) void * gtk_clipboard_wait_for_image(void *);
extern (C) char * gtk_clipboard_wait_for_text(void *);
extern (C) _GtkSelectionData * gtk_clipboard_wait_for_contents(void *, void *);
extern (C) void gtk_clipboard_request_targets(void *, _BCD_func__10020, void *);
extern (C) void gtk_clipboard_request_image(void *, _BCD_func__10021, void *);
extern (C) void gtk_clipboard_request_text(void *, _BCD_func__10022, void *);
extern (C) void gtk_clipboard_request_contents(void *, void *, _BCD_func__10023, void *);
extern (C) void gtk_clipboard_set_image(void *, void *);
extern (C) void gtk_clipboard_set_text(void *, char *, int);
extern (C) void gtk_clipboard_clear(void *);
extern (C) _GObject * gtk_clipboard_get_owner(void *);
extern (C) int gtk_clipboard_set_with_owner(void *, _GtkTargetEntry *, uint, _BCD_func__10019, _BCD_func__10018, _GObject *);
extern (C) int gtk_clipboard_set_with_data(void *, _GtkTargetEntry *, uint, _BCD_func__10019, _BCD_func__10018, void *);
extern (C) _GdkDisplay * gtk_clipboard_get_display(void *);
extern (C) void * gtk_clipboard_get(void *);
extern (C) void * gtk_clipboard_get_for_display(_GdkDisplay *, void *);
extern (C) uint gtk_clipboard_get_type();
extern (C) void gtk_selection_data_free(_GtkSelectionData *);
extern (C) _GtkSelectionData * gtk_selection_data_copy(_GtkSelectionData *);
extern (C) uint gtk_selection_data_get_type();
extern (C) int _gtk_selection_property_notify(_GtkWidget *, _GdkEventProperty *);
extern (C) int _gtk_selection_notify(_GtkWidget *, _GdkEventSelection *);
extern (C) int _gtk_selection_incr_event(_GdkDrawable *, _GdkEventProperty *);
extern (C) int _gtk_selection_request(_GtkWidget *, _GdkEventSelection *);
extern (C) int gtk_selection_clear(_GtkWidget *, _GdkEventSelection *);
extern (C) void gtk_selection_remove_all(_GtkWidget *);
extern (C) int gtk_selection_data_targets_include_image(_GtkSelectionData *, int);
extern (C) int gtk_selection_data_targets_include_text(_GtkSelectionData *);
extern (C) int gtk_selection_data_get_targets(_GtkSelectionData *, void * * *, int *);
extern (C) char * * gtk_selection_data_get_uris(_GtkSelectionData *);
extern (C) int gtk_selection_data_set_uris(_GtkSelectionData *, char * *);
extern (C) void * gtk_selection_data_get_pixbuf(_GtkSelectionData *);
extern (C) int gtk_selection_data_set_pixbuf(_GtkSelectionData *, void *);
extern (C) char * gtk_selection_data_get_text(_GtkSelectionData *);
extern (C) int gtk_selection_data_set_text(_GtkSelectionData *, char *, int);
extern (C) void gtk_selection_data_set(_GtkSelectionData *, void *, int, char *, int);
extern (C) int gtk_selection_convert(_GtkWidget *, void *, void *, uint);
extern (C) void gtk_selection_clear_targets(_GtkWidget *, void *);
extern (C) void gtk_selection_add_targets(_GtkWidget *, void *, _GtkTargetEntry *, uint);
extern (C) void gtk_selection_add_target(_GtkWidget *, void *, void *, uint);
extern (C) int gtk_selection_owner_set_for_display(_GdkDisplay *, _GtkWidget *, void *, uint);
extern (C) int gtk_selection_owner_set(_GtkWidget *, void *, uint);
extern (C) int gtk_target_list_find(_GtkTargetList *, void *, uint *);
extern (C) void gtk_target_list_remove(_GtkTargetList *, void *);
extern (C) void gtk_target_list_add_table(_GtkTargetList *, _GtkTargetEntry *, uint);
extern (C) void gtk_target_list_add_uri_targets(_GtkTargetList *, uint);
extern (C) void gtk_target_list_add_image_targets(_GtkTargetList *, uint, int);
extern (C) void gtk_target_list_add_text_targets(_GtkTargetList *, uint);
extern (C) void gtk_target_list_add(_GtkTargetList *, void *, uint, uint);
extern (C) void gtk_target_list_unref(_GtkTargetList *);
extern (C) void gtk_target_list_ref(_GtkTargetList *);
extern (C) _GtkTargetList * gtk_target_list_new(_GtkTargetEntry *, uint);
extern (C) void gtk_check_menu_item_set_show_toggle(_GtkCheckMenuItem *, int);
extern (C) int gtk_check_menu_item_get_draw_as_radio(_GtkCheckMenuItem *);
extern (C) void gtk_check_menu_item_set_draw_as_radio(_GtkCheckMenuItem *, int);
extern (C) int gtk_check_menu_item_get_inconsistent(_GtkCheckMenuItem *);
extern (C) void gtk_check_menu_item_set_inconsistent(_GtkCheckMenuItem *, int);
extern (C) void gtk_check_menu_item_toggled(_GtkCheckMenuItem *);
extern (C) int gtk_check_menu_item_get_active(_GtkCheckMenuItem *);
extern (C) void gtk_check_menu_item_set_active(_GtkCheckMenuItem *, int);
extern (C) _GtkWidget * gtk_check_menu_item_new_with_mnemonic(char *);
extern (C) _GtkWidget * gtk_check_menu_item_new_with_label(char *);
extern (C) _GtkWidget * gtk_check_menu_item_new();
extern (C) uint gtk_check_menu_item_get_type();
extern (C) void _gtk_menu_item_popup_submenu(_GtkWidget *);
extern (C) int _gtk_menu_item_is_selectable(_GtkWidget *);
extern (C) void _gtk_menu_item_refresh_accel_path(_GtkMenuItem *, char *, _GtkAccelGroup *, int);
extern (C) void gtk_menu_item_set_accel_path(_GtkMenuItem *, char *);
extern (C) int gtk_menu_item_get_right_justified(_GtkMenuItem *);
extern (C) void gtk_menu_item_set_right_justified(_GtkMenuItem *, int);
extern (C) void gtk_menu_item_toggle_size_allocate(_GtkMenuItem *, int);
extern (C) void gtk_menu_item_toggle_size_request(_GtkMenuItem *, int *);
extern (C) void gtk_menu_item_activate(_GtkMenuItem *);
extern (C) void gtk_menu_item_deselect(_GtkMenuItem *);
extern (C) void gtk_menu_item_select(_GtkMenuItem *);
extern (C) void gtk_menu_item_remove_submenu(_GtkMenuItem *);
extern (C) _GtkWidget * gtk_menu_item_get_submenu(_GtkMenuItem *);
extern (C) void gtk_menu_item_set_submenu(_GtkMenuItem *, _GtkWidget *);
extern (C) _GtkWidget * gtk_menu_item_new_with_mnemonic(char *);
extern (C) _GtkWidget * gtk_menu_item_new_with_label(char *);
extern (C) _GtkWidget * gtk_menu_item_new();
extern (C) uint gtk_menu_item_get_type();
extern (C) void gtk_item_toggle(_GtkItem *);
extern (C) void gtk_item_deselect(_GtkItem *);
extern (C) void gtk_item_select(_GtkItem *);
extern (C) uint gtk_item_get_type();
extern (C) void _gtk_check_button_get_props(_GtkCheckButton *, int *, int *);
extern (C) _GtkWidget * gtk_check_button_new_with_mnemonic(char *);
extern (C) _GtkWidget * gtk_check_button_new_with_label(char *);
extern (C) _GtkWidget * gtk_check_button_new();
extern (C) uint gtk_check_button_get_type();
extern (C) int gtk_toggle_button_get_inconsistent(_GtkToggleButton *);
extern (C) void gtk_toggle_button_set_inconsistent(_GtkToggleButton *, int);
extern (C) void gtk_toggle_button_toggled(_GtkToggleButton *);
extern (C) int gtk_toggle_button_get_active(_GtkToggleButton *);
extern (C) void gtk_toggle_button_set_active(_GtkToggleButton *, int);
extern (C) int gtk_toggle_button_get_mode(_GtkToggleButton *);
extern (C) void gtk_toggle_button_set_mode(_GtkToggleButton *, int);
extern (C) _GtkWidget * gtk_toggle_button_new_with_mnemonic(char *);
extern (C) _GtkWidget * gtk_toggle_button_new_with_label(char *);
extern (C) _GtkWidget * gtk_toggle_button_new();
extern (C) uint gtk_toggle_button_get_type();
extern (C) _GList * gtk_cell_view_get_cell_renderers(_GtkCellView *);
extern (C) void gtk_cell_view_set_background_color(_GtkCellView *, _GdkColor *);
extern (C) int gtk_cell_view_get_size_of_row(_GtkCellView *, void *, _GtkRequisition *);
extern (C) void * gtk_cell_view_get_displayed_row(_GtkCellView *);
extern (C) void gtk_cell_view_set_displayed_row(_GtkCellView *, void *);
extern (C) void gtk_cell_view_set_model(_GtkCellView *, void *);
extern (C) _GtkWidget * gtk_cell_view_new_with_pixbuf(void *);
extern (C) _GtkWidget * gtk_cell_view_new_with_markup(char *);
extern (C) _GtkWidget * gtk_cell_view_new_with_text(char *);
extern (C) _GtkWidget * gtk_cell_view_new();
extern (C) uint gtk_cell_view_get_type();
extern (C) void gtk_cell_renderer_toggle_set_active(_GtkCellRendererToggle *, int);
extern (C) int gtk_cell_renderer_toggle_get_active(_GtkCellRendererToggle *);
extern (C) void gtk_cell_renderer_toggle_set_radio(_GtkCellRendererToggle *, int);
extern (C) int gtk_cell_renderer_toggle_get_radio(_GtkCellRendererToggle *);
extern (C) _GtkCellRenderer * gtk_cell_renderer_toggle_new();
extern (C) uint gtk_cell_renderer_toggle_get_type();
extern (C) _GtkCellRenderer * gtk_cell_renderer_progress_new();
extern (C) uint gtk_cell_renderer_progress_get_type();
extern (C) _GtkCellRenderer * gtk_cell_renderer_pixbuf_new();
extern (C) uint gtk_cell_renderer_pixbuf_get_type();
extern (C) _GtkCellRenderer * gtk_cell_renderer_combo_new();
extern (C) uint gtk_cell_renderer_combo_get_type();
extern (C) void gtk_cell_renderer_text_set_fixed_height_from_font(_GtkCellRendererText *, int);
extern (C) _GtkCellRenderer * gtk_cell_renderer_text_new();
extern (C) uint gtk_cell_renderer_text_get_type();
extern (C) void gtk_cell_layout_reorder(void *, _GtkCellRenderer *, int);
extern (C) void gtk_cell_layout_clear_attributes(void *, _GtkCellRenderer *);
extern (C) void gtk_cell_layout_set_cell_data_func(void *, _GtkCellRenderer *, _BCD_func__10214, void *, _BCD_func__11672);
extern (C) void gtk_cell_layout_add_attribute(void *, _GtkCellRenderer *, char *, int);
extern (C) void gtk_cell_layout_set_attributes(void *, _GtkCellRenderer *, ...);
extern (C) void gtk_cell_layout_clear(void *);
extern (C) void gtk_cell_layout_pack_end(void *, _GtkCellRenderer *, int);
extern (C) void gtk_cell_layout_pack_start(void *, _GtkCellRenderer *, int);
extern (C) uint gtk_cell_layout_get_type();
extern (C) void gtk_tree_view_column_queue_resize(_GtkTreeViewColumn *);
extern (C) int gtk_tree_view_column_cell_get_position(_GtkTreeViewColumn *, _GtkCellRenderer *, int *, int *);
extern (C) void gtk_tree_view_column_focus_cell(_GtkTreeViewColumn *, _GtkCellRenderer *);
extern (C) int gtk_tree_view_column_cell_is_visible(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_cell_get_size(_GtkTreeViewColumn *, _GdkRectangle *, int *, int *, int *, int *);
extern (C) void gtk_tree_view_column_cell_set_cell_data(_GtkTreeViewColumn *, void *, _GtkTreeIter *, int, int);
extern (C) int gtk_tree_view_column_get_sort_order(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_sort_order(_GtkTreeViewColumn *, int);
extern (C) int gtk_tree_view_column_get_sort_indicator(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_sort_indicator(_GtkTreeViewColumn *, int);
extern (C) int gtk_tree_view_column_get_sort_column_id(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_sort_column_id(_GtkTreeViewColumn *, int);
extern (C) int gtk_tree_view_column_get_reorderable(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_reorderable(_GtkTreeViewColumn *, int);
extern (C) float gtk_tree_view_column_get_alignment(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_alignment(_GtkTreeViewColumn *, float);
extern (C) _GtkWidget * gtk_tree_view_column_get_widget(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_widget(_GtkTreeViewColumn *, _GtkWidget *);
extern (C) int gtk_tree_view_column_get_clickable(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_clickable(_GtkTreeViewColumn *, int);
extern (C) int gtk_tree_view_column_get_expand(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_expand(_GtkTreeViewColumn *, int);
extern (C) char * gtk_tree_view_column_get_title(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_title(_GtkTreeViewColumn *, char *);
extern (C) void gtk_tree_view_column_clicked(_GtkTreeViewColumn *);
extern (C) int gtk_tree_view_column_get_max_width(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_max_width(_GtkTreeViewColumn *, int);
extern (C) int gtk_tree_view_column_get_min_width(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_min_width(_GtkTreeViewColumn *, int);
extern (C) void gtk_tree_view_column_set_fixed_width(_GtkTreeViewColumn *, int);
extern (C) int gtk_tree_view_column_get_fixed_width(_GtkTreeViewColumn *);
extern (C) int gtk_tree_view_column_get_width(_GtkTreeViewColumn *);
extern (C) int gtk_tree_view_column_get_sizing(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_sizing(_GtkTreeViewColumn *, int);
extern (C) int gtk_tree_view_column_get_resizable(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_resizable(_GtkTreeViewColumn *, int);
extern (C) int gtk_tree_view_column_get_visible(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_visible(_GtkTreeViewColumn *, int);
extern (C) int gtk_tree_view_column_get_spacing(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_set_spacing(_GtkTreeViewColumn *, int);
extern (C) void gtk_tree_view_column_clear_attributes(_GtkTreeViewColumn *, _GtkCellRenderer *);
extern (C) void gtk_tree_view_column_set_cell_data_func(_GtkTreeViewColumn *, _GtkCellRenderer *, _BCD_func__10225, void *, _BCD_func__11672);
extern (C) void gtk_tree_view_column_set_attributes(_GtkTreeViewColumn *, _GtkCellRenderer *, ...);
extern (C) void gtk_tree_view_column_add_attribute(_GtkTreeViewColumn *, _GtkCellRenderer *, char *, int);
extern (C) _GList * gtk_tree_view_column_get_cell_renderers(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_clear(_GtkTreeViewColumn *);
extern (C) void gtk_tree_view_column_pack_end(_GtkTreeViewColumn *, _GtkCellRenderer *, int);
extern (C) void gtk_tree_view_column_pack_start(_GtkTreeViewColumn *, _GtkCellRenderer *, int);
extern (C) _GtkTreeViewColumn * gtk_tree_view_column_new_with_attributes(char *, _GtkCellRenderer *, ...);
extern (C) _GtkTreeViewColumn * gtk_tree_view_column_new();
extern (C) uint gtk_tree_view_column_get_type();
extern (C) int gtk_tree_sortable_has_default_sort_func(void *);
extern (C) void gtk_tree_sortable_set_default_sort_func(void *, _BCD_func__10274, void *, _BCD_func__11672);
extern (C) void gtk_tree_sortable_set_sort_func(void *, int, _BCD_func__10274, void *, _BCD_func__11672);
extern (C) void gtk_tree_sortable_set_sort_column_id(void *, int, int);
extern (C) int gtk_tree_sortable_get_sort_column_id(void *, int *, int *);
extern (C) void gtk_tree_sortable_sort_column_changed(void *);
extern (C) uint gtk_tree_sortable_get_type();
extern (C) void gtk_tree_model_rows_reordered(void *, void *, _GtkTreeIter *, int *);
extern (C) void gtk_tree_model_row_deleted(void *, void *);
extern (C) void gtk_tree_model_row_has_child_toggled(void *, void *, _GtkTreeIter *);
extern (C) void gtk_tree_model_row_inserted(void *, void *, _GtkTreeIter *);
extern (C) void gtk_tree_model_row_changed(void *, void *, _GtkTreeIter *);
extern (C) void gtk_tree_model_foreach(void *, _BCD_func__10286, void *);
extern (C) void gtk_tree_model_get_valist(void *, _GtkTreeIter *, char *);
extern (C) void gtk_tree_model_get(void *, _GtkTreeIter *, ...);
extern (C) void gtk_tree_model_unref_node(void *, _GtkTreeIter *);
extern (C) void gtk_tree_model_ref_node(void *, _GtkTreeIter *);
extern (C) int gtk_tree_model_iter_parent(void *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) int gtk_tree_model_iter_nth_child(void *, _GtkTreeIter *, _GtkTreeIter *, int);
extern (C) int gtk_tree_model_iter_n_children(void *, _GtkTreeIter *);
extern (C) int gtk_tree_model_iter_has_child(void *, _GtkTreeIter *);
extern (C) int gtk_tree_model_iter_children(void *, _GtkTreeIter *, _GtkTreeIter *);
extern (C) int gtk_tree_model_iter_next(void *, _GtkTreeIter *);
extern (C) void gtk_tree_model_get_value(void *, _GtkTreeIter *, int, _GValue *);
extern (C) void * gtk_tree_model_get_path(void *, _GtkTreeIter *);
extern (C) int gtk_tree_model_get_iter_first(void *, _GtkTreeIter *);
extern (C) char * gtk_tree_model_get_string_from_iter(void *, _GtkTreeIter *);
extern (C) int gtk_tree_model_get_iter_from_string(void *, _GtkTreeIter *, char *);
extern (C) int gtk_tree_model_get_iter(void *, _GtkTreeIter *, void *);
extern (C) uint gtk_tree_model_get_column_type(void *, int);
extern (C) int gtk_tree_model_get_n_columns(void *);
extern (C) int gtk_tree_model_get_flags(void *);
extern (C) uint gtk_tree_model_get_type();
extern (C) uint gtk_tree_iter_get_type();
extern (C) void gtk_tree_iter_free(_GtkTreeIter *);
extern (C) _GtkTreeIter * gtk_tree_iter_copy(_GtkTreeIter *);
extern (C) void gtk_tree_row_reference_reordered(_GObject *, void *, _GtkTreeIter *, int *);
extern (C) void gtk_tree_row_reference_deleted(_GObject *, void *);
extern (C) void gtk_tree_row_reference_inserted(_GObject *, void *);
extern (C) void gtk_tree_row_reference_free(void *);
extern (C) void * gtk_tree_row_reference_copy(void *);
extern (C) int gtk_tree_row_reference_valid(void *);
extern (C) void * gtk_tree_row_reference_get_model(void *);
extern (C) void * gtk_tree_row_reference_get_path(void *);
extern (C) void * gtk_tree_row_reference_new_proxy(_GObject *, void *, void *);
extern (C) void * gtk_tree_row_reference_new(void *, void *);
extern (C) uint gtk_tree_row_reference_get_type();
extern (C) int gtk_tree_path_is_descendant(void *, void *);
extern (C) int gtk_tree_path_is_ancestor(void *, void *);
extern (C) void gtk_tree_path_down(void *);
extern (C) int gtk_tree_path_up(void *);
extern (C) int gtk_tree_path_prev(void *);
extern (C) void gtk_tree_path_next(void *);
extern (C) int gtk_tree_path_compare(void *, void *);
extern (C) uint gtk_tree_path_get_type();
extern (C) void * gtk_tree_path_copy(void *);
extern (C) void gtk_tree_path_free(void *);
extern (C) int * gtk_tree_path_get_indices(void *);
extern (C) int gtk_tree_path_get_depth(void *);
extern (C) void gtk_tree_path_prepend_index(void *, int);
extern (C) void gtk_tree_path_append_index(void *, int);
extern (C) void * gtk_tree_path_new_first();
extern (C) char * gtk_tree_path_to_string(void *);
extern (C) void * gtk_tree_path_new_from_indices(int, ...);
extern (C) void * gtk_tree_path_new_from_string(char *);
extern (C) void * gtk_tree_path_new();
extern (C) void gtk_cell_renderer_stop_editing(_GtkCellRenderer *, int);
extern (C) void gtk_cell_renderer_editing_canceled(_GtkCellRenderer *);
extern (C) void gtk_cell_renderer_get_fixed_size(_GtkCellRenderer *, int *, int *);
extern (C) void gtk_cell_renderer_set_fixed_size(_GtkCellRenderer *, int, int);
extern (C) void * gtk_cell_renderer_start_editing(_GtkCellRenderer *, _GdkEvent *, _GtkWidget *, char *, _GdkRectangle *, _GdkRectangle *, int);
extern (C) int gtk_cell_renderer_activate(_GtkCellRenderer *, _GdkEvent *, _GtkWidget *, char *, _GdkRectangle *, _GdkRectangle *, int);
extern (C) void gtk_cell_renderer_render(_GtkCellRenderer *, _GdkDrawable *, _GtkWidget *, _GdkRectangle *, _GdkRectangle *, _GdkRectangle *, int);
extern (C) void gtk_cell_renderer_get_size(_GtkCellRenderer *, _GtkWidget *, _GdkRectangle *, int *, int *, int *, int *);
extern (C) uint gtk_cell_renderer_get_type();
extern (C) void gtk_cell_editable_remove_widget(void *);
extern (C) void gtk_cell_editable_editing_done(void *);
extern (C) void gtk_cell_editable_start_editing(void *, _GdkEvent *);
extern (C) uint gtk_cell_editable_get_type();
extern (C) void gtk_calendar_thaw(_GtkCalendar *);
extern (C) void gtk_calendar_freeze(_GtkCalendar *);
extern (C) void gtk_calendar_get_date(_GtkCalendar *, uint *, uint *, uint *);
extern (C) void gtk_calendar_display_options(_GtkCalendar *, int);
extern (C) int gtk_calendar_get_display_options(_GtkCalendar *);
extern (C) void gtk_calendar_set_display_options(_GtkCalendar *, int);
extern (C) void gtk_calendar_clear_marks(_GtkCalendar *);
extern (C) int gtk_calendar_unmark_day(_GtkCalendar *, uint);
extern (C) int gtk_calendar_mark_day(_GtkCalendar *, uint);
extern (C) void gtk_calendar_select_day(_GtkCalendar *, uint);
extern (C) int gtk_calendar_select_month(_GtkCalendar *, uint, uint);
extern (C) _GtkWidget * gtk_calendar_new();
extern (C) uint gtk_calendar_get_type();
extern (C) void gtk_signal_compat_matched(_GtkObject *, _BCD_func__10655, void *, int, uint);
extern (C) void gtk_signal_emitv_by_name(_GtkObject *, char *, _GtkArg *);
extern (C) void gtk_signal_emit_by_name(_GtkObject *, char *, ...);
extern (C) void gtk_signal_emit(_GtkObject *, uint, ...);
extern (C) void gtk_signal_emitv(_GtkObject *, uint, _GtkArg *);
extern (C) uint gtk_signal_connect_full(_GtkObject *, char *, _BCD_func__10655, _BCD_func__11671, void *, _BCD_func__11672, int, int);
extern (C) void gtk_signal_connect_while_alive(_GtkObject *, char *, _BCD_func__10655, void *, _GtkObject *);
extern (C) void gtk_signal_connect_object_while_alive(_GtkObject *, char *, _BCD_func__10655, _GtkObject *);
extern (C) void gtk_signal_emit_stop_by_name(_GtkObject *, char *);
extern (C) uint gtk_signal_new(char *, int, uint, uint, _BCD_func__11660, uint, uint, ...);
extern (C) uint gtk_signal_newv(char *, int, uint, uint, _BCD_func__11660, uint, uint, uint *);
extern (C) void gtk_marshal_VOID__UINT_STRING(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__UINT_POINTER_UINT_UINT_ENUM(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__UINT_POINTER_UINT_ENUM_ENUM_POINTER(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__STRING_INT_POINTER(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__POINTER_UINT_UINT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__POINTER_INT_INT_POINTER_UINT_UINT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__POINTER_POINTER_UINT_UINT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__POINTER_UINT_ENUM(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__POINTER_UINT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__POINTER_STRING_STRING(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__POINTER_POINTER_POINTER(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__POINTER_POINTER(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__POINTER_INT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__INT_INT_POINTER(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__INT_INT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__ENUM_FLOAT_BOOLEAN(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_VOID__ENUM_FLOAT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_INT__POINTER_CHAR_CHAR(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_INT__POINTER(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_ENUM__ENUM(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_BOOLEAN__POINTER_STRING_STRING_POINTER(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_BOOLEAN__POINTER_INT_INT_UINT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_BOOLEAN__POINTER_INT_INT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_BOOLEAN__POINTER_POINTER_INT_INT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_BOOLEAN__POINTER(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void gtk_marshal_BOOLEAN__VOID(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void _gtk_button_paint(_GtkButton *, _GdkRectangle *, int, int, char *, char *);
extern (C) void _gtk_button_set_depressed(_GtkButton *, int);
extern (C) _GtkWidget * gtk_button_get_image(_GtkButton *);
extern (C) void gtk_button_set_image(_GtkButton *, _GtkWidget *);
extern (C) void gtk_button_get_alignment(_GtkButton *, float *, float *);
extern (C) void gtk_button_set_alignment(_GtkButton *, float, float);
extern (C) int gtk_button_get_focus_on_click(_GtkButton *);
extern (C) void gtk_button_set_focus_on_click(_GtkButton *, int);
extern (C) int gtk_button_get_use_stock(_GtkButton *);
extern (C) void gtk_button_set_use_stock(_GtkButton *, int);
extern (C) int gtk_button_get_use_underline(_GtkButton *);
extern (C) void gtk_button_set_use_underline(_GtkButton *, int);
extern (C) char * gtk_button_get_label(_GtkButton *);
extern (C) void gtk_button_set_label(_GtkButton *, char *);
extern (C) int gtk_button_get_relief(_GtkButton *);
extern (C) void gtk_button_set_relief(_GtkButton *, int);
extern (C) void gtk_button_leave(_GtkButton *);
extern (C) void gtk_button_enter(_GtkButton *);
extern (C) void gtk_button_clicked(_GtkButton *);
extern (C) void gtk_button_released(_GtkButton *);
extern (C) void gtk_button_pressed(_GtkButton *);
extern (C) _GtkWidget * gtk_button_new_with_mnemonic(char *);
extern (C) _GtkWidget * gtk_button_new_from_stock(char *);
extern (C) _GtkWidget * gtk_button_new_with_label(char *);
extern (C) _GtkWidget * gtk_button_new();
extern (C) uint gtk_button_get_type();
extern (C) void gtk_image_get(_GtkImage *, _GdkImage * *, _GdkDrawable * *);
extern (C) void gtk_image_set(_GtkImage *, _GdkImage *, _GdkDrawable *);
extern (C) int gtk_image_get_pixel_size(_GtkImage *);
extern (C) void gtk_image_get_icon_name(_GtkImage *, char * *, int *);
extern (C) void * gtk_image_get_animation(_GtkImage *);
extern (C) void gtk_image_get_icon_set(_GtkImage *, void * *, int *);
extern (C) void gtk_image_get_stock(_GtkImage *, char * *, int *);
extern (C) void * gtk_image_get_pixbuf(_GtkImage *);
extern (C) void gtk_image_get_image(_GtkImage *, _GdkImage * *, _GdkDrawable * *);
extern (C) void gtk_image_get_pixmap(_GtkImage *, _GdkDrawable * *, _GdkDrawable * *);
extern (C) int gtk_image_get_storage_type(_GtkImage *);
extern (C) void gtk_image_set_pixel_size(_GtkImage *, int);
extern (C) void gtk_image_set_from_icon_name(_GtkImage *, char *, int);
extern (C) void gtk_image_set_from_animation(_GtkImage *, void *);
extern (C) void gtk_image_set_from_icon_set(_GtkImage *, void *, int);
extern (C) void gtk_image_set_from_stock(_GtkImage *, char *, int);
extern (C) void gtk_image_set_from_pixbuf(_GtkImage *, void *);
extern (C) void gtk_image_set_from_file(_GtkImage *, char *);
extern (C) void gtk_image_set_from_image(_GtkImage *, _GdkImage *, _GdkDrawable *);
extern (C) void gtk_image_set_from_pixmap(_GtkImage *, _GdkDrawable *, _GdkDrawable *);
extern (C) void gtk_image_clear(_GtkImage *);
extern (C) _GtkWidget * gtk_image_new_from_icon_name(char *, int);
extern (C) _GtkWidget * gtk_image_new_from_animation(void *);
extern (C) _GtkWidget * gtk_image_new_from_icon_set(void *, int);
extern (C) _GtkWidget * gtk_image_new_from_stock(char *, int);
extern (C) _GtkWidget * gtk_image_new_from_pixbuf(void *);
extern (C) _GtkWidget * gtk_image_new_from_file(char *);
extern (C) _GtkWidget * gtk_image_new_from_image(_GdkImage *, _GdkDrawable *);
extern (C) _GtkWidget * gtk_image_new_from_pixmap(_GdkDrawable *, _GdkDrawable *);
extern (C) _GtkWidget * gtk_image_new();
extern (C) uint gtk_image_get_type();
alias int function(_GSignalInvocationHint *, _GValue *, _GValue *, void *) _BCD_func__12856;
extern (C) uint _gtk_binding_signal_new(char *, uint, int, _BCD_func__10655, _BCD_func__12856, void *, _BCD_func__11660, uint, uint, ...);
extern (C) void _gtk_binding_reset_parsed();
extern (C) uint gtk_binding_parse_binding(_GScanner *);
extern (C) void gtk_binding_entry_add_signall(_GtkBindingSet *, uint, int, char *, _GSList *);
extern (C) void gtk_binding_entry_remove(_GtkBindingSet *, uint, int);
extern (C) void gtk_binding_set_add_path(_GtkBindingSet *, int, char *, int);
extern (C) void gtk_binding_entry_add_signal(_GtkBindingSet *, uint, int, char *, uint, ...);
extern (C) void gtk_binding_entry_clear(_GtkBindingSet *, uint, int);
extern (C) int gtk_binding_set_activate(_GtkBindingSet *, uint, int, _GtkObject *);
extern (C) int gtk_bindings_activate_event(_GtkObject *, _GdkEventKey *);
extern (C) int gtk_bindings_activate(_GtkObject *, uint, int);
extern (C) _GtkBindingSet * gtk_binding_set_find(char *);
extern (C) _GtkBindingSet * gtk_binding_set_by_class(void *);
extern (C) _GtkBindingSet * gtk_binding_set_new(char *);
extern (C) void _gtk_button_box_child_requisition(_GtkWidget *, int *, int *, int *, int *);
extern (C) void gtk_button_box_get_child_ipadding(_GtkButtonBox *, int *, int *);
extern (C) void gtk_button_box_get_child_size(_GtkButtonBox *, int *, int *);
extern (C) void gtk_button_box_set_child_ipadding(_GtkButtonBox *, int, int);
extern (C) void gtk_button_box_set_child_size(_GtkButtonBox *, int, int);
extern (C) void gtk_button_box_set_child_secondary(_GtkButtonBox *, _GtkWidget *, int);
extern (C) int gtk_button_box_get_child_secondary(_GtkButtonBox *, _GtkWidget *);
extern (C) void gtk_button_box_set_layout(_GtkButtonBox *, int);
extern (C) int gtk_button_box_get_layout(_GtkButtonBox *);
extern (C) uint gtk_button_box_get_type();
extern (C) void gtk_box_set_child_packing(_GtkBox *, _GtkWidget *, int, int, uint, int);
extern (C) void gtk_box_query_child_packing(_GtkBox *, _GtkWidget *, int *, int *, uint *, int *);
extern (C) void gtk_box_reorder_child(_GtkBox *, _GtkWidget *, int);
extern (C) int gtk_box_get_spacing(_GtkBox *);
extern (C) void gtk_box_set_spacing(_GtkBox *, int);
extern (C) int gtk_box_get_homogeneous(_GtkBox *);
extern (C) void gtk_box_set_homogeneous(_GtkBox *, int);
extern (C) void gtk_box_pack_end_defaults(_GtkBox *, _GtkWidget *);
extern (C) void gtk_box_pack_start_defaults(_GtkBox *, _GtkWidget *);
extern (C) void gtk_box_pack_end(_GtkBox *, _GtkWidget *, int, int, uint);
extern (C) void gtk_box_pack_start(_GtkBox *, _GtkWidget *, int, int, uint);
extern (C) uint gtk_box_get_type();
extern (C) void gtk_aspect_frame_set(_GtkAspectFrame *, float, float, float, int);
extern (C) _GtkWidget * gtk_aspect_frame_new(char *, float, float, float, int);
extern (C) uint gtk_aspect_frame_get_type();
extern (C) int gtk_frame_get_shadow_type(_GtkFrame *);
extern (C) void gtk_frame_set_shadow_type(_GtkFrame *, int);
extern (C) void gtk_frame_get_label_align(_GtkFrame *, float *, float *);
extern (C) void gtk_frame_set_label_align(_GtkFrame *, float, float);
extern (C) _GtkWidget * gtk_frame_get_label_widget(_GtkFrame *);
extern (C) void gtk_frame_set_label_widget(_GtkFrame *, _GtkWidget *);
extern (C) char * gtk_frame_get_label(_GtkFrame *);
extern (C) void gtk_frame_set_label(_GtkFrame *, char *);
extern (C) _GtkWidget * gtk_frame_new(char *);
extern (C) uint gtk_frame_get_type();
extern (C) void gtk_arrow_set(_GtkArrow *, int, int);
extern (C) _GtkWidget * gtk_arrow_new(int, int);
extern (C) uint gtk_arrow_get_type();
extern (C) void gtk_alignment_get_padding(_GtkAlignment *, uint *, uint *, uint *, uint *);
extern (C) void gtk_alignment_set_padding(_GtkAlignment *, uint, uint, uint, uint);
extern (C) void gtk_alignment_set(_GtkAlignment *, float, float, float, float);
extern (C) _GtkWidget * gtk_alignment_new(float, float, float, float);
extern (C) uint gtk_alignment_get_type();
extern (C) void _gtk_action_group_emit_post_activate(_GtkActionGroup *, _GtkAction *);
extern (C) void _gtk_action_group_emit_pre_activate(_GtkActionGroup *, _GtkAction *);
extern (C) void _gtk_action_group_emit_disconnect_proxy(_GtkActionGroup *, _GtkAction *, _GtkWidget *);
extern (C) void _gtk_action_group_emit_connect_proxy(_GtkActionGroup *, _GtkAction *, _GtkWidget *);
extern (C) char * gtk_action_group_translate_string(_GtkActionGroup *, char *);
extern (C) void gtk_action_group_set_translation_domain(_GtkActionGroup *, char *);
extern (C) void gtk_action_group_set_translate_func(_GtkActionGroup *, _BCD_func__10657, void *, _BCD_func__11672);
extern (C) void gtk_action_group_add_radio_actions_full(_GtkActionGroup *, _GtkRadioActionEntry *, uint, int, _BCD_func__10655, void *, _BCD_func__11672);
extern (C) void gtk_action_group_add_toggle_actions_full(_GtkActionGroup *, _GtkToggleActionEntry *, uint, void *, _BCD_func__11672);
extern (C) void gtk_action_group_add_actions_full(_GtkActionGroup *, _GtkActionEntry *, uint, void *, _BCD_func__11672);
extern (C) void gtk_action_group_add_radio_actions(_GtkActionGroup *, _GtkRadioActionEntry *, uint, int, _BCD_func__10655, void *);
extern (C) void gtk_action_group_add_toggle_actions(_GtkActionGroup *, _GtkToggleActionEntry *, uint, void *);
extern (C) void gtk_action_group_add_actions(_GtkActionGroup *, _GtkActionEntry *, uint, void *);
extern (C) void gtk_action_group_remove_action(_GtkActionGroup *, _GtkAction *);
extern (C) void gtk_action_group_add_action_with_accel(_GtkActionGroup *, _GtkAction *, char *);
extern (C) void gtk_action_group_add_action(_GtkActionGroup *, _GtkAction *);
extern (C) _GList * gtk_action_group_list_actions(_GtkActionGroup *);
extern (C) _GtkAction * gtk_action_group_get_action(_GtkActionGroup *, char *);
extern (C) void gtk_action_group_set_visible(_GtkActionGroup *, int);
extern (C) int gtk_action_group_get_visible(_GtkActionGroup *);
extern (C) void gtk_action_group_set_sensitive(_GtkActionGroup *, int);
extern (C) int gtk_action_group_get_sensitive(_GtkActionGroup *);
extern (C) char * gtk_action_group_get_name(_GtkActionGroup *);
extern (C) _GtkActionGroup * gtk_action_group_new(char *);
extern (C) uint gtk_action_group_get_type();
extern (C) void gtk_item_factories_path_delete(char *, char *);
extern (C) void gtk_item_factory_create_menu_entries(uint, GtkMenuEntry *);
extern (C) _GtkItemFactory * gtk_item_factory_from_path(char *);
extern (C) void gtk_item_factory_create_items_ac(_GtkItemFactory *, uint, _GtkItemFactoryEntry *, void *, uint);
extern (C) void gtk_item_factory_set_translate_func(_GtkItemFactory *, _BCD_func__10657, void *, _BCD_func__11672);
extern (C) void * gtk_item_factory_popup_data_from_widget(_GtkWidget *);
extern (C) void * gtk_item_factory_popup_data(_GtkItemFactory *);
extern (C) void gtk_item_factory_popup_with_data(_GtkItemFactory *, void *, _BCD_func__11672, uint, uint, uint, uint);
extern (C) void gtk_item_factory_popup(_GtkItemFactory *, uint, uint, uint, uint);
extern (C) void gtk_item_factory_delete_entries(_GtkItemFactory *, uint, _GtkItemFactoryEntry *);
extern (C) void gtk_item_factory_delete_entry(_GtkItemFactory *, _GtkItemFactoryEntry *);
extern (C) void gtk_item_factory_delete_item(_GtkItemFactory *, char *);
extern (C) void gtk_item_factory_create_items(_GtkItemFactory *, uint, _GtkItemFactoryEntry *, void *);
extern (C) void gtk_item_factory_create_item(_GtkItemFactory *, _GtkItemFactoryEntry *, void *, uint);
extern (C) _GtkWidget * gtk_item_factory_get_item_by_action(_GtkItemFactory *, uint);
extern (C) _GtkWidget * gtk_item_factory_get_widget_by_action(_GtkItemFactory *, uint);
extern (C) _GtkWidget * gtk_item_factory_get_widget(_GtkItemFactory *, char *);
extern (C) _GtkWidget * gtk_item_factory_get_item(_GtkItemFactory *, char *);
extern (C) char * gtk_item_factory_path_from_widget(_GtkWidget *);
extern (C) _GtkItemFactory * gtk_item_factory_from_widget(_GtkWidget *);
extern (C) void gtk_item_factory_add_foreign(_GtkWidget *, char *, _GtkAccelGroup *, uint, int);
extern (C) void gtk_item_factory_construct(_GtkItemFactory *, uint, char *, _GtkAccelGroup *);
extern (C) _GtkItemFactory * gtk_item_factory_new(uint, char *, _GtkAccelGroup *);
extern (C) uint gtk_item_factory_get_type();
extern (C) void gtk_action_set_accel_group(_GtkAction *, _GtkAccelGroup *);
extern (C) void gtk_action_set_accel_path(_GtkAction *, char *);
extern (C) void _gtk_action_emit_activate(_GtkAction *);
extern (C) void gtk_action_unblock_activate_from(_GtkAction *, _GtkWidget *);
extern (C) void gtk_action_block_activate_from(_GtkAction *, _GtkWidget *);
extern (C) _GClosure * gtk_action_get_accel_closure(_GtkAction *);
extern (C) char * gtk_action_get_accel_path(_GtkAction *);
extern (C) void gtk_action_disconnect_accelerator(_GtkAction *);
extern (C) void gtk_action_connect_accelerator(_GtkAction *);
extern (C) _GSList * gtk_action_get_proxies(_GtkAction *);
extern (C) void gtk_action_disconnect_proxy(_GtkAction *, _GtkWidget *);
extern (C) void gtk_action_connect_proxy(_GtkAction *, _GtkWidget *);
extern (C) _GtkWidget * gtk_action_create_tool_item(_GtkAction *);
extern (C) _GtkWidget * gtk_action_create_menu_item(_GtkAction *);
extern (C) _GtkWidget * gtk_action_create_icon(_GtkAction *, int);
extern (C) void gtk_action_activate(_GtkAction *);
extern (C) void gtk_action_set_visible(_GtkAction *, int);
extern (C) int gtk_action_get_visible(_GtkAction *);
extern (C) int gtk_action_is_visible(_GtkAction *);
extern (C) void gtk_action_set_sensitive(_GtkAction *, int);
extern (C) int gtk_action_get_sensitive(_GtkAction *);
extern (C) int gtk_action_is_sensitive(_GtkAction *);
extern (C) char * gtk_action_get_name(_GtkAction *);
extern (C) _GtkAction * gtk_action_new(char *, char *, char *, char *);
extern (C) uint gtk_action_get_type();
extern (C) void gtk_accessible_connect_widget_destroyed(_GtkAccessible *);
extern (C) uint gtk_accessible_get_type();
extern (C) int _gtk_accel_path_is_valid(char *);
extern (C) void _gtk_accel_map_remove_group(char *, _GtkAccelGroup *);
extern (C) void _gtk_accel_map_add_group(char *, _GtkAccelGroup *);
extern (C) void _gtk_accel_map_init();
extern (C) void * gtk_accel_map_get();
extern (C) uint gtk_accel_map_get_type();
extern (C) void gtk_accel_map_foreach_unfiltered(void *, _BCD_func__11014);
extern (C) void gtk_accel_map_add_filter(char *);
extern (C) void gtk_accel_map_unlock_path(char *);
extern (C) void gtk_accel_map_lock_path(char *);
extern (C) void gtk_accel_map_save_fd(int);
extern (C) void gtk_accel_map_load_scanner(_GScanner *);
extern (C) void gtk_accel_map_load_fd(int);
extern (C) void gtk_accel_map_foreach(void *, _BCD_func__11014);
extern (C) void gtk_accel_map_save(char *);
extern (C) void gtk_accel_map_load(char *);
extern (C) int gtk_accel_map_change_entry(char *, uint, int, int);
extern (C) int gtk_accel_map_lookup_entry(char *, _GtkAccelKey *);
extern (C) void gtk_accel_map_add_entry(char *, uint, int);
extern (C) char * _gtk_accel_label_class_get_accelerator_label(_GtkAccelLabelClass *, uint, int);
extern (C) int gtk_accel_label_refetch(_GtkAccelLabel *);
extern (C) void gtk_accel_label_set_accel_closure(_GtkAccelLabel *, _GClosure *);
extern (C) void gtk_accel_label_set_accel_widget(_GtkAccelLabel *, _GtkWidget *);
extern (C) uint gtk_accel_label_get_accel_width(_GtkAccelLabel *);
extern (C) _GtkWidget * gtk_accel_label_get_accel_widget(_GtkAccelLabel *);
extern (C) _GtkWidget * gtk_accel_label_new(char *);
extern (C) uint gtk_accel_label_get_type();
extern (C) uint gtk_label_parse_uline(_GtkLabel *, char *);
extern (C) void gtk_label_get(_GtkLabel *, char * *);
extern (C) int gtk_label_get_single_line_mode(_GtkLabel *);
extern (C) void gtk_label_set_single_line_mode(_GtkLabel *, int);
extern (C) void gtk_label_get_layout_offsets(_GtkLabel *, int *, int *);
extern (C) void * gtk_label_get_layout(_GtkLabel *);
extern (C) int gtk_label_get_selection_bounds(_GtkLabel *, int *, int *);
extern (C) void gtk_label_select_region(_GtkLabel *, int, int);
extern (C) double gtk_label_get_angle(_GtkLabel *);
extern (C) void gtk_label_set_angle(_GtkLabel *, double);
extern (C) int gtk_label_get_selectable(_GtkLabel *);
extern (C) void gtk_label_set_selectable(_GtkLabel *, int);
extern (C) int gtk_label_get_line_wrap(_GtkLabel *);
extern (C) void gtk_label_set_line_wrap(_GtkLabel *, int);
extern (C) void gtk_label_set_pattern(_GtkLabel *, char *);
extern (C) int gtk_label_get_max_width_chars(_GtkLabel *);
extern (C) void gtk_label_set_max_width_chars(_GtkLabel *, int);
extern (C) int gtk_label_get_width_chars(_GtkLabel *);
extern (C) void gtk_label_set_width_chars(_GtkLabel *, int);
extern (C) int gtk_label_get_ellipsize(_GtkLabel *);
extern (C) void gtk_label_set_ellipsize(_GtkLabel *, int);
extern (C) int gtk_label_get_justify(_GtkLabel *);
extern (C) void gtk_label_set_justify(_GtkLabel *, int);
extern (C) void gtk_label_set_text_with_mnemonic(_GtkLabel *, char *);
extern (C) _GtkWidget * gtk_label_get_mnemonic_widget(_GtkLabel *);
extern (C) void gtk_label_set_mnemonic_widget(_GtkLabel *, _GtkWidget *);
extern (C) uint gtk_label_get_mnemonic_keyval(_GtkLabel *);
extern (C) void gtk_label_set_markup_with_mnemonic(_GtkLabel *, char *);
extern (C) int gtk_label_get_use_underline(_GtkLabel *);
extern (C) void gtk_label_set_use_underline(_GtkLabel *, int);
extern (C) int gtk_label_get_use_markup(_GtkLabel *);
extern (C) void gtk_label_set_use_markup(_GtkLabel *, int);
extern (C) void gtk_label_set_markup(_GtkLabel *, char *);
extern (C) char * gtk_label_get_label(_GtkLabel *);
extern (C) void gtk_label_set_label(_GtkLabel *, char *);
extern (C) void * gtk_label_get_attributes(_GtkLabel *);
extern (C) void gtk_label_set_attributes(_GtkLabel *, void *);
extern (C) char * gtk_label_get_text(_GtkLabel *);
extern (C) void gtk_label_set_text(_GtkLabel *, char *);
extern (C) _GtkWidget * gtk_label_new_with_mnemonic(char *);
extern (C) _GtkWidget * gtk_label_new(char *);
extern (C) uint gtk_label_get_type();
extern (C) _GList * gtk_menu_get_for_attach_widget(_GtkWidget *);
extern (C) void gtk_menu_set_monitor(_GtkMenu *, int);
extern (C) void gtk_menu_attach(_GtkMenu *, _GtkWidget *, uint, uint, uint, uint);
extern (C) void gtk_menu_set_screen(_GtkMenu *, _GdkScreen *);
extern (C) void gtk_menu_reorder_child(_GtkMenu *, _GtkWidget *, int);
extern (C) char * gtk_menu_get_title(_GtkMenu *);
extern (C) void gtk_menu_set_title(_GtkMenu *, char *);
extern (C) int gtk_menu_get_tearoff_state(_GtkMenu *);
extern (C) void gtk_menu_set_tearoff_state(_GtkMenu *, int);
extern (C) _GtkWidget * gtk_menu_get_attach_widget(_GtkMenu *);
extern (C) void gtk_menu_detach(_GtkMenu *);
extern (C) void gtk_menu_attach_to_widget(_GtkMenu *, _GtkWidget *, _BCD_func__11072);
extern (C) void gtk_menu_set_accel_path(_GtkMenu *, char *);
extern (C) _GtkAccelGroup * gtk_menu_get_accel_group(_GtkMenu *);
extern (C) void gtk_menu_set_accel_group(_GtkMenu *, _GtkAccelGroup *);
extern (C) void gtk_menu_set_active(_GtkMenu *, uint);
extern (C) _GtkWidget * gtk_menu_get_active(_GtkMenu *);
extern (C) void gtk_menu_popdown(_GtkMenu *);
extern (C) void gtk_menu_reposition(_GtkMenu *);
extern (C) void gtk_menu_popup(_GtkMenu *, _GtkWidget *, _GtkWidget *, _BCD_func__11073, void *, uint, uint);
extern (C) _GtkWidget * gtk_menu_new();
extern (C) uint gtk_menu_get_type();
extern (C) void gtk_menu_shell_set_take_focus(_GtkMenuShell *, int);
extern (C) int gtk_menu_shell_get_take_focus(_GtkMenuShell *);
extern (C) void _gtk_menu_shell_remove_mnemonic(_GtkMenuShell *, uint, _GtkWidget *);
extern (C) void _gtk_menu_shell_add_mnemonic(_GtkMenuShell *, uint, _GtkWidget *);
extern (C) void gtk_menu_shell_cancel(_GtkMenuShell *);
extern (C) int _gtk_menu_shell_get_popup_delay(_GtkMenuShell *);
extern (C) void _gtk_menu_shell_activate(_GtkMenuShell *);
extern (C) void _gtk_menu_shell_select_last(_GtkMenuShell *, int);
extern (C) void gtk_menu_shell_select_first(_GtkMenuShell *, int);
extern (C) void gtk_menu_shell_activate_item(_GtkMenuShell *, _GtkWidget *, int);
extern (C) void gtk_menu_shell_deselect(_GtkMenuShell *);
extern (C) void gtk_menu_shell_select_item(_GtkMenuShell *, _GtkWidget *);
extern (C) void gtk_menu_shell_deactivate(_GtkMenuShell *);
extern (C) void gtk_menu_shell_insert(_GtkMenuShell *, _GtkWidget *, int);
extern (C) void gtk_menu_shell_prepend(_GtkMenuShell *, _GtkWidget *);
extern (C) void gtk_menu_shell_append(_GtkMenuShell *, _GtkWidget *);
extern (C) uint gtk_menu_shell_get_type();
extern (C) void gtk_misc_get_padding(_GtkMisc *, int *, int *);
extern (C) void gtk_misc_set_padding(_GtkMisc *, int, int);
extern (C) void gtk_misc_get_alignment(_GtkMisc *, float *, float *);
extern (C) void gtk_misc_set_alignment(_GtkMisc *, float, float);
extern (C) uint gtk_misc_get_type();
extern (C) _BCD_func__11152 gtk_about_dialog_set_url_hook(_BCD_func__11152, void *, _BCD_func__11672);
extern (C) _BCD_func__11152 gtk_about_dialog_set_email_hook(_BCD_func__11152, void *, _BCD_func__11672);
extern (C) void gtk_about_dialog_set_logo_icon_name(_GtkAboutDialog *, char *);
extern (C) char * gtk_about_dialog_get_logo_icon_name(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_logo(_GtkAboutDialog *, void *);
extern (C) void * gtk_about_dialog_get_logo(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_translator_credits(_GtkAboutDialog *, char *);
extern (C) char * gtk_about_dialog_get_translator_credits(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_artists(_GtkAboutDialog *, char * *);
extern (C) char * * gtk_about_dialog_get_artists(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_documenters(_GtkAboutDialog *, char * *);
extern (C) char * * gtk_about_dialog_get_documenters(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_authors(_GtkAboutDialog *, char * *);
extern (C) char * * gtk_about_dialog_get_authors(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_website_label(_GtkAboutDialog *, char *);
extern (C) char * gtk_about_dialog_get_website_label(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_website(_GtkAboutDialog *, char *);
extern (C) char * gtk_about_dialog_get_website(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_wrap_license(_GtkAboutDialog *, int);
extern (C) int gtk_about_dialog_get_wrap_license(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_license(_GtkAboutDialog *, char *);
extern (C) char * gtk_about_dialog_get_license(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_comments(_GtkAboutDialog *, char *);
extern (C) char * gtk_about_dialog_get_comments(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_copyright(_GtkAboutDialog *, char *);
extern (C) char * gtk_about_dialog_get_copyright(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_version(_GtkAboutDialog *, char *);
extern (C) char * gtk_about_dialog_get_version(_GtkAboutDialog *);
extern (C) void gtk_about_dialog_set_name(_GtkAboutDialog *, char *);
extern (C) char * gtk_about_dialog_get_name(_GtkAboutDialog *);
extern (C) void gtk_show_about_dialog(_GtkWindow *, char *, ...);
extern (C) _GtkWidget * gtk_about_dialog_new();
extern (C) uint gtk_about_dialog_get_type();
extern (C) int _gtk_dialog_get_response_for_widget(_GtkDialog *, _GtkWidget *);
extern (C) void _gtk_dialog_set_ignore_separator(_GtkDialog *, int);
extern (C) int gtk_dialog_run(_GtkDialog *);
extern (C) void gtk_dialog_response(_GtkDialog *, int);
extern (C) void gtk_dialog_set_alternative_button_order_from_array(_GtkDialog *, int, int *);
extern (C) void gtk_dialog_set_alternative_button_order(_GtkDialog *, int, ...);
extern (C) int gtk_alternative_dialog_button_order(_GdkScreen *);
extern (C) int gtk_dialog_get_has_separator(_GtkDialog *);
extern (C) void gtk_dialog_set_has_separator(_GtkDialog *, int);
extern (C) int gtk_dialog_get_response_for_widget(_GtkDialog *, _GtkWidget *);
extern (C) void gtk_dialog_set_default_response(_GtkDialog *, int);
extern (C) void gtk_dialog_set_response_sensitive(_GtkDialog *, int, int);
extern (C) void gtk_dialog_add_buttons(_GtkDialog *, char *, ...);
extern (C) _GtkWidget * gtk_dialog_add_button(_GtkDialog *, char *, int);
extern (C) void gtk_dialog_add_action_widget(_GtkDialog *, _GtkWidget *, int);
extern (C) _GtkWidget * gtk_dialog_new_with_buttons(char *, _GtkWindow *, int, char *, ...);
extern (C) _GtkWidget * gtk_dialog_new();
extern (C) uint gtk_dialog_get_type();
extern (C) int _gtk_window_query_nonaccels(_GtkWindow *, uint, int);
extern (C) void _gtk_window_keys_foreach(_GtkWindow *, _BCD_func__11182, void *);
extern (C) void _gtk_window_set_is_active(_GtkWindow *, int);
extern (C) void _gtk_window_unset_focus_and_default(_GtkWindow *, _GtkWidget *);
extern (C) void _gtk_window_set_has_toplevel_focus(_GtkWindow *, int);
extern (C) _GtkWidget * _gtk_window_group_get_current_grab(_GtkWindowGroup *);
extern (C) _GtkWindowGroup * _gtk_window_get_group(_GtkWindow *);
extern (C) void _gtk_window_constrain_size(_GtkWindow *, int, int, int *, int *);
extern (C) void _gtk_window_reposition(_GtkWindow *, int, int);
extern (C) void gtk_window_add_embedded_xid(_GtkWindow *, uint);
extern (C) void gtk_window_remove_embedded_xid(_GtkWindow *, uint);
extern (C) void _gtk_window_internal_set_focus(_GtkWindow *, _GtkWidget *);
extern (C) void gtk_window_group_remove_window(_GtkWindowGroup *, _GtkWindow *);
extern (C) void gtk_window_group_add_window(_GtkWindowGroup *, _GtkWindow *);
extern (C) _GtkWindowGroup * gtk_window_group_new();
extern (C) uint gtk_window_group_get_type();
extern (C) void gtk_window_reshow_with_initial_size(_GtkWindow *);
extern (C) int gtk_window_parse_geometry(_GtkWindow *, char *);
extern (C) void gtk_window_get_position(_GtkWindow *, int *, int *);
extern (C) void gtk_window_move(_GtkWindow *, int, int);
extern (C) void gtk_window_get_size(_GtkWindow *, int *, int *);
extern (C) void gtk_window_resize(_GtkWindow *, int, int);
extern (C) void gtk_window_get_default_size(_GtkWindow *, int *, int *);
extern (C) void gtk_window_set_default_size(_GtkWindow *, int, int);
extern (C) void gtk_window_set_policy(_GtkWindow *, int, int, int);
extern (C) void gtk_window_begin_move_drag(_GtkWindow *, int, int, int, uint);
extern (C) void gtk_window_begin_resize_drag(_GtkWindow *, int, int, int, int, uint);
extern (C) void gtk_window_set_keep_below(_GtkWindow *, int);
extern (C) void gtk_window_set_keep_above(_GtkWindow *, int);
extern (C) void gtk_window_unfullscreen(_GtkWindow *);
extern (C) void gtk_window_fullscreen(_GtkWindow *);
extern (C) void gtk_window_unmaximize(_GtkWindow *);
extern (C) void gtk_window_maximize(_GtkWindow *);
extern (C) void gtk_window_unstick(_GtkWindow *);
extern (C) void gtk_window_stick(_GtkWindow *);
extern (C) void gtk_window_deiconify(_GtkWindow *);
extern (C) void gtk_window_iconify(_GtkWindow *);
extern (C) void gtk_window_present_with_time(_GtkWindow *, uint);
extern (C) void gtk_window_present(_GtkWindow *);
extern (C) int gtk_window_propagate_key_event(_GtkWindow *, _GdkEventKey *);
extern (C) int gtk_window_activate_key(_GtkWindow *, _GdkEventKey *);
extern (C) int gtk_window_get_mnemonic_modifier(_GtkWindow *);
extern (C) void gtk_window_set_mnemonic_modifier(_GtkWindow *, int);
extern (C) int gtk_window_mnemonic_activate(_GtkWindow *, uint, int);
extern (C) void gtk_window_remove_mnemonic(_GtkWindow *, uint, _GtkWidget *);
extern (C) void gtk_window_add_mnemonic(_GtkWindow *, uint, _GtkWidget *);
extern (C) _GList * gtk_window_list_toplevels();
extern (C) int gtk_window_get_modal(_GtkWindow *);
extern (C) void gtk_window_set_modal(_GtkWindow *, int);
extern (C) void gtk_window_set_auto_startup_notification(int);
extern (C) int gtk_window_set_default_icon_from_file(char *, _GError * *);
extern (C) void gtk_window_set_default_icon_name(char *);
extern (C) void gtk_window_set_default_icon(void *);
extern (C) _GList * gtk_window_get_default_icon_list();
extern (C) void gtk_window_set_default_icon_list(_GList *);
extern (C) char * gtk_window_get_icon_name(_GtkWindow *);
extern (C) void * gtk_window_get_icon(_GtkWindow *);
extern (C) int gtk_window_set_icon_from_file(_GtkWindow *, char *, _GError * *);
extern (C) void gtk_window_set_icon_name(_GtkWindow *, char *);
extern (C) void gtk_window_set_icon(_GtkWindow *, void *);
extern (C) _GList * gtk_window_get_icon_list(_GtkWindow *);
extern (C) void gtk_window_set_icon_list(_GtkWindow *, _GList *);
extern (C) int gtk_window_get_decorated(_GtkWindow *);
extern (C) void gtk_window_set_decorated(_GtkWindow *, int);
extern (C) void gtk_window_get_frame_dimensions(_GtkWindow *, int *, int *, int *, int *);
extern (C) void gtk_window_set_frame_dimensions(_GtkWindow *, int, int, int, int);
extern (C) int gtk_window_get_has_frame(_GtkWindow *);
extern (C) void gtk_window_set_has_frame(_GtkWindow *, int);
extern (C) int gtk_window_has_toplevel_focus(_GtkWindow *);
extern (C) int gtk_window_is_active(_GtkWindow *);
extern (C) _GdkScreen * gtk_window_get_screen(_GtkWindow *);
extern (C) void gtk_window_set_screen(_GtkWindow *, _GdkScreen *);
extern (C) void gtk_window_set_geometry_hints(_GtkWindow *, _GtkWidget *, _GdkGeometry *, int);
extern (C) int gtk_window_get_gravity(_GtkWindow *);
extern (C) void gtk_window_set_gravity(_GtkWindow *, int);
extern (C) int gtk_window_get_resizable(_GtkWindow *);
extern (C) void gtk_window_set_resizable(_GtkWindow *, int);
extern (C) int gtk_window_get_destroy_with_parent(_GtkWindow *);
extern (C) void gtk_window_set_destroy_with_parent(_GtkWindow *, int);
extern (C) int gtk_window_get_focus_on_map(_GtkWindow *);
extern (C) void gtk_window_set_focus_on_map(_GtkWindow *, int);
extern (C) int gtk_window_get_accept_focus(_GtkWindow *);
extern (C) void gtk_window_set_accept_focus(_GtkWindow *, int);
extern (C) int gtk_window_get_urgency_hint(_GtkWindow *);
extern (C) void gtk_window_set_urgency_hint(_GtkWindow *, int);
extern (C) int gtk_window_get_skip_pager_hint(_GtkWindow *);
extern (C) void gtk_window_set_skip_pager_hint(_GtkWindow *, int);
extern (C) int gtk_window_get_skip_taskbar_hint(_GtkWindow *);
extern (C) void gtk_window_set_skip_taskbar_hint(_GtkWindow *, int);
extern (C) int gtk_window_get_type_hint(_GtkWindow *);
extern (C) void gtk_window_set_type_hint(_GtkWindow *, int);
extern (C) _GtkWindow * gtk_window_get_transient_for(_GtkWindow *);
extern (C) void gtk_window_set_transient_for(_GtkWindow *, _GtkWindow *);
extern (C) int gtk_window_activate_default(_GtkWindow *);
extern (C) void gtk_window_set_default(_GtkWindow *, _GtkWidget *);
extern (C) _GtkWidget * gtk_window_get_focus(_GtkWindow *);
extern (C) void gtk_window_set_focus(_GtkWindow *, _GtkWidget *);
extern (C) int gtk_window_activate_focus(_GtkWindow *);
extern (C) void gtk_window_set_position(_GtkWindow *, int);
extern (C) void gtk_window_remove_accel_group(_GtkWindow *, _GtkAccelGroup *);
extern (C) void gtk_window_add_accel_group(_GtkWindow *, _GtkAccelGroup *);
extern (C) char * gtk_window_get_role(_GtkWindow *);
extern (C) void gtk_window_set_role(_GtkWindow *, char *);
extern (C) void gtk_window_set_wmclass(_GtkWindow *, char *, char *);
extern (C) char * gtk_window_get_title(_GtkWindow *);
extern (C) void gtk_window_set_title(_GtkWindow *, char *);
extern (C) _GtkWidget * gtk_window_new(int);
extern (C) uint gtk_window_get_type();
extern (C) _GtkWidget * gtk_bin_get_child(_GtkBin *);
extern (C) uint gtk_bin_get_type();
extern (C) _GList * _gtk_container_focus_sort(_GtkContainer *, _GList *, int, _GtkWidget *);
extern (C) void _gtk_container_dequeue_resize_handler(_GtkContainer *);
extern (C) char * _gtk_container_child_composite_name(_GtkContainer *, _GtkWidget *);
extern (C) void _gtk_container_clear_resize_widgets(_GtkContainer *);
extern (C) void _gtk_container_queue_resize(_GtkContainer *);
extern (C) void gtk_container_forall(_GtkContainer *, _BCD_func__10623, void *);
extern (C) void gtk_container_child_get_property(_GtkContainer *, _GtkWidget *, char *, _GValue *);
extern (C) void gtk_container_child_set_property(_GtkContainer *, _GtkWidget *, char *, _GValue *);
extern (C) void gtk_container_child_get_valist(_GtkContainer *, _GtkWidget *, char *, char *);
extern (C) void gtk_container_child_set_valist(_GtkContainer *, _GtkWidget *, char *, char *);
extern (C) void gtk_container_child_get(_GtkContainer *, _GtkWidget *, char *, ...);
extern (C) void gtk_container_child_set(_GtkContainer *, _GtkWidget *, char *, ...);
extern (C) void gtk_container_add_with_properties(_GtkContainer *, _GtkWidget *, char *, ...);
extern (C) _GParamSpec * * gtk_container_class_list_child_properties(_GObjectClass *, uint *);
extern (C) _GParamSpec * gtk_container_class_find_child_property(_GObjectClass *, char *);
extern (C) void gtk_container_class_install_child_property(_GtkContainerClass *, uint, _GParamSpec *);
extern (C) uint gtk_container_child_type(_GtkContainer *);
extern (C) void gtk_container_resize_children(_GtkContainer *);
extern (C) _GtkAdjustment * gtk_container_get_focus_hadjustment(_GtkContainer *);
extern (C) void gtk_container_set_focus_hadjustment(_GtkContainer *, _GtkAdjustment *);
extern (C) _GtkAdjustment * gtk_container_get_focus_vadjustment(_GtkContainer *);
extern (C) void gtk_container_set_focus_vadjustment(_GtkContainer *, _GtkAdjustment *);
extern (C) void gtk_container_set_focus_child(_GtkContainer *, _GtkWidget *);
extern (C) void gtk_container_set_reallocate_redraws(_GtkContainer *, int);
extern (C) void gtk_container_unset_focus_chain(_GtkContainer *);
extern (C) int gtk_container_get_focus_chain(_GtkContainer *, _GList * *);
extern (C) void gtk_container_set_focus_chain(_GtkContainer *, _GList *);
extern (C) void gtk_container_propagate_expose(_GtkContainer *, _GtkWidget *, _GdkEventExpose *);
extern (C) _GList * gtk_container_get_children(_GtkContainer *);
extern (C) void gtk_container_foreach_full(_GtkContainer *, _BCD_func__10623, _BCD_func__11671, void *, _BCD_func__11672);
extern (C) void gtk_container_foreach(_GtkContainer *, _BCD_func__10623, void *);
extern (C) void gtk_container_check_resize(_GtkContainer *);
extern (C) int gtk_container_get_resize_mode(_GtkContainer *);
extern (C) void gtk_container_set_resize_mode(_GtkContainer *, int);
extern (C) void gtk_container_remove(_GtkContainer *, _GtkWidget *);
extern (C) void gtk_container_add(_GtkContainer *, _GtkWidget *);
extern (C) uint gtk_container_get_border_width(_GtkContainer *);
extern (C) void gtk_container_set_border_width(_GtkContainer *, uint);
extern (C) uint gtk_container_get_type();
extern (C) _GdkColormap * _gtk_widget_peek_colormap();
extern (C) void _gtk_widget_propagate_screen_changed(_GtkWidget *, _GdkScreen *);
extern (C) void _gtk_widget_propagate_hierarchy_changed(_GtkWidget *, _GtkWidget *);
extern (C) _GtkWidgetAuxInfo * _gtk_widget_get_aux_info(_GtkWidget *, int);
extern (C) void _gtk_widget_grab_notify(_GtkWidget *, int);
extern (C) void gtk_requisition_free(_GtkRequisition *);
extern (C) _GtkRequisition * gtk_requisition_copy(_GtkRequisition *);
extern (C) uint gtk_requisition_get_type();
extern (C) void gtk_widget_remove_mnemonic_label(_GtkWidget *, _GtkWidget *);
extern (C) void gtk_widget_add_mnemonic_label(_GtkWidget *, _GtkWidget *);
extern (C) _GList * gtk_widget_list_mnemonic_labels(_GtkWidget *);
extern (C) void gtk_widget_class_path(_GtkWidget *, uint *, char * *, char * *);
extern (C) void gtk_widget_path(_GtkWidget *, uint *, char * *, char * *);
extern (C) void gtk_widget_reset_shapes(_GtkWidget *);
extern (C) void gtk_widget_shape_combine_mask(_GtkWidget *, _GdkDrawable *, int, int);
extern (C) int gtk_widget_get_default_direction();
extern (C) void gtk_widget_set_default_direction(int);
extern (C) int gtk_widget_get_direction(_GtkWidget *);
extern (C) void gtk_widget_set_direction(_GtkWidget *, int);
extern (C) _GdkVisual * gtk_widget_get_default_visual();
extern (C) _GdkColormap * gtk_widget_get_default_colormap();
extern (C) _GtkStyle * gtk_widget_get_default_style();
extern (C) void gtk_widget_set_default_colormap(_GdkColormap *);
extern (C) void gtk_widget_style_get(_GtkWidget *, char *, ...);
extern (C) void gtk_widget_style_get_valist(_GtkWidget *, char *, char *);
extern (C) void gtk_widget_style_get_property(_GtkWidget *, char *, _GValue *);
extern (C) _GParamSpec * * gtk_widget_class_list_style_properties(_GtkWidgetClass *, uint *);
extern (C) _GParamSpec * gtk_widget_class_find_style_property(_GtkWidgetClass *, char *);
extern (C) void gtk_widget_class_install_style_property_parser(_GtkWidgetClass *, _GParamSpec *, _BCD_func__11507);
extern (C) void gtk_widget_class_install_style_property(_GtkWidgetClass *, _GParamSpec *);
extern (C) void gtk_widget_pop_colormap();
extern (C) void gtk_widget_pop_composite_child();
extern (C) void gtk_widget_push_composite_child();
extern (C) void gtk_widget_push_colormap(_GdkColormap *);
extern (C) void gtk_widget_reset_rc_styles(_GtkWidget *);
extern (C) char * gtk_widget_get_composite_name(_GtkWidget *);
extern (C) void gtk_widget_set_composite_name(_GtkWidget *, char *);
extern (C) void * gtk_widget_render_icon(_GtkWidget *, char *, int, char *);
extern (C) void * gtk_widget_create_pango_layout(_GtkWidget *, char *);
extern (C) void * gtk_widget_get_pango_context(_GtkWidget *);
extern (C) void * gtk_widget_create_pango_context(_GtkWidget *);
extern (C) void gtk_widget_modify_font(_GtkWidget *, void *);
extern (C) void gtk_widget_modify_base(_GtkWidget *, int, _GdkColor *);
extern (C) void gtk_widget_modify_text(_GtkWidget *, int, _GdkColor *);
extern (C) void gtk_widget_modify_bg(_GtkWidget *, int, _GdkColor *);
extern (C) void gtk_widget_modify_fg(_GtkWidget *, int, _GdkColor *);
extern (C) _GtkRcStyle * gtk_widget_get_modifier_style(_GtkWidget *);
extern (C) void gtk_widget_modify_style(_GtkWidget *, _GtkRcStyle *);
extern (C) _GtkStyle * gtk_widget_get_style(_GtkWidget *);
extern (C) void gtk_widget_ensure_style(_GtkWidget *);
extern (C) void gtk_widget_set_style(_GtkWidget *, _GtkStyle *);
extern (C) int gtk_widget_hide_on_delete(_GtkWidget *);
extern (C) int gtk_widget_translate_coordinates(_GtkWidget *, _GtkWidget *, int, int, int *, int *);
extern (C) int gtk_widget_is_ancestor(_GtkWidget *, _GtkWidget *);
extern (C) void gtk_widget_get_pointer(_GtkWidget *, int *, int *);
extern (C) int gtk_widget_get_events(_GtkWidget *);
extern (C) void gtk_widget_set_colormap(_GtkWidget *, _GdkColormap *);
extern (C) _AtkObject * gtk_widget_get_accessible(_GtkWidget *);
extern (C) void * gtk_widget_get_clipboard(_GtkWidget *, void *);
extern (C) _GtkSettings * gtk_widget_get_settings(_GtkWidget *);
extern (C) _GdkDrawable * gtk_widget_get_root_window(_GtkWidget *);
extern (C) _GdkDisplay * gtk_widget_get_display(_GtkWidget *);
extern (C) int gtk_widget_has_screen(_GtkWidget *);
extern (C) _GdkScreen * gtk_widget_get_screen(_GtkWidget *);
extern (C) _GdkVisual * gtk_widget_get_visual(_GtkWidget *);
extern (C) _GdkColormap * gtk_widget_get_colormap(_GtkWidget *);
extern (C) _GtkWidget * gtk_widget_get_ancestor(_GtkWidget *, uint);
extern (C) _GtkWidget * gtk_widget_get_toplevel(_GtkWidget *);
extern (C) int gtk_widget_get_extension_events(_GtkWidget *);
extern (C) void gtk_widget_set_extension_events(_GtkWidget *, int);
extern (C) void gtk_widget_add_events(_GtkWidget *, int);
extern (C) void gtk_widget_set_events(_GtkWidget *, int);
extern (C) void gtk_widget_set_usize(_GtkWidget *, int, int);
extern (C) void gtk_widget_set_uposition(_GtkWidget *, int, int);
extern (C) void gtk_widget_get_size_request(_GtkWidget *, int *, int *);
extern (C) void gtk_widget_set_size_request(_GtkWidget *, int, int);
extern (C) int gtk_widget_child_focus(_GtkWidget *, int);
extern (C) _GdkDrawable * gtk_widget_get_parent_window(_GtkWidget *);
extern (C) _GtkWidget * gtk_widget_get_parent(_GtkWidget *);
extern (C) int gtk_widget_get_child_visible(_GtkWidget *);
extern (C) void gtk_widget_set_child_visible(_GtkWidget *, int);
extern (C) void gtk_widget_set_parent_window(_GtkWidget *, _GdkDrawable *);
extern (C) void gtk_widget_set_parent(_GtkWidget *, _GtkWidget *);
extern (C) void gtk_widget_set_redraw_on_allocate(_GtkWidget *, int);
extern (C) void gtk_widget_set_double_buffered(_GtkWidget *, int);
extern (C) void gtk_widget_set_app_paintable(_GtkWidget *, int);
extern (C) void gtk_widget_set_sensitive(_GtkWidget *, int);
extern (C) void gtk_widget_set_state(_GtkWidget *, int);
extern (C) char * gtk_widget_get_name(_GtkWidget *);
extern (C) void gtk_widget_set_name(_GtkWidget *, char *);
extern (C) void gtk_widget_grab_default(_GtkWidget *);
extern (C) void gtk_widget_grab_focus(_GtkWidget *);
extern (C) int gtk_widget_is_focus(_GtkWidget *);
extern (C) void gtk_widget_thaw_child_notify(_GtkWidget *);
extern (C) void gtk_widget_child_notify(_GtkWidget *, char *);
extern (C) void gtk_widget_freeze_child_notify(_GtkWidget *);
extern (C) void * gtk_widget_region_intersect(_GtkWidget *, void *);
extern (C) int gtk_widget_intersect(_GtkWidget *, _GdkRectangle *, _GdkRectangle *);
extern (C) void gtk_widget_reparent(_GtkWidget *, _GtkWidget *);
extern (C) int gtk_widget_set_scroll_adjustments(_GtkWidget *, _GtkAdjustment *, _GtkAdjustment *);
extern (C) int gtk_widget_activate(_GtkWidget *);
extern (C) int gtk_widget_send_expose(_GtkWidget *, _GdkEvent *);
extern (C) int gtk_widget_event(_GtkWidget *, _GdkEvent *);
extern (C) int gtk_widget_mnemonic_activate(_GtkWidget *, int);
extern (C) int gtk_widget_can_activate_accel(_GtkWidget *, uint);
extern (C) _GList * gtk_widget_list_accel_closures(_GtkWidget *);
extern (C) char * _gtk_widget_get_accel_path(_GtkWidget *, int *);
extern (C) void gtk_widget_set_accel_path(_GtkWidget *, char *, _GtkAccelGroup *);
extern (C) int gtk_widget_remove_accelerator(_GtkWidget *, _GtkAccelGroup *, uint, int);
extern (C) void gtk_widget_add_accelerator(_GtkWidget *, char *, _GtkAccelGroup *, uint, int, int);
extern (C) void gtk_widget_get_child_requisition(_GtkWidget *, _GtkRequisition *);
extern (C) void gtk_widget_size_allocate(_GtkWidget *, _GdkRectangle *);
extern (C) void gtk_widget_size_request(_GtkWidget *, _GtkRequisition *);
extern (C) void gtk_widget_draw(_GtkWidget *, _GdkRectangle *);
extern (C) void gtk_widget_queue_resize_no_redraw(_GtkWidget *);
extern (C) void gtk_widget_queue_resize(_GtkWidget *);
extern (C) void gtk_widget_queue_clear_area(_GtkWidget *, int, int, int, int);
extern (C) void gtk_widget_queue_clear(_GtkWidget *);
extern (C) void gtk_widget_queue_draw_area(_GtkWidget *, int, int, int, int);
extern (C) void gtk_widget_queue_draw(_GtkWidget *);
extern (C) void gtk_widget_unrealize(_GtkWidget *);
extern (C) void gtk_widget_realize(_GtkWidget *);
extern (C) void gtk_widget_unmap(_GtkWidget *);
extern (C) void gtk_widget_map(_GtkWidget *);
extern (C) int gtk_widget_get_no_show_all(_GtkWidget *);
extern (C) void gtk_widget_set_no_show_all(_GtkWidget *, int);
extern (C) void gtk_widget_hide_all(_GtkWidget *);
extern (C) void gtk_widget_show_all(_GtkWidget *);
extern (C) void gtk_widget_hide(_GtkWidget *);
extern (C) void gtk_widget_show_now(_GtkWidget *);
extern (C) void gtk_widget_show(_GtkWidget *);
extern (C) void gtk_widget_unparent(_GtkWidget *);
extern (C) void gtk_widget_set(_GtkWidget *, char *, ...);
extern (C) void gtk_widget_destroyed(_GtkWidget *, _GtkWidget * *);
extern (C) void gtk_widget_destroy(_GtkWidget *);
extern (C) void gtk_widget_unref(_GtkWidget *);
extern (C) _GtkWidget * gtk_widget_ref(_GtkWidget *);
extern (C) _GtkWidget * gtk_widget_new(uint, char *, ...);
extern (C) uint gtk_widget_get_type();
extern (C) int _gtk_settings_parse_convert(_BCD_func__11507, _GValue *, _GParamSpec *, _GValue *);
extern (C) _BCD_func__11507 _gtk_rc_property_parser_from_type(uint);
extern (C) void _gtk_settings_handle_event(_GdkEventSetting *);
extern (C) void _gtk_settings_reset_rc_values(_GtkSettings *);
extern (C) void _gtk_settings_set_property_value_from_rc(_GtkSettings *, char *, _GtkSettingsValue *);
extern (C) void gtk_settings_set_double_property(_GtkSettings *, char *, double, char *);
extern (C) void gtk_settings_set_long_property(_GtkSettings *, char *, int, char *);
extern (C) void gtk_settings_set_string_property(_GtkSettings *, char *, char *, char *);
extern (C) void gtk_settings_set_property_value(_GtkSettings *, char *, _GtkSettingsValue *);
extern (C) int gtk_rc_property_parse_border(_GParamSpec *, _GString *, _GValue *);
extern (C) int gtk_rc_property_parse_requisition(_GParamSpec *, _GString *, _GValue *);
extern (C) int gtk_rc_property_parse_flags(_GParamSpec *, _GString *, _GValue *);
extern (C) int gtk_rc_property_parse_enum(_GParamSpec *, _GString *, _GValue *);
extern (C) int gtk_rc_property_parse_color(_GParamSpec *, _GString *, _GValue *);
extern (C) void gtk_settings_install_property_parser(_GParamSpec *, _BCD_func__11507);
extern (C) void gtk_settings_install_property(_GParamSpec *);
extern (C) _GtkSettings * gtk_settings_get_for_screen(_GdkScreen *);
extern (C) _GtkSettings * gtk_settings_get_default();
extern (C) uint gtk_settings_get_type();
extern (C) char * _gtk_rc_context_get_default_font_name(_GtkSettings *);
extern (C) _GtkRcProperty * _gtk_rc_style_lookup_rc_property(_GtkRcStyle *, uint, uint);
extern (C) uint gtk_rc_parse_priority(_GScanner *, int *);
extern (C) uint gtk_rc_parse_state(_GScanner *, int *);
extern (C) uint gtk_rc_parse_color(_GScanner *, _GdkColor *);
extern (C) _GScanner * gtk_rc_scanner_new();
extern (C) char * gtk_rc_get_im_module_file();
extern (C) char * gtk_rc_get_im_module_path();
extern (C) char * gtk_rc_get_module_dir();
extern (C) char * gtk_rc_get_theme_dir();
extern (C) char * gtk_rc_find_module_in_path(char *);
extern (C) void gtk_rc_style_unref(_GtkRcStyle *);
extern (C) void gtk_rc_style_ref(_GtkRcStyle *);
extern (C) _GtkRcStyle * gtk_rc_style_copy(_GtkRcStyle *);
extern (C) _GtkRcStyle * gtk_rc_style_new();
extern (C) uint gtk_rc_style_get_type();
extern (C) void gtk_rc_add_class_style(_GtkRcStyle *, char *);
extern (C) void gtk_rc_add_widget_class_style(_GtkRcStyle *, char *);
extern (C) void gtk_rc_add_widget_name_style(_GtkRcStyle *, char *);
extern (C) int gtk_rc_reparse_all();
extern (C) void gtk_rc_parse_string(char *);
extern (C) void gtk_rc_parse(char *);
extern (C) char * gtk_rc_find_pixmap_in_path(_GtkSettings *, _GScanner *, char *);
extern (C) void gtk_rc_reset_styles(_GtkSettings *);
extern (C) int gtk_rc_reparse_all_for_settings(_GtkSettings *, int);
extern (C) _GtkStyle * gtk_rc_get_style_by_paths(_GtkSettings *, char *, char *, uint);
extern (C) _GtkStyle * gtk_rc_get_style(_GtkWidget *);
extern (C) char * * gtk_rc_get_default_files();
extern (C) void gtk_rc_set_default_files(char * *);
extern (C) void gtk_rc_add_default_file(char *);
extern (C) void _gtk_rc_init();
extern (C) void gtk_draw_insertion_cursor(_GtkWidget *, _GdkDrawable *, _GdkRectangle *, _GdkRectangle *, int, int, int);
extern (C) void gtk_paint_string(_GtkStyle *, _GdkDrawable *, int, _GdkRectangle *, _GtkWidget *, char *, int, int, char *);
extern (C) void gtk_draw_string(_GtkStyle *, _GdkDrawable *, int, int, int, char *);
extern (C) void _gtk_style_init_for_settings(_GtkStyle *, _GtkSettings *);
extern (C) _GValue * _gtk_style_peek_property_value(_GtkStyle *, uint, _GParamSpec *, _BCD_func__11507);
extern (C) void gtk_border_free(_GtkBorder *);
extern (C) _GtkBorder * gtk_border_copy(_GtkBorder *);
extern (C) uint gtk_border_get_type();
extern (C) void gtk_paint_resize_grip(_GtkStyle *, _GdkDrawable *, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int);
extern (C) void gtk_paint_layout(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, void *);
extern (C) void gtk_paint_expander(_GtkStyle *, _GdkDrawable *, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int);
extern (C) void gtk_paint_handle(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int);
extern (C) void gtk_paint_slider(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int);
extern (C) void gtk_paint_focus(_GtkStyle *, _GdkDrawable *, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int);
extern (C) void gtk_paint_extension(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int);
extern (C) void gtk_paint_box_gap(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int, int, int);
extern (C) void gtk_paint_shadow_gap(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int, int, int);
extern (C) void gtk_paint_tab(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int);
extern (C) void gtk_paint_option(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int);
extern (C) void gtk_paint_check(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int);
extern (C) void gtk_paint_flat_box(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int);
extern (C) void gtk_paint_box(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int);
extern (C) void gtk_paint_diamond(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int);
extern (C) void gtk_paint_arrow(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int, int, int);
extern (C) void gtk_paint_polygon(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, _GdkPoint *, int, int);
extern (C) void gtk_paint_shadow(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int, int);
extern (C) void gtk_paint_vline(_GtkStyle *, _GdkDrawable *, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int);
extern (C) void gtk_paint_hline(_GtkStyle *, _GdkDrawable *, int, _GdkRectangle *, _GtkWidget *, char *, int, int, int);
extern (C) void gtk_draw_resize_grip(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int);
extern (C) void gtk_draw_layout(_GtkStyle *, _GdkDrawable *, int, int, int, int, void *);
extern (C) void gtk_draw_expander(_GtkStyle *, _GdkDrawable *, int, int, int, int);
extern (C) void gtk_draw_handle(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int, int);
extern (C) void gtk_draw_slider(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int, int);
extern (C) void gtk_draw_focus(_GtkStyle *, _GdkDrawable *, int, int, int, int);
extern (C) void gtk_draw_extension(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int, int);
extern (C) void gtk_draw_box_gap(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int, int, int, int);
extern (C) void gtk_draw_shadow_gap(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int, int, int, int);
extern (C) void gtk_draw_tab(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int);
extern (C) void gtk_draw_option(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int);
extern (C) void gtk_draw_check(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int);
extern (C) void gtk_draw_flat_box(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int);
extern (C) void gtk_draw_box(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int);
extern (C) void gtk_draw_diamond(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int);
extern (C) void gtk_draw_arrow(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int, int, int);
extern (C) void gtk_draw_polygon(_GtkStyle *, _GdkDrawable *, int, int, _GdkPoint *, int, int);
extern (C) void gtk_draw_shadow(_GtkStyle *, _GdkDrawable *, int, int, int, int, int, int);
extern (C) void gtk_draw_vline(_GtkStyle *, _GdkDrawable *, int, int, int, int);
extern (C) void gtk_draw_hline(_GtkStyle *, _GdkDrawable *, int, int, int, int);
extern (C) void * gtk_style_render_icon(_GtkStyle *, void *, int, int, int, _GtkWidget *, char *);
extern (C) void * gtk_style_lookup_icon_set(_GtkStyle *, char *);
extern (C) void gtk_style_apply_default_background(_GtkStyle *, _GdkDrawable *, int, int, _GdkRectangle *, int, int, int, int);
extern (C) void gtk_style_set_background(_GtkStyle *, _GdkDrawable *, int);
extern (C) void gtk_style_set_font(_GtkStyle *, _GdkFont *);
extern (C) _GdkFont * gtk_style_get_font(_GtkStyle *);
extern (C) void gtk_style_unref(_GtkStyle *);
extern (C) _GtkStyle * gtk_style_ref(_GtkStyle *);
extern (C) void gtk_style_detach(_GtkStyle *);
extern (C) _GtkStyle * gtk_style_attach(_GtkStyle *, _GdkDrawable *);
extern (C) _GtkStyle * gtk_style_copy(_GtkStyle *);
extern (C) _GtkStyle * gtk_style_new();
extern (C) uint gtk_style_get_type();
extern (C) void gtk_adjustment_set_value(_GtkAdjustment *, double);
extern (C) double gtk_adjustment_get_value(_GtkAdjustment *);
extern (C) void gtk_adjustment_clamp_page(_GtkAdjustment *, double, double);
extern (C) void gtk_adjustment_value_changed(_GtkAdjustment *);
extern (C) void gtk_adjustment_changed(_GtkAdjustment *);
extern (C) _GtkObject * gtk_adjustment_new(double, double, double, double, double, double);
extern (C) uint gtk_adjustment_get_type();
extern (C) void gtk_object_add_arg_type(char *, uint, uint, uint);
extern (C) void gtk_object_set(_GtkObject *, char *, ...);
extern (C) void gtk_object_get(_GtkObject *, char *, ...);
extern (C) void gtk_object_remove_no_notify_by_id(_GtkObject *, uint);
extern (C) void gtk_object_remove_data_by_id(_GtkObject *, uint);
extern (C) void * gtk_object_get_data_by_id(_GtkObject *, uint);
extern (C) void gtk_object_set_data_by_id_full(_GtkObject *, uint, void *, _BCD_func__11672);
extern (C) void gtk_object_set_data_by_id(_GtkObject *, uint, void *);
extern (C) void * gtk_object_get_user_data(_GtkObject *);
extern (C) void gtk_object_set_user_data(_GtkObject *, void *);
extern (C) void gtk_object_remove_no_notify(_GtkObject *, char *);
extern (C) void * gtk_object_get_data(_GtkObject *, char *);
extern (C) void gtk_object_remove_data(_GtkObject *, char *);
extern (C) void gtk_object_set_data_full(_GtkObject *, char *, void *, _BCD_func__11672);
extern (C) void gtk_object_set_data(_GtkObject *, char *, void *);
extern (C) void gtk_object_weakunref(_GtkObject *, _BCD_func__11672, void *);
extern (C) void gtk_object_weakref(_GtkObject *, _BCD_func__11672, void *);
extern (C) void gtk_object_unref(_GtkObject *);
extern (C) _GtkObject * gtk_object_ref(_GtkObject *);
extern (C) _GtkObject * gtk_object_new(uint, char *, ...);
extern (C) void gtk_object_destroy(_GtkObject *);
extern (C) void gtk_object_sink(_GtkObject *);
extern (C) uint gtk_object_get_type();
extern (C) void gtk_type_init(int);
extern (C) _GFlagsValue * gtk_type_flags_find_value(uint, char *);
extern (C) _GEnumValue * gtk_type_enum_find_value(uint, char *);
extern (C) _GFlagsValue * gtk_type_flags_get_values(uint);
extern (C) _GEnumValue * gtk_type_enum_get_values(uint);
extern (C) void * gtk_type_new(uint);
extern (C) uint gtk_type_unique(uint, _GtkTypeInfo *);
extern (C) void * gtk_type_class(uint);
extern (C) uint gtk_identifier_get_type();
extern (C) uint gtk_widget_help_type_get_type();
extern (C) uint gtk_widget_flags_get_type();
extern (C) uint gtk_ui_manager_item_type_get_type();
extern (C) uint gtk_tree_view_column_sizing_get_type();
extern (C) uint gtk_tree_view_drop_position_get_type();
extern (C) uint gtk_tree_model_flags_get_type();
extern (C) uint gtk_tree_view_mode_get_type();
extern (C) uint gtk_toolbar_space_style_get_type();
extern (C) uint gtk_toolbar_child_type_get_type();
extern (C) uint gtk_text_window_type_get_type();
extern (C) uint gtk_text_search_flags_get_type();
extern (C) uint gtk_spin_type_get_type();
extern (C) uint gtk_spin_button_update_policy_get_type();
extern (C) uint gtk_size_group_mode_get_type();
extern (C) uint gtk_rc_token_type_get_type();
extern (C) uint gtk_rc_flags_get_type();
extern (C) uint gtk_progress_bar_orientation_get_type();
extern (C) uint gtk_progress_bar_style_get_type();
extern (C) uint gtk_private_flags_get_type();
extern (C) uint gtk_arg_flags_get_type();
extern (C) uint gtk_object_flags_get_type();
extern (C) uint gtk_notebook_tab_get_type();
extern (C) uint gtk_buttons_type_get_type();
extern (C) uint gtk_message_type_get_type();
extern (C) uint gtk_image_type_get_type();
extern (C) uint gtk_icon_view_drop_position_get_type();
extern (C) uint gtk_icon_theme_error_get_type();
extern (C) uint gtk_icon_lookup_flags_get_type();
extern (C) uint gtk_file_filter_flags_get_type();
extern (C) uint gtk_file_chooser_error_get_type();
extern (C) uint gtk_file_chooser_confirmation_get_type();
extern (C) uint gtk_file_chooser_action_get_type();
extern (C) uint gtk_pack_direction_get_type();
extern (C) uint gtk_im_status_style_get_type();
extern (C) uint gtk_im_preedit_style_get_type();
extern (C) uint gtk_sort_type_get_type();
extern (C) uint gtk_wrap_mode_get_type();
extern (C) uint gtk_window_type_get_type();
extern (C) uint gtk_window_position_get_type();
extern (C) uint gtk_visibility_get_type();
extern (C) uint gtk_update_type_get_type();
extern (C) uint gtk_toolbar_style_get_type();
extern (C) uint gtk_submenu_placement_get_type();
extern (C) uint gtk_submenu_direction_get_type();
extern (C) uint gtk_state_type_get_type();
extern (C) uint gtk_shadow_type_get_type();
extern (C) uint gtk_selection_mode_get_type();
extern (C) uint gtk_scroll_type_get_type();
extern (C) uint gtk_signal_run_type_get_type();
extern (C) uint gtk_resize_mode_get_type();
extern (C) uint gtk_relief_style_get_type();
extern (C) uint gtk_preview_type_get_type();
extern (C) uint gtk_position_type_get_type();
extern (C) uint gtk_policy_type_get_type();
extern (C) uint gtk_path_type_get_type();
extern (C) uint gtk_path_priority_type_get_type();
extern (C) uint gtk_pack_type_get_type();
extern (C) uint gtk_corner_type_get_type();
extern (C) uint gtk_orientation_get_type();
extern (C) uint gtk_scroll_step_get_type();
extern (C) uint gtk_movement_step_get_type();
extern (C) uint gtk_metric_type_get_type();
extern (C) uint gtk_menu_direction_type_get_type();
extern (C) uint gtk_match_type_get_type();
extern (C) uint gtk_justification_get_type();
extern (C) uint gtk_text_direction_get_type();
extern (C) uint gtk_side_type_get_type();
extern (C) uint gtk_icon_size_get_type();
extern (C) uint gtk_expander_style_get_type();
extern (C) uint gtk_direction_type_get_type();
extern (C) uint gtk_delete_type_get_type();
extern (C) uint gtk_curve_type_get_type();
extern (C) uint gtk_button_box_style_get_type();
extern (C) uint gtk_attach_options_get_type();
extern (C) uint gtk_arrow_type_get_type();
extern (C) uint gtk_anchor_type_get_type();
extern (C) uint gtk_target_flags_get_type();
extern (C) uint gtk_dest_defaults_get_type();
extern (C) uint gtk_response_type_get_type();
extern (C) uint gtk_dialog_flags_get_type();
extern (C) uint gtk_debug_flag_get_type();
extern (C) uint gtk_ctree_expansion_type_get_type();
extern (C) uint gtk_ctree_expander_style_get_type();
extern (C) uint gtk_ctree_line_style_get_type();
extern (C) uint gtk_ctree_pos_get_type();
extern (C) uint gtk_button_action_get_type();
extern (C) uint gtk_clist_drag_pos_get_type();
extern (C) uint gtk_cell_type_get_type();
extern (C) uint gtk_cell_renderer_mode_get_type();
extern (C) uint gtk_cell_renderer_state_get_type();
extern (C) uint gtk_calendar_display_options_get_type();
extern (C) uint gtk_accel_flags_get_type();
extern (C) void _gtk_accel_group_reconnect(_GtkAccelGroup *, uint);
extern (C) _GtkAccelGroupEntry * gtk_accel_group_query(_GtkAccelGroup *, uint, int, uint *);
extern (C) uint gtk_accelerator_get_default_mod_mask();
extern (C) void gtk_accelerator_set_default_mod_mask(int);
extern (C) char * gtk_accelerator_get_label(uint, int);
extern (C) char * gtk_accelerator_name(uint, int);
extern (C) void gtk_accelerator_parse(char *, uint *, int *);
extern (C) int gtk_accelerator_valid(uint, int);
extern (C) _GtkAccelGroup * gtk_accel_group_from_accel_closure(_GClosure *);
extern (C) _GtkAccelKey * gtk_accel_group_find(_GtkAccelGroup *, _BCD_func__11691, void *);
extern (C) _GSList * gtk_accel_groups_from_object(_GObject *);
extern (C) int gtk_accel_groups_activate(_GObject *, uint, int);
extern (C) void _gtk_accel_group_detach(_GtkAccelGroup *, _GObject *);
extern (C) void _gtk_accel_group_attach(_GtkAccelGroup *, _GObject *);
extern (C) int gtk_accel_group_activate(_GtkAccelGroup *, uint, _GObject *, uint, int);
extern (C) int gtk_accel_group_disconnect_key(_GtkAccelGroup *, uint, int);
extern (C) int gtk_accel_group_disconnect(_GtkAccelGroup *, _GClosure *);
extern (C) void gtk_accel_group_connect_by_path(_GtkAccelGroup *, char *, _GClosure *);
extern (C) void gtk_accel_group_connect(_GtkAccelGroup *, uint, int, int, _GClosure *);
extern (C) void gtk_accel_group_unlock(_GtkAccelGroup *);
extern (C) void gtk_accel_group_lock(_GtkAccelGroup *);
extern (C) _GtkAccelGroup * gtk_accel_group_new();
extern (C) uint gtk_accel_group_get_type();
alias void function(_AtkObject *, int) _BCD_func__10957;
alias int function(_AtkKeyEventStruct *, void *) _BCD_func__10976;
alias void function(_AtkObject *) _BCD_func__10977;
alias void function(_AtkObject *, _AtkPropertyValues *) _BCD_func__11405;
alias void function(_GdkSpan *, void *) _BCD_func__11804;
alias int function(void *, _GdkEvent *, void *) _BCD_func__11962;
alias void function(_GdkEvent *, void *) _BCD_func__11963;
alias void function(void *) _BCD_func__12229;
alias char * function(void *) _BCD_func__12230;
alias int function(void *) _BCD_func__5143;
alias int function(void *, long *, int) _BCD_func__5145;
alias int function(void *, char *, uint) _BCD_func__5147;
alias int function(void *, char *, uint) _BCD_func__5149;
alias int function(void * *, char *) _BCD_func__12287;
alias int function(char *, char * * *, uint *) _BCD_func__12288;
alias int function(void *, char *, char *, char *, char *) _BCD_func__12289;
alias int function(char *, uint, _GError * *, void *) _BCD_func__12370;
alias void function(char *, void *) _BCD_func__12373;
alias int function(void *, void *, void *) _BCD_func__12566;
alias void * function(void *) _BCD_func__12586;
alias int function(_PangoAttribute *, void *) _BCD_func__12587;
alias void function(void *, uint, uint, _GInterfaceInfo *) _BCD_func__12685;
alias void function(void *, uint, _GTypeInfo *, _GTypeValueTable *) _BCD_func__12686;
alias void function(void *) _BCD_func__12687;
alias void function(void *, _GObject *, int) _BCD_func__12827;
alias void function(void *, _GObject *) _BCD_func__12829;
alias void function(_GObject *) _BCD_func__12830;
alias void function(_GObject *, uint, _GValue *, _GParamSpec *) _BCD_func__12831;
alias void function(_GObject *, uint, _GValue *, _GParamSpec *) _BCD_func__12832;
alias int function(_GSignalInvocationHint *, uint, _GValue *, void *) _BCD_func__12857;
alias void function(void *, _GClosure *) _BCD_func__12876;
alias void function(_GValue *, _GValue *) _BCD_func__12933;
alias void * function(void *) _BCD_func__12951;
alias void function(void *, void *) _BCD_func__12955;
alias int function(void *, _GTypeClass *) _BCD_func__12956;
alias int function(void *, void *, void *) _BCD_func__13004;
alias void function(_GScanner *, char *, int) _BCD_func__13017;
alias void function(void *, void *, void *, _GError * *) _BCD_func__13100;
alias int function(void *, void *, void *, _GError * *) _BCD_func__13101;
alias int function(char *, char *, void *, _GError * *) _BCD_func__13102;
alias void * function(void *, void *) _BCD_func__13113;
alias void function(_GNode *, void *) _BCD_func__13114;
alias int function(_GNode *, void *) _BCD_func__13115;
alias void function(char *) _BCD_func__13123;
alias void function(char *, int, char *, void *) _BCD_func__13125;
alias int function(_GIOChannel *, int, void *) _BCD_func__13138;
alias int function(_GPollFD *, uint, int) _BCD_func__13198;
alias void function(int, int, void *) _BCD_func__13204;
alias void function(_GHookList *, _GHook *) _BCD_func__13235;
alias int function(_GHook *, void *) _BCD_func__13236;
alias void function(_GHook *, void *) _BCD_func__13237;
alias int function(_GHook *, _GHook *) _BCD_func__13238;
alias void function(uint, void *, void *) _BCD_func__13272;
alias int function(char *, char *, uint) _BCD_func__13275;
alias char * function(void *) _BCD_func__13276;
alias char * function(char *, void *) _BCD_func__13394;
alias void function(void *, void *, void *) _BCD_func__13395;
alias uint function(void *) _BCD_func__13396;
alias int function(void *, void *) _BCD_func__13397;
alias int function(void *, void *, void *) _BCD_func__13398;
alias int function(void *, char *, uint) _BCD_func__13457;
alias int function(void *, char *, uint) _BCD_func__13458;
struct _GtkVSeparatorClass {
_GtkSeparatorClass parent_class;
}
struct _GtkVSeparator {
_GtkSeparator separator;
}
struct _GtkVScaleClass {
_GtkScaleClass parent_class;
}
struct _GtkVScale {
_GtkScale scale;
}
struct _GtkVRulerClass {
_GtkRulerClass parent_class;
}
struct _GtkVRuler {
_GtkRuler ruler;
}
struct _GtkVPanedClass {
_GtkPanedClass parent_class;
}
struct _GtkVPaned {
_GtkPaned paned;
}
struct _GtkVButtonBoxClass {
_GtkButtonBoxClass parent_class;
}
struct _GtkVButtonBox {
_GtkButtonBox button_box;
}
struct _GtkUIManagerClass {
_GObjectClass parent_class;
_BCD_func__14844 add_widget;
_BCD_func__14845 actions_changed;
_BCD_func__14846 connect_proxy;
_BCD_func__14846 disconnect_proxy;
_BCD_func__14847 pre_activate;
_BCD_func__14847 post_activate;
_BCD_func__14848 get_widget;
_BCD_func__14849 get_action;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
}
struct _GtkUIManager {
_GObject parent;
void * private_data;
}
struct _GtkTreeStoreClass {
_GObjectClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTreeStore {
_GObject parent;
int stamp;
void * root;
void * last;
int n_columns;
int sort_column_id;
_GList * sort_list;
int order;
uint * column_headers;
_BCD_func__10274 default_sort_func;
void * default_sort_data;
_BCD_func__11672 default_sort_destroy;
uint columns_dirty;
}
struct _GtkTreeModelSortClass {
_GObjectClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTreeModelSort {
_GObject parent;
void * root;
int stamp;
uint child_flags;
void * child_model;
int zero_ref_count;
_GList * sort_list;
int sort_column_id;
int order;
_BCD_func__10274 default_sort_func;
void * default_sort_data;
_BCD_func__11672 default_sort_destroy;
uint changed_id;
uint inserted_id;
uint has_child_toggled_id;
uint deleted_id;
uint reordered_id;
}
struct _GtkTreeDragDestIface {
_GTypeInterface g_iface;
_BCD_func__14856 drag_data_received;
_BCD_func__14856 row_drop_possible;
}
struct _GtkTreeDragSourceIface {
_GTypeInterface g_iface;
_BCD_func__14858 row_draggable;
_BCD_func__14859 drag_data_get;
_BCD_func__14858 drag_data_delete;
}
struct _GtkToolbarClass {
_GtkContainerClass parent_class;
_BCD_func__14861 orientation_changed;
_BCD_func__14862 style_changed;
_BCD_func__14863 popup_context_menu;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
}
struct _GtkToolbar {
_GtkContainer container;
int num_children;
_GList * children;
int orientation;
int style;
int icon_size;
_GtkTooltips * tooltips;
int button_maxw;
int button_maxh;
uint style_set_connection;
uint icon_size_connection;
uint style_set;
uint icon_size_set;
}
struct _GtkToolbarChild {
int type;
_GtkWidget * widget;
_GtkWidget * icon;
_GtkWidget * label;
}
struct _GtkTipsQueryClass {
_GtkLabelClass parent_class;
_BCD_func__14867 start_query;
_BCD_func__14867 stop_query;
_BCD_func__14868 widget_entered;
_BCD_func__14869 widget_selected;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTipsQuery {
_GtkLabel label;
uint emit_always;
uint in_query;
char * label_inactive;
char * label_no_tip;
_GtkWidget * caller;
_GtkWidget * last_crossed;
_GdkCursor * query_cursor;
}
struct _GtkTextViewClass {
_GtkContainerClass parent_class;
_BCD_func__14872 set_scroll_adjustments;
_BCD_func__14873 populate_popup;
_BCD_func__14874 move_cursor;
_BCD_func__14875 page_horizontally;
_BCD_func__14876 set_anchor;
_BCD_func__14877 insert_at_cursor;
_BCD_func__14878 delete_from_cursor;
_BCD_func__14876 backspace;
_BCD_func__14876 cut_clipboard;
_BCD_func__14876 copy_clipboard;
_BCD_func__14876 paste_clipboard;
_BCD_func__14876 toggle_overwrite;
_BCD_func__14879 move_focus;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
_BCD_func__10655 _gtk_reserved5;
_BCD_func__10655 _gtk_reserved6;
_BCD_func__10655 _gtk_reserved7;
}
struct _GtkTextView {
_GtkContainer parent_instance;
void * layout;
_GtkTextBuffer * buffer;
uint selection_drag_handler;
uint scroll_timeout;
int pixels_above_lines;
int pixels_below_lines;
int pixels_inside_wrap;
int wrap_mode;
int justify;
int left_margin;
int right_margin;
int indent;
void * tabs;
uint editable;
uint overwrite_mode;
uint cursor_visible;
uint need_im_reset;
uint accepts_tab;
uint width_changed;
uint onscreen_validated;
uint mouse_cursor_obscured;
void * text_window;
void * left_window;
void * right_window;
void * top_window;
void * bottom_window;
_GtkAdjustment * hadjustment;
_GtkAdjustment * vadjustment;
int xoffset;
int yoffset;
int width;
int height;
int virtual_cursor_x;
int virtual_cursor_y;
_GtkTextMark * first_para_mark;
int first_para_pixels;
_GtkTextMark * dnd_mark;
uint blink_timeout;
uint first_validate_idle;
uint incremental_validate_idle;
_GtkIMContext * im_context;
_GtkWidget * popup_menu;
int drag_start_x;
int drag_start_y;
_GSList * children;
void * pending_scroll;
int pending_place_cursor_button;
}
struct _GtkTextBufferClass {
_GObjectClass parent_class;
_BCD_func__14882 insert_text;
_BCD_func__14883 insert_pixbuf;
_BCD_func__14884 insert_child_anchor;
_BCD_func__14885 delete_range;
_BCD_func__14886 changed;
_BCD_func__14886 modified_changed;
_BCD_func__14887 mark_set;
_BCD_func__14888 mark_deleted;
_BCD_func__14889 apply_tag;
_BCD_func__14889 remove_tag;
_BCD_func__14886 begin_user_action;
_BCD_func__14886 end_user_action;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
_BCD_func__10655 _gtk_reserved5;
_BCD_func__10655 _gtk_reserved6;
}
struct _GtkTextMarkClass {
_GObjectClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTextMark {
_GObject parent_instance;
void * segment;
}
struct _GtkTextBuffer {
_GObject parent_instance;
_GtkTextTagTable * tag_table;
void * btree;
_GSList * clipboard_contents_buffers;
_GSList * selection_clipboards;
void * log_attr_cache;
uint user_action_count;
uint modified;
}
struct _GtkTextChildAnchorClass {
_GObjectClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTextChildAnchor {
_GObject parent_instance;
void * segment;
}
struct _GtkTextTagTableClass {
_GObjectClass parent_class;
_BCD_func__14896 tag_changed;
_BCD_func__14897 tag_added;
_BCD_func__14897 tag_removed;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTextAppearance {
_GdkColor bg_color;
_GdkColor fg_color;
_GdkDrawable * bg_stipple;
_GdkDrawable * fg_stipple;
int rise;
void * padding1;
uint underline;
uint strikethrough;
uint draw_bg;
uint inside_selection;
uint is_text;
uint pad1;
uint pad2;
uint pad3;
uint pad4;
}
struct _GtkTextTagClass {
_GObjectClass parent_class;
_BCD_func__14900 event;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTextTag {
_GObject parent_instance;
_GtkTextTagTable * table;
char * name;
int priority;
_GtkTextAttributes * values;
uint bg_color_set;
uint bg_stipple_set;
uint fg_color_set;
uint scale_set;
uint fg_stipple_set;
uint justification_set;
uint left_margin_set;
uint indent_set;
uint rise_set;
uint strikethrough_set;
uint right_margin_set;
uint pixels_above_lines_set;
uint pixels_below_lines_set;
uint pixels_inside_wrap_set;
uint tabs_set;
uint underline_set;
uint wrap_mode_set;
uint bg_full_height_set;
uint invisible_set;
uint editable_set;
uint language_set;
uint pg_bg_color_set;
uint pad1;
uint pad2;
}
struct _GtkTextAttributes {
uint refcount;
_GtkTextAppearance appearance;
int justification;
int direction;
void * font;
double font_scale;
int left_margin;
int indent;
int right_margin;
int pixels_above_lines;
int pixels_below_lines;
int pixels_inside_wrap;
void * tabs;
int wrap_mode;
void * language;
_GdkColor * pg_bg_color;
uint invisible;
uint bg_full_height;
uint editable;
uint realized;
uint pad1;
uint pad2;
uint pad3;
uint pad4;
}
struct _GtkTextTagTable {
_GObject parent_instance;
void * hash;
_GSList * anonymous;
int anon_count;
_GSList * buffers;
}
struct _GtkTextIter {
void * dummy1;
void * dummy2;
int dummy3;
int dummy4;
int dummy5;
int dummy6;
int dummy7;
int dummy8;
void * dummy9;
void * dummy10;
int dummy11;
int dummy12;
int dummy13;
void * dummy14;
}
struct _GtkTearoffMenuItemClass {
_GtkMenuItemClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTearoffMenuItem {
_GtkMenuItem menu_item;
uint torn_off;
}
struct _GtkTableRowCol {
ushort requisition;
ushort allocation;
ushort spacing;
uint need_expand;
uint need_shrink;
uint expand;
uint shrink;
uint empty;
}
struct _GtkTableChild {
_GtkWidget * widget;
ushort left_attach;
ushort right_attach;
ushort top_attach;
ushort bottom_attach;
ushort xpadding;
ushort ypadding;
uint xexpand;
uint yexpand;
uint xshrink;
uint yshrink;
uint xfill;
uint yfill;
}
struct _GtkTableClass {
_GtkContainerClass parent_class;
}
struct _GtkTable {
_GtkContainer container;
_GList * children;
_GtkTableRowCol * rows;
_GtkTableRowCol * cols;
ushort nrows;
ushort ncols;
ushort column_spacing;
ushort row_spacing;
uint homogeneous;
}
struct _GtkStockItem {
char * stock_id;
char * label;
int modifier;
uint keyval;
char * translation_domain;
}
struct _GtkStatusbarClass {
_GtkHBoxClass parent_class;
void * messages_mem_chunk;
_BCD_func__14913 text_pushed;
_BCD_func__14913 text_popped;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkStatusbar {
_GtkHBox parent_widget;
_GtkWidget * frame;
_GtkWidget * label;
_GSList * messages;
_GSList * keys;
uint seq_context_id;
uint seq_message_id;
_GdkDrawable * grip_window;
uint has_resize_grip;
}
struct _GtkSpinButtonClass {
_GtkEntryClass parent_class;
_BCD_func__14916 input;
_BCD_func__14917 output;
_BCD_func__14918 value_changed;
_BCD_func__14919 change_value;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkSpinButton {
_GtkEntry entry;
_GtkAdjustment * adjustment;
_GdkDrawable * panel;
uint timer;
double climb_rate;
double timer_step;
int update_policy;
uint in_child;
uint click_child;
uint button;
uint need_timer;
uint timer_calls;
uint digits;
uint numeric;
uint wrap;
uint snap_to_ticks;
}
struct _GtkSizeGroupClass {
_GObjectClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkSizeGroup {
_GObject parent_instance;
_GSList * widgets;
char mode;
uint have_width;
uint have_height;
uint ignore_hidden;
_GtkRequisition requisition;
}
struct _GtkSeparatorToolItemClass {
_GtkToolItemClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkSeparatorToolItem {
_GtkToolItem parent;
void * priv;
}
struct _GtkSeparatorMenuItemClass {
_GtkMenuItemClass parent_class;
}
struct _GtkSeparatorMenuItem {
_GtkMenuItem menu_item;
}
struct _GtkScrolledWindowClass {
_GtkBinClass parent_class;
int scrollbar_spacing;
_BCD_func__14928 scroll_child;
_BCD_func__14929 move_focus_out;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkScrolledWindow {
_GtkBin container;
_GtkWidget * hscrollbar;
_GtkWidget * vscrollbar;
uint hscrollbar_policy;
uint vscrollbar_policy;
uint hscrollbar_visible;
uint vscrollbar_visible;
uint window_placement;
uint focus_out;
ushort shadow_type;
}
struct _GtkViewportClass {
_GtkBinClass parent_class;
_BCD_func__14932 set_scroll_adjustments;
}
struct _GtkViewport {
_GtkBin bin;
int shadow_type;
_GdkDrawable * view_window;
_GdkDrawable * bin_window;
_GtkAdjustment * hadjustment;
_GtkAdjustment * vadjustment;
}
struct _GtkRadioToolButtonClass {
_GtkToggleToolButtonClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkRadioToolButton {
_GtkToggleToolButton parent;
}
struct _GtkToggleToolButtonClass {
_GtkToolButtonClass parent_class;
_BCD_func__14937 toggled;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkToggleToolButton {
_GtkToolButton parent;
void * priv;
}
struct _GtkRadioMenuItemClass {
_GtkCheckMenuItemClass parent_class;
_BCD_func__14940 group_changed;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkRadioMenuItem {
_GtkCheckMenuItem check_menu_item;
_GSList * group;
}
struct _GtkRadioButtonClass {
_GtkCheckButtonClass parent_class;
_BCD_func__14943 group_changed;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkRadioButton {
_GtkCheckButton check_button;
_GSList * group;
}
struct _GtkRadioActionClass {
_GtkToggleActionClass parent_class;
_BCD_func__14946 changed;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkRadioAction {
_GtkToggleAction parent;
void * private_data;
}
struct _GtkToggleActionClass {
_GtkActionClass parent_class;
_BCD_func__14949 toggled;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkToggleAction {
_GtkAction parent;
void * private_data;
}
struct _GtkProgressBarClass {
_GtkProgressClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkProgressBar {
_GtkProgress progress;
int bar_style;
int orientation;
uint blocks;
int in_block;
int activity_pos;
uint activity_step;
uint activity_blocks;
double pulse_fraction;
uint activity_dir;
uint ellipsize;
}
struct _GtkProgressClass {
_GtkWidgetClass parent_class;
_BCD_func__14954 paint;
_BCD_func__14954 update;
_BCD_func__14954 act_mode_enter;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkProgress {
_GtkWidget widget;
_GtkAdjustment * adjustment;
_GdkDrawable * offscreen_pixmap;
char * format;
float x_align;
float y_align;
uint show_text;
uint activity_mode;
uint use_text_format;
}
struct _GtkPreviewClass {
_GtkWidgetClass parent_class;
_GtkPreviewInfo info;
}
union _GtkDitherInfo {
ushort [2] s;
char [4] c;
}
struct _GtkPreviewInfo {
char * lookup;
double gamma;
}
struct _GtkPreview {
_GtkWidget widget;
char * buffer;
ushort buffer_width;
ushort buffer_height;
ushort bpp;
ushort rowstride;
int dither;
uint type;
uint expand;
}
struct _GtkPlugClass {
_GtkWindowClass parent_class;
_BCD_func__14961 embedded;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkPlug {
_GtkWindow window;
_GdkDrawable * socket_window;
_GtkWidget * modality_window;
_GtkWindowGroup * modality_group;
void * grabbed_keys;
uint same_app;
}
struct _GtkSocketClass {
_GtkContainerClass parent_class;
_BCD_func__14964 plug_added;
_BCD_func__14965 plug_removed;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkSocket {
_GtkContainer container;
ushort request_width;
ushort request_height;
ushort current_width;
ushort current_height;
_GdkDrawable * plug_window;
_GtkWidget * plug_widget;
short xembed_version;
uint same_app;
uint focus_in;
uint have_size;
uint need_map;
uint is_mapped;
uint active;
_GtkAccelGroup * accel_group;
_GtkWidget * toplevel;
}
struct _GtkPixmapClass {
_GtkMiscClass parent_class;
}
struct _GtkPixmap {
_GtkMisc misc;
_GdkDrawable * pixmap;
_GdkDrawable * mask;
_GdkDrawable * pixmap_insensitive;
uint build_insensitive;
}
struct _GtkOptionMenuClass {
_GtkButtonClass parent_class;
_BCD_func__14970 changed;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkOptionMenu {
_GtkButton button;
_GtkWidget * menu;
_GtkWidget * menu_item;
ushort width;
ushort height;
}
struct _GtkOldEditableClass {
_GtkWidgetClass parent_class;
_BCD_func__14973 activate;
_BCD_func__14974 set_editable;
_BCD_func__14975 move_cursor;
_BCD_func__14974 move_word;
_BCD_func__14975 move_page;
_BCD_func__14974 move_to_row;
_BCD_func__14974 move_to_column;
_BCD_func__14974 kill_char;
_BCD_func__14974 kill_word;
_BCD_func__14974 kill_line;
_BCD_func__14973 cut_clipboard;
_BCD_func__14973 copy_clipboard;
_BCD_func__14973 paste_clipboard;
_BCD_func__14975 update_text;
_BCD_func__14976 get_chars;
_BCD_func__14975 set_selection;
_BCD_func__14974 set_position;
}
struct _GtkOldEditable {
_GtkWidget widget;
uint current_pos;
uint selection_start_pos;
uint selection_end_pos;
uint has_selection;
uint editable;
uint visible;
char * clipboard_text;
}
struct _GtkNotebookClass {
_GtkContainerClass parent_class;
_BCD_func__14979 switch_page;
_BCD_func__14980 select_page;
_BCD_func__14981 focus_tab;
_BCD_func__14982 change_current_page;
_BCD_func__14983 move_focus_out;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkNotebook {
_GtkContainer container;
void * cur_page;
_GList * children;
_GList * first_tab;
_GList * focus_tab;
_GtkWidget * menu;
_GdkDrawable * event_window;
uint timer;
ushort tab_hborder;
ushort tab_vborder;
uint show_tabs;
uint homogeneous;
uint show_border;
uint tab_pos;
uint scrollable;
uint in_child;
uint click_child;
uint button;
uint need_timer;
uint child_has_focus;
uint have_visible_child;
uint focus_out;
uint has_before_previous;
uint has_before_next;
uint has_after_previous;
uint has_after_next;
}
struct _GtkMessageDialogClass {
_GtkDialogClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkMessageDialog {
_GtkDialog parent_instance;
_GtkWidget * image;
_GtkWidget * label;
}
struct _GtkMenuToolButton {
_GtkToolButton parent;
void * priv;
}
struct _GtkMenuToolButtonClass {
_GtkToolButtonClass parent_class;
_BCD_func__14989 show_menu;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkToolButtonClass {
_GtkToolItemClass parent_class;
uint button_type;
_BCD_func__14991 clicked;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkToolButton {
_GtkToolItem parent;
void * priv;
}
struct _GtkToolItemClass {
_GtkBinClass parent_class;
_BCD_func__14994 create_menu_proxy;
_BCD_func__14995 toolbar_reconfigured;
_BCD_func__14996 set_tooltip;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkToolItem {
_GtkBin parent;
void * priv;
}
struct _GtkTooltipsData {
_GtkTooltips * tooltips;
_GtkWidget * widget;
char * tip_text;
char * tip_private;
}
struct _GtkTooltipsClass {
_GtkObjectClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTooltips {
_GtkObject parent_instance;
_GtkWidget * tip_window;
_GtkWidget * tip_label;
_GtkTooltipsData * active_tips_data;
_GList * tips_data_list;
uint delay;
uint enabled;
uint have_grab;
uint use_sticky_delay;
int timer_tag;
_GTimeVal last_popdown;
}
struct _GtkMenuBarClass {
_GtkMenuShellClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkMenuBar {
_GtkMenuShell menu_shell;
}
struct _GtkListClass {
_GtkContainerClass parent_class;
_BCD_func__15004 selection_changed;
_BCD_func__15005 select_child;
_BCD_func__15005 unselect_child;
}
struct _GtkList {
_GtkContainer container;
_GList * children;
_GList * selection;
_GList * undo_selection;
_GList * undo_unselection;
_GtkWidget * last_focus_child;
_GtkWidget * undo_focus_child;
uint htimer;
uint vtimer;
int anchor;
int drag_pos;
int anchor_state;
uint selection_mode;
uint drag_selection;
uint add_mode;
}
struct _GtkListItemClass {
_GtkItemClass parent_class;
_BCD_func__15008 toggle_focus_row;
_BCD_func__15008 select_all;
_BCD_func__15008 unselect_all;
_BCD_func__15008 undo_selection;
_BCD_func__15008 start_selection;
_BCD_func__15008 end_selection;
_BCD_func__15009 extend_selection;
_BCD_func__15010 scroll_horizontal;
_BCD_func__15010 scroll_vertical;
_BCD_func__15008 toggle_add_mode;
}
struct _GtkListItem {
_GtkItem item;
}
struct _GtkLayoutClass {
_GtkContainerClass parent_class;
_BCD_func__15013 set_scroll_adjustments;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkLayout {
_GtkContainer container;
_GList * children;
uint width;
uint height;
_GtkAdjustment * hadjustment;
_GtkAdjustment * vadjustment;
_GdkDrawable * bin_window;
int visibility;
int scroll_x;
int scroll_y;
uint freeze_count;
}
struct _GtkInvisibleClass {
_GtkWidgetClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkInvisible {
_GtkWidget widget;
int has_user_ref_count;
_GdkScreen * screen;
}
struct _GtkInputDialogClass {
_GtkDialogClass parent_class;
_BCD_func__15018 enable_device;
_BCD_func__15018 disable_device;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkInputDialog {
_GtkDialog dialog;
_GtkWidget * axis_list;
_GtkWidget * axis_listbox;
_GtkWidget * mode_optionmenu;
_GtkWidget * close_button;
_GtkWidget * save_button;
_GtkWidget * [7] axis_items;
_GdkDevice * current_device;
_GtkWidget * keys_list;
_GtkWidget * keys_listbox;
}
struct _GtkIMMulticontextClass {
_GtkIMContextClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkIMMulticontext {
_GtkIMContext object;
_GtkIMContext * slave;
void * priv;
char * context_id;
}
struct _GtkIMContextSimpleClass {
_GtkIMContextClass parent_class;
}
struct _GtkIMContextSimple {
_GtkIMContext object;
_GSList * tables;
uint [8] compose_buffer;
uint tentative_match;
int tentative_match_len;
uint in_hex_sequence;
}
struct _GtkImageMenuItemClass {
_GtkMenuItemClass parent_class;
}
struct _GtkImageMenuItem {
_GtkMenuItem menu_item;
_GtkWidget * image;
}
struct _GtkIconViewClass {
_GtkContainerClass parent_class;
_BCD_func__15027 set_scroll_adjustments;
_BCD_func__15028 item_activated;
_BCD_func__15029 selection_changed;
_BCD_func__15029 select_all;
_BCD_func__15029 unselect_all;
_BCD_func__15029 select_cursor_item;
_BCD_func__15029 toggle_cursor_item;
_BCD_func__15030 move_cursor;
_BCD_func__15031 activate_cursor_item;
}
struct _GtkIconView {
_GtkContainer parent;
void * priv;
}
struct _GtkIconThemeClass {
_GObjectClass parent_class;
_BCD_func__15034 changed;
}
struct _GtkIconTheme {
_GObject parent_instance;
void * priv;
}
struct _GtkIconFactoryClass {
_GObjectClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkHSeparatorClass {
_GtkSeparatorClass parent_class;
}
struct _GtkHSeparator {
_GtkSeparator separator;
}
struct _GtkSeparatorClass {
_GtkWidgetClass parent_class;
}
struct _GtkSeparator {
_GtkWidget widget;
}
struct _GtkHScaleClass {
_GtkScaleClass parent_class;
}
struct _GtkHScale {
_GtkScale scale;
}
struct _GtkScaleClass {
_GtkRangeClass parent_class;
_BCD_func__15044 format_value;
_BCD_func__15045 draw_value;
_BCD_func__15046 get_layout_offsets;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkScale {
_GtkRange range;
int digits;
uint draw_value;
uint value_pos;
}
struct _GtkHRulerClass {
_GtkRulerClass parent_class;
}
struct _GtkHRuler {
_GtkRuler ruler;
}
struct _GtkRulerMetric {
char * metric_name;
char * abbrev;
double pixels_per_unit;
double [10] ruler_scale;
int [5] subdivide;
}
struct _GtkRulerClass {
_GtkWidgetClass parent_class;
_BCD_func__15052 draw_ticks;
_BCD_func__15052 draw_pos;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkRuler {
_GtkWidget widget;
_GdkDrawable * backing_store;
_GdkGC * non_gr_exp_gc;
_GtkRulerMetric * metric;
int xsrc;
int ysrc;
int slider_size;
double lower;
double upper;
double position;
double max_size;
}
struct _GtkHPanedClass {
_GtkPanedClass parent_class;
}
struct _GtkHPaned {
_GtkPaned paned;
}
struct _GtkPanedClass {
_GtkContainerClass parent_class;
_BCD_func__15057 cycle_child_focus;
_BCD_func__15058 toggle_handle_focus;
_BCD_func__15059 move_handle;
_BCD_func__15057 cycle_handle_focus;
_BCD_func__15058 accept_position;
_BCD_func__15058 cancel_position;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkPaned {
_GtkContainer container;
_GtkWidget * child1;
_GtkWidget * child2;
_GdkDrawable * handle;
_GdkGC * xor_gc;
int cursor_type;
_GdkRectangle handle_pos;
int child1_size;
int last_allocation;
int min_position;
int max_position;
uint position_set;
uint in_drag;
uint child1_shrink;
uint child1_resize;
uint child2_shrink;
uint child2_resize;
uint orientation;
uint in_recursion;
uint handle_prelit;
_GtkWidget * last_child1_focus;
_GtkWidget * last_child2_focus;
void * priv;
int drag_pos;
int original_position;
}
struct _GtkHButtonBoxClass {
_GtkButtonBoxClass parent_class;
}
struct _GtkHButtonBox {
_GtkButtonBox button_box;
}
struct _GtkHandleBoxClass {
_GtkBinClass parent_class;
_BCD_func__15064 child_attached;
_BCD_func__15064 child_detached;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkHandleBox {
_GtkBin bin;
_GdkDrawable * bin_window;
_GdkDrawable * float_window;
int shadow_type;
uint handle_position;
uint float_window_mapped;
uint child_detached;
uint in_drag;
uint shrink_on_detach;
int snap_edge;
int deskoff_x;
int deskoff_y;
_GdkRectangle attach_allocation;
_GdkRectangle float_allocation;
}
struct _GtkGammaCurveClass {
_GtkVBoxClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkGammaCurve {
_GtkVBox vbox;
_GtkWidget * table;
_GtkWidget * curve;
_GtkWidget * [5] button;
float gamma;
_GtkWidget * gamma_dialog;
_GtkWidget * gamma_text;
}
struct _GtkFontSelectionDialogClass {
_GtkDialogClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkFontSelectionDialog {
_GtkDialog parent_instance;
_GtkWidget * fontsel;
_GtkWidget * main_vbox;
_GtkWidget * action_area;
_GtkWidget * ok_button;
_GtkWidget * apply_button;
_GtkWidget * cancel_button;
int dialog_width;
int auto_resize;
}
struct _GtkFontSelectionClass {
_GtkVBoxClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkFontSelection {
_GtkVBox parent_instance;
_GtkWidget * font_entry;
_GtkWidget * family_list;
_GtkWidget * font_style_entry;
_GtkWidget * face_list;
_GtkWidget * size_entry;
_GtkWidget * size_list;
_GtkWidget * pixels_button;
_GtkWidget * points_button;
_GtkWidget * filter_button;
_GtkWidget * preview_entry;
void * family;
void * face;
int size;
_GdkFont * font;
}
struct _GtkFontButtonClass {
_GtkButtonClass parent_class;
_BCD_func__15073 font_set;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkFontButton {
_GtkButton button;
void * priv;
}
struct _GtkFileChooserWidgetClass {
_GtkVBoxClass parent_class;
}
struct _GtkFileChooserWidget {
_GtkVBox parent_instance;
void * priv;
}
struct _GtkFileChooserDialogClass {
_GtkDialogClass parent_class;
}
struct _GtkFileChooserDialog {
_GtkDialog parent_instance;
void * priv;
}
struct _GtkFileChooserButtonClass {
_GtkHBoxClass parent_class;
void * __gtk_reserved1;
void * __gtk_reserved2;
void * __gtk_reserved3;
void * __gtk_reserved4;
void * __gtk_reserved5;
void * __gtk_reserved6;
void * __gtk_reserved7;
void * __gtk_reserved8;
}
struct _GtkFileChooserButton {
_GtkHBox parent;
void * priv;
}
struct _GtkFileFilterInfo {
int contains;
char * filename;
char * uri;
char * display_name;
char * mime_type;
}
struct _GtkFixedChild {
_GtkWidget * widget;
int x;
int y;
}
struct _GtkFixedClass {
_GtkContainerClass parent_class;
}
struct _GtkFixed {
_GtkContainer container;
_GList * children;
}
struct _GtkFileSelectionClass {
_GtkDialogClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkFileSelection {
_GtkDialog parent_instance;
_GtkWidget * dir_list;
_GtkWidget * file_list;
_GtkWidget * selection_entry;
_GtkWidget * selection_text;
_GtkWidget * main_vbox;
_GtkWidget * ok_button;
_GtkWidget * cancel_button;
_GtkWidget * help_button;
_GtkWidget * history_pulldown;
_GtkWidget * history_menu;
_GList * history_list;
_GtkWidget * fileop_dialog;
_GtkWidget * fileop_entry;
char * fileop_file;
void * cmpl_state;
_GtkWidget * fileop_c_dir;
_GtkWidget * fileop_del_file;
_GtkWidget * fileop_ren_file;
_GtkWidget * button_area;
_GtkWidget * action_area;
_GPtrArray * selected_names;
char * last_selected;
}
struct _GtkExpanderClass {
_GtkBinClass parent_class;
_BCD_func__15088 activate;
}
struct _GtkExpander {
_GtkBin bin;
void * priv;
}
struct _GtkEventBoxClass {
_GtkBinClass parent_class;
}
struct _GtkEventBox {
_GtkBin bin;
}
struct _GtkEntryClass {
_GtkWidgetClass parent_class;
_BCD_func__15093 populate_popup;
_BCD_func__15094 activate;
_BCD_func__15095 move_cursor;
_BCD_func__15096 insert_at_cursor;
_BCD_func__15097 delete_from_cursor;
_BCD_func__15094 backspace;
_BCD_func__15094 cut_clipboard;
_BCD_func__15094 copy_clipboard;
_BCD_func__15094 paste_clipboard;
_BCD_func__15094 toggle_overwrite;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
}
struct _GtkEntry {
_GtkWidget widget;
char * text;
uint editable;
uint visible;
uint overwrite_mode;
uint in_drag;
ushort text_length;
ushort text_max_length;
_GdkDrawable * text_area;
_GtkIMContext * im_context;
_GtkWidget * popup_menu;
int current_pos;
int selection_bound;
void * cached_layout;
uint cache_includes_preedit;
uint need_im_reset;
uint has_frame;
uint activates_default;
uint cursor_visible;
uint in_click;
uint is_cell_renderer;
uint editing_canceled;
uint mouse_cursor_obscured;
uint select_words;
uint select_lines;
uint resolved_dir;
uint button;
uint blink_timeout;
uint recompute_idle;
int scroll_offset;
int ascent;
int descent;
ushort text_size;
ushort n_bytes;
ushort preedit_length;
ushort preedit_cursor;
int dnd_position;
int drag_start_x;
int drag_start_y;
uint invisible_char;
int width_chars;
}
struct _GtkEntryCompletionClass {
_GObjectClass parent_class;
_BCD_func__15100 match_selected;
_BCD_func__15101 action_activated;
_BCD_func__15102 insert_prefix;
_BCD_func__10655 _gtk_reserved0;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
}
struct _GtkEntryCompletion {
_GObject parent_instance;
void * priv;
}
struct _GtkTreeModelFilterClass {
_GObjectClass parent_class;
_BCD_func__10655 _gtk_reserved0;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
}
struct _GtkTreeModelFilter {
_GObject parent;
void * priv;
}
struct _GtkListStoreClass {
_GObjectClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkListStore {
_GObject parent;
int stamp;
void * seq;
void * _gtk_reserved1;
_GList * sort_list;
int n_columns;
int sort_column_id;
int order;
uint * column_headers;
int length;
_BCD_func__10274 default_sort_func;
void * default_sort_data;
_BCD_func__11672 default_sort_destroy;
uint columns_dirty;
}
struct _GtkIMContextClass {
_GtkObjectClass parent_class;
_BCD_func__15109 preedit_start;
_BCD_func__15109 preedit_end;
_BCD_func__15109 preedit_changed;
_BCD_func__15110 commit;
_BCD_func__15111 retrieve_surrounding;
_BCD_func__15112 delete_surrounding;
_BCD_func__15113 set_client_window;
_BCD_func__15114 get_preedit_string;
_BCD_func__15115 filter_keypress;
_BCD_func__15109 focus_in;
_BCD_func__15109 focus_out;
_BCD_func__15109 reset;
_BCD_func__15116 set_cursor_location;
_BCD_func__15117 set_use_preedit;
_BCD_func__15118 set_surrounding;
_BCD_func__15119 get_surrounding;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
_BCD_func__10655 _gtk_reserved5;
_BCD_func__10655 _gtk_reserved6;
}
struct _GtkIMContext {
_GObject parent_instance;
}
struct _GtkEditableClass {
_GTypeInterface base_iface;
_BCD_func__15122 insert_text;
_BCD_func__15123 delete_text;
_BCD_func__15124 changed;
_BCD_func__15122 do_insert_text;
_BCD_func__15123 do_delete_text;
_BCD_func__15125 get_chars;
_BCD_func__15123 set_selection_bounds;
_BCD_func__15126 get_selection_bounds;
_BCD_func__15127 set_position;
_BCD_func__15128 get_position;
}
struct _GtkCurveClass {
_GtkDrawingAreaClass parent_class;
_BCD_func__15130 curve_type_changed;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkCurve {
_GtkDrawingArea graph;
int cursor_type;
float min_x;
float max_x;
float min_y;
float max_y;
_GdkDrawable * pixmap;
int curve_type;
int height;
int grab_point;
int last;
int num_points;
_GdkPoint * point;
int num_ctlpoints;
float [2] * ctlpoint;
}
struct _GtkDrawingAreaClass {
_GtkWidgetClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkDrawingArea {
_GtkWidget widget;
void * draw_data;
}
struct _GtkCTreeNode {
_GList list;
}
struct _GtkCTreeRow {
_GtkCListRow row;
_GtkCTreeNode * parent;
_GtkCTreeNode * sibling;
_GtkCTreeNode * children;
_GdkDrawable * pixmap_closed;
_GdkDrawable * mask_closed;
_GdkDrawable * pixmap_opened;
_GdkDrawable * mask_opened;
ushort level;
uint is_leaf;
uint expanded;
}
struct _GtkCTreeClass {
_GtkCListClass parent_class;
_BCD_func__15138 tree_select_row;
_BCD_func__15138 tree_unselect_row;
_BCD_func__15139 tree_expand;
_BCD_func__15139 tree_collapse;
_BCD_func__15140 tree_move;
_BCD_func__15141 change_focus_row_expansion;
}
struct _GtkCTree {
_GtkCList clist;
_GdkGC * lines_gc;
int tree_indent;
int tree_spacing;
int tree_column;
uint line_style;
uint expander_style;
uint show_stub;
_BCD_func__9593 drag_compare;
}
struct _GtkComboBoxEntryClass {
_GtkComboBoxClass parent_class;
_BCD_func__10655 _gtk_reserved0;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
}
struct _GtkComboBoxEntry {
_GtkComboBox parent_instance;
void * priv;
}
struct _GtkComboBoxClass {
_GtkBinClass parent_class;
_BCD_func__15146 changed;
_BCD_func__15147 get_active_text;
_BCD_func__10655 _gtk_reserved0;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
}
struct _GtkComboBox {
_GtkBin parent_instance;
void * priv;
}
struct _GtkTreeSelectionClass {
_GObjectClass parent_class;
_BCD_func__15150 changed;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTreeSelection {
_GObject parent;
_GtkTreeView * tree_view;
int type;
_BCD_func__7924 user_func;
void * user_data;
_BCD_func__11672 destroy;
}
struct _GtkTreeViewClass {
_GtkContainerClass parent_class;
_BCD_func__15153 set_scroll_adjustments;
_BCD_func__15154 row_activated;
_BCD_func__15155 test_expand_row;
_BCD_func__15155 test_collapse_row;
_BCD_func__15156 row_expanded;
_BCD_func__15156 row_collapsed;
_BCD_func__15157 columns_changed;
_BCD_func__15157 cursor_changed;
_BCD_func__15158 move_cursor;
_BCD_func__15159 select_all;
_BCD_func__15159 unselect_all;
_BCD_func__15160 select_cursor_row;
_BCD_func__15159 toggle_cursor_row;
_BCD_func__15161 expand_collapse_cursor_row;
_BCD_func__15159 select_cursor_parent;
_BCD_func__15159 start_interactive_search;
_BCD_func__10655 _gtk_reserved0;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTreeView {
_GtkContainer parent;
void * priv;
}
struct _GtkComboClass {
_GtkHBoxClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkCombo {
_GtkHBox hbox;
_GtkWidget * entry;
_GtkWidget * button;
_GtkWidget * popup;
_GtkWidget * popwin;
_GtkWidget * list;
uint entry_change_id;
uint list_change_id;
uint value_in_list;
uint ok_if_empty;
uint case_sensitive;
uint use_arrows;
uint use_arrows_always;
ushort current_button;
uint activate_id;
}
struct _GtkHBoxClass {
_GtkBoxClass parent_class;
}
struct _GtkHBox {
_GtkBox box;
}
struct _GtkColorSelectionDialogClass {
_GtkDialogClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkColorSelectionDialog {
_GtkDialog parent_instance;
_GtkWidget * colorsel;
_GtkWidget * ok_button;
_GtkWidget * cancel_button;
_GtkWidget * help_button;
}
struct _GtkColorSelectionClass {
_GtkVBoxClass parent_class;
_BCD_func__15170 color_changed;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkColorSelection {
_GtkVBox parent_instance;
void * private_data;
}
struct _GtkVBoxClass {
_GtkBoxClass parent_class;
}
struct _GtkVBox {
_GtkBox box;
}
struct _GtkColorButtonClass {
_GtkButtonClass parent_class;
_BCD_func__15175 color_set;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkColorButton {
_GtkButton button;
void * priv;
}
struct _GtkCListDestInfo {
_GtkCListCellInfo cell;
int insert_pos;
}
struct _GtkCListCellInfo {
int row;
int column;
}
struct _GtkCellWidget {
int type;
short vertical;
short horizontal;
_GtkStyle * style;
_GtkWidget * widget;
}
struct _GtkCellPixText {
int type;
short vertical;
short horizontal;
_GtkStyle * style;
char * text;
char spacing;
_GdkDrawable * pixmap;
_GdkDrawable * mask;
}
struct _GtkCellPixmap {
int type;
short vertical;
short horizontal;
_GtkStyle * style;
_GdkDrawable * pixmap;
_GdkDrawable * mask;
}
struct _GtkCellText {
int type;
short vertical;
short horizontal;
_GtkStyle * style;
char * text;
}
struct N8_GtkCell5__2095__210E {
_GdkDrawable * pixmap;
_GdkDrawable * mask;
}
struct N8_GtkCell5__2095__211E {
char * text;
char spacing;
_GdkDrawable * pixmap;
_GdkDrawable * mask;
}
union N8_GtkCell5__209E {
char * text;
N8_GtkCell5__2095__210E pm;
N8_GtkCell5__2095__211E pt;
_GtkWidget * widget;
}
struct _GtkCell {
int type;
short vertical;
short horizontal;
_GtkStyle * style;
N8_GtkCell5__209E u;
}
struct _GtkCListRow {
_GtkCell * cell;
int state;
_GdkColor foreground;
_GdkColor background;
_GtkStyle * style;
void * data;
_BCD_func__11672 destroy;
uint fg_set;
uint bg_set;
uint selectable;
}
struct _GtkCListColumn {
char * title;
_GdkRectangle area;
_GtkWidget * button;
_GdkDrawable * window;
int width;
int min_width;
int max_width;
int justification;
uint visible;
uint width_set;
uint resizeable;
uint auto_resize;
uint button_passive;
}
struct _GtkCListClass {
_GtkContainerClass parent_class;
_BCD_func__15198 set_scroll_adjustments;
_BCD_func__15199 refresh;
_BCD_func__15200 select_row;
_BCD_func__15200 unselect_row;
_BCD_func__15201 row_move;
_BCD_func__15202 click_column;
_BCD_func__15201 resize_column;
_BCD_func__15199 toggle_focus_row;
_BCD_func__15199 select_all;
_BCD_func__15199 unselect_all;
_BCD_func__15199 undo_selection;
_BCD_func__15199 start_selection;
_BCD_func__15199 end_selection;
_BCD_func__15203 extend_selection;
_BCD_func__15204 scroll_horizontal;
_BCD_func__15204 scroll_vertical;
_BCD_func__15199 toggle_add_mode;
_BCD_func__15199 abort_column_resize;
_BCD_func__15205 resync_selection;
_BCD_func__15206 selection_find;
_BCD_func__15207 draw_row;
_BCD_func__15208 draw_drag_highlight;
_BCD_func__15199 clear;
_BCD_func__15202 fake_unselect_all;
_BCD_func__15199 sort_list;
_BCD_func__15209 insert_row;
_BCD_func__15202 remove_row;
_BCD_func__15210 set_cell_contents;
_BCD_func__15211 cell_size_request;
}
struct _GtkCList {
_GtkContainer container;
ushort flags;
void * row_mem_chunk;
void * cell_mem_chunk;
uint freeze_count;
_GdkRectangle internal_allocation;
int rows;
int row_height;
_GList * row_list;
_GList * row_list_end;
int columns;
_GdkRectangle column_title_area;
_GdkDrawable * title_window;
_GtkCListColumn * column;
_GdkDrawable * clist_window;
int clist_window_width;
int clist_window_height;
int hoffset;
int voffset;
int shadow_type;
int selection_mode;
_GList * selection;
_GList * selection_end;
_GList * undo_selection;
_GList * undo_unselection;
int undo_anchor;
char [5] button_actions;
char drag_button;
_GtkCListCellInfo click_cell;
_GtkAdjustment * hadjustment;
_GtkAdjustment * vadjustment;
_GdkGC * xor_gc;
_GdkGC * fg_gc;
_GdkGC * bg_gc;
_GdkCursor * cursor_drag;
int x_drag;
int focus_row;
int focus_header_column;
int anchor;
int anchor_state;
int drag_pos;
int htimer;
int vtimer;
int sort_type;
_BCD_func__9803 compare;
int sort_column;
int drag_highlight_row;
int drag_highlight_pos;
}
struct _GtkVScrollbarClass {
_GtkScrollbarClass parent_class;
}
struct _GtkVScrollbar {
_GtkScrollbar scrollbar;
}
struct _GtkHScrollbarClass {
_GtkScrollbarClass parent_class;
}
struct _GtkHScrollbar {
_GtkScrollbar scrollbar;
}
struct _GtkScrollbarClass {
_GtkRangeClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkScrollbar {
_GtkRange range;
}
struct _GtkRangeClass {
_GtkWidgetClass parent_class;
char * slider_detail;
char * stepper_detail;
_BCD_func__15220 value_changed;
_BCD_func__15221 adjust_bounds;
_BCD_func__15222 move_slider;
_BCD_func__15223 get_range_border;
_BCD_func__15224 change_value;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
}
struct _GtkRange {
_GtkWidget widget;
_GtkAdjustment * adjustment;
int update_policy;
uint inverted;
uint flippable;
uint has_stepper_a;
uint has_stepper_b;
uint has_stepper_c;
uint has_stepper_d;
uint need_recalc;
uint slider_size_fixed;
int min_slider_size;
int orientation;
_GdkRectangle range_rect;
int slider_start;
int slider_end;
int round_digits;
uint trough_click_forward;
uint update_pending;
void * layout;
void * timer;
int slide_initial_slider_position;
int slide_initial_coordinate;
uint update_timeout_id;
_GdkDrawable * event_window;
}
struct _GtkTargetPair {
void * target;
uint flags;
uint info;
}
struct _GtkTargetEntry {
char * target;
uint flags;
uint info;
}
struct _GtkTargetList {
_GList * list;
uint ref_count;
}
struct _GtkCheckMenuItemClass {
_GtkMenuItemClass parent_class;
_BCD_func__15230 toggled;
_BCD_func__15231 draw_indicator;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkCheckMenuItem {
_GtkMenuItem menu_item;
uint active;
uint always_show_toggle;
uint inconsistent;
uint draw_as_radio;
}
struct _GtkMenuItemClass {
_GtkItemClass parent_class;
uint hide_on_activate;
_BCD_func__15234 activate;
_BCD_func__15234 activate_item;
_BCD_func__15235 toggle_size_request;
_BCD_func__15236 toggle_size_allocate;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkMenuItem {
_GtkItem item;
_GtkWidget * submenu;
_GdkDrawable * event_window;
ushort toggle_size;
ushort accelerator_width;
char * accel_path;
uint show_submenu_indicator;
uint submenu_placement;
uint submenu_direction;
uint right_justify;
uint timer_from_keypress;
uint timer;
}
struct _GtkItemClass {
_GtkBinClass parent_class;
_BCD_func__15239 select;
_BCD_func__15239 deselect;
_BCD_func__15239 toggle;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkItem {
_GtkBin bin;
}
struct _GtkCheckButtonClass {
_GtkToggleButtonClass parent_class;
_BCD_func__15242 draw_indicator;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkCheckButton {
_GtkToggleButton toggle_button;
}
struct _GtkToggleButtonClass {
_GtkButtonClass parent_class;
_BCD_func__15245 toggled;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkToggleButton {
_GtkButton button;
uint active;
uint draw_indicator;
uint inconsistent;
}
struct _GtkCellViewClass {
_GtkWidgetClass parent_class;
}
struct _GtkCellView {
_GtkWidget parent_instance;
void * priv;
}
struct _GtkCellRendererToggleClass {
_GtkCellRendererClass parent_class;
_BCD_func__15250 toggled;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkCellRendererToggle {
_GtkCellRenderer parent;
uint active;
uint activatable;
uint radio;
}
struct _GtkCellRendererProgressClass {
_GtkCellRendererClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkCellRendererProgress {
_GtkCellRenderer parent_instance;
void * priv;
}
struct _GtkCellRendererPixbufClass {
_GtkCellRendererClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkCellRendererPixbuf {
_GtkCellRenderer parent;
void * pixbuf;
void * pixbuf_expander_open;
void * pixbuf_expander_closed;
}
struct _GtkCellRendererComboClass {
_GtkCellRendererTextClass parent;
}
struct _GtkCellRendererCombo {
_GtkCellRendererText parent;
void * model;
int text_column;
int has_entry;
uint focus_out_id;
}
struct _GtkCellRendererTextClass {
_GtkCellRendererClass parent_class;
_BCD_func__15259 edited;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkCellRendererText {
_GtkCellRenderer parent;
char * text;
void * font;
double font_scale;
_PangoColor foreground;
_PangoColor background;
void * extra_attrs;
int underline_style;
int rise;
int fixed_height_rows;
uint strikethrough;
uint editable;
uint scale_set;
uint foreground_set;
uint background_set;
uint underline_set;
uint rise_set;
uint strikethrough_set;
uint editable_set;
uint calc_fixed_height;
}
struct _GtkCellLayoutIface {
_GTypeInterface g_iface;
_BCD_func__15262 pack_start;
_BCD_func__15262 pack_end;
_BCD_func__15263 clear;
_BCD_func__15264 add_attribute;
_BCD_func__15265 set_cell_data_func;
_BCD_func__15266 clear_attributes;
_BCD_func__15262 reorder;
}
struct _GtkTreeViewColumnClass {
_GtkObjectClass parent_class;
_BCD_func__15268 clicked;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkTreeViewColumn {
_GtkObject parent;
_GtkWidget * tree_view;
_GtkWidget * button;
_GtkWidget * child;
_GtkWidget * arrow;
_GtkWidget * alignment;
_GdkDrawable * window;
void * editable_widget;
float xalign;
uint property_changed_signal;
int spacing;
int column_type;
int requested_width;
int button_request;
int resized_width;
int width;
int fixed_width;
int min_width;
int max_width;
int drag_x;
int drag_y;
char * title;
_GList * cell_list;
uint sort_clicked_signal;
uint sort_column_changed_signal;
int sort_column_id;
int sort_order;
uint visible;
uint resizable;
uint clickable;
uint dirty;
uint show_sort_indicator;
uint maybe_reordered;
uint reorderable;
uint use_resized_width;
uint expand;
}
struct _GtkTreeSortableIface {
_GTypeInterface g_iface;
_BCD_func__15271 sort_column_changed;
_BCD_func__15272 get_sort_column_id;
_BCD_func__15273 set_sort_column_id;
_BCD_func__15274 set_sort_func;
_BCD_func__15275 set_default_sort_func;
_BCD_func__15276 has_default_sort_func;
}
struct _GtkTreeModelIface {
_GTypeInterface g_iface;
_BCD_func__15278 row_changed;
_BCD_func__15278 row_inserted;
_BCD_func__15278 row_has_child_toggled;
_BCD_func__15279 row_deleted;
_BCD_func__15280 rows_reordered;
_BCD_func__15281 get_flags;
_BCD_func__15282 get_n_columns;
_BCD_func__15283 get_column_type;
_BCD_func__15284 get_iter;
_BCD_func__15285 get_path;
_BCD_func__15286 get_value;
_BCD_func__15287 iter_next;
_BCD_func__15288 iter_children;
_BCD_func__15287 iter_has_child;
_BCD_func__15289 iter_n_children;
_BCD_func__15290 iter_nth_child;
_BCD_func__15288 iter_parent;
_BCD_func__15291 ref_node;
_BCD_func__15291 unref_node;
}
struct _GtkTreeIter {
int stamp;
void * user_data;
void * user_data2;
void * user_data3;
}
struct _GtkCellRendererClass {
_GtkObjectClass parent_class;
_BCD_func__15294 get_size;
_BCD_func__15295 render;
_BCD_func__15296 activate;
_BCD_func__15297 start_editing;
_BCD_func__15298 editing_canceled;
_BCD_func__15299 editing_started;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
}
struct _GtkCellRenderer {
_GtkObject parent;
float xalign;
float yalign;
int width;
int height;
ushort xpad;
ushort ypad;
uint mode;
uint visible;
uint is_expander;
uint is_expanded;
uint cell_background_set;
uint sensitive;
uint editing;
}
struct _GtkCellEditableIface {
_GTypeInterface g_iface;
_BCD_func__15302 editing_done;
_BCD_func__15302 remove_widget;
_BCD_func__15303 start_editing;
}
struct _GtkCalendarClass {
_GtkWidgetClass parent_class;
_BCD_func__15305 month_changed;
_BCD_func__15305 day_selected;
_BCD_func__15305 day_selected_double_click;
_BCD_func__15305 prev_month;
_BCD_func__15305 next_month;
_BCD_func__15305 prev_year;
_BCD_func__15305 next_year;
}
struct _GtkCalendar {
_GtkWidget widget;
_GtkStyle * header_style;
_GtkStyle * label_style;
int month;
int year;
int selected_day;
int [7] [6] day_month;
int [7] [6] day;
int num_marked_dates;
int [31] marked_date;
int display_flags;
_GdkColor [31] marked_date_color;
_GdkGC * gc;
_GdkGC * xor_gc;
int focus_row;
int focus_col;
int highlight_row;
int highlight_col;
void * priv;
char [32] grow_space;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkButtonClass {
_GtkBinClass parent_class;
_BCD_func__15309 pressed;
_BCD_func__15309 released;
_BCD_func__15309 clicked;
_BCD_func__15309 enter;
_BCD_func__15309 leave;
_BCD_func__15309 activate;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkButton {
_GtkBin bin;
_GdkDrawable * event_window;
char * label_text;
uint activate_timeout;
uint constructed;
uint in_button;
uint button_down;
uint relief;
uint use_underline;
uint use_stock;
uint depressed;
uint depress_on_activate;
uint focus_on_click;
}
struct _GtkImageIconNameData {
char * icon_name;
void * pixbuf;
uint theme_change_id;
}
struct _GtkImageAnimationData {
void * anim;
void * iter;
uint frame_timeout;
}
struct _GtkImageIconSetData {
void * icon_set;
}
struct _GtkImageStockData {
char * stock_id;
}
struct _GtkImagePixbufData {
void * pixbuf;
}
struct _GtkImageImageData {
_GdkImage * image;
}
struct _GtkImagePixmapData {
_GdkDrawable * pixmap;
}
struct _GtkImageClass {
_GtkMiscClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
union N9_GtkImage5__198E {
_GtkImagePixmapData pixmap;
_GtkImageImageData image;
_GtkImagePixbufData pixbuf;
_GtkImageStockData stock;
_GtkImageIconSetData icon_set;
_GtkImageAnimationData anim;
_GtkImageIconNameData name;
}
struct _GtkImage {
_GtkMisc misc;
int storage_type;
N9_GtkImage5__198E data;
_GdkDrawable * mask;
int icon_size;
}
union N14_GtkBindingArg5__196E {
int long_data;
double double_data;
char * string_data;
}
struct _GtkBindingArg {
uint arg_type;
N14_GtkBindingArg5__196E d;
}
struct _GtkBindingSignal {
_GtkBindingSignal * next;
char * signal_name;
uint n_args;
_GtkBindingArg * args;
}
struct _GtkBindingEntry {
uint keyval;
int modifiers;
_GtkBindingSet * binding_set;
uint destroyed;
uint in_emission;
_GtkBindingEntry * set_next;
_GtkBindingEntry * hash_next;
_GtkBindingSignal * signals;
}
struct _GtkBindingSet {
char * set_name;
int priority;
_GSList * widget_path_pspecs;
_GSList * widget_class_pspecs;
_GSList * class_branch_pspecs;
_GtkBindingEntry * entries;
_GtkBindingEntry * current;
uint parsed;
}
struct _GtkButtonBoxClass {
_GtkBoxClass parent_class;
}
struct _GtkButtonBox {
_GtkBox box;
int child_min_width;
int child_min_height;
int child_ipad_x;
int child_ipad_y;
int layout_style;
}
struct _GtkBoxChild {
_GtkWidget * widget;
ushort padding;
uint expand;
uint fill;
uint pack;
uint is_secondary;
}
struct _GtkBoxClass {
_GtkContainerClass parent_class;
}
struct _GtkBox {
_GtkContainer container;
_GList * children;
short spacing;
uint homogeneous;
}
struct _GtkAspectFrameClass {
_GtkFrameClass parent_class;
}
struct _GtkAspectFrame {
_GtkFrame frame;
float xalign;
float yalign;
float ratio;
int obey_child;
_GdkRectangle center_allocation;
}
struct _GtkFrameClass {
_GtkBinClass parent_class;
_BCD_func__15334 compute_child_allocation;
}
struct _GtkFrame {
_GtkBin bin;
_GtkWidget * label_widget;
short shadow_type;
float label_xalign;
float label_yalign;
_GdkRectangle child_allocation;
}
struct _GtkArrowClass {
_GtkMiscClass parent_class;
}
struct _GtkArrow {
_GtkMisc misc;
short arrow_type;
short shadow_type;
}
struct _GtkAlignmentClass {
_GtkBinClass parent_class;
}
struct _GtkAlignment {
_GtkBin bin;
float xalign;
float yalign;
float xscale;
float yscale;
}
struct _GtkRadioActionEntry {
char * name;
char * stock_id;
char * label;
char * accelerator;
char * tooltip;
int value;
}
struct _GtkToggleActionEntry {
char * name;
char * stock_id;
char * label;
char * accelerator;
char * tooltip;
_BCD_func__10655 callback;
int is_active;
}
struct _GtkActionEntry {
char * name;
char * stock_id;
char * label;
char * accelerator;
char * tooltip;
_BCD_func__10655 callback;
}
struct _GtkActionGroupClass {
_GObjectClass parent_class;
_BCD_func__15344 get_action;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkActionGroup {
_GObject parent;
void * private_data;
}
struct GtkMenuEntry {
char * path;
char * accelerator;
_BCD_func__10623 callback;
void * callback_data;
_GtkWidget * widget;
}
struct _GtkItemFactoryItem {
char * path;
_GSList * widgets;
}
struct _GtkItemFactoryEntry {
char * path;
char * accelerator;
_BCD_func__10655 callback;
uint callback_action;
char * item_type;
void * extra_data;
}
struct _GtkItemFactoryClass {
_GtkObjectClass object_class;
void * item_ht;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkItemFactory {
_GtkObject object;
char * path;
_GtkAccelGroup * accel_group;
_GtkWidget * widget;
_GSList * items;
_BCD_func__10657 translate_func;
void * translate_data;
_BCD_func__11672 translate_notify;
}
struct _GtkActionClass {
_GObjectClass parent_class;
_BCD_func__15352 activate;
uint menu_item_type;
uint toolbar_item_type;
_BCD_func__15353 create_menu_item;
_BCD_func__15353 create_tool_item;
_BCD_func__15354 connect_proxy;
_BCD_func__15354 disconnect_proxy;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkAction {
_GObject object;
void * private_data;
}
struct _GtkAccessibleClass {
_AtkObjectClass parent_class;
_BCD_func__15357 connect_widget_destroyed;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkAccessible {
_AtkObject parent;
_GtkWidget * widget;
}
struct _GtkAccelLabelClass {
_GtkLabelClass parent_class;
char * signal_quote1;
char * signal_quote2;
char * mod_name_shift;
char * mod_name_control;
char * mod_name_alt;
char * mod_separator;
char * accel_seperator;
uint latin1_to_char;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkAccelLabel {
_GtkLabel label;
uint gtk_reserved;
uint accel_padding;
_GtkWidget * accel_widget;
_GClosure * accel_closure;
_GtkAccelGroup * accel_group;
char * accel_string;
ushort accel_string_width;
}
struct _GtkLabelClass {
_GtkMiscClass parent_class;
_BCD_func__15485 move_cursor;
_BCD_func__15486 copy_clipboard;
_BCD_func__15487 populate_popup;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkLabel {
_GtkMisc misc;
char * label;
uint jtype;
uint wrap;
uint use_underline;
uint use_markup;
uint ellipsize;
uint mnemonic_keyval;
char * text;
void * attrs;
void * effective_attrs;
void * layout;
_GtkWidget * mnemonic_widget;
_GtkWindow * mnemonic_window;
void * select_info;
}
struct _GtkMenuClass {
_GtkMenuShellClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkMenu {
_GtkMenuShell menu_shell;
_GtkWidget * parent_menu_item;
_GtkWidget * old_active_menu_item;
_GtkAccelGroup * accel_group;
char * accel_path;
_BCD_func__11073 position_func;
void * position_func_data;
uint toggle_size;
_GtkWidget * toplevel;
_GtkWidget * tearoff_window;
_GtkWidget * tearoff_hbox;
_GtkWidget * tearoff_scrollbar;
_GtkAdjustment * tearoff_adjustment;
_GdkDrawable * view_window;
_GdkDrawable * bin_window;
int scroll_offset;
int saved_scroll_offset;
int scroll_step;
uint timeout_id;
void * navigation_region;
uint navigation_timeout;
uint needs_destruction_ref_count;
uint torn_off;
uint tearoff_active;
uint scroll_fast;
uint upper_arrow_visible;
uint lower_arrow_visible;
uint upper_arrow_prelight;
uint lower_arrow_prelight;
}
struct _GtkMenuShellClass {
_GtkContainerClass parent_class;
uint submenu_placement;
_BCD_func__15492 deactivate;
_BCD_func__15492 selection_done;
_BCD_func__15493 move_current;
_BCD_func__15494 activate_current;
_BCD_func__15492 cancel;
_BCD_func__15495 select_item;
_BCD_func__15496 insert;
_BCD_func__15497 get_popup_delay;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
}
struct _GtkMenuShell {
_GtkContainer container;
_GList * children;
_GtkWidget * active_menu_item;
_GtkWidget * parent_menu_shell;
uint button;
uint activate_time;
uint active;
uint have_grab;
uint have_xgrab;
uint ignore_leave;
uint menu_flag;
uint ignore_enter;
}
struct _GtkMiscClass {
_GtkWidgetClass parent_class;
}
struct _GtkMisc {
_GtkWidget widget;
float xalign;
float yalign;
ushort xpad;
ushort ypad;
}
struct _GtkAboutDialogClass {
_GtkDialogClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkAboutDialog {
_GtkDialog parent_instance;
void * private_data;
}
struct _GtkDialogClass {
_GtkWindowClass parent_class;
_BCD_func__15504 response;
_BCD_func__15505 close;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkDialog {
_GtkWindow window;
_GtkWidget * vbox;
_GtkWidget * action_area;
_GtkWidget * separator;
}
struct _GtkWindowGroupClass {
_GObjectClass parent_class;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkWindowGroup {
_GObject parent_instance;
_GSList * grabs;
}
struct _GtkWindowClass {
_GtkBinClass parent_class;
_BCD_func__15510 set_focus;
_BCD_func__15511 frame_event;
_BCD_func__15512 activate_focus;
_BCD_func__15512 activate_default;
_BCD_func__15513 move_focus;
_BCD_func__15512 keys_changed;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkWindow {
_GtkBin bin;
char * title;
char * wmclass_name;
char * wmclass_class;
char * wm_role;
_GtkWidget * focus_widget;
_GtkWidget * default_widget;
_GtkWindow * transient_parent;
void * geometry_info;
_GdkDrawable * frame;
_GtkWindowGroup * group;
ushort configure_request_count;
uint allow_shrink;
uint allow_grow;
uint configure_notify_received;
uint need_default_position;
uint need_default_size;
uint position;
uint type;
uint has_user_ref_count;
uint has_focus;
uint modal;
uint destroy_with_parent;
uint has_frame;
uint iconify_initially;
uint stick_initially;
uint maximize_initially;
uint decorated;
uint type_hint;
uint gravity;
uint is_active;
uint has_toplevel_focus;
uint frame_left;
uint frame_top;
uint frame_right;
uint frame_bottom;
uint keys_changed_handler;
int mnemonic_modifier;
_GdkScreen * screen;
}
struct _GtkBinClass {
_GtkContainerClass parent_class;
}
struct _GtkBin {
_GtkContainer container;
_GtkWidget * child;
}
struct _GtkContainerClass {
_GtkWidgetClass parent_class;
_BCD_func__15518 add;
_BCD_func__15518 remove;
_BCD_func__15519 check_resize;
_BCD_func__15520 forall;
_BCD_func__15518 set_focus_child;
_BCD_func__15521 child_type;
_BCD_func__15522 composite_name;
_BCD_func__15523 set_child_property;
_BCD_func__15524 get_child_property;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkContainer {
_GtkWidget widget;
_GtkWidget * focus_child;
uint border_width;
uint need_resize;
uint resize_mode;
uint reallocate_redraws;
uint has_focus_chain;
}
struct _GtkWidgetShapeInfo {
short offset_x;
short offset_y;
_GdkDrawable * shape_mask;
}
struct _GtkWidgetAuxInfo {
int x;
int y;
int width;
int height;
uint x_set;
uint y_set;
}
struct _GtkWidgetClass {
_GtkObjectClass parent_class;
uint activate_signal;
uint set_scroll_adjustments_signal;
_BCD_func__15529 dispatch_child_properties_changed;
_BCD_func__15530 show;
_BCD_func__15530 show_all;
_BCD_func__15530 hide;
_BCD_func__15530 hide_all;
_BCD_func__15530 map;
_BCD_func__15530 unmap;
_BCD_func__15530 realize;
_BCD_func__15530 unrealize;
_BCD_func__15531 size_request;
_BCD_func__15532 size_allocate;
_BCD_func__15533 state_changed;
_BCD_func__15534 parent_set;
_BCD_func__15534 hierarchy_changed;
_BCD_func__15535 style_set;
_BCD_func__15536 direction_changed;
_BCD_func__15537 grab_notify;
_BCD_func__15538 child_notify;
_BCD_func__15539 mnemonic_activate;
_BCD_func__15530 grab_focus;
_BCD_func__15540 focus;
_BCD_func__15541 event;
_BCD_func__15542 button_press_event;
_BCD_func__15542 button_release_event;
_BCD_func__15543 scroll_event;
_BCD_func__15544 motion_notify_event;
_BCD_func__15545 delete_event;
_BCD_func__15545 destroy_event;
_BCD_func__15546 expose_event;
_BCD_func__15547 key_press_event;
_BCD_func__15547 key_release_event;
_BCD_func__15548 enter_notify_event;
_BCD_func__15548 leave_notify_event;
_BCD_func__15549 configure_event;
_BCD_func__15550 focus_in_event;
_BCD_func__15550 focus_out_event;
_BCD_func__15545 map_event;
_BCD_func__15545 unmap_event;
_BCD_func__15551 property_notify_event;
_BCD_func__15552 selection_clear_event;
_BCD_func__15552 selection_request_event;
_BCD_func__15552 selection_notify_event;
_BCD_func__15553 proximity_in_event;
_BCD_func__15553 proximity_out_event;
_BCD_func__15554 visibility_notify_event;
_BCD_func__15555 client_event;
_BCD_func__15545 no_expose_event;
_BCD_func__15556 window_state_event;
_BCD_func__15557 selection_get;
_BCD_func__15558 selection_received;
_BCD_func__15559 drag_begin;
_BCD_func__15559 drag_end;
_BCD_func__15560 drag_data_get;
_BCD_func__15559 drag_data_delete;
_BCD_func__15561 drag_leave;
_BCD_func__15562 drag_motion;
_BCD_func__15562 drag_drop;
_BCD_func__15563 drag_data_received;
_BCD_func__15564 popup_menu;
_BCD_func__15565 show_help;
_BCD_func__15566 get_accessible;
_BCD_func__15567 screen_changed;
_BCD_func__15568 can_activate_accel;
_BCD_func__15569 grab_broken_event;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
_BCD_func__10655 _gtk_reserved5;
_BCD_func__10655 _gtk_reserved6;
_BCD_func__10655 _gtk_reserved7;
}
struct _GtkSelectionData {
void * selection;
void * target;
void * type;
int format;
char * data;
int length;
_GdkDisplay * display;
}
struct _GtkRequisition {
int width;
int height;
}
struct _GtkSettingsValue {
char * origin;
_GValue value;
}
struct _GtkSettingsClass {
_GObjectClass parent_class;
}
struct _GtkRcStyleClass {
_GObjectClass parent_class;
_BCD_func__15600 create_rc_style;
_BCD_func__15601 parse;
_BCD_func__15602 merge;
_BCD_func__15603 create_style;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkIconFactory {
_GObject parent_instance;
void * icons;
}
struct _GtkWidget {
_GtkObject object;
ushort private_flags;
char state;
char saved_state;
char * name;
_GtkStyle * style;
_GtkRequisition requisition;
_GdkRectangle allocation;
_GdkDrawable * window;
_GtkWidget * parent;
}
struct _GtkSettings {
_GObject parent_instance;
void * queued_settings;
void * property_values;
void * rc_context;
_GdkScreen * screen;
}
struct _GtkRcProperty {
uint type_name;
uint property_name;
char * origin;
_GValue value;
}
struct _GtkRcStyle {
_GObject parent_instance;
char * name;
char * [5] bg_pixmap_name;
void * font_desc;
int [5] color_flags;
_GdkColor [5] fg;
_GdkColor [5] bg;
_GdkColor [5] text;
_GdkColor [5] base;
int xthickness;
int ythickness;
_GArray * rc_properties;
_GSList * rc_style_lists;
_GSList * icon_factories;
uint engine_specified;
}
struct _GtkStyleClass {
_GObjectClass parent_class;
_BCD_func__15610 realize;
_BCD_func__15610 unrealize;
_BCD_func__15611 copy;
_BCD_func__15612 clone;
_BCD_func__15613 init_from_rc;
_BCD_func__15614 set_background;
_BCD_func__15615 render_icon;
_BCD_func__15616 draw_hline;
_BCD_func__15616 draw_vline;
_BCD_func__15617 draw_shadow;
_BCD_func__15618 draw_polygon;
_BCD_func__15619 draw_arrow;
_BCD_func__15617 draw_diamond;
_BCD_func__15620 draw_string;
_BCD_func__15617 draw_box;
_BCD_func__15617 draw_flat_box;
_BCD_func__15617 draw_check;
_BCD_func__15617 draw_option;
_BCD_func__15617 draw_tab;
_BCD_func__15621 draw_shadow_gap;
_BCD_func__15621 draw_box_gap;
_BCD_func__15622 draw_extension;
_BCD_func__15623 draw_focus;
_BCD_func__15624 draw_slider;
_BCD_func__15624 draw_handle;
_BCD_func__15625 draw_expander;
_BCD_func__15626 draw_layout;
_BCD_func__15627 draw_resize_grip;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
_BCD_func__10655 _gtk_reserved5;
_BCD_func__10655 _gtk_reserved6;
_BCD_func__10655 _gtk_reserved7;
_BCD_func__10655 _gtk_reserved8;
_BCD_func__10655 _gtk_reserved9;
_BCD_func__10655 _gtk_reserved10;
_BCD_func__10655 _gtk_reserved11;
_BCD_func__10655 _gtk_reserved12;
}
struct _GtkStyle {
_GObject parent_instance;
_GdkColor [5] fg;
_GdkColor [5] bg;
_GdkColor [5] light;
_GdkColor [5] dark;
_GdkColor [5] mid;
_GdkColor [5] text;
_GdkColor [5] base;
_GdkColor [5] text_aa;
_GdkColor black;
_GdkColor white;
void * font_desc;
int xthickness;
int ythickness;
_GdkGC * [5] fg_gc;
_GdkGC * [5] bg_gc;
_GdkGC * [5] light_gc;
_GdkGC * [5] dark_gc;
_GdkGC * [5] mid_gc;
_GdkGC * [5] text_gc;
_GdkGC * [5] base_gc;
_GdkGC * [5] text_aa_gc;
_GdkGC * black_gc;
_GdkGC * white_gc;
_GdkDrawable * [5] bg_pixmap;
int attach_count;
int depth;
_GdkColormap * colormap;
_GdkFont * private_font;
void * private_font_desc;
_GtkRcStyle * rc_style;
_GSList * styles;
_GArray * property_cache;
_GSList * icon_factories;
}
struct _GtkBorder {
int left;
int right;
int top;
int bottom;
}
struct _GtkAdjustmentClass {
_GtkObjectClass parent_class;
_BCD_func__15631 changed;
_BCD_func__15631 value_changed;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkAdjustment {
_GtkObject parent_instance;
double lower;
double upper;
double value;
double step_increment;
double page_increment;
double page_size;
}
struct _GtkObjectClass {
_GObjectClass parent_class;
_BCD_func__15634 set_arg;
_BCD_func__15634 get_arg;
_BCD_func__15635 destroy;
}
struct _GtkTypeInfo {
char * type_name;
uint object_size;
uint class_size;
_BCD_func__11672 class_init_func;
_BCD_func__11683 object_init_func;
void * reserved_1;
void * reserved_2;
_BCD_func__11672 base_class_init_func;
}
struct _GtkObject {
_GObject parent_instance;
uint flags;
}
struct N7_GtkArg5__1745__175E {
_BCD_func__10655 f;
void * d;
}
union N7_GtkArg5__174E {
char char_data;
char uchar_data;
int bool_data;
int int_data;
uint uint_data;
int long_data;
uint ulong_data;
float float_data;
double double_data;
char * string_data;
_GtkObject * object_data;
void * pointer_data;
N7_GtkArg5__1745__175E signal_data;
}
struct _GtkArg {
uint type;
char * name;
N7_GtkArg5__174E d;
}
struct _GtkAccelGroupEntry {
_GtkAccelKey key;
_GClosure * closure;
uint accel_path_quark;
}
struct _GtkAccelKey {
uint accel_key;
int accel_mods;
uint accel_flags;
}
struct _GtkAccelGroupClass {
_GObjectClass parent_class;
_BCD_func__15651 accel_changed;
_BCD_func__10655 _gtk_reserved1;
_BCD_func__10655 _gtk_reserved2;
_BCD_func__10655 _gtk_reserved3;
_BCD_func__10655 _gtk_reserved4;
}
struct _GtkAccelGroup {
_GObject parent;
uint lock_count;
int modifier_mask;
_GSList * acceleratables;
uint n_accels;
_GtkAccelGroupEntry * priv_accels;
}
extern (C) extern uint gtk_interface_age;
extern (C) extern uint gtk_binary_age;
extern (C) extern uint gtk_micro_version;
extern (C) extern uint gtk_minor_version;
extern (C) extern uint gtk_major_version;
extern (C) extern uint gtk_debug_flags;
