/* THIS FILE GENERATED BY bcd.gen */
module bcd.glib2.glib_object;
align(4):
struct _GStaticMutex {}
struct _GSystemThread {}
const char[] G_GNUC_FUNCTION = "";
const char[] G_GNUC_PRETTY_FUNCTION = "";
const double G_E = 2.7182818284590452353602874713526624977572470937000;
const double G_LN2 = 0.69314718055994530941723212145817656807550013436026;
const double G_LN10 = 2.3025850929940456840179914546843642076011014886288;
const double G_PI = 3.1415926535897932384626433832795028841971693993751;
const double G_PI_2 = 1.5707963267948966192313216916397514420985846996876;
const double G_PI_4 = 0.78539816339744830961566084581987572104929234984378;
const double G_SQRT2 = 1.4142135623730950488016887242096980785696718753769;
const int G_LITTLE_ENDIAN = 1234;
const int G_BIG_ENDIAN = 4321;
const int G_PDP_ENDIAN = 3412;
const double G_MUTEX_DEBUG_MAGIC = 0xf8e18ad7;
const int G_ALLOC_ONLY = 1;
const int G_ALLOC_AND_FREE = 2;
const int G_DATALIST_FLAGS_MASK = 0x3;
const int G_PRIORITY_HIGH = -100;
const int G_PRIORITY_DEFAULT = 0;
const int G_PRIORITY_HIGH_IDLE = 100;
const int G_PRIORITY_DEFAULT_IDLE = 200;
const int G_PRIORITY_LOW = 300;
const char[] G_DIR_SEPARATOR_S = "/";
const char[] G_SEARCHPATH_SEPARATOR_S = ":";
const char[] G_OPTION_REMAINING = "";
const char[] G_CSET_A_2_Z = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const char[] G_CSET_a_2_z = "abcdefghijklmnopqrstuvwxyz";
const char[] G_CSET_DIGITS = "0123456789";
const char[] G_CSET_LATINC = "\300\301\302\303\304\305\306";
const char[] G_CSET_LATINS = "\337\340\341\342\343\344\345\346";
const int G_USEC_PER_SEC = 1000000;
const int G_SIGNAL_FLAGS_MASK = 0x7f;
const int G_SIGNAL_MATCH_MASK = 0x3f;
alias char gchar;
alias char * gchararray;
alias _GValueArray GValueArray;
alias uint guint;
alias _GValue GValue;
alias void GTypePlugin;
alias _GInterfaceInfo GInterfaceInfo;
alias void function(void *, uint, uint, _GInterfaceInfo *) _BCD_func__1791;
alias _BCD_func__1791 GTypePluginCompleteInterfaceInfo;
alias _GTypeInfo GTypeInfo;
alias _GTypeValueTable GTypeValueTable;
alias void function(void *, uint, _GTypeInfo *, _GTypeValueTable *) _BCD_func__1792;
alias _BCD_func__1792 GTypePluginCompleteTypeInfo;
alias void function(void *) _BCD_func__1793;
alias _BCD_func__1793 GTypePluginUnuse;
alias _BCD_func__1793 GTypePluginUse;
alias _GTypePluginClass GTypePluginClass;
alias _GTypeInterface GTypeInterface;
alias _GTypeModuleClass GTypeModuleClass;
alias _GObjectClass GObjectClass;
alias int gint;
alias int gboolean;
alias _GTypeModule GTypeModule;
alias int function(_GTypeModule *) _BCD_func__2787;
alias void function(_GTypeModule *) _BCD_func__2788;
alias void function() _BCD_func__1993;
alias _GObject GObject;
alias _GSList GSList;
alias _GParamSpecOverride GParamSpecOverride;
alias _GParamSpec GParamSpec;
alias _GParamSpecObject GParamSpecObject;
alias _GParamSpecValueArray GParamSpecValueArray;
alias _GParamSpecPointer GParamSpecPointer;
alias _GParamSpecBoxed GParamSpecBoxed;
alias _GParamSpecParam GParamSpecParam;
alias _GParamSpecString GParamSpecString;
alias _GParamSpecDouble GParamSpecDouble;
alias double gdouble;
alias _GParamSpecFloat GParamSpecFloat;
alias float gfloat;
alias _GParamSpecFlags GParamSpecFlags;
alias _GFlagsClass GFlagsClass;
alias _GParamSpecEnum GParamSpecEnum;
alias _GEnumClass GEnumClass;
alias _GParamSpecUnichar GParamSpecUnichar;
alias uint gunichar;
alias _GParamSpecUInt64 GParamSpecUInt64;
alias _GParamSpecInt64 GParamSpecInt64;
alias _GParamSpecULong GParamSpecULong;
alias uint gulong;
alias _GParamSpecLong GParamSpecLong;
alias int glong;
alias _GParamSpecUInt GParamSpecUInt;
alias _GParamSpecInt GParamSpecInt;
alias _GParamSpecBoolean GParamSpecBoolean;
alias _GParamSpecUChar GParamSpecUChar;
alias _GParamSpecChar GParamSpecChar;
alias void function(void *, _GObject *, int) _BCD_func__1937;
alias _BCD_func__1937 GToggleNotify;
alias void function(void *, _GObject *) _BCD_func__1943;
alias _BCD_func__1943 GWeakNotify;
alias void function(_GObject *) _BCD_func__1944;
alias _BCD_func__1944 GObjectFinalizeFunc;
alias void function(_GObject *, uint, _GValue *, _GParamSpec *) _BCD_func__1945;
alias _BCD_func__1945 GObjectSetPropertyFunc;
alias void function(_GObject *, uint, _GValue *, _GParamSpec *) _BCD_func__1946;
alias _BCD_func__1946 GObjectGetPropertyFunc;
alias _GObjectConstructParam GObjectConstructParam;
alias _GTypeClass GTypeClass;
alias _GObject * function(uint, uint, _GObjectConstructParam *) _BCD_func__2813;
alias void function(_GObject *, uint, _GParamSpec * *) _BCD_func__2814;
alias void function(_GObject *, _GParamSpec *) _BCD_func__2815;
alias void * gpointer;
alias _GTypeInstance GTypeInstance;
alias void GData;
enum GSignalMatchType {
G_SIGNAL_MATCH_ID=1,
G_SIGNAL_MATCH_DETAIL=2,
G_SIGNAL_MATCH_CLOSURE=4,
G_SIGNAL_MATCH_FUNC=8,
G_SIGNAL_MATCH_DATA=16,
G_SIGNAL_MATCH_UNBLOCKED=32,
}
enum GConnectFlags {
G_CONNECT_AFTER=1,
G_CONNECT_SWAPPED=2,
}
enum GSignalFlags {
G_SIGNAL_RUN_FIRST=1,
G_SIGNAL_RUN_LAST=2,
G_SIGNAL_RUN_CLEANUP=4,
G_SIGNAL_NO_RECURSE=8,
G_SIGNAL_DETAILED=16,
G_SIGNAL_ACTION=32,
G_SIGNAL_NO_HOOKS=64,
}
alias _GSignalInvocationHint GSignalInvocationHint;
alias int function(_GSignalInvocationHint *, _GValue *, _GValue *, void *) _BCD_func__1971;
alias _BCD_func__1971 GSignalAccumulator;
alias int function(_GSignalInvocationHint *, uint, _GValue *, void *) _BCD_func__1972;
alias _BCD_func__1972 GSignalEmissionHook;
alias _GClosure GClosure;
alias void function(_GClosure *, _GValue *, uint, _GValue *, void *, void *) _BCD_func__1973;
alias _BCD_func__1973 GClosureMarshal;
alias _BCD_func__1973 GSignalCMarshaller;
alias uint GQuark;
alias _GSignalQuery GSignalQuery;
alias uint GType;
alias _GCClosure GCClosure;
alias void function(void *, _GClosure *) _BCD_func__1992;
alias _BCD_func__1992 GClosureNotify;
alias _BCD_func__1993 GCallback;
alias _GClosureNotifyData GClosureNotifyData;
alias _GParamSpecTypeInfo GParamSpecTypeInfo;
alias void function(_GParamSpec *) _BCD_func__2824;
alias void function(_GParamSpec *, _GValue *) _BCD_func__2825;
alias int function(_GParamSpec *, _GValue *) _BCD_func__2826;
alias int function(_GParamSpec *, _GValue *, _GValue *) _BCD_func__2827;
alias void GParamSpecPool;
alias _GParameter GParameter;
alias _GParamSpecClass GParamSpecClass;
enum GParamFlags {
G_PARAM_READABLE=1,
G_PARAM_WRITABLE=2,
G_PARAM_CONSTRUCT=4,
G_PARAM_CONSTRUCT_ONLY=8,
G_PARAM_LAX_VALIDATION=16,
G_PARAM_STATIC_NAME=32,
G_PARAM_PRIVATE=32,
G_PARAM_STATIC_NICK=64,
G_PARAM_STATIC_BLURB=128,
}
alias void function(_GValue *, _GValue *) _BCD_func__2051;
alias _BCD_func__2051 GValueTransform;
alias _GFlagsValue GFlagsValue;
alias _GEnumValue GEnumValue;
alias char * * GStrv;
alias void function(void *) _BCD_func__2079;
alias _BCD_func__2079 GBoxedFreeFunc;
alias void * function(void *) _BCD_func__2080;
alias _BCD_func__2080 GBoxedCopyFunc;
enum GTypeFlags {
G_TYPE_FLAG_ABSTRACT=16,
G_TYPE_FLAG_VALUE_ABSTRACT=32,
}
enum GTypeFundamentalFlags {
G_TYPE_FLAG_CLASSED=1,
G_TYPE_FLAG_INSTANTIATABLE=2,
G_TYPE_FLAG_DERIVABLE=4,
G_TYPE_FLAG_DEEP_DERIVABLE=8,
}
alias void function(void *, void *) _BCD_func__2084;
alias _BCD_func__2084 GTypeInterfaceCheckFunc;
alias int function(void *, _GTypeClass *) _BCD_func__2085;
alias _BCD_func__2085 GTypeClassCacheFunc;
alias _BCD_func__2084 GInterfaceFinalizeFunc;
alias _BCD_func__2084 GInterfaceInitFunc;
alias void function(_GTypeInstance *, void *) _BCD_func__2086;
alias _BCD_func__2086 GInstanceInitFunc;
alias _BCD_func__2084 GClassFinalizeFunc;
alias _BCD_func__2084 GClassInitFunc;
alias _BCD_func__2079 GBaseFinalizeFunc;
alias _BCD_func__2079 GBaseInitFunc;
enum GTypeDebugFlags {
G_TYPE_DEBUG_NONE=0,
G_TYPE_DEBUG_OBJECTS=1,
G_TYPE_DEBUG_SIGNALS=2,
G_TYPE_DEBUG_MASK=3,
}
alias _GTypeQuery GTypeQuery;
alias void function(_GValue *) _BCD_func__2837;
alias void * function(_GValue *) _BCD_func__2838;
alias void GTypeCValue;
alias char * function(_GValue *, uint, void *, uint) _BCD_func__2839;
alias char * function(_GValue *, uint, void *, uint) _BCD_func__2840;
alias _GTypeFundamentalInfo GTypeFundamentalInfo;
alias void * gconstpointer;
alias int function(void *, void *, void *) _BCD_func__2140;
alias _BCD_func__2140 GTraverseFunc;
alias void GTree;
alias void GTimer;
alias _GThreadPool GThreadPool;
alias _BCD_func__2084 GFunc;
enum GAsciiType {
G_ASCII_ALNUM=1,
G_ASCII_ALPHA=2,
G_ASCII_CNTRL=4,
G_ASCII_DIGIT=8,
G_ASCII_GRAPH=16,
G_ASCII_LOWER=32,
G_ASCII_PRINT=64,
G_ASCII_PUNCT=128,
G_ASCII_SPACE=256,
G_ASCII_UPPER=512,
G_ASCII_XDIGIT=1024,
}
enum GSpawnFlags {
G_SPAWN_LEAVE_DESCRIPTORS_OPEN=1,
G_SPAWN_DO_NOT_REAP_CHILD=2,
G_SPAWN_SEARCH_PATH=4,
G_SPAWN_STDOUT_TO_DEV_NULL=8,
G_SPAWN_STDERR_TO_DEV_NULL=16,
G_SPAWN_CHILD_INHERITS_STDIN=32,
G_SPAWN_FILE_AND_ARGV_ZERO=64,
}
alias _BCD_func__2079 GSpawnChildSetupFunc;
enum GSpawnError {
G_SPAWN_ERROR_FORK=0,
G_SPAWN_ERROR_READ=1,
G_SPAWN_ERROR_CHDIR=2,
G_SPAWN_ERROR_ACCES=3,
G_SPAWN_ERROR_PERM=4,
G_SPAWN_ERROR_2BIG=5,
G_SPAWN_ERROR_NOEXEC=6,
G_SPAWN_ERROR_NAMETOOLONG=7,
G_SPAWN_ERROR_NOENT=8,
G_SPAWN_ERROR_NOMEM=9,
G_SPAWN_ERROR_NOTDIR=10,
G_SPAWN_ERROR_LOOP=11,
G_SPAWN_ERROR_TXTBUSY=12,
G_SPAWN_ERROR_IO=13,
G_SPAWN_ERROR_NFILE=14,
G_SPAWN_ERROR_MFILE=15,
G_SPAWN_ERROR_INVAL=16,
G_SPAWN_ERROR_ISDIR=17,
G_SPAWN_ERROR_LIBBAD=18,
G_SPAWN_ERROR_FAILED=19,
}
enum GShellError {
G_SHELL_ERROR_BAD_QUOTING=0,
G_SHELL_ERROR_EMPTY_STRING=1,
G_SHELL_ERROR_FAILED=2,
}
enum GTokenType {
G_TOKEN_EOF=0,
G_TOKEN_LEFT_PAREN=40,
G_TOKEN_RIGHT_PAREN=41,
G_TOKEN_LEFT_CURLY=123,
G_TOKEN_RIGHT_CURLY=125,
G_TOKEN_LEFT_BRACE=91,
G_TOKEN_RIGHT_BRACE=93,
G_TOKEN_EQUAL_SIGN=61,
G_TOKEN_COMMA=44,
G_TOKEN_NONE=256,
G_TOKEN_ERROR=257,
G_TOKEN_CHAR=258,
G_TOKEN_BINARY=259,
G_TOKEN_OCTAL=260,
G_TOKEN_INT=261,
G_TOKEN_HEX=262,
G_TOKEN_FLOAT=263,
G_TOKEN_STRING=264,
G_TOKEN_SYMBOL=265,
G_TOKEN_IDENTIFIER=266,
G_TOKEN_IDENTIFIER_NULL=267,
G_TOKEN_COMMENT_SINGLE=268,
G_TOKEN_COMMENT_MULTI=269,
G_TOKEN_LAST=270,
}
enum GErrorType {
G_ERR_UNKNOWN=0,
G_ERR_UNEXP_EOF=1,
G_ERR_UNEXP_EOF_IN_STRING=2,
G_ERR_UNEXP_EOF_IN_COMMENT=3,
G_ERR_NON_DIGIT_IN_CONST=4,
G_ERR_DIGIT_RADIX=5,
G_ERR_FLOAT_RADIX=6,
G_ERR_FLOAT_MALFORMED=7,
}
alias _GScanner GScanner;
alias void function(_GScanner *, char *, int) _BCD_func__2159;
alias _BCD_func__2159 GScannerMsgFunc;
alias _GTokenValue GTokenValue;
alias char guchar;
alias _GScannerConfig GScannerConfig;
alias void GHashTable;
alias _GTuples GTuples;
alias void GRelation;
alias void GRand;
alias _GQueue GQueue;
alias _GList GList;
alias void GPatternSpec;
enum GOptionError {
G_OPTION_ERROR_UNKNOWN_OPTION=0,
G_OPTION_ERROR_BAD_VALUE=1,
G_OPTION_ERROR_FAILED=2,
}
alias void GOptionContext;
alias void GOptionGroup;
alias _GError GError;
alias void function(void *, void *, void *, _GError * *) _BCD_func__2243;
alias _BCD_func__2243 GOptionErrorFunc;
alias int function(void *, void *, void *, _GError * *) _BCD_func__2244;
alias _BCD_func__2244 GOptionParseFunc;
alias int function(char *, char *, void *, _GError * *) _BCD_func__2245;
alias _BCD_func__2245 GOptionArgFunc;
enum GOptionArg {
G_OPTION_ARG_NONE=0,
G_OPTION_ARG_STRING=1,
G_OPTION_ARG_INT=2,
G_OPTION_ARG_CALLBACK=3,
G_OPTION_ARG_FILENAME=4,
G_OPTION_ARG_STRING_ARRAY=5,
G_OPTION_ARG_FILENAME_ARRAY=6,
}
enum GOptionFlags {
G_OPTION_FLAG_HIDDEN=1,
G_OPTION_FLAG_IN_MAIN=2,
G_OPTION_FLAG_REVERSE=4,
G_OPTION_FLAG_NO_ARG=8,
G_OPTION_FLAG_FILENAME=16,
G_OPTION_FLAG_OPTIONAL_ARG=32,
G_OPTION_FLAG_NOALIAS=64,
}
alias _GOptionEntry GOptionEntry;
alias void * function(void *, void *) _BCD_func__2257;
alias _BCD_func__2257 GCopyFunc;
alias _GNode GNode;
alias void function(_GNode *, void *) _BCD_func__2258;
alias _BCD_func__2258 GNodeForeachFunc;
alias int function(_GNode *, void *) _BCD_func__2259;
alias _BCD_func__2259 GNodeTraverseFunc;
enum GTraverseType {
G_IN_ORDER=0,
G_PRE_ORDER=1,
G_POST_ORDER=2,
G_LEVEL_ORDER=3,
}
enum GTraverseFlags {
G_TRAVERSE_LEAVES=1,
G_TRAVERSE_NON_LEAVES=2,
G_TRAVERSE_ALL=3,
G_TRAVERSE_MASK=3,
G_TRAVERSE_LEAFS=1,
G_TRAVERSE_NON_LEAFS=2,
}
alias void function(char *) _BCD_func__2267;
alias _BCD_func__2267 GPrintFunc;
enum GLogLevelFlags {
G_LOG_FLAG_RECURSION=1,
G_LOG_FLAG_FATAL=2,
G_LOG_LEVEL_ERROR=4,
G_LOG_LEVEL_CRITICAL=8,
G_LOG_LEVEL_WARNING=16,
G_LOG_LEVEL_MESSAGE=32,
G_LOG_LEVEL_INFO=64,
G_LOG_LEVEL_DEBUG=128,
G_LOG_LEVEL_MASK=-4,
}
alias void function(char *, int, char *, void *) _BCD_func__2269;
alias _BCD_func__2269 GLogFunc;
alias _GMarkupParser GMarkupParser;
alias void GMarkupParseContext;
alias void function(void *, char *, char * *, char * *, void *, _GError * *) _BCD_func__2859;
alias void function(void *, char *, void *, _GError * *) _BCD_func__2860;
alias void function(void *, char *, uint, void *, _GError * *) _BCD_func__2861;
alias void function(void *, _GError *, void *) _BCD_func__2862;
enum GMarkupParseFlags {
G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG=1,
}
enum GMarkupError {
G_MARKUP_ERROR_BAD_UTF8=0,
G_MARKUP_ERROR_EMPTY=1,
G_MARKUP_ERROR_PARSE=2,
G_MARKUP_ERROR_UNKNOWN_ELEMENT=3,
G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE=4,
G_MARKUP_ERROR_INVALID_CONTENT=5,
}
alias void GMappedFile;
enum GKeyFileFlags {
G_KEY_FILE_NONE=0,
G_KEY_FILE_KEEP_COMMENTS=1,
G_KEY_FILE_KEEP_TRANSLATIONS=2,
}
alias void GKeyFile;
enum GKeyFileError {
G_KEY_FILE_ERROR_UNKNOWN_ENCODING=0,
G_KEY_FILE_ERROR_PARSE=1,
G_KEY_FILE_ERROR_NOT_FOUND=2,
G_KEY_FILE_ERROR_KEY_NOT_FOUND=3,
G_KEY_FILE_ERROR_GROUP_NOT_FOUND=4,
G_KEY_FILE_ERROR_INVALID_VALUE=5,
}
alias _GIOChannel GIOChannel;
enum GIOCondition {
G_IO_IN=1,
G_IO_OUT=4,
G_IO_PRI=2,
G_IO_ERR=8,
G_IO_HUP=16,
G_IO_NVAL=32,
}
alias int function(_GIOChannel *, int, void *) _BCD_func__2287;
alias _BCD_func__2287 GIOFunc;
enum GIOFlags {
G_IO_FLAG_APPEND=1,
G_IO_FLAG_NONBLOCK=2,
G_IO_FLAG_IS_READABLE=4,
G_IO_FLAG_IS_WRITEABLE=8,
G_IO_FLAG_IS_SEEKABLE=16,
G_IO_FLAG_MASK=31,
G_IO_FLAG_GET_MASK=31,
G_IO_FLAG_SET_MASK=3,
}
enum GSeekType {
G_SEEK_CUR=0,
G_SEEK_SET=1,
G_SEEK_END=2,
}
enum GIOStatus {
G_IO_STATUS_ERROR=0,
G_IO_STATUS_NORMAL=1,
G_IO_STATUS_EOF=2,
G_IO_STATUS_AGAIN=3,
}
enum GIOChannelError {
G_IO_CHANNEL_ERROR_FBIG=0,
G_IO_CHANNEL_ERROR_INVAL=1,
G_IO_CHANNEL_ERROR_IO=2,
G_IO_CHANNEL_ERROR_ISDIR=3,
G_IO_CHANNEL_ERROR_NOSPC=4,
G_IO_CHANNEL_ERROR_NXIO=5,
G_IO_CHANNEL_ERROR_OVERFLOW=6,
G_IO_CHANNEL_ERROR_PIPE=7,
G_IO_CHANNEL_ERROR_FAILED=8,
}
enum GIOError {
G_IO_ERROR_NONE=0,
G_IO_ERROR_AGAIN=1,
G_IO_ERROR_INVAL=2,
G_IO_ERROR_UNKNOWN=3,
}
alias _GIOFuncs GIOFuncs;
alias int function(_GIOChannel *, char *, uint, uint *, _GError * *) _BCD_func__2864;
alias int function(_GIOChannel *, char *, uint, uint *, _GError * *) _BCD_func__2865;
alias int function(_GIOChannel *, long, int, _GError * *) _BCD_func__2866;
alias int function(_GIOChannel *, _GError * *) _BCD_func__2867;
alias _GSource GSource;
alias _GSource * function(_GIOChannel *, int) _BCD_func__2868;
alias void function(_GIOChannel *) _BCD_func__2869;
alias int function(_GIOChannel *, int, _GError * *) _BCD_func__2870;
alias int function(_GIOChannel *) _BCD_func__2871;
alias void * GIConv;
alias _GString GString;
alias void GStringChunk;
alias _GTrashStack GTrashStack;
alias _BCD_func__1993 GVoidFunc;
alias _GDebugKey GDebugKey;
enum GNormalizeMode {
G_NORMALIZE_DEFAULT=0,
G_NORMALIZE_NFD=0,
G_NORMALIZE_DEFAULT_COMPOSE=1,
G_NORMALIZE_NFC=1,
G_NORMALIZE_ALL=2,
G_NORMALIZE_NFKD=2,
G_NORMALIZE_ALL_COMPOSE=3,
G_NORMALIZE_NFKC=3,
}
enum GUnicodeBreakType {
G_UNICODE_BREAK_MANDATORY=0,
G_UNICODE_BREAK_CARRIAGE_RETURN=1,
G_UNICODE_BREAK_LINE_FEED=2,
G_UNICODE_BREAK_COMBINING_MARK=3,
G_UNICODE_BREAK_SURROGATE=4,
G_UNICODE_BREAK_ZERO_WIDTH_SPACE=5,
G_UNICODE_BREAK_INSEPARABLE=6,
G_UNICODE_BREAK_NON_BREAKING_GLUE=7,
G_UNICODE_BREAK_CONTINGENT=8,
G_UNICODE_BREAK_SPACE=9,
G_UNICODE_BREAK_AFTER=10,
G_UNICODE_BREAK_BEFORE=11,
G_UNICODE_BREAK_BEFORE_AND_AFTER=12,
G_UNICODE_BREAK_HYPHEN=13,
G_UNICODE_BREAK_NON_STARTER=14,
G_UNICODE_BREAK_OPEN_PUNCTUATION=15,
G_UNICODE_BREAK_CLOSE_PUNCTUATION=16,
G_UNICODE_BREAK_QUOTATION=17,
G_UNICODE_BREAK_EXCLAMATION=18,
G_UNICODE_BREAK_IDEOGRAPHIC=19,
G_UNICODE_BREAK_NUMERIC=20,
G_UNICODE_BREAK_INFIX_SEPARATOR=21,
G_UNICODE_BREAK_SYMBOL=22,
G_UNICODE_BREAK_ALPHABETIC=23,
G_UNICODE_BREAK_PREFIX=24,
G_UNICODE_BREAK_POSTFIX=25,
G_UNICODE_BREAK_COMPLEX_CONTEXT=26,
G_UNICODE_BREAK_AMBIGUOUS=27,
G_UNICODE_BREAK_UNKNOWN=28,
G_UNICODE_BREAK_NEXT_LINE=29,
G_UNICODE_BREAK_WORD_JOINER=30,
}
enum GUnicodeType {
G_UNICODE_CONTROL=0,
G_UNICODE_FORMAT=1,
G_UNICODE_UNASSIGNED=2,
G_UNICODE_PRIVATE_USE=3,
G_UNICODE_SURROGATE=4,
G_UNICODE_LOWERCASE_LETTER=5,
G_UNICODE_MODIFIER_LETTER=6,
G_UNICODE_OTHER_LETTER=7,
G_UNICODE_TITLECASE_LETTER=8,
G_UNICODE_UPPERCASE_LETTER=9,
G_UNICODE_COMBINING_MARK=10,
G_UNICODE_ENCLOSING_MARK=11,
G_UNICODE_NON_SPACING_MARK=12,
G_UNICODE_DECIMAL_NUMBER=13,
G_UNICODE_LETTER_NUMBER=14,
G_UNICODE_OTHER_NUMBER=15,
G_UNICODE_CONNECT_PUNCTUATION=16,
G_UNICODE_DASH_PUNCTUATION=17,
G_UNICODE_CLOSE_PUNCTUATION=18,
G_UNICODE_FINAL_PUNCTUATION=19,
G_UNICODE_INITIAL_PUNCTUATION=20,
G_UNICODE_OTHER_PUNCTUATION=21,
G_UNICODE_OPEN_PUNCTUATION=22,
G_UNICODE_CURRENCY_SYMBOL=23,
G_UNICODE_MODIFIER_SYMBOL=24,
G_UNICODE_MATH_SYMBOL=25,
G_UNICODE_OTHER_SYMBOL=26,
G_UNICODE_LINE_SEPARATOR=27,
G_UNICODE_PARAGRAPH_SEPARATOR=28,
G_UNICODE_SPACE_SEPARATOR=29,
}
alias ushort gunichar2;
alias _GPollFD GPollFD;
alias int function(_GPollFD *, uint, int) _BCD_func__2352;
alias _BCD_func__2352 GPollFunc;
alias ushort gushort;
alias _BCD_func__1993 GSourceDummyMarshal;
alias void function(int, int, void *) _BCD_func__2358;
alias _BCD_func__2358 GChildWatchFunc;
alias int function(void *) _BCD_func__2359;
alias _BCD_func__2359 GSourceFunc;
alias _GSourceFuncs GSourceFuncs;
alias int function(_GSource *, int *) _BCD_func__2878;
alias int function(_GSource *) _BCD_func__2879;
alias int function(_GSource *, _BCD_func__2359, void *) _BCD_func__2880;
alias void function(_GSource *) _BCD_func__2881;
alias _GSourceCallbackFuncs GSourceCallbackFuncs;
alias void function(void *, _GSource *, _BCD_func__2359 *, void * *) _BCD_func__2883;
alias void GMainContext;
alias void GMainLoop;
enum GHookFlagMask {
G_HOOK_FLAG_ACTIVE=1,
G_HOOK_FLAG_IN_CALL=2,
G_HOOK_FLAG_MASK=15,
}
alias _GHookList GHookList;
alias _GHook GHook;
alias void function(_GHookList *, _GHook *) _BCD_func__2395;
alias _BCD_func__2395 GHookFinalizeFunc;
alias _BCD_func__2359 GHookCheckFunc;
alias _BCD_func__2079 GHookFunc;
alias int function(_GHook *, void *) _BCD_func__2396;
alias _BCD_func__2396 GHookCheckMarshaller;
alias void function(_GHook *, void *) _BCD_func__2397;
alias _BCD_func__2397 GHookMarshaller;
alias _BCD_func__2396 GHookFindFunc;
alias int function(_GHook *, _GHook *) _BCD_func__2398;
alias _BCD_func__2398 GHookCompareFunc;
alias void GMemChunk;
alias _BCD_func__2079 GDestroyNotify;
alias _BCD_func__2140 GHRFunc;
enum GFileTest {
G_FILE_TEST_IS_REGULAR=1,
G_FILE_TEST_IS_SYMLINK=2,
G_FILE_TEST_IS_DIR=4,
G_FILE_TEST_IS_EXECUTABLE=8,
G_FILE_TEST_EXISTS=16,
}
enum GFileError {
G_FILE_ERROR_EXIST=0,
G_FILE_ERROR_ISDIR=1,
G_FILE_ERROR_ACCES=2,
G_FILE_ERROR_NAMETOOLONG=3,
G_FILE_ERROR_NOENT=4,
G_FILE_ERROR_NOTDIR=5,
G_FILE_ERROR_NXIO=6,
G_FILE_ERROR_NODEV=7,
G_FILE_ERROR_ROFS=8,
G_FILE_ERROR_TXTBSY=9,
G_FILE_ERROR_FAULT=10,
G_FILE_ERROR_LOOP=11,
G_FILE_ERROR_NOSPC=12,
G_FILE_ERROR_NOMEM=13,
G_FILE_ERROR_MFILE=14,
G_FILE_ERROR_NFILE=15,
G_FILE_ERROR_BADF=16,
G_FILE_ERROR_INVAL=17,
G_FILE_ERROR_PIPE=18,
G_FILE_ERROR_AGAIN=19,
G_FILE_ERROR_INTR=20,
G_FILE_ERROR_IO=21,
G_FILE_ERROR_PERM=22,
G_FILE_ERROR_NOSYS=23,
G_FILE_ERROR_FAILED=24,
}
alias void GDir;
enum GDateMonth {
G_DATE_BAD_MONTH=0,
G_DATE_JANUARY=1,
G_DATE_FEBRUARY=2,
G_DATE_MARCH=3,
G_DATE_APRIL=4,
G_DATE_MAY=5,
G_DATE_JUNE=6,
G_DATE_JULY=7,
G_DATE_AUGUST=8,
G_DATE_SEPTEMBER=9,
G_DATE_OCTOBER=10,
G_DATE_NOVEMBER=11,
G_DATE_DECEMBER=12,
}
enum GDateWeekday {
G_DATE_BAD_WEEKDAY=0,
G_DATE_MONDAY=1,
G_DATE_TUESDAY=2,
G_DATE_WEDNESDAY=3,
G_DATE_THURSDAY=4,
G_DATE_FRIDAY=5,
G_DATE_SATURDAY=6,
G_DATE_SUNDAY=7,
}
enum GDateDMY {
G_DATE_DAY=0,
G_DATE_MONTH=1,
G_DATE_YEAR=2,
}
alias _GDate GDate;
alias char GDateDay;
alias ushort GDateYear;
alias int GTime;
alias void function(uint, void *, void *) _BCD_func__2432;
alias _BCD_func__2432 GDataForeachFunc;
enum GConvertError {
G_CONVERT_ERROR_NO_CONVERSION=0,
G_CONVERT_ERROR_ILLEGAL_SEQUENCE=1,
G_CONVERT_ERROR_FAILED=2,
G_CONVERT_ERROR_PARTIAL_INPUT=3,
G_CONVERT_ERROR_BAD_URI=4,
G_CONVERT_ERROR_NOT_ABSOLUTE_PATH=5,
}
alias int function(char *, char *, uint) _BCD_func__2435;
alias _BCD_func__2435 GCompletionStrncmpFunc;
alias char * function(void *) _BCD_func__2436;
alias _BCD_func__2436 GCompletionFunc;
alias _GCompletion GCompletion;
alias _BCD_func__2079 GCacheDestroyFunc;
alias _BCD_func__2080 GCacheDupFunc;
alias _BCD_func__2080 GCacheNewFunc;
alias void GCache;
alias _GMemVTable GMemVTable;
alias void * function(uint) _BCD_func__2892;
alias void * function(void *, uint) _BCD_func__2893;
alias void * function(uint, uint) _BCD_func__2894;
alias void GAllocator;
alias void GAsyncQueue;
alias _GOnce GOnce;
enum GOnceStatus {
G_ONCE_STATUS_NOTCALLED=0,
G_ONCE_STATUS_PROGRESS=1,
G_ONCE_STATUS_READY=2,
}
alias _GStaticRWLock GStaticRWLock;
alias void GCond;
alias _GStaticRecMutex GStaticRecMutex;
alias _GThreadFunctions GThreadFunctions;
alias void GMutex;
alias void * function() _BCD_func__2899;
alias void function(void *) _BCD_func__2900;
alias int function(void *) _BCD_func__2901;
alias void * function() _BCD_func__2902;
alias void function(void *) _BCD_func__2903;
alias void function(void *, void *) _BCD_func__2904;
alias _GTimeVal GTimeVal;
alias int function(void *, void *, _GTimeVal *) _BCD_func__2905;
alias void GPrivate;
alias void * function(_BCD_func__2079) _BCD_func__2906;
alias void * function(void *) _BCD_func__2907;
alias void function(void *, void *) _BCD_func__2908;
enum GThreadPriority {
G_THREAD_PRIORITY_LOW=0,
G_THREAD_PRIORITY_NORMAL=1,
G_THREAD_PRIORITY_HIGH=2,
G_THREAD_PRIORITY_URGENT=3,
}
alias void function(_BCD_func__2080, void *, uint, int, int, int, void *, _GError * *) _BCD_func__2909;
alias void function(void *, int) _BCD_func__2910;
alias int function(void *, void *) _BCD_func__2911;
alias _GStaticPrivate GStaticPrivate;
alias _GThread GThread;
alias _BCD_func__2080 GThreadFunc;
enum GThreadError {
G_THREAD_ERROR_AGAIN=0,
}
alias _GPtrArray GPtrArray;
alias _GByteArray GByteArray;
alias _GArray GArray;
alias _GFloatIEEE754 GFloatIEEE754;
alias _GDoubleIEEE754 GDoubleIEEE754;
alias char * function(char *, void *) _BCD_func__2557;
alias _BCD_func__2557 GTranslateFunc;
alias _BCD_func__2079 GFreeFunc;
alias void function(void *, void *, void *) _BCD_func__2558;
alias _BCD_func__2558 GHFunc;
alias uint function(void *) _BCD_func__2559;
alias _BCD_func__2559 GHashFunc;
alias int function(void *, void *) _BCD_func__2560;
alias _BCD_func__2560 GEqualFunc;
alias int function(void *, void *, void *) _BCD_func__2561;
alias _BCD_func__2561 GCompareDataFunc;
alias int function(void *, void *) _BCD_func__2562;
alias _BCD_func__2562 GCompareFunc;
alias short gshort;
extern (C) void g_value_set_string_take_ownership(_GValue *, char *);
extern (C) void g_value_take_string(_GValue *, char *);
extern (C) char * g_strdup_value_contents(_GValue *);
extern (C) uint g_pointer_type_register_static(char *);
extern (C) void * g_value_get_pointer(_GValue *);
extern (C) void g_value_set_pointer(_GValue *, void *);
extern (C) char * g_value_dup_string(_GValue *);
extern (C) char * g_value_get_string(_GValue *);
extern (C) void g_value_set_static_string(_GValue *, char *);
extern (C) void g_value_set_string(_GValue *, char *);
extern (C) double g_value_get_double(_GValue *);
extern (C) void g_value_set_double(_GValue *, double);
extern (C) float g_value_get_float(_GValue *);
extern (C) void g_value_set_float(_GValue *, float);
extern (C) ulong g_value_get_uint64(_GValue *);
extern (C) void g_value_set_uint64(_GValue *, ulong);
extern (C) long g_value_get_int64(_GValue *);
extern (C) void g_value_set_int64(_GValue *, long);
extern (C) uint g_value_get_ulong(_GValue *);
extern (C) void g_value_set_ulong(_GValue *, uint);
extern (C) int g_value_get_long(_GValue *);
extern (C) void g_value_set_long(_GValue *, int);
extern (C) uint g_value_get_uint(_GValue *);
extern (C) void g_value_set_uint(_GValue *, uint);
extern (C) int g_value_get_int(_GValue *);
extern (C) void g_value_set_int(_GValue *, int);
extern (C) int g_value_get_boolean(_GValue *);
extern (C) void g_value_set_boolean(_GValue *, int);
extern (C) char g_value_get_uchar(_GValue *);
extern (C) void g_value_set_uchar(_GValue *, char);
extern (C) char g_value_get_char(_GValue *);
extern (C) void g_value_set_char(_GValue *, char);
extern (C) _GValueArray * g_value_array_sort_with_data(_GValueArray *, _BCD_func__2561, void *);
extern (C) _GValueArray * g_value_array_sort(_GValueArray *, _BCD_func__2562);
extern (C) _GValueArray * g_value_array_remove(_GValueArray *, uint);
extern (C) _GValueArray * g_value_array_insert(_GValueArray *, uint, _GValue *);
extern (C) _GValueArray * g_value_array_append(_GValueArray *, _GValue *);
extern (C) _GValueArray * g_value_array_prepend(_GValueArray *, _GValue *);
extern (C) _GValueArray * g_value_array_copy(_GValueArray *);
extern (C) void g_value_array_free(_GValueArray *);
extern (C) _GValueArray * g_value_array_new(uint);
extern (C) _GValue * g_value_array_get_nth(_GValueArray *, uint);
extern (C) void g_type_plugin_complete_interface_info(void *, uint, uint, _GInterfaceInfo *);
extern (C) void g_type_plugin_complete_type_info(void *, uint, _GTypeInfo *, _GTypeValueTable *);
extern (C) void g_type_plugin_unuse(void *);
extern (C) void g_type_plugin_use(void *);
extern (C) uint g_type_plugin_get_type();
extern (C) uint g_type_module_register_flags(_GTypeModule *, char *, _GFlagsValue *);
extern (C) uint g_type_module_register_enum(_GTypeModule *, char *, _GEnumValue *);
extern (C) void g_type_module_add_interface(_GTypeModule *, uint, uint, _GInterfaceInfo *);
extern (C) uint g_type_module_register_type(_GTypeModule *, uint, char *, _GTypeInfo *, int);
extern (C) void g_type_module_set_name(_GTypeModule *, char *);
extern (C) void g_type_module_unuse(_GTypeModule *);
extern (C) int g_type_module_use(_GTypeModule *);
extern (C) uint g_type_module_get_type();
extern (C) uint g_io_condition_get_type();
extern (C) uint g_io_channel_get_type();
extern (C) void g_source_set_closure(_GSource *, _GClosure *);
extern (C) _GParamSpec * g_param_spec_override(char *, _GParamSpec *);
extern (C) _GParamSpec * g_param_spec_object(char *, char *, char *, uint, int);
extern (C) _GParamSpec * g_param_spec_value_array(char *, char *, char *, _GParamSpec *, int);
extern (C) _GParamSpec * g_param_spec_pointer(char *, char *, char *, int);
extern (C) _GParamSpec * g_param_spec_boxed(char *, char *, char *, uint, int);
extern (C) _GParamSpec * g_param_spec_param(char *, char *, char *, uint, int);
extern (C) _GParamSpec * g_param_spec_string(char *, char *, char *, char *, int);
extern (C) _GParamSpec * g_param_spec_double(char *, char *, char *, double, double, double, int);
extern (C) _GParamSpec * g_param_spec_float(char *, char *, char *, float, float, float, int);
extern (C) _GParamSpec * g_param_spec_flags(char *, char *, char *, uint, uint, int);
extern (C) _GParamSpec * g_param_spec_enum(char *, char *, char *, uint, int, int);
extern (C) _GParamSpec * g_param_spec_unichar(char *, char *, char *, uint, int);
extern (C) _GParamSpec * g_param_spec_uint64(char *, char *, char *, ulong, ulong, ulong, int);
extern (C) _GParamSpec * g_param_spec_int64(char *, char *, char *, long, long, long, int);
extern (C) _GParamSpec * g_param_spec_ulong(char *, char *, char *, uint, uint, uint, int);
extern (C) _GParamSpec * g_param_spec_long(char *, char *, char *, int, int, int, int);
extern (C) _GParamSpec * g_param_spec_uint(char *, char *, char *, uint, uint, uint, int);
extern (C) _GParamSpec * g_param_spec_int(char *, char *, char *, int, int, int, int);
extern (C) _GParamSpec * g_param_spec_boolean(char *, char *, char *, int, int);
extern (C) _GParamSpec * g_param_spec_uchar(char *, char *, char *, char, char, char, int);
extern (C) _GParamSpec * g_param_spec_char(char *, char *, char *, char, char, char, int);
extern (C) void g_value_set_object_take_ownership(_GValue *, void *);
extern (C) void g_value_take_object(_GValue *, void *);
extern (C) void g_object_run_dispose(_GObject *);
extern (C) uint g_signal_connect_object(void *, char *, _BCD_func__1993, void *, int);
extern (C) _GObject * g_value_dup_object(_GValue *);
extern (C) void * g_value_get_object(_GValue *);
extern (C) void g_value_set_object(_GValue *, void *);
extern (C) _GClosure * g_closure_new_object(uint, _GObject *);
extern (C) _GClosure * g_cclosure_new_object_swap(_BCD_func__1993, _GObject *);
extern (C) _GClosure * g_cclosure_new_object(_BCD_func__1993, _GObject *);
extern (C) void g_object_watch_closure(_GObject *, _GClosure *);
extern (C) void * g_object_steal_data(_GObject *, char *);
extern (C) void g_object_set_data_full(_GObject *, char *, void *, _BCD_func__2079);
extern (C) void g_object_set_data(_GObject *, char *, void *);
extern (C) void * g_object_get_data(_GObject *, char *);
extern (C) void * g_object_steal_qdata(_GObject *, uint);
extern (C) void g_object_set_qdata_full(_GObject *, uint, void *, _BCD_func__2079);
extern (C) void g_object_set_qdata(_GObject *, uint, void *);
extern (C) void * g_object_get_qdata(_GObject *, uint);
extern (C) void g_object_remove_toggle_ref(_GObject *, _BCD_func__1937, void *);
extern (C) void g_object_add_toggle_ref(_GObject *, _BCD_func__1937, void *);
extern (C) void g_object_remove_weak_pointer(_GObject *, void * *);
extern (C) void g_object_add_weak_pointer(_GObject *, void * *);
extern (C) void g_object_weak_unref(_GObject *, _BCD_func__1943, void *);
extern (C) void g_object_weak_ref(_GObject *, _BCD_func__1943, void *);
extern (C) void g_object_unref(void *);
extern (C) void * g_object_ref(void *);
extern (C) void g_object_thaw_notify(_GObject *);
extern (C) void g_object_notify(_GObject *, char *);
extern (C) void g_object_freeze_notify(_GObject *);
extern (C) void g_object_get_property(_GObject *, char *, _GValue *);
extern (C) void g_object_set_property(_GObject *, char *, _GValue *);
extern (C) void g_object_get_valist(_GObject *, char *, char *);
extern (C) void g_object_set_valist(_GObject *, char *, char *);
extern (C) void g_object_disconnect(void *, char *, ...);
extern (C) void * g_object_connect(void *, char *, ...);
extern (C) void g_object_get(void *, char *, ...);
extern (C) void g_object_set(void *, char *, ...);
extern (C) _GObject * g_object_new_valist(uint, char *, char *);
extern (C) void * g_object_newv(uint, uint, _GParameter *);
extern (C) void * g_object_new(uint, char *, ...);
extern (C) _GParamSpec * * g_object_interface_list_properties(void *, uint *);
extern (C) _GParamSpec * g_object_interface_find_property(void *, char *);
extern (C) void g_object_interface_install_property(void *, _GParamSpec *);
extern (C) void g_object_class_override_property(_GObjectClass *, uint, char *);
extern (C) _GParamSpec * * g_object_class_list_properties(_GObjectClass *, uint *);
extern (C) _GParamSpec * g_object_class_find_property(_GObjectClass *, char *);
extern (C) void g_object_class_install_property(_GObjectClass *, uint, _GParamSpec *);
extern (C) void _g_signals_destroy(uint);
extern (C) void g_signal_handlers_destroy(void *);
extern (C) int g_signal_accumulator_true_handled(_GSignalInvocationHint *, _GValue *, _GValue *, void *);
extern (C) void g_signal_chain_from_overridden(_GValue *, _GValue *);
extern (C) void g_signal_override_class_closure(uint, uint, _GClosure *);
extern (C) uint g_signal_handlers_disconnect_matched(void *, int, uint, uint, _GClosure *, void *, void *);
extern (C) uint g_signal_handlers_unblock_matched(void *, int, uint, uint, _GClosure *, void *, void *);
extern (C) uint g_signal_handlers_block_matched(void *, int, uint, uint, _GClosure *, void *, void *);
extern (C) uint g_signal_handler_find(void *, int, uint, uint, _GClosure *, void *, void *);
extern (C) int g_signal_handler_is_connected(void *, uint);
extern (C) void g_signal_handler_disconnect(void *, uint);
extern (C) void g_signal_handler_unblock(void *, uint);
extern (C) void g_signal_handler_block(void *, uint);
extern (C) uint g_signal_connect_data(void *, char *, _BCD_func__1993, void *, _BCD_func__1992, int);
extern (C) uint g_signal_connect_closure(void *, char *, _GClosure *, int);
extern (C) uint g_signal_connect_closure_by_id(void *, uint, uint, _GClosure *, int);
extern (C) int g_signal_has_handler_pending(void *, uint, uint, int);
extern (C) void g_signal_remove_emission_hook(uint, uint);
extern (C) uint g_signal_add_emission_hook(uint, uint, _BCD_func__1972, void *, _BCD_func__2079);
extern (C) void g_signal_stop_emission_by_name(void *, char *);
extern (C) void g_signal_stop_emission(void *, uint, uint);
extern (C) _GSignalInvocationHint * g_signal_get_invocation_hint(void *);
extern (C) int g_signal_parse_name(char *, uint, uint *, uint *, int);
extern (C) uint * g_signal_list_ids(uint, uint *);
extern (C) void g_signal_query(uint, _GSignalQuery *);
extern (C) char * g_signal_name(uint);
extern (C) uint g_signal_lookup(char *, uint);
extern (C) void g_signal_emit_by_name(void *, char *, ...);
extern (C) void g_signal_emit(void *, uint, uint, ...);
extern (C) void g_signal_emit_valist(void *, uint, uint, char *);
extern (C) void g_signal_emitv(_GValue *, uint, uint, _GValue *);
extern (C) uint g_signal_new(char *, uint, int, uint, _BCD_func__1971, void *, _BCD_func__1973, uint, uint, ...);
extern (C) uint g_signal_new_valist(char *, uint, int, _GClosure *, _BCD_func__1971, void *, _BCD_func__1973, uint, uint, char *);
extern (C) uint g_signal_newv(char *, uint, int, _GClosure *, _BCD_func__1971, void *, _BCD_func__1973, uint, uint, uint *);
extern (C) void g_cclosure_marshal_STRING__OBJECT_POINTER(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_BOOLEAN__FLAGS(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__UINT_POINTER(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__OBJECT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__POINTER(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__BOXED(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__PARAM(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__STRING(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__DOUBLE(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__FLOAT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__FLAGS(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__ENUM(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__ULONG(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__LONG(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__UINT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__INT(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__UCHAR(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__CHAR(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__BOOLEAN(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_cclosure_marshal_VOID__VOID(_GClosure *, _GValue *, uint, _GValue *, void *, void *);
extern (C) void g_closure_invoke(_GClosure *, _GValue *, uint, _GValue *, void *);
extern (C) void g_closure_invalidate(_GClosure *);
extern (C) void g_closure_set_meta_marshal(_GClosure *, void *, _BCD_func__1973);
extern (C) void g_closure_set_marshal(_GClosure *, _BCD_func__1973);
extern (C) void g_closure_add_marshal_guards(_GClosure *, void *, _BCD_func__1992, void *, _BCD_func__1992);
extern (C) void g_closure_remove_invalidate_notifier(_GClosure *, void *, _BCD_func__1992);
extern (C) void g_closure_add_invalidate_notifier(_GClosure *, void *, _BCD_func__1992);
extern (C) void g_closure_remove_finalize_notifier(_GClosure *, void *, _BCD_func__1992);
extern (C) void g_closure_add_finalize_notifier(_GClosure *, void *, _BCD_func__1992);
extern (C) _GClosure * g_closure_new_simple(uint, void *);
extern (C) void g_closure_unref(_GClosure *);
extern (C) void g_closure_sink(_GClosure *);
extern (C) _GClosure * g_closure_ref(_GClosure *);
extern (C) _GClosure * g_signal_type_cclosure_new(uint, uint);
extern (C) _GClosure * g_cclosure_new_swap(_BCD_func__1993, void *, _BCD_func__1992);
extern (C) _GClosure * g_cclosure_new(_BCD_func__1993, void *, _BCD_func__1992);
extern (C) _GParamSpec * * g_param_spec_pool_list(void *, uint, uint *);
extern (C) _GList * g_param_spec_pool_list_owned(void *, uint);
extern (C) _GParamSpec * g_param_spec_pool_lookup(void *, char *, uint, int);
extern (C) void g_param_spec_pool_remove(void *, _GParamSpec *);
extern (C) void g_param_spec_pool_insert(void *, _GParamSpec *, uint);
extern (C) void * g_param_spec_pool_new(int);
extern (C) void * g_param_spec_internal(uint, char *, char *, char *, int);
extern (C) uint _g_param_type_register_static_constant(char *, _GParamSpecTypeInfo *, uint);
extern (C) uint g_param_type_register_static(char *, _GParamSpecTypeInfo *);
extern (C) void g_value_set_param_take_ownership(_GValue *, _GParamSpec *);
extern (C) void g_value_take_param(_GValue *, _GParamSpec *);
extern (C) _GParamSpec * g_value_dup_param(_GValue *);
extern (C) _GParamSpec * g_value_get_param(_GValue *);
extern (C) void g_value_set_param(_GValue *, _GParamSpec *);
extern (C) char * g_param_spec_get_blurb(_GParamSpec *);
extern (C) char * g_param_spec_get_nick(_GParamSpec *);
extern (C) char * g_param_spec_get_name(_GParamSpec *);
extern (C) int g_param_values_cmp(_GParamSpec *, _GValue *, _GValue *);
extern (C) int g_param_value_convert(_GParamSpec *, _GValue *, _GValue *, int);
extern (C) int g_param_value_validate(_GParamSpec *, _GValue *);
extern (C) int g_param_value_defaults(_GParamSpec *, _GValue *);
extern (C) void g_param_value_set_default(_GParamSpec *, _GValue *);
extern (C) _GParamSpec * g_param_spec_get_redirect_target(_GParamSpec *);
extern (C) void * g_param_spec_steal_qdata(_GParamSpec *, uint);
extern (C) void g_param_spec_set_qdata_full(_GParamSpec *, uint, void *, _BCD_func__2079);
extern (C) void g_param_spec_set_qdata(_GParamSpec *, uint, void *);
extern (C) void * g_param_spec_get_qdata(_GParamSpec *, uint);
extern (C) void g_param_spec_sink(_GParamSpec *);
extern (C) void g_param_spec_unref(_GParamSpec *);
extern (C) _GParamSpec * g_param_spec_ref(_GParamSpec *);
extern (C) void g_value_register_transform_func(uint, uint, _BCD_func__2051);
extern (C) int g_value_transform(_GValue *, _GValue *);
extern (C) int g_value_type_transformable(uint, uint);
extern (C) int g_value_type_compatible(uint, uint);
extern (C) void * g_value_peek_pointer(_GValue *);
extern (C) int g_value_fits_pointer(_GValue *);
extern (C) void g_value_set_instance(_GValue *, void *);
extern (C) void g_value_unset(_GValue *);
extern (C) _GValue * g_value_reset(_GValue *);
extern (C) void g_value_copy(_GValue *, _GValue *);
extern (C) _GValue * g_value_init(_GValue *, uint);
extern (C) void g_flags_complete_type_info(uint, _GTypeInfo *, _GFlagsValue *);
extern (C) void g_enum_complete_type_info(uint, _GTypeInfo *, _GEnumValue *);
extern (C) uint g_flags_register_static(char *, _GFlagsValue *);
extern (C) uint g_enum_register_static(char *, _GEnumValue *);
extern (C) uint g_value_get_flags(_GValue *);
extern (C) void g_value_set_flags(_GValue *, uint);
extern (C) int g_value_get_enum(_GValue *);
extern (C) void g_value_set_enum(_GValue *, int);
extern (C) _GFlagsValue * g_flags_get_value_by_nick(_GFlagsClass *, char *);
extern (C) _GFlagsValue * g_flags_get_value_by_name(_GFlagsClass *, char *);
extern (C) _GFlagsValue * g_flags_get_first_value(_GFlagsClass *, uint);
extern (C) _GEnumValue * g_enum_get_value_by_nick(_GEnumClass *, char *);
extern (C) _GEnumValue * g_enum_get_value_by_name(_GEnumClass *, char *);
extern (C) _GEnumValue * g_enum_get_value(_GEnumClass *, int);
extern (C) uint g_gstring_get_type();
extern (C) uint g_strv_get_type();
extern (C) uint g_date_get_type();
extern (C) uint g_value_array_get_type();
extern (C) uint g_value_get_type();
extern (C) uint g_closure_get_type();
extern (C) void g_value_set_boxed_take_ownership(_GValue *, void *);
extern (C) void g_value_take_boxed(_GValue *, void *);
extern (C) uint g_boxed_type_register_static(char *, _BCD_func__2080, _BCD_func__2079);
extern (C) void * g_value_dup_boxed(_GValue *);
extern (C) void * g_value_get_boxed(_GValue *);
extern (C) void g_value_set_static_boxed(_GValue *, void *);
extern (C) void g_value_set_boxed(_GValue *, void *);
extern (C) void g_boxed_free(uint, void *);
extern (C) void * g_boxed_copy(uint, void *);
extern (C) void g_signal_init();
extern (C) void g_value_transforms_init();
extern (C) void g_param_spec_types_init();
extern (C) void g_object_type_init();
extern (C) void g_boxed_type_init();
extern (C) void g_param_type_init();
extern (C) void g_enum_types_init();
extern (C) void g_value_types_init();
extern (C) void g_value_c_init();
extern (C) char * g_type_name_from_class(_GTypeClass *);
extern (C) char * g_type_name_from_instance(_GTypeInstance *);
extern (C) int g_type_test_flags(uint, uint);
extern (C) int g_type_check_value_holds(_GValue *, uint);
extern (C) int g_type_check_value(_GValue *);
extern (C) int g_type_check_is_value_type(uint);
extern (C) int g_type_check_class_is_a(_GTypeClass *, uint);
extern (C) _GTypeClass * g_type_check_class_cast(_GTypeClass *, uint);
extern (C) int g_type_check_instance_is_a(_GTypeInstance *, uint);
extern (C) _GTypeInstance * g_type_check_instance_cast(_GTypeInstance *, uint);
extern (C) int g_type_check_instance(_GTypeInstance *);
extern (C) _GTypeValueTable * g_type_value_table_peek(uint);
extern (C) void g_type_remove_interface_check(void *, _BCD_func__2084);
extern (C) void g_type_add_interface_check(void *, _BCD_func__2084);
extern (C) void g_type_class_unref_uncached(void *);
extern (C) void g_type_remove_class_cache_func(void *, _BCD_func__2085);
extern (C) void g_type_add_class_cache_func(void *, _BCD_func__2085);
extern (C) void g_type_free_instance(_GTypeInstance *);
extern (C) _GTypeInstance * g_type_create_instance(uint);
extern (C) uint g_type_fundamental(uint);
extern (C) uint g_type_fundamental_next();
extern (C) void * g_type_interface_get_plugin(uint, uint);
extern (C) void * g_type_get_plugin(uint);
extern (C) void * g_type_instance_get_private(_GTypeInstance *, uint);
extern (C) void g_type_class_add_private(void *, uint);
extern (C) uint * g_type_interface_prerequisites(uint, uint *);
extern (C) void g_type_interface_add_prerequisite(uint, uint);
extern (C) void g_type_add_interface_dynamic(uint, uint, void *);
extern (C) void g_type_add_interface_static(uint, uint, _GInterfaceInfo *);
extern (C) uint g_type_register_fundamental(uint, char *, _GTypeInfo *, _GTypeFundamentalInfo *, int);
extern (C) uint g_type_register_dynamic(uint, char *, void *, int);
extern (C) uint g_type_register_static(uint, char *, _GTypeInfo *, int);
extern (C) void g_type_query(uint, _GTypeQuery *);
extern (C) void * g_type_get_qdata(uint, uint);
extern (C) void g_type_set_qdata(uint, uint, void *);
extern (C) uint * g_type_interfaces(uint, uint *);
extern (C) uint * g_type_children(uint, uint *);
extern (C) void g_type_default_interface_unref(void *);
extern (C) void * g_type_default_interface_peek(uint);
extern (C) void * g_type_default_interface_ref(uint);
extern (C) void * g_type_interface_peek_parent(void *);
extern (C) void * g_type_interface_peek(void *, uint);
extern (C) void * g_type_class_peek_parent(void *);
extern (C) void g_type_class_unref(void *);
extern (C) void * g_type_class_peek_static(uint);
extern (C) void * g_type_class_peek(uint);
extern (C) void * g_type_class_ref(uint);
extern (C) int g_type_is_a(uint, uint);
extern (C) uint g_type_next_base(uint, uint);
extern (C) uint g_type_depth(uint);
extern (C) uint g_type_parent(uint);
extern (C) uint g_type_from_name(char *);
extern (C) uint g_type_qname(uint);
extern (C) char * g_type_name(uint);
extern (C) void g_type_init_with_debug_flags(int);
extern (C) void g_type_init();
extern (C) int g_tree_nnodes(void *);
extern (C) int g_tree_height(void *);
extern (C) void * g_tree_search(void *, _BCD_func__2562, void *);
extern (C) void g_tree_traverse(void *, _BCD_func__2140, int, void *);
extern (C) void g_tree_foreach(void *, _BCD_func__2140, void *);
extern (C) int g_tree_lookup_extended(void *, void *, void * *, void * *);
extern (C) void * g_tree_lookup(void *, void *);
extern (C) int g_tree_steal(void *, void *);
extern (C) int g_tree_remove(void *, void *);
extern (C) void g_tree_replace(void *, void *, void *);
extern (C) void g_tree_insert(void *, void *, void *);
extern (C) void g_tree_destroy(void *);
extern (C) void * g_tree_new_full(_BCD_func__2561, void *, _BCD_func__2079, _BCD_func__2079);
extern (C) void * g_tree_new_with_data(_BCD_func__2561, void *);
extern (C) void * g_tree_new(_BCD_func__2562);
extern (C) void g_time_val_add(_GTimeVal *, int);
extern (C) void g_usleep(uint);
extern (C) double g_timer_elapsed(void *, uint *);
extern (C) void g_timer_continue(void *);
extern (C) void g_timer_reset(void *);
extern (C) void g_timer_stop(void *);
extern (C) void g_timer_start(void *);
extern (C) void g_timer_destroy(void *);
extern (C) void * g_timer_new();
extern (C) void g_thread_pool_stop_unused_threads();
extern (C) uint g_thread_pool_get_num_unused_threads();
extern (C) int g_thread_pool_get_max_unused_threads();
extern (C) void g_thread_pool_set_max_unused_threads(int);
extern (C) void g_thread_pool_free(_GThreadPool *, int, int);
extern (C) uint g_thread_pool_unprocessed(_GThreadPool *);
extern (C) uint g_thread_pool_get_num_threads(_GThreadPool *);
extern (C) int g_thread_pool_get_max_threads(_GThreadPool *);
extern (C) void g_thread_pool_set_max_threads(_GThreadPool *, int, _GError * *);
extern (C) void g_thread_pool_push(_GThreadPool *, void *, _GError * *);
extern (C) _GThreadPool * g_thread_pool_new(_BCD_func__2084, void *, int, int, _GError * *);
extern (C) char * g_strip_context(char *, char *);
extern (C) char * g_stpcpy(char *, char *);
extern (C) uint g_strv_length(char * *);
extern (C) char * * g_strdupv(char * *);
extern (C) void g_strfreev(char * *);
extern (C) char * g_strjoinv(char *, char * *);
extern (C) char * * g_strsplit_set(char *, char *, int);
extern (C) char * * g_strsplit(char *, char *, int);
extern (C) void * g_memdup(void *, uint);
extern (C) char * g_strescape(char *, char *);
extern (C) char * g_strcompress(char *);
extern (C) char * g_strjoin(char *, ...);
extern (C) char * g_strconcat(char *, ...);
extern (C) char * g_strnfill(uint, char);
extern (C) char * g_strndup(char *, uint);
extern (C) char * g_strdup_vprintf(char *, char *);
extern (C) char * g_strdup_printf(char *, ...);
extern (C) char * g_strdup(char *);
extern (C) char * g_strup(char *);
extern (C) char * g_strdown(char *);
extern (C) int g_strncasecmp(char *, char *, uint);
extern (C) int g_strcasecmp(char *, char *);
extern (C) char * g_ascii_strup(char *, int);
extern (C) char * g_ascii_strdown(char *, int);
extern (C) int g_ascii_strncasecmp(char *, char *, uint);
extern (C) int g_ascii_strcasecmp(char *, char *);
extern (C) char * g_strchomp(char *);
extern (C) char * g_strchug(char *);
extern (C) char * g_ascii_formatd(char *, int, char *, double);
extern (C) char * g_ascii_dtostr(char *, int, double);
extern (C) ulong g_ascii_strtoull(char *, char * *, uint);
extern (C) double g_ascii_strtod(char *, char * *);
extern (C) double g_strtod(char *, char * *);
extern (C) int g_str_has_prefix(char *, char *);
extern (C) int g_str_has_suffix(char *, char *);
extern (C) char * g_strrstr_len(char *, int, char *);
extern (C) char * g_strrstr(char *, char *);
extern (C) char * g_strstr_len(char *, int, char *);
extern (C) uint g_strlcat(char *, char *, uint);
extern (C) uint g_strlcpy(char *, char *, uint);
extern (C) char * g_strreverse(char *);
extern (C) char * g_strsignal(int);
extern (C) char * g_strerror(int);
extern (C) char * g_strcanon(char *, char *, char);
extern (C) char * g_strdelimit(char *, char *, char);
extern (C) int g_ascii_xdigit_value(char);
extern (C) int g_ascii_digit_value(char);
extern (C) char g_ascii_toupper(char);
extern (C) char g_ascii_tolower(char);
extern (C) void g_spawn_close_pid(int);
extern (C) int g_spawn_command_line_async(char *, _GError * *);
extern (C) int g_spawn_command_line_sync(char *, char * *, char * *, int *, _GError * *);
extern (C) int g_spawn_sync(char *, char * *, char * *, int, _BCD_func__2079, void *, char * *, char * *, int *, _GError * *);
extern (C) int g_spawn_async_with_pipes(char *, char * *, char * *, int, _BCD_func__2079, void *, int *, int *, int *, int *, _GError * *);
extern (C) int g_spawn_async(char *, char * *, char * *, int, _BCD_func__2079, void *, int *, _GError * *);
extern (C) uint g_spawn_error_quark();
extern (C) int g_shell_parse_argv(char *, int *, char * * *, _GError * *);
extern (C) char * g_shell_unquote(char *, _GError * *);
extern (C) char * g_shell_quote(char *);
extern (C) uint g_shell_error_quark();
extern (C) void g_scanner_warn(_GScanner *, char *, ...);
extern (C) void g_scanner_error(_GScanner *, char *, ...);
extern (C) void g_scanner_unexp_token(_GScanner *, int, char *, char *, char *, char *, int);
extern (C) void * g_scanner_lookup_symbol(_GScanner *, char *);
extern (C) void g_scanner_scope_foreach_symbol(_GScanner *, uint, _BCD_func__2558, void *);
extern (C) void * g_scanner_scope_lookup_symbol(_GScanner *, uint, char *);
extern (C) void g_scanner_scope_remove_symbol(_GScanner *, uint, char *);
extern (C) void g_scanner_scope_add_symbol(_GScanner *, uint, char *, void *);
extern (C) uint g_scanner_set_scope(_GScanner *, uint);
extern (C) int g_scanner_eof(_GScanner *);
extern (C) uint g_scanner_cur_position(_GScanner *);
extern (C) uint g_scanner_cur_line(_GScanner *);
extern (C) _GTokenValue g_scanner_cur_value(_GScanner *);
extern (C) int g_scanner_cur_token(_GScanner *);
extern (C) int g_scanner_peek_next_token(_GScanner *);
extern (C) int g_scanner_get_next_token(_GScanner *);
extern (C) void g_scanner_input_text(_GScanner *, char *, uint);
extern (C) void g_scanner_sync_file_offset(_GScanner *);
extern (C) void g_scanner_input_file(_GScanner *, int);
extern (C) void g_scanner_destroy(_GScanner *);
extern (C) _GScanner * g_scanner_new(_GScannerConfig *);
extern (C) void * g_tuples_index(_GTuples *, int, int);
extern (C) void g_tuples_destroy(_GTuples *);
extern (C) void g_relation_print(void *);
extern (C) int g_relation_exists(void *, ...);
extern (C) int g_relation_count(void *, void *, int);
extern (C) _GTuples * g_relation_select(void *, void *, int);
extern (C) int g_relation_delete(void *, void *, int);
extern (C) void g_relation_insert(void *, ...);
extern (C) void g_relation_index(void *, int, _BCD_func__2559, _BCD_func__2560);
extern (C) void g_relation_destroy(void *);
extern (C) void * g_relation_new(int);
extern (C) double g_random_double_range(double, double);
extern (C) double g_random_double();
extern (C) int g_random_int_range(int, int);
extern (C) uint g_random_int();
extern (C) void g_random_set_seed(uint);
extern (C) double g_rand_double_range(void *, double, double);
extern (C) double g_rand_double(void *);
extern (C) int g_rand_int_range(void *, int, int);
extern (C) uint g_rand_int(void *);
extern (C) void g_rand_set_seed_array(void *, uint *, uint);
extern (C) void g_rand_set_seed(void *, uint);
extern (C) void * g_rand_copy(void *);
extern (C) void g_rand_free(void *);
extern (C) void * g_rand_new();
extern (C) void * g_rand_new_with_seed_array(uint *, uint);
extern (C) void * g_rand_new_with_seed(uint);
extern (C) void g_queue_delete_link(_GQueue *, _GList *);
extern (C) void g_queue_unlink(_GQueue *, _GList *);
extern (C) int g_queue_link_index(_GQueue *, _GList *);
extern (C) _GList * g_queue_peek_nth_link(_GQueue *, uint);
extern (C) _GList * g_queue_peek_tail_link(_GQueue *);
extern (C) _GList * g_queue_peek_head_link(_GQueue *);
extern (C) _GList * g_queue_pop_nth_link(_GQueue *, uint);
extern (C) _GList * g_queue_pop_tail_link(_GQueue *);
extern (C) _GList * g_queue_pop_head_link(_GQueue *);
extern (C) void g_queue_push_nth_link(_GQueue *, int, _GList *);
extern (C) void g_queue_push_tail_link(_GQueue *, _GList *);
extern (C) void g_queue_push_head_link(_GQueue *, _GList *);
extern (C) void g_queue_insert_sorted(_GQueue *, void *, _BCD_func__2561, void *);
extern (C) void g_queue_insert_after(_GQueue *, _GList *, void *);
extern (C) void g_queue_insert_before(_GQueue *, _GList *, void *);
extern (C) void g_queue_remove_all(_GQueue *, void *);
extern (C) void g_queue_remove(_GQueue *, void *);
extern (C) int g_queue_index(_GQueue *, void *);
extern (C) void * g_queue_peek_nth(_GQueue *, uint);
extern (C) void * g_queue_peek_tail(_GQueue *);
extern (C) void * g_queue_peek_head(_GQueue *);
extern (C) void * g_queue_pop_nth(_GQueue *, uint);
extern (C) void * g_queue_pop_tail(_GQueue *);
extern (C) void * g_queue_pop_head(_GQueue *);
extern (C) void g_queue_push_nth(_GQueue *, void *, int);
extern (C) void g_queue_push_tail(_GQueue *, void *);
extern (C) void g_queue_push_head(_GQueue *, void *);
extern (C) void g_queue_sort(_GQueue *, _BCD_func__2561, void *);
extern (C) _GList * g_queue_find_custom(_GQueue *, void *, _BCD_func__2562);
extern (C) _GList * g_queue_find(_GQueue *, void *);
extern (C) void g_queue_foreach(_GQueue *, _BCD_func__2084, void *);
extern (C) _GQueue * g_queue_copy(_GQueue *);
extern (C) void g_queue_reverse(_GQueue *);
extern (C) uint g_queue_get_length(_GQueue *);
extern (C) int g_queue_is_empty(_GQueue *);
extern (C) void g_queue_free(_GQueue *);
extern (C) _GQueue * g_queue_new();
extern (C) void g_qsort_with_data(void *, int, uint, _BCD_func__2561, void *);
extern (C) uint g_spaced_primes_closest(uint);
extern (C) int g_pattern_match_simple(char *, char *);
extern (C) int g_pattern_match_string(void *, char *);
extern (C) int g_pattern_match(void *, uint, char *, char *);
extern (C) int g_pattern_spec_equal(void *, void *);
extern (C) void g_pattern_spec_free(void *);
extern (C) void * g_pattern_spec_new(char *);
extern (C) void g_option_group_set_translation_domain(void *, char *);
extern (C) void g_option_group_set_translate_func(void *, _BCD_func__2557, void *, _BCD_func__2079);
extern (C) void g_option_group_add_entries(void *, _GOptionEntry *);
extern (C) void g_option_group_free(void *);
extern (C) void g_option_group_set_error_hook(void *, _BCD_func__2243);
extern (C) void g_option_group_set_parse_hooks(void *, _BCD_func__2244, _BCD_func__2244);
extern (C) void * g_option_group_new(char *, char *, char *, void *, _BCD_func__2079);
extern (C) void * g_option_context_get_main_group(void *);
extern (C) void g_option_context_set_main_group(void *, void *);
extern (C) void g_option_context_add_group(void *, void *);
extern (C) int g_option_context_parse(void *, int *, char * * *, _GError * *);
extern (C) void g_option_context_add_main_entries(void *, _GOptionEntry *, char *);
extern (C) int g_option_context_get_ignore_unknown_options(void *);
extern (C) void g_option_context_set_ignore_unknown_options(void *, int);
extern (C) int g_option_context_get_help_enabled(void *);
extern (C) void g_option_context_set_help_enabled(void *, int);
extern (C) void g_option_context_free(void *);
extern (C) void * g_option_context_new(char *);
extern (C) uint g_option_error_quark();
extern (C) _GNode * g_node_last_sibling(_GNode *);
extern (C) _GNode * g_node_first_sibling(_GNode *);
extern (C) int g_node_child_index(_GNode *, void *);
extern (C) int g_node_child_position(_GNode *, _GNode *);
extern (C) _GNode * g_node_find_child(_GNode *, int, void *);
extern (C) _GNode * g_node_last_child(_GNode *);
extern (C) _GNode * g_node_nth_child(_GNode *, uint);
extern (C) uint g_node_n_children(_GNode *);
extern (C) void g_node_reverse_children(_GNode *);
extern (C) void g_node_children_foreach(_GNode *, int, _BCD_func__2258, void *);
extern (C) uint g_node_max_height(_GNode *);
extern (C) void g_node_traverse(_GNode *, int, int, int, _BCD_func__2259, void *);
extern (C) _GNode * g_node_find(_GNode *, int, int, void *);
extern (C) uint g_node_depth(_GNode *);
extern (C) int g_node_is_ancestor(_GNode *, _GNode *);
extern (C) _GNode * g_node_get_root(_GNode *);
extern (C) uint g_node_n_nodes(_GNode *, int);
extern (C) _GNode * g_node_prepend(_GNode *, _GNode *);
extern (C) _GNode * g_node_insert_after(_GNode *, _GNode *, _GNode *);
extern (C) _GNode * g_node_insert_before(_GNode *, _GNode *, _GNode *);
extern (C) _GNode * g_node_insert(_GNode *, int, _GNode *);
extern (C) _GNode * g_node_copy(_GNode *);
extern (C) _GNode * g_node_copy_deep(_GNode *, _BCD_func__2257, void *);
extern (C) void g_node_unlink(_GNode *);
extern (C) void g_node_destroy(_GNode *);
extern (C) _GNode * g_node_new(void *);
extern (C) void g_node_pop_allocator();
extern (C) void g_node_push_allocator(void *);
extern (C) _BCD_func__2267 g_set_printerr_handler(_BCD_func__2267);
extern (C) void g_printerr(char *, ...);
extern (C) _BCD_func__2267 g_set_print_handler(_BCD_func__2267);
extern (C) void g_print(char *, ...);
extern (C) void g_assert_warning(char *, char *, int, char *, char *);
extern (C) void g_return_if_fail_warning(char *, char *, char *);
extern (C) void _g_log_fallback_handler(char *, int, char *, void *);
extern (C) int g_log_set_always_fatal(int);
extern (C) int g_log_set_fatal_mask(char *, int);
extern (C) void g_logv(char *, int, char *, char *);
extern (C) void g_log(char *, int, char *, ...);
extern (C) _BCD_func__2269 g_log_set_default_handler(_BCD_func__2269, void *);
extern (C) void g_log_default_handler(char *, int, char *, void *);
extern (C) void g_log_remove_handler(char *, uint);
extern (C) uint g_log_set_handler(char *, int, _BCD_func__2269, void *);
extern (C) uint g_printf_string_upper_bound(char *, char *);
extern (C) char * g_markup_vprintf_escaped(char *, char *);
extern (C) char * g_markup_printf_escaped(char *, ...);
extern (C) char * g_markup_escape_text(char *, int);
extern (C) void g_markup_parse_context_get_position(void *, int *, int *);
extern (C) char * g_markup_parse_context_get_element(void *);
extern (C) int g_markup_parse_context_end_parse(void *, _GError * *);
extern (C) int g_markup_parse_context_parse(void *, char *, int, _GError * *);
extern (C) void g_markup_parse_context_free(void *);
extern (C) void * g_markup_parse_context_new(_GMarkupParser *, int, void *, _BCD_func__2079);
extern (C) uint g_markup_error_quark();
extern (C) void g_mapped_file_free(void *);
extern (C) char * g_mapped_file_get_contents(void *);
extern (C) uint g_mapped_file_get_length(void *);
extern (C) void * g_mapped_file_new(char *, int, _GError * *);
extern (C) void g_key_file_remove_group(void *, char *, _GError * *);
extern (C) void g_key_file_remove_key(void *, char *, char *, _GError * *);
extern (C) void g_key_file_remove_comment(void *, char *, char *, _GError * *);
extern (C) char * g_key_file_get_comment(void *, char *, char *, _GError * *);
extern (C) void g_key_file_set_comment(void *, char *, char *, char *, _GError * *);
extern (C) void g_key_file_set_integer_list(void *, char *, char *, int *, uint);
extern (C) int * g_key_file_get_integer_list(void *, char *, char *, uint *, _GError * *);
extern (C) void g_key_file_set_boolean_list(void *, char *, char *, int *, uint);
extern (C) int * g_key_file_get_boolean_list(void *, char *, char *, uint *, _GError * *);
extern (C) void g_key_file_set_locale_string_list(void *, char *, char *, char *, char * *, uint);
extern (C) char * * g_key_file_get_locale_string_list(void *, char *, char *, char *, uint *, _GError * *);
extern (C) void g_key_file_set_string_list(void *, char *, char *, char * *, uint);
extern (C) char * * g_key_file_get_string_list(void *, char *, char *, uint *, _GError * *);
extern (C) void g_key_file_set_integer(void *, char *, char *, int);
extern (C) int g_key_file_get_integer(void *, char *, char *, _GError * *);
extern (C) void g_key_file_set_boolean(void *, char *, char *, int);
extern (C) int g_key_file_get_boolean(void *, char *, char *, _GError * *);
extern (C) void g_key_file_set_locale_string(void *, char *, char *, char *, char *);
extern (C) char * g_key_file_get_locale_string(void *, char *, char *, char *, _GError * *);
extern (C) void g_key_file_set_string(void *, char *, char *, char *);
extern (C) char * g_key_file_get_string(void *, char *, char *, _GError * *);
extern (C) void g_key_file_set_value(void *, char *, char *, char *);
extern (C) char * g_key_file_get_value(void *, char *, char *, _GError * *);
extern (C) int g_key_file_has_key(void *, char *, char *, _GError * *);
extern (C) int g_key_file_has_group(void *, char *);
extern (C) char * * g_key_file_get_keys(void *, char *, uint *, _GError * *);
extern (C) char * * g_key_file_get_groups(void *, uint *);
extern (C) char * g_key_file_get_start_group(void *);
extern (C) char * g_key_file_to_data(void *, uint *, _GError * *);
extern (C) int g_key_file_load_from_data_dirs(void *, char *, char * *, int, _GError * *);
extern (C) int g_key_file_load_from_data(void *, char *, uint, int, _GError * *);
extern (C) int g_key_file_load_from_file(void *, char *, int, _GError * *);
extern (C) void g_key_file_set_list_separator(void *, char);
extern (C) void g_key_file_free(void *);
extern (C) void * g_key_file_new();
extern (C) uint g_key_file_error_quark();
extern (C) int g_io_channel_unix_get_fd(_GIOChannel *);
extern (C) _GIOChannel * g_io_channel_unix_new(int);
extern (C) int g_io_channel_error_from_errno(int);
extern (C) uint g_io_channel_error_quark();
extern (C) _GIOChannel * g_io_channel_new_file(char *, char *, _GError * *);
extern (C) int g_io_channel_seek_position(_GIOChannel *, long, int, _GError * *);
extern (C) int g_io_channel_write_unichar(_GIOChannel *, uint, _GError * *);
extern (C) int g_io_channel_write_chars(_GIOChannel *, char *, int, uint *, _GError * *);
extern (C) int g_io_channel_read_unichar(_GIOChannel *, uint *, _GError * *);
extern (C) int g_io_channel_read_chars(_GIOChannel *, char *, uint, uint *, _GError * *);
extern (C) int g_io_channel_read_to_end(_GIOChannel *, char * *, uint *, _GError * *);
extern (C) int g_io_channel_read_line_string(_GIOChannel *, _GString *, uint *, _GError * *);
extern (C) int g_io_channel_read_line(_GIOChannel *, char * *, uint *, uint *, _GError * *);
extern (C) int g_io_channel_flush(_GIOChannel *, _GError * *);
extern (C) int g_io_channel_get_close_on_unref(_GIOChannel *);
extern (C) void g_io_channel_set_close_on_unref(_GIOChannel *, int);
extern (C) char * g_io_channel_get_encoding(_GIOChannel *);
extern (C) int g_io_channel_set_encoding(_GIOChannel *, char *, _GError * *);
extern (C) int g_io_channel_get_buffered(_GIOChannel *);
extern (C) void g_io_channel_set_buffered(_GIOChannel *, int);
extern (C) char * g_io_channel_get_line_term(_GIOChannel *, int *);
extern (C) void g_io_channel_set_line_term(_GIOChannel *, char *, int);
extern (C) int g_io_channel_get_flags(_GIOChannel *);
extern (C) int g_io_channel_set_flags(_GIOChannel *, int, _GError * *);
extern (C) int g_io_channel_get_buffer_condition(_GIOChannel *);
extern (C) uint g_io_channel_get_buffer_size(_GIOChannel *);
extern (C) void g_io_channel_set_buffer_size(_GIOChannel *, uint);
extern (C) uint g_io_add_watch(_GIOChannel *, int, _BCD_func__2287, void *);
extern (C) _GSource * g_io_create_watch(_GIOChannel *, int);
extern (C) uint g_io_add_watch_full(_GIOChannel *, int, int, _BCD_func__2287, void *, _BCD_func__2079);
extern (C) int g_io_channel_shutdown(_GIOChannel *, int, _GError * *);
extern (C) void g_io_channel_close(_GIOChannel *);
extern (C) int g_io_channel_seek(_GIOChannel *, long, int);
extern (C) int g_io_channel_write(_GIOChannel *, char *, uint, uint *);
extern (C) int g_io_channel_read(_GIOChannel *, char *, uint, uint *);
extern (C) void g_io_channel_unref(_GIOChannel *);
extern (C) _GIOChannel * g_io_channel_ref(_GIOChannel *);
extern (C) void g_io_channel_init(_GIOChannel *);
extern (C) _GString * g_string_up(_GString *);
extern (C) _GString * g_string_down(_GString *);
extern (C) _GString * g_string_append_c_inline(_GString *, char);
extern (C) void g_string_append_printf(_GString *, char *, ...);
extern (C) void g_string_printf(_GString *, char *, ...);
extern (C) _GString * g_string_ascii_up(_GString *);
extern (C) _GString * g_string_ascii_down(_GString *);
extern (C) _GString * g_string_erase(_GString *, int, int);
extern (C) _GString * g_string_insert_unichar(_GString *, int, uint);
extern (C) _GString * g_string_insert_c(_GString *, int, char);
extern (C) _GString * g_string_insert(_GString *, int, char *);
extern (C) _GString * g_string_prepend_len(_GString *, char *, int);
extern (C) _GString * g_string_prepend_unichar(_GString *, uint);
extern (C) _GString * g_string_prepend_c(_GString *, char);
extern (C) _GString * g_string_prepend(_GString *, char *);
extern (C) _GString * g_string_append_unichar(_GString *, uint);
extern (C) _GString * g_string_append_c(_GString *, char);
extern (C) _GString * g_string_append_len(_GString *, char *, int);
extern (C) _GString * g_string_append(_GString *, char *);
extern (C) _GString * g_string_insert_len(_GString *, int, char *, int);
extern (C) _GString * g_string_set_size(_GString *, uint);
extern (C) _GString * g_string_truncate(_GString *, uint);
extern (C) _GString * g_string_assign(_GString *, char *);
extern (C) uint g_string_hash(_GString *);
extern (C) int g_string_equal(_GString *, _GString *);
extern (C) char * g_string_free(_GString *, int);
extern (C) _GString * g_string_sized_new(uint);
extern (C) _GString * g_string_new_len(char *, int);
extern (C) _GString * g_string_new(char *);
extern (C) char * g_string_chunk_insert_const(void *, char *);
extern (C) char * g_string_chunk_insert_len(void *, char *, int);
extern (C) char * g_string_chunk_insert(void *, char *);
extern (C) void g_string_chunk_free(void *);
extern (C) void * g_string_chunk_new(uint);
extern (C) char * glib_check_version(uint, uint, uint);
extern (C) uint g_trash_stack_height(_GTrashStack * *);
extern (C) void * g_trash_stack_peek(_GTrashStack * *);
extern (C) void * g_trash_stack_pop(_GTrashStack * *);
extern (C) void g_trash_stack_push(_GTrashStack * *, void *);
extern (C) uint g_bit_storage(uint);
extern (C) int g_bit_nth_msf(uint, int);
extern (C) int g_bit_nth_lsf(uint, int);
extern (C) char * g_find_program_in_path(char *);
extern (C) void g_atexit(_BCD_func__1993);
extern (C) char * * g_listenv();
extern (C) void g_unsetenv(char *);
extern (C) int g_setenv(char *, char *, int);
extern (C) char * g_getenv(char *);
extern (C) void g_nullify_pointer(void * *);
extern (C) char * g_path_get_dirname(char *);
extern (C) char * g_path_get_basename(char *);
extern (C) char * g_get_current_dir();
extern (C) char * g_basename(char *);
extern (C) char * g_path_skip_root(char *);
extern (C) int g_path_is_absolute(char *);
extern (C) int g_vsnprintf(char *, uint, char *, char *);
extern (C) int g_snprintf(char *, uint, char *, ...);
extern (C) uint g_parse_debug_string(char *, _GDebugKey *, uint);
extern (C) char * * g_get_language_names();
extern (C) char * * g_get_system_config_dirs();
extern (C) char * * g_get_system_data_dirs();
extern (C) char * g_get_user_cache_dir();
extern (C) char * g_get_user_config_dir();
extern (C) char * g_get_user_data_dir();
extern (C) void g_set_application_name(char *);
extern (C) char * g_get_application_name();
extern (C) void g_set_prgname(char *);
extern (C) char * g_get_prgname();
extern (C) char * g_get_host_name();
extern (C) char * g_get_tmp_dir();
extern (C) char * g_get_home_dir();
extern (C) char * g_get_real_name();
extern (C) char * g_get_user_name();
extern (C) int g_unichar_get_mirror_char(uint, uint *);
extern (C) char * g_utf8_collate_key_for_filename(char *, int);
extern (C) char * g_utf8_collate_key(char *, int);
extern (C) int g_utf8_collate(char *, char *);
extern (C) char * g_utf8_normalize(char *, int, int);
extern (C) char * g_utf8_casefold(char *, int);
extern (C) char * g_utf8_strdown(char *, int);
extern (C) char * g_utf8_strup(char *, int);
extern (C) int g_unichar_validate(uint);
extern (C) int g_utf8_validate(char *, int, char * *);
extern (C) int g_unichar_to_utf8(uint, char *);
extern (C) char * g_ucs4_to_utf8(uint *, int, int *, int *, _GError * *);
extern (C) ushort * g_ucs4_to_utf16(uint *, int, int *, int *, _GError * *);
extern (C) char * g_utf16_to_utf8(ushort *, int, int *, int *, _GError * *);
extern (C) uint * g_utf16_to_ucs4(ushort *, int, int *, int *, _GError * *);
extern (C) uint * g_utf8_to_ucs4_fast(char *, int, int *);
extern (C) uint * g_utf8_to_ucs4(char *, int, int *, int *, _GError * *);
extern (C) ushort * g_utf8_to_utf16(char *, int, int *, int *, _GError * *);
extern (C) char * g_utf8_strreverse(char *, int);
extern (C) char * g_utf8_strrchr(char *, int, uint);
extern (C) char * g_utf8_strchr(char *, int, uint);
extern (C) char * g_utf8_strncpy(char *, char *, uint);
extern (C) int g_utf8_strlen(char *, int);
extern (C) char * g_utf8_find_prev_char(char *, char *);
extern (C) char * g_utf8_find_next_char(char *, char *);
extern (C) char * g_utf8_prev_char(char *);
extern (C) int g_utf8_pointer_to_offset(char *, char *);
extern (C) char * g_utf8_offset_to_pointer(char *, int);
extern (C) uint g_utf8_get_char_validated(char *, int);
extern (C) uint g_utf8_get_char(char *);
extern (C) uint * g_unicode_canonical_decomposition(uint, uint *);
extern (C) void g_unicode_canonical_ordering(uint *, uint);
extern (C) int g_unichar_break_type(uint);
extern (C) int g_unichar_type(uint);
extern (C) int g_unichar_xdigit_value(uint);
extern (C) int g_unichar_digit_value(uint);
extern (C) uint g_unichar_totitle(uint);
extern (C) uint g_unichar_tolower(uint);
extern (C) uint g_unichar_toupper(uint);
extern (C) int g_unichar_iswide(uint);
extern (C) int g_unichar_isdefined(uint);
extern (C) int g_unichar_istitle(uint);
extern (C) int g_unichar_isxdigit(uint);
extern (C) int g_unichar_isupper(uint);
extern (C) int g_unichar_isspace(uint);
extern (C) int g_unichar_ispunct(uint);
extern (C) int g_unichar_isprint(uint);
extern (C) int g_unichar_islower(uint);
extern (C) int g_unichar_isgraph(uint);
extern (C) int g_unichar_isdigit(uint);
extern (C) int g_unichar_iscntrl(uint);
extern (C) int g_unichar_isalpha(uint);
extern (C) int g_unichar_isalnum(uint);
extern (C) int g_get_charset(char * *);
extern (C) int g_idle_remove_by_data(void *);
extern (C) uint g_idle_add_full(int, _BCD_func__2359, void *, _BCD_func__2079);
extern (C) uint g_idle_add(_BCD_func__2359, void *);
extern (C) uint g_child_watch_add(int, _BCD_func__2358, void *);
extern (C) uint g_child_watch_add_full(int, int, _BCD_func__2358, void *, _BCD_func__2079);
extern (C) uint g_timeout_add(uint, _BCD_func__2359, void *);
extern (C) uint g_timeout_add_full(int, uint, _BCD_func__2359, void *, _BCD_func__2079);
extern (C) int g_source_remove_by_funcs_user_data(_GSourceFuncs *, void *);
extern (C) int g_source_remove_by_user_data(void *);
extern (C) int g_source_remove(uint);
extern (C) void g_get_current_time(_GTimeVal *);
extern (C) _GSource * g_timeout_source_new(uint);
extern (C) _GSource * g_child_watch_source_new(int);
extern (C) _GSource * g_idle_source_new();
extern (C) void g_source_get_current_time(_GSource *, _GTimeVal *);
extern (C) void g_source_remove_poll(_GSource *, _GPollFD *);
extern (C) void g_source_add_poll(_GSource *, _GPollFD *);
extern (C) void g_source_set_callback_indirect(_GSource *, void *, _GSourceCallbackFuncs *);
extern (C) void g_source_set_callback(_GSource *, _BCD_func__2359, void *, _BCD_func__2079);
extern (C) void * g_source_get_context(_GSource *);
extern (C) uint g_source_get_id(_GSource *);
extern (C) int g_source_get_can_recurse(_GSource *);
extern (C) void g_source_set_can_recurse(_GSource *, int);
extern (C) int g_source_get_priority(_GSource *);
extern (C) void g_source_set_priority(_GSource *, int);
extern (C) void g_source_destroy(_GSource *);
extern (C) uint g_source_attach(_GSource *, void *);
extern (C) void g_source_unref(_GSource *);
extern (C) _GSource * g_source_ref(_GSource *);
extern (C) _GSource * g_source_new(_GSourceFuncs *, uint);
extern (C) void * g_main_loop_get_context(void *);
extern (C) int g_main_loop_is_running(void *);
extern (C) void g_main_loop_unref(void *);
extern (C) void * g_main_loop_ref(void *);
extern (C) void g_main_loop_quit(void *);
extern (C) void g_main_loop_run(void *);
extern (C) void * g_main_loop_new(void *, int);
extern (C) int g_main_depth();
extern (C) void g_main_context_remove_poll(void *, _GPollFD *);
extern (C) void g_main_context_add_poll(void *, _GPollFD *, int);
extern (C) _BCD_func__2352 g_main_context_get_poll_func(void *);
extern (C) void g_main_context_set_poll_func(void *, _BCD_func__2352);
extern (C) void g_main_context_dispatch(void *);
extern (C) int g_main_context_check(void *, int, _GPollFD *, int);
extern (C) int g_main_context_query(void *, int, int *, _GPollFD *, int);
extern (C) int g_main_context_prepare(void *, int *);
extern (C) int g_main_context_wait(void *, void *, void *);
extern (C) void g_main_context_release(void *);
extern (C) int g_main_context_acquire(void *);
extern (C) void g_main_context_wakeup(void *);
extern (C) _GSource * g_main_context_find_source_by_funcs_user_data(void *, _GSourceFuncs *, void *);
extern (C) _GSource * g_main_context_find_source_by_user_data(void *, void *);
extern (C) _GSource * g_main_context_find_source_by_id(void *, uint);
extern (C) int g_main_context_pending(void *);
extern (C) int g_main_context_iteration(void *, int);
extern (C) void * g_main_context_default();
extern (C) void g_main_context_unref(void *);
extern (C) void * g_main_context_ref(void *);
extern (C) void * g_main_context_new();
extern (C) void * g_slist_nth_data(_GSList *, uint);
extern (C) _GSList * g_slist_sort_with_data(_GSList *, _BCD_func__2561, void *);
extern (C) _GSList * g_slist_sort(_GSList *, _BCD_func__2562);
extern (C) void g_slist_foreach(_GSList *, _BCD_func__2084, void *);
extern (C) uint g_slist_length(_GSList *);
extern (C) _GSList * g_slist_last(_GSList *);
extern (C) int g_slist_index(_GSList *, void *);
extern (C) int g_slist_position(_GSList *, _GSList *);
extern (C) _GSList * g_slist_find_custom(_GSList *, void *, _BCD_func__2562);
extern (C) _GSList * g_slist_find(_GSList *, void *);
extern (C) _GSList * g_slist_nth(_GSList *, uint);
extern (C) _GSList * g_slist_copy(_GSList *);
extern (C) _GSList * g_slist_reverse(_GSList *);
extern (C) _GSList * g_slist_delete_link(_GSList *, _GSList *);
extern (C) _GSList * g_slist_remove_link(_GSList *, _GSList *);
extern (C) _GSList * g_slist_remove_all(_GSList *, void *);
extern (C) _GSList * g_slist_remove(_GSList *, void *);
extern (C) _GSList * g_slist_concat(_GSList *, _GSList *);
extern (C) _GSList * g_slist_insert_before(_GSList *, _GSList *, void *);
extern (C) _GSList * g_slist_insert_sorted(_GSList *, void *, _BCD_func__2562);
extern (C) _GSList * g_slist_insert(_GSList *, void *, int);
extern (C) _GSList * g_slist_prepend(_GSList *, void *);
extern (C) _GSList * g_slist_append(_GSList *, void *);
extern (C) void g_slist_free_1(_GSList *);
extern (C) void g_slist_free(_GSList *);
extern (C) _GSList * g_slist_alloc();
extern (C) void g_slist_pop_allocator();
extern (C) void g_slist_push_allocator(void *);
extern (C) void g_hook_list_marshal_check(_GHookList *, int, _BCD_func__2396, void *);
extern (C) void g_hook_list_marshal(_GHookList *, int, _BCD_func__2397, void *);
extern (C) void g_hook_list_invoke_check(_GHookList *, int);
extern (C) void g_hook_list_invoke(_GHookList *, int);
extern (C) int g_hook_compare_ids(_GHook *, _GHook *);
extern (C) _GHook * g_hook_next_valid(_GHookList *, _GHook *, int);
extern (C) _GHook * g_hook_first_valid(_GHookList *, int);
extern (C) _GHook * g_hook_find_func_data(_GHookList *, int, void *, void *);
extern (C) _GHook * g_hook_find_func(_GHookList *, int, void *);
extern (C) _GHook * g_hook_find_data(_GHookList *, int, void *);
extern (C) _GHook * g_hook_find(_GHookList *, int, _BCD_func__2396, void *);
extern (C) _GHook * g_hook_get(_GHookList *, uint);
extern (C) void g_hook_insert_sorted(_GHookList *, _GHook *, _BCD_func__2398);
extern (C) void g_hook_insert_before(_GHookList *, _GHook *, _GHook *);
extern (C) void g_hook_prepend(_GHookList *, _GHook *);
extern (C) void g_hook_destroy_link(_GHookList *, _GHook *);
extern (C) int g_hook_destroy(_GHookList *, uint);
extern (C) void g_hook_unref(_GHookList *, _GHook *);
extern (C) _GHook * g_hook_ref(_GHookList *, _GHook *);
extern (C) void g_hook_free(_GHookList *, _GHook *);
extern (C) _GHook * g_hook_alloc(_GHookList *);
extern (C) void g_hook_list_clear(_GHookList *);
extern (C) void g_hook_list_init(_GHookList *, uint);
extern (C) int g_direct_equal(void *, void *);
extern (C) uint g_direct_hash(void *);
extern (C) uint g_int_hash(void *);
extern (C) int g_int_equal(void *, void *);
extern (C) uint g_str_hash(void *);
extern (C) int g_str_equal(void *, void *);
extern (C) uint g_hash_table_size(void *);
extern (C) uint g_hash_table_foreach_steal(void *, _BCD_func__2140, void *);
extern (C) uint g_hash_table_foreach_remove(void *, _BCD_func__2140, void *);
extern (C) void * g_hash_table_find(void *, _BCD_func__2140, void *);
extern (C) void g_hash_table_foreach(void *, _BCD_func__2558, void *);
extern (C) int g_hash_table_lookup_extended(void *, void *, void * *, void * *);
extern (C) void * g_hash_table_lookup(void *, void *);
extern (C) int g_hash_table_steal(void *, void *);
extern (C) int g_hash_table_remove(void *, void *);
extern (C) void g_hash_table_replace(void *, void *, void *);
extern (C) void g_hash_table_insert(void *, void *, void *);
extern (C) void g_hash_table_destroy(void *);
extern (C) void * g_hash_table_new_full(_BCD_func__2559, _BCD_func__2560, _BCD_func__2079, _BCD_func__2079);
extern (C) void * g_hash_table_new(_BCD_func__2559, _BCD_func__2560);
extern (C) int g_mkdir_with_parents(char *, int);
extern (C) char * g_build_filenamev(char * *);
extern (C) char * g_build_filename(char *, ...);
extern (C) char * g_build_pathv(char *, char * *);
extern (C) char * g_build_path(char *, char *, ...);
extern (C) int g_file_open_tmp(char *, char * *, _GError * *);
extern (C) int g_mkstemp(char *);
extern (C) char * g_file_read_link(char *, _GError * *);
extern (C) int g_file_set_contents(char *, char *, int, _GError * *);
extern (C) int g_file_get_contents(char *, char * *, uint *, _GError * *);
extern (C) int g_file_test(char *, int);
extern (C) int g_file_error_from_errno(int);
extern (C) uint g_file_error_quark();
extern (C) void g_dir_close(void *);
extern (C) void g_dir_rewind(void *);
extern (C) char * g_dir_read_name(void *);
extern (C) void * g_dir_open(char *, uint, _GError * *);
extern (C) uint g_date_strftime(char *, uint, char *, _GDate *);
extern (C) void g_date_order(_GDate *, _GDate *);
extern (C) void g_date_clamp(_GDate *, _GDate *, _GDate *);
extern (C) void g_date_to_struct_tm(_GDate *, void *);
extern (C) int g_date_compare(_GDate *, _GDate *);
extern (C) int g_date_days_between(_GDate *, _GDate *);
extern (C) char g_date_get_sunday_weeks_in_year(ushort);
extern (C) char g_date_get_monday_weeks_in_year(ushort);
extern (C) char g_date_get_days_in_month(int, ushort);
extern (C) int g_date_is_leap_year(ushort);
extern (C) void g_date_subtract_years(_GDate *, uint);
extern (C) void g_date_add_years(_GDate *, uint);
extern (C) void g_date_subtract_months(_GDate *, uint);
extern (C) void g_date_add_months(_GDate *, uint);
extern (C) void g_date_subtract_days(_GDate *, uint);
extern (C) void g_date_add_days(_GDate *, uint);
extern (C) int g_date_is_last_of_month(_GDate *);
extern (C) int g_date_is_first_of_month(_GDate *);
extern (C) void g_date_set_julian(_GDate *, uint);
extern (C) void g_date_set_dmy(_GDate *, char, int, ushort);
extern (C) void g_date_set_year(_GDate *, ushort);
extern (C) void g_date_set_day(_GDate *, char);
extern (C) void g_date_set_month(_GDate *, int);
extern (C) void g_date_set_time(_GDate *, int);
extern (C) void g_date_set_parse(_GDate *, char *);
extern (C) void g_date_clear(_GDate *, uint);
extern (C) uint g_date_get_iso8601_week_of_year(_GDate *);
extern (C) uint g_date_get_sunday_week_of_year(_GDate *);
extern (C) uint g_date_get_monday_week_of_year(_GDate *);
extern (C) uint g_date_get_day_of_year(_GDate *);
extern (C) uint g_date_get_julian(_GDate *);
extern (C) char g_date_get_day(_GDate *);
extern (C) ushort g_date_get_year(_GDate *);
extern (C) int g_date_get_month(_GDate *);
extern (C) int g_date_get_weekday(_GDate *);
extern (C) int g_date_valid_dmy(char, int, ushort);
extern (C) int g_date_valid_julian(uint);
extern (C) int g_date_valid_weekday(int);
extern (C) int g_date_valid_year(ushort);
extern (C) int g_date_valid_month(int);
extern (C) int g_date_valid_day(char);
extern (C) int g_date_valid(_GDate *);
extern (C) void g_date_free(_GDate *);
extern (C) _GDate * g_date_new_julian(uint);
extern (C) _GDate * g_date_new_dmy(char, int, ushort);
extern (C) _GDate * g_date_new();
extern (C) void g_dataset_foreach(void *, _BCD_func__2432, void *);
extern (C) void * g_dataset_id_remove_no_notify(void *, uint);
extern (C) void g_dataset_id_set_data_full(void *, uint, void *, _BCD_func__2079);
extern (C) void * g_dataset_id_get_data(void *, uint);
extern (C) void g_dataset_destroy(void *);
extern (C) uint g_datalist_get_flags(void * *);
extern (C) void g_datalist_unset_flags(void * *, uint);
extern (C) void g_datalist_set_flags(void * *, uint);
extern (C) void g_datalist_foreach(void * *, _BCD_func__2432, void *);
extern (C) void * g_datalist_id_remove_no_notify(void * *, uint);
extern (C) void g_datalist_id_set_data_full(void * *, uint, void *, _BCD_func__2079);
extern (C) void * g_datalist_id_get_data(void * *, uint);
extern (C) void g_datalist_clear(void * *);
extern (C) void g_datalist_init(void * *);
extern (C) char * * g_uri_list_extract_uris(char *);
extern (C) char * g_filename_display_basename(char *);
extern (C) int g_get_filename_charsets(char * * *);
extern (C) char * g_filename_display_name(char *);
extern (C) char * g_filename_to_uri(char *, char *, _GError * *);
extern (C) char * g_filename_from_uri(char *, char * *, _GError * *);
extern (C) char * g_filename_from_utf8(char *, int, uint *, uint *, _GError * *);
extern (C) char * g_filename_to_utf8(char *, int, uint *, uint *, _GError * *);
extern (C) char * g_locale_from_utf8(char *, int, uint *, uint *, _GError * *);
extern (C) char * g_locale_to_utf8(char *, int, uint *, uint *, _GError * *);
extern (C) char * g_convert_with_fallback(char *, int, char *, char *, char *, uint *, uint *, _GError * *);
extern (C) char * g_convert_with_iconv(char *, int, void *, uint *, uint *, _GError * *);
extern (C) char * g_convert(char *, int, char *, char *, uint *, uint *, _GError * *);
extern (C) int g_iconv_close(void *);
extern (C) uint g_iconv(void *, char * *, uint *, char * *, uint *);
extern (C) void * g_iconv_open(char *, char *);
extern (C) uint g_convert_error_quark();
extern (C) void g_completion_free(_GCompletion *);
extern (C) void g_completion_set_compare(_GCompletion *, _BCD_func__2435);
extern (C) _GList * g_completion_complete_utf8(_GCompletion *, char *, char * *);
extern (C) _GList * g_completion_complete(_GCompletion *, char *, char * *);
extern (C) void g_completion_clear_items(_GCompletion *);
extern (C) void g_completion_remove_items(_GCompletion *, _GList *);
extern (C) void g_completion_add_items(_GCompletion *, _GList *);
extern (C) _GCompletion * g_completion_new(_BCD_func__2436);
extern (C) void g_cache_value_foreach(void *, _BCD_func__2558, void *);
extern (C) void g_cache_key_foreach(void *, _BCD_func__2558, void *);
extern (C) void g_cache_remove(void *, void *);
extern (C) void * g_cache_insert(void *, void *);
extern (C) void g_cache_destroy(void *);
extern (C) void * g_cache_new(_BCD_func__2080, _BCD_func__2079, _BCD_func__2080, _BCD_func__2079, _BCD_func__2559, _BCD_func__2559, _BCD_func__2560);
extern (C) void * g_list_nth_data(_GList *, uint);
extern (C) _GList * g_list_sort_with_data(_GList *, _BCD_func__2561, void *);
extern (C) _GList * g_list_sort(_GList *, _BCD_func__2562);
extern (C) void g_list_foreach(_GList *, _BCD_func__2084, void *);
extern (C) uint g_list_length(_GList *);
extern (C) _GList * g_list_first(_GList *);
extern (C) _GList * g_list_last(_GList *);
extern (C) int g_list_index(_GList *, void *);
extern (C) int g_list_position(_GList *, _GList *);
extern (C) _GList * g_list_find_custom(_GList *, void *, _BCD_func__2562);
extern (C) _GList * g_list_find(_GList *, void *);
extern (C) _GList * g_list_nth_prev(_GList *, uint);
extern (C) _GList * g_list_nth(_GList *, uint);
extern (C) _GList * g_list_copy(_GList *);
extern (C) _GList * g_list_reverse(_GList *);
extern (C) _GList * g_list_delete_link(_GList *, _GList *);
extern (C) _GList * g_list_remove_link(_GList *, _GList *);
extern (C) _GList * g_list_remove_all(_GList *, void *);
extern (C) _GList * g_list_remove(_GList *, void *);
extern (C) _GList * g_list_concat(_GList *, _GList *);
extern (C) _GList * g_list_insert_before(_GList *, _GList *, void *);
extern (C) _GList * g_list_insert_sorted(_GList *, void *, _BCD_func__2562);
extern (C) _GList * g_list_insert(_GList *, void *, int);
extern (C) _GList * g_list_prepend(_GList *, void *);
extern (C) _GList * g_list_append(_GList *, void *);
extern (C) void g_list_free_1(_GList *);
extern (C) void g_list_free(_GList *);
extern (C) _GList * g_list_alloc();
extern (C) void g_list_pop_allocator();
extern (C) void g_list_push_allocator(void *);
extern (C) void g_allocator_free(void *);
extern (C) void * g_allocator_new(char *, uint);
extern (C) void g_blow_chunks();
extern (C) void g_mem_chunk_info();
extern (C) void g_mem_chunk_print(void *);
extern (C) void g_mem_chunk_reset(void *);
extern (C) void g_mem_chunk_clean(void *);
extern (C) void g_mem_chunk_free(void *, void *);
extern (C) void * g_mem_chunk_alloc0(void *);
extern (C) void * g_mem_chunk_alloc(void *);
extern (C) void g_mem_chunk_destroy(void *);
extern (C) void * g_mem_chunk_new(char *, int, uint, int);
extern (C) void g_mem_profile();
extern (C) int g_mem_is_system_malloc();
extern (C) void g_mem_set_vtable(_GMemVTable *);
extern (C) void * g_try_realloc(void *, uint);
extern (C) void * g_try_malloc0(uint);
extern (C) void * g_try_malloc(uint);
extern (C) void g_free(void *);
extern (C) void * g_realloc(void *, uint);
extern (C) void * g_malloc0(uint);
extern (C) void * g_malloc(uint);
extern (C) void g_on_error_stack_trace(char *);
extern (C) void g_on_error_query(char *);
extern (C) int g_async_queue_length_unlocked(void *);
extern (C) int g_async_queue_length(void *);
extern (C) void * g_async_queue_timed_pop_unlocked(void *, _GTimeVal *);
extern (C) void * g_async_queue_timed_pop(void *, _GTimeVal *);
extern (C) void * g_async_queue_try_pop_unlocked(void *);
extern (C) void * g_async_queue_try_pop(void *);
extern (C) void * g_async_queue_pop_unlocked(void *);
extern (C) void * g_async_queue_pop(void *);
extern (C) void g_async_queue_push_unlocked(void *, void *);
extern (C) void g_async_queue_push(void *, void *);
extern (C) void g_async_queue_unref_and_unlock(void *);
extern (C) void g_async_queue_ref_unlocked(void *);
extern (C) void g_async_queue_unref(void *);
extern (C) void * g_async_queue_ref(void *);
extern (C) void g_async_queue_unlock(void *);
extern (C) void g_async_queue_lock(void *);
extern (C) void * g_async_queue_new();
extern (C) void glib_dummy_decl();
extern (C) void * g_once_impl(_GOnce *, _BCD_func__2080, void *);
extern (C) void g_static_rw_lock_free(_GStaticRWLock *);
extern (C) void g_static_rw_lock_writer_unlock(_GStaticRWLock *);
extern (C) int g_static_rw_lock_writer_trylock(_GStaticRWLock *);
extern (C) void g_static_rw_lock_writer_lock(_GStaticRWLock *);
extern (C) void g_static_rw_lock_reader_unlock(_GStaticRWLock *);
extern (C) int g_static_rw_lock_reader_trylock(_GStaticRWLock *);
extern (C) void g_static_rw_lock_reader_lock(_GStaticRWLock *);
extern (C) void g_static_rw_lock_init(_GStaticRWLock *);
extern (C) void g_static_rec_mutex_free(_GStaticRecMutex *);
extern (C) uint g_static_rec_mutex_unlock_full(_GStaticRecMutex *);
extern (C) void g_static_rec_mutex_lock_full(_GStaticRecMutex *, uint);
extern (C) void g_static_rec_mutex_unlock(_GStaticRecMutex *);
extern (C) int g_static_rec_mutex_trylock(_GStaticRecMutex *);
extern (C) void g_static_rec_mutex_lock(_GStaticRecMutex *);
extern (C) void g_static_rec_mutex_init(_GStaticRecMutex *);
extern (C) void g_static_private_free(_GStaticPrivate *);
extern (C) void g_static_private_set(_GStaticPrivate *, void *, _BCD_func__2079);
extern (C) void * g_static_private_get(_GStaticPrivate *);
extern (C) void g_static_private_init(_GStaticPrivate *);
extern (C) void g_static_mutex_free(_GStaticMutex *);
extern (C) void g_static_mutex_init(_GStaticMutex *);
extern (C) void g_thread_set_priority(_GThread *, int);
extern (C) void * g_thread_join(_GThread *);
extern (C) void g_thread_exit(void *);
extern (C) _GThread * g_thread_self();
extern (C) _GThread * g_thread_create_full(_BCD_func__2080, void *, uint, int, int, int, _GError * *);
extern (C) void * g_static_mutex_get_mutex_impl(void * *);
extern (C) void g_thread_init_with_errorcheck_mutexes(_GThreadFunctions *);
extern (C) void g_thread_init(_GThreadFunctions *);
extern (C) uint g_thread_error_quark();
extern (C) void * g_atomic_pointer_get(void * *);
extern (C) int g_atomic_int_get(int *);
extern (C) int g_atomic_pointer_compare_and_exchange(void * *, void *, void *);
extern (C) int g_atomic_int_compare_and_exchange(int *, int, int);
extern (C) void g_atomic_int_add(int *, int);
extern (C) int g_atomic_int_exchange_and_add(int *, int);
extern (C) void g_clear_error(_GError * *);
extern (C) void g_propagate_error(_GError * *, _GError *);
extern (C) void g_set_error(_GError * *, uint, int, char *, ...);
extern (C) int g_error_matches(_GError *, uint, int);
extern (C) _GError * g_error_copy(_GError *);
extern (C) void g_error_free(_GError *);
extern (C) _GError * g_error_new_literal(uint, int, char *);
extern (C) _GError * g_error_new(uint, int, char *, ...);
extern (C) char * g_quark_to_string(uint);
extern (C) uint g_quark_from_string(char *);
extern (C) uint g_quark_from_static_string(char *);
extern (C) uint g_quark_try_string(char *);
extern (C) void g_byte_array_sort_with_data(_GByteArray *, _BCD_func__2561, void *);
extern (C) void g_byte_array_sort(_GByteArray *, _BCD_func__2562);
extern (C) _GByteArray * g_byte_array_remove_range(_GByteArray *, uint, uint);
extern (C) _GByteArray * g_byte_array_remove_index_fast(_GByteArray *, uint);
extern (C) _GByteArray * g_byte_array_remove_index(_GByteArray *, uint);
extern (C) _GByteArray * g_byte_array_set_size(_GByteArray *, uint);
extern (C) _GByteArray * g_byte_array_prepend(_GByteArray *, char *, uint);
extern (C) _GByteArray * g_byte_array_append(_GByteArray *, char *, uint);
extern (C) char * g_byte_array_free(_GByteArray *, int);
extern (C) _GByteArray * g_byte_array_sized_new(uint);
extern (C) _GByteArray * g_byte_array_new();
extern (C) void g_ptr_array_foreach(_GPtrArray *, _BCD_func__2084, void *);
extern (C) void g_ptr_array_sort_with_data(_GPtrArray *, _BCD_func__2561, void *);
extern (C) void g_ptr_array_sort(_GPtrArray *, _BCD_func__2562);
extern (C) void g_ptr_array_add(_GPtrArray *, void *);
extern (C) void g_ptr_array_remove_range(_GPtrArray *, uint, uint);
extern (C) int g_ptr_array_remove_fast(_GPtrArray *, void *);
extern (C) int g_ptr_array_remove(_GPtrArray *, void *);
extern (C) void * g_ptr_array_remove_index_fast(_GPtrArray *, uint);
extern (C) void * g_ptr_array_remove_index(_GPtrArray *, uint);
extern (C) void g_ptr_array_set_size(_GPtrArray *, int);
extern (C) void * * g_ptr_array_free(_GPtrArray *, int);
extern (C) _GPtrArray * g_ptr_array_sized_new(uint);
extern (C) _GPtrArray * g_ptr_array_new();
extern (C) void g_array_sort_with_data(_GArray *, _BCD_func__2561, void *);
extern (C) void g_array_sort(_GArray *, _BCD_func__2562);
extern (C) _GArray * g_array_remove_range(_GArray *, uint, uint);
extern (C) _GArray * g_array_remove_index_fast(_GArray *, uint);
extern (C) _GArray * g_array_remove_index(_GArray *, uint);
extern (C) _GArray * g_array_set_size(_GArray *, uint);
extern (C) _GArray * g_array_insert_vals(_GArray *, uint, void *, uint);
extern (C) _GArray * g_array_prepend_vals(_GArray *, void *, uint);
extern (C) _GArray * g_array_append_vals(_GArray *, void *, uint);
extern (C) char * g_array_free(_GArray *, int);
extern (C) _GArray * g_array_sized_new(int, int, uint, uint);
extern (C) _GArray * g_array_new(int, int, uint);
struct _GValueArray {
uint n_values;
_GValue * values;
uint n_prealloced;
}
struct _GTypePluginClass {
_GTypeInterface base_iface;
_BCD_func__1793 use_plugin;
_BCD_func__1793 unuse_plugin;
_BCD_func__1792 complete_type_info;
_BCD_func__1791 complete_interface_info;
}
struct _GTypeModuleClass {
_GObjectClass parent_class;
_BCD_func__2787 load;
_BCD_func__2788 unload;
_BCD_func__1993 reserved1;
_BCD_func__1993 reserved2;
_BCD_func__1993 reserved3;
_BCD_func__1993 reserved4;
}
struct _GTypeModule {
_GObject parent_instance;
uint use_count;
_GSList * type_infos;
_GSList * interface_infos;
char * name;
}
struct _GParamSpecOverride {
_GParamSpec parent_instance;
_GParamSpec * overridden;
}
struct _GParamSpecObject {
_GParamSpec parent_instance;
}
struct _GParamSpecValueArray {
_GParamSpec parent_instance;
_GParamSpec * element_spec;
uint fixed_n_elements;
}
struct _GParamSpecPointer {
_GParamSpec parent_instance;
}
struct _GParamSpecBoxed {
_GParamSpec parent_instance;
}
struct _GParamSpecParam {
_GParamSpec parent_instance;
}
struct _GParamSpecString {
_GParamSpec parent_instance;
char * default_value;
char * cset_first;
char * cset_nth;
char substitutor;
uint null_fold_if_empty;
uint ensure_non_null;
}
struct _GParamSpecDouble {
_GParamSpec parent_instance;
double minimum;
double maximum;
double default_value;
double epsilon;
}
struct _GParamSpecFloat {
_GParamSpec parent_instance;
float minimum;
float maximum;
float default_value;
float epsilon;
}
struct _GParamSpecFlags {
_GParamSpec parent_instance;
_GFlagsClass * flags_class;
uint default_value;
}
struct _GParamSpecEnum {
_GParamSpec parent_instance;
_GEnumClass * enum_class;
int default_value;
}
struct _GParamSpecUnichar {
_GParamSpec parent_instance;
uint default_value;
}
struct _GParamSpecUInt64 {
_GParamSpec parent_instance;
ulong minimum;
ulong maximum;
ulong default_value;
}
struct _GParamSpecInt64 {
_GParamSpec parent_instance;
long minimum;
long maximum;
long default_value;
}
struct _GParamSpecULong {
_GParamSpec parent_instance;
uint minimum;
uint maximum;
uint default_value;
}
struct _GParamSpecLong {
_GParamSpec parent_instance;
int minimum;
int maximum;
int default_value;
}
struct _GParamSpecUInt {
_GParamSpec parent_instance;
uint minimum;
uint maximum;
uint default_value;
}
struct _GParamSpecInt {
_GParamSpec parent_instance;
int minimum;
int maximum;
int default_value;
}
struct _GParamSpecBoolean {
_GParamSpec parent_instance;
int default_value;
}
struct _GParamSpecUChar {
_GParamSpec parent_instance;
char minimum;
char maximum;
char default_value;
}
struct _GParamSpecChar {
_GParamSpec parent_instance;
char minimum;
char maximum;
char default_value;
}
struct _GObjectConstructParam {
_GParamSpec * pspec;
_GValue * value;
}
struct _GObjectClass {
_GTypeClass g_type_class;
_GSList * construct_properties;
_BCD_func__2813 constructor;
_BCD_func__1945 set_property;
_BCD_func__1946 get_property;
_BCD_func__1944 dispose;
_BCD_func__1944 finalize;
_BCD_func__2814 dispatch_properties_changed;
_BCD_func__2815 notify;
void * [8] pdummy;
}
struct _GObject {
_GTypeInstance g_type_instance;
uint ref_count;
void * qdata;
}
struct _GSignalInvocationHint {
uint signal_id;
uint detail;
int run_type;
}
struct _GSignalQuery {
uint signal_id;
char * signal_name;
uint itype;
int signal_flags;
uint return_type;
uint n_params;
uint * param_types;
}
struct _GCClosure {
_GClosure closure;
void * callback;
}
struct _GClosureNotifyData {
void * data;
_BCD_func__1992 notify;
}
struct _GClosure {
uint ref_count;
uint meta_marshal;
uint n_guards;
uint n_fnotifiers;
uint n_inotifiers;
uint in_inotify;
uint floating;
uint derivative_flag;
uint in_marshal;
uint is_invalid;
_BCD_func__1973 marshal;
void * data;
_GClosureNotifyData * notifiers;
}
struct _GParamSpecTypeInfo {
ushort instance_size;
ushort n_preallocs;
_BCD_func__2824 instance_init;
uint value_type;
_BCD_func__2824 finalize;
_BCD_func__2825 value_set_default;
_BCD_func__2826 value_validate;
_BCD_func__2827 values_cmp;
}
struct _GParameter {
char * name;
_GValue value;
}
struct _GParamSpecClass {
_GTypeClass g_type_class;
uint value_type;
_BCD_func__2824 finalize;
_BCD_func__2825 value_set_default;
_BCD_func__2826 value_validate;
_BCD_func__2827 values_cmp;
void * [4] dummy;
}
struct _GParamSpec {
_GTypeInstance g_type_instance;
char * name;
int flags;
uint value_type;
uint owner_type;
char * _nick;
char * _blurb;
void * qdata;
uint ref_count;
uint param_id;
}
struct _GFlagsValue {
uint value;
char * value_name;
char * value_nick;
}
struct _GEnumValue {
int value;
char * value_name;
char * value_nick;
}
struct _GFlagsClass {
_GTypeClass g_type_class;
uint mask;
uint n_values;
_GFlagsValue * values;
}
struct _GEnumClass {
_GTypeClass g_type_class;
int minimum;
int maximum;
uint n_values;
_GEnumValue * values;
}
struct _GTypeQuery {
uint type;
char * type_name;
uint class_size;
uint instance_size;
}
struct _GTypeValueTable {
_BCD_func__2837 value_init;
_BCD_func__2837 value_free;
_BCD_func__2051 value_copy;
_BCD_func__2838 value_peek_pointer;
char * collect_format;
_BCD_func__2839 collect_value;
char * lcopy_format;
_BCD_func__2840 lcopy_value;
}
struct _GInterfaceInfo {
_BCD_func__2084 interface_init;
_BCD_func__2084 interface_finalize;
void * interface_data;
}
struct _GTypeFundamentalInfo {
int type_flags;
}
struct _GTypeInfo {
ushort class_size;
_BCD_func__2079 base_init;
_BCD_func__2079 base_finalize;
_BCD_func__2084 class_init;
_BCD_func__2084 class_finalize;
void * class_data;
ushort instance_size;
ushort n_preallocs;
_BCD_func__2086 instance_init;
_GTypeValueTable * value_table;
}
struct _GTypeInstance {
_GTypeClass * g_class;
}
struct _GTypeInterface {
uint g_type;
uint g_instance_type;
}
struct _GTypeClass {
uint g_type;
}
union N7_GValue4__41E {
int v_int;
uint v_uint;
int v_long;
uint v_ulong;
long v_int64;
ulong v_uint64;
float v_float;
double v_double;
void * v_pointer;
}
struct _GValue {
uint g_type;
N7_GValue4__41E [2] data;
}
struct _GThreadPool {
_BCD_func__2084 func;
void * user_data;
int exclusive;
}
union _GTokenValue {
void * v_symbol;
char * v_identifier;
uint v_binary;
uint v_octal;
uint v_int;
ulong v_int64;
double v_float;
uint v_hex;
char * v_string;
char * v_comment;
char v_char;
uint v_error;
}
struct _GScannerConfig {
char * cset_skip_characters;
char * cset_identifier_first;
char * cset_identifier_nth;
char * cpair_comment_single;
uint case_sensitive;
uint skip_comment_multi;
uint skip_comment_single;
uint scan_comment_multi;
uint scan_identifier;
uint scan_identifier_1char;
uint scan_identifier_NULL;
uint scan_symbols;
uint scan_binary;
uint scan_octal;
uint scan_float;
uint scan_hex;
uint scan_hex_dollar;
uint scan_string_sq;
uint scan_string_dq;
uint numbers_2_int;
uint int_2_float;
uint identifier_2_string;
uint char_2_token;
uint symbol_2_token;
uint scope_0_fallback;
uint store_int64;
uint padding_dummy;
}
struct _GScanner {
void * user_data;
uint max_parse_errors;
uint parse_errors;
char * input_name;
void * qdata;
_GScannerConfig * config;
int token;
_GTokenValue value;
uint line;
uint position;
int next_token;
_GTokenValue next_value;
uint next_line;
uint next_position;
void * symbol_table;
int input_fd;
char * text;
char * text_end;
char * buffer;
uint scope_id;
_BCD_func__2159 msg_handler;
}
struct _GTuples {
uint len;
}
struct _GQueue {
_GList * head;
_GList * tail;
uint length;
}
struct _GOptionEntry {
char * long_name;
char short_name;
int flags;
int arg;
void * arg_data;
char * description;
char * arg_description;
}
struct _GNode {
void * data;
_GNode * next;
_GNode * prev;
_GNode * parent;
_GNode * children;
}
struct _GMarkupParser {
_BCD_func__2859 start_element;
_BCD_func__2860 end_element;
_BCD_func__2861 text;
_BCD_func__2861 passthrough;
_BCD_func__2862 error;
}
struct _GIOFuncs {
_BCD_func__2864 io_read;
_BCD_func__2865 io_write;
_BCD_func__2866 io_seek;
_BCD_func__2867 io_close;
_BCD_func__2868 io_create_watch;
_BCD_func__2869 io_free;
_BCD_func__2870 io_set_flags;
_BCD_func__2871 io_get_flags;
}
struct _GIOChannel {
uint ref_count;
_GIOFuncs * funcs;
char * encoding;
void * read_cd;
void * write_cd;
char * line_term;
uint line_term_len;
uint buf_size;
_GString * read_buf;
_GString * encoded_read_buf;
_GString * write_buf;
char [6] partial_write_buf;
uint use_buffer;
uint do_encode;
uint close_on_unref;
uint is_readable;
uint is_writeable;
uint is_seekable;
void * reserved1;
void * reserved2;
}
struct _GString {
char * str;
uint len;
uint allocated_len;
}
struct _GTrashStack {
_GTrashStack * next;
}
struct _GDebugKey {
char * key;
uint value;
}
struct _GPollFD {
int fd;
ushort events;
ushort revents;
}
struct _GSourceFuncs {
_BCD_func__2878 prepare;
_BCD_func__2879 check;
_BCD_func__2880 dispatch;
_BCD_func__2881 finalize;
_BCD_func__2359 closure_callback;
_BCD_func__1993 closure_marshal;
}
struct _GSourceCallbackFuncs {
_BCD_func__2079 ref;
_BCD_func__2079 unref;
_BCD_func__2883 get;
}
struct _GSource {
void * callback_data;
_GSourceCallbackFuncs * callback_funcs;
_GSourceFuncs * source_funcs;
uint ref_count;
void * context;
int priority;
uint flags;
uint source_id;
_GSList * poll_fds;
_GSource * prev;
_GSource * next;
void * reserved1;
void * reserved2;
}
struct _GSList {
void * data;
_GSList * next;
}
struct _GHookList {
uint seq_id;
uint hook_size;
uint is_setup;
_GHook * hooks;
void * hook_memchunk;
_BCD_func__2395 finalize_hook;
void * [2] dummy;
}
struct _GHook {
void * data;
_GHook * next;
_GHook * prev;
uint ref_count;
uint hook_id;
uint flags;
void * func;
_BCD_func__2079 destroy;
}
struct _GDate {
uint julian_days;
uint julian;
uint dmy;
uint day;
uint month;
uint year;
}
struct _GCompletion {
_GList * items;
_BCD_func__2436 func;
char * prefix;
_GList * cache;
_BCD_func__2435 strncmp_func;
}
struct _GList {
void * data;
_GList * next;
_GList * prev;
}
struct _GMemVTable {
_BCD_func__2892 malloc;
_BCD_func__2893 realloc;
_BCD_func__2079 free;
_BCD_func__2894 calloc;
_BCD_func__2892 try_malloc;
_BCD_func__2893 try_realloc;
}
struct _GOnce {
int status;
void * retval;
}
struct _GStaticRWLock {
_GStaticMutex mutex;
void * read_cond;
void * write_cond;
uint read_counter;
int have_writer;
uint want_to_read;
uint want_to_write;
}
struct _GStaticRecMutex {
_GStaticMutex mutex;
uint depth;
_GSystemThread owner;
}
struct _GThreadFunctions {
_BCD_func__2899 mutex_new;
_BCD_func__2900 mutex_lock;
_BCD_func__2901 mutex_trylock;
_BCD_func__2900 mutex_unlock;
_BCD_func__2900 mutex_free;
_BCD_func__2902 cond_new;
_BCD_func__2903 cond_signal;
_BCD_func__2903 cond_broadcast;
_BCD_func__2904 cond_wait;
_BCD_func__2905 cond_timed_wait;
_BCD_func__2903 cond_free;
_BCD_func__2906 private_new;
_BCD_func__2907 private_get;
_BCD_func__2908 private_set;
_BCD_func__2909 thread_create;
_BCD_func__1993 thread_yield;
_BCD_func__2079 thread_join;
_BCD_func__1993 thread_exit;
_BCD_func__2910 thread_set_priority;
_BCD_func__2079 thread_self;
_BCD_func__2911 thread_equal;
}
struct _GStaticPrivate {
uint index;
}
struct _GThread {
_BCD_func__2080 func;
void * data;
int joinable;
int priority;
}
struct _GError {
uint domain;
int code;
char * message;
}
struct _GPtrArray {
void * * pdata;
uint len;
}
struct _GByteArray {
char * data;
uint len;
}
struct _GArray {
char * data;
uint len;
}
struct _GTimeVal {
int tv_sec;
int tv_usec;
}
struct N14_GFloatIEEE7543__1E {
uint mantissa;
uint biased_exponent;
uint sign;
}
union _GFloatIEEE754 {
float v_float;
N14_GFloatIEEE7543__1E mpn;
}
struct N15_GDoubleIEEE7543__2E {
uint mantissa_low;
uint mantissa_high;
uint biased_exponent;
uint sign;
}
union _GDoubleIEEE754 {
double v_double;
N15_GDoubleIEEE7543__2E mpn;
}
extern (C) extern uint * g_param_spec_types;
extern (C) extern int _g_type_debug_flags;
extern (C) extern ushort * g_ascii_table;
extern (C) extern _GSourceFuncs g_io_watch_funcs;
extern (C) extern uint glib_binary_age;
extern (C) extern uint glib_interface_age;
extern (C) extern uint glib_micro_version;
extern (C) extern uint glib_minor_version;
extern (C) extern uint glib_major_version;
extern (C) extern char * g_utf8_skip;
extern (C) extern _GSourceFuncs g_idle_funcs;
extern (C) extern _GSourceFuncs g_child_watch_funcs;
extern (C) extern _GSourceFuncs g_timeout_funcs;
extern (C) extern _GMemVTable * glib_mem_profiler_table;
extern (C) extern int g_threads_got_initialized;
extern (C) extern int g_thread_use_default_impl;
extern (C) extern _GThreadFunctions g_thread_functions_for_glib_use;
